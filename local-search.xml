<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis指南</title>
    <link href="/2023/03/08/Redis%E6%8C%87%E5%8D%97/"/>
    <url>/2023/03/08/Redis%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1>Redis指南</h1><h2 id="概念-v9">概念</h2><p>Redis: 内存告诉缓存数据库，全称为: Remote Dictionary Server(C语言编写), 是一个Key-Value存储系统。可用于缓存，事件发布、订阅、高速队列等场景。基于内存且可持久化。</p><h3 id="特点">特点</h3><ul><li>读写性能优异</li><li>数据类型丰富。支持String、List、Set等数据类型的操作</li><li>原子性。所有操作都是原子性的</li><li>持久化。支持RDB、AOF等持久化方式</li><li><strong>单线程</strong></li></ul><h3 id="相关应用">相关应用</h3><ul><li>热点数据缓存</li><li>限时业务使用</li><li>计数器相关数据</li><li>延时操作</li><li>排行榜(SortedSet)</li><li>好友等相互关系的存储</li></ul><h2 id="基本-v2">基本</h2><h3 id="基本数据类型">基本数据类型</h3><table><thead><tr><th>结构类型</th><th>结构存储的值</th><th>结构的读写能力</th></tr></thead><tbody><tr><td><strong>String字符串</strong></td><td>可以是字符串、整数或浮点数</td><td>对整个字符串或字符串的一部分进行操作；对整数或浮点数进行<strong>自增</strong>或<strong>自减</strong>操作；</td></tr><tr><td><strong>List列表</strong></td><td>一个链表，链表上的每个节点都包含一个字符串</td><td>对链表的两端进行push和pop操作(队列或栈)，两端都可以进行pop或者push，读取单个或多个元素；根据值查找或删除元素；</td></tr><tr><td><strong>Set集合</strong></td><td>包含字符串的无序集合(非重复)</td><td>字符串的集合，包含基础的方法有看是否存在添加、获取、删除；还包含计算交集、并集、差集等</td></tr><tr><td><strong>Hash散列</strong></td><td>包含键值对的无序散列表</td><td>包含方法有添加、获取、删除单个元素</td></tr><tr><td><strong>Zset有序集合</strong></td><td>和散列一样，用于存储键值对(非重复)。有double类型的分数</td><td>字符串成员与浮点数分数之间的有序映射；元素的排列顺序由分数的大小决定；包含方法有添加、获取、删除单个元素以及根据分值范围或成员来获取元素</td></tr></tbody></table><h3 id="特殊数据类型">特殊数据类型</h3><ul><li><p><strong>HyperLogLogs基数统计</strong></p><ul><li>什么是基数：A = {1, 2, 3, 4, 5}， B = {3, 5, 6, 7, 9}；那么基数（不重复的元素）= 1, 2, 4, 6, 7, 9； （允许容错，即可以接受一定误差）</li><li><strong>解决什么问题？</strong>：省内存去统计各种计数(注册IP数、每日访问IP数、页面实时UV、用户每天搜索不同词条的个数、在线用户数等)，不会保存元数据只会记录数量。每个HyperLogLog Key占用12KB的内存用于标记基数</li></ul></li><li><p><strong>Bitmap</strong>位存储</p><ul><li>**解决问题：**统计用户活跃和不活跃数量、登陆/未登录等仅有两个状态的(例如存储一年的登陆状态只需要46Byte左右)</li></ul></li><li><p><strong>Geospatial地理位置</strong></p><ul><li>存储：经度+维度</li></ul></li><li><p><strong>Stream消息队列</strong></p><ul><li>相比于基于List类型实现的消息队列，能够自动生成全局唯一消息ID，支持以消费组形式消费数据</li></ul></li></ul><h3 id="Redis对象机制">Redis对象机制</h3><p><img src="https://pdai.tech/images/db/redis/db-redis-object-2-2.png" alt=""></p><p><strong>Redis为什么要设计RedisObject对象</strong></p><p>Redis中一些命令只能用于特定的键，所以需要为不同类型的键设置不同的处理方式，所以Redis必须让每个键都带有类型信息。比如集合类型可以由字典和整数集合两种不同的数据结构实现，但用户执行ZADD时，他不应关系集合使用的是哪种类型。</p><p>Redis构建了自己的类型系统，主要有以下功能:</p><ul><li>构建redisObject对象</li><li>基于redisObject对象的类型检查</li><li>基于redisObject对象的显式多态函数</li><li>对redisObject进行分配、共享和销毁机制</li></ul><p><strong>redisObject组成</strong></p><div class="code-wrapper"><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; type:记录对象保存的值的类型#define OBJ_STRING 0 &#x2F;&#x2F; 字符串#define OBJ_LIST 1 &#x2F;&#x2F; 列表#define OBJ_SET 2 &#x2F;&#x2F; 集合#define OBJ_ZSET 3 &#x2F;&#x2F; 有序集#define OBJ_HASH 4 &#x2F;&#x2F; 哈希表&#x2F;&#x2F; encoding:对象所保存的值的编码#define OBJ_ENCODING_RAW 0     &#x2F;* Raw representation *&#x2F;#define OBJ_ENCODING_INT 1     &#x2F;* Encoded as integer *&#x2F;#define OBJ_ENCODING_HT 2      &#x2F;* Encoded as hash table *&#x2F;#define OBJ_ENCODING_ZIPMAP 3  &#x2F;* 注意：版本2.6后不再使用. *&#x2F;#define OBJ_ENCODING_LINKEDLIST 4 &#x2F;* 注意：不再使用了，旧版本2.x中String的底层之一. *&#x2F;#define OBJ_ENCODING_ZIPLIST 5 &#x2F;* Encoded as ziplist *&#x2F;#define OBJ_ENCODING_INTSET 6  &#x2F;* Encoded as intset *&#x2F;#define OBJ_ENCODING_SKIPLIST 7  &#x2F;* Encoded as skiplist *&#x2F;#define OBJ_ENCODING_EMBSTR 8  &#x2F;* Embedded sds string encoding *&#x2F;#define OBJ_ENCODING_QUICKLIST 9 &#x2F;* Encoded as linked list of ziplists *&#x2F;#define OBJ_ENCODING_STREAM 10 &#x2F;* Encoded as a radix tree of listpacks *&#x2F;typedef struct redisObject &#123;    &#x2F;&#x2F; 对象所保存的值的类型    unsigned type:4;    &#x2F;&#x2F; 对象所保存的值的编码    unsigned encoding:4;    &#x2F;&#x2F; LRU - 24位, 记录最末一次访问时间（相对于lru_clock）; 或者 LFU（最少使用的数据：8位频率，16位访问时间）    unsigned lru:LRU_BITS; &#x2F;&#x2F; LRU_BITS: 24    &#x2F;&#x2F; 引用计数    int refcount;    &#x2F;&#x2F; 指向底层数据结构实例    void *ptr;&#125; robj;</code></pre></div><p><img src="https://pdai.tech/images/db/redis/db-redis-object-2-2.png" alt="Redis6.0数据、编码类型与底层数据结构的映射关系"></p><p><strong>Redis处理一条命令的过程</strong></p><ol><li>根据给定的key, 在数据库字典中查找和他对应的redisObject，没找到就返回NULL</li><li>检查redisObject的type属性和执行命令所需的类型是否相符(比如说插入的值的类型是字符串)，否则返回错误</li><li>根据redisObject encoding属性指定的编码，选择合适的操作函数来处理底层的数据结构</li><li>返回操作结果值</li></ol><p><strong>对象共享与引用计数</strong></p><p>redis一般把一些常见的值放到一个共享对象中，避免重复分配，但<strong>只能共享字符串对象</strong>。</p><p>每个redisObject都有一个引用计数属性</p><p>新创建一个对象时，refcount为1.对一个对象进行共享时refcount++, 使用完一个对象后refcount–.当refcount==0时，该redisObject将会被销毁</p><h2 id="特点-v2">特点</h2><h3 id="持久化">持久化</h3><blockquote><p>Redis关闭后按理来说数据会丢失，那么Redis如何实现持久化的？</p></blockquote><p><strong>Redis如何实现持久化？</strong></p><p>三种方式: AOF日志、RDB快照、混合持久化方式</p><h4 id="AOF日志">AOF日志</h4><p>Redis执行完一条操作命令后就会降命令追加写入到一个文件中，Redis重启时，会读取该文件记录，逐一执行命令进行数据恢复。</p><p><strong>先执行命令，再把数据写入日志</strong></p><p>这样的方式可能带来以下的影响:</p><ul><li>避免额外开销：如果当前命令有语法错误，那么就无法执行，自然也就不会写入到日志中了。但如果先写入日志再执行，那就需要最后再根据执行情况来判断是否要删除日志中的记录</li><li>数据可能丢失：在操作命令完成但还未开始写入日志时发生宕机，这时候就数据未写入日志中(但数据已经完成更新)，后续重启时无法恢复</li></ul><p><strong>AOF写回过程</strong></p><p><img src="https://cdn.xiaolincoding.com//mysql/other/4eeef4dd1bedd2ffe0b84d4eaa0dbdea-20230309232249413.png" alt=""></p><ol><li>Redis执行完操作后，将命令追加到server.aof_buf缓冲区</li><li>执行write系统调用，将缓冲区数据写入到AOF文件中(此时数据只是到了内核缓冲区，还需要等待内核将数据写入硬盘)</li><li>内核缓冲区掘洞数据何时被写入硬盘</li></ol><p>对于<strong>缓冲区数据写入硬盘的时机</strong>，Redis提供三种策略(与fsync()有关)：</p><ul><li>Always：操作命令执行完后总是将AOF日志数据写回硬盘，性能开销大</li><li>Everysec：每次操作命令执行完后，先将命令写入到AOF文件的内核缓冲区，然后每隔一秒将缓冲区的内容写回到硬盘。宕机时丢失1秒内的数据</li><li>No：Redis不控制缓冲区数据写回到硬盘的时机</li></ul><p><strong>AOF文件过大后该怎么办: AOF重写机制</strong></p><p>随着操作命令越来越多，AOF文件肯定越来越大，重启后则需要花费更多时间来恢复，因此Redis为了避免AOF文件越写越大，提供<strong>AOF重写机制</strong>。当AOF文件大小超过阈值时，就会由后台子进程<code>bgrewriteaof</code>通过AOF重写机制来压缩AOF文件</p><p><strong>具体步骤</strong></p><p>在重写时，读取当前数据库的所有键值对，将每一个键值对用一条命令记录到新的AOF文件中，然后替换旧的AOF文件。(也就是<strong>抹除历史</strong>，不会再保存以前更改的记录，只保存最新值的记录)。例如之前使用<code>set name zyl</code>与<code>set name PPLong</code> ，重写后就只有<code>set name PPLong</code>这一条指令。</p><blockquote><p><strong>为什么AOF重写机制采用子进程进行？不采用线程？</strong></p><ul><li>首先子进程进行AOF重写期间，主进程可以继续处理请求而不会被阻塞</li><li>如果使用线程，多线程间会共享内存，则就存在线程间可见性的问题，修改共享内存数据时需要加锁来保证数据安全，从而会降低效率。由于父子进程是共享内存数据(只读方式)，当父子进程任意一方修改了共享内存，就会发生<code>写时复制——COW</code>, 于是父子进程就有了独立的数据副本，不用来保证数据安全。(这里写时复制COW属于OS的内容，对主进程会造成阻塞，可以先参考这篇文章理解<a href="https://www.cnblogs.com/jelly12345/p/15223184.html">《Redis写时拷贝（COW）总结》</a>。简单理解为子进程最初与父进程共享页表，只有父亲、子进程要写入时子进程才会复制并开辟另一块内存空间)</li></ul></blockquote><p><strong>AOF引发的数据不一致问题</strong></p><p>如果在重写过程中，主进程修改了已经存在的key-value，此时这个key-value数据在子进程的内存数据就跟在主进程的内存数据不一致了，如何处理？</p><p>为此Redis设置了一个<strong>AOF重写缓冲区</strong>：在重写AOF期间，每当Redis执行完一个写命令后，Redis会将该条命令同时写入到<strong>AOF缓冲区</strong>和<strong>AOF重写缓冲区</strong>。当子进程完成AOF重写后，向主进程发送完成信号，主进程接受到信号后，会将AOF重写缓冲区等待所有内容追加到新的AOF文件中，使得新旧两个AOF文件保存到数据库状态一致，将新的AOF文件覆盖旧的AOF文件。</p><p><img src="https://cdn.xiaolincoding.com//mysql/other/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0ODI3Njc0,size_16,color_FFFFFF,t_70-20230309231944807.png" alt=""></p><h4 id="RDB快照">RDB快照</h4><p>实质：记录某一时刻的内存数据，恢复数据时效率更高，只需要把RDB文件读入内存即可</p><p>生成RDB文件的两种命令：</p><ul><li>bgsave: 创建子进程生成RDB文件<ul><li>redis可以通过配置文件自动执行bgsave，默认：</li><li>900 秒之内，对数据库进行了至少 1 次修改；300 秒之内，对数据库进行了至少 10 次修改；60 秒之内，对数据库进行了至少 10000 次修改。</li></ul></li><li>save: 主线程运行，生成RDB文件，会阻塞主线程</li></ul><p>每次保存的快照都是<strong>全量快照</strong>，即把内存中的所有数据都保存到磁盘中，因此保存频率不能太频繁</p><p>bgsave过程中，主线程依然可以处理操作命令，关键还是使用写时复制技术COW。存在的问题式，发生COW后，RDB快照中保存的内容是之前的内存数据。如果系统恰好在RDB快照文件创建完毕后崩溃，则Redis将丢失主线程在快照期间修改的数据。</p><h4 id="AOF-RDB混合持久化">AOF+RDB混合持久化</h4><p>Redis conf下使用<code>aof-use-rdb-preamble yes</code></p><p><strong>AOF日志重写混合持久化过程</strong></p><ul><li>fork出的子进程与主线程共享的<strong>内存数据</strong>以RDB方式写入到AOF文件中</li><li>主线程在此期间处理的操作命令被记录在重写缓冲区中</li><li>重写缓冲区的<strong>增量命令</strong>以AOF方式写入到AOF文件</li></ul><p>也就是前半部分用RDB格式的全量数据，后半部分是AOF格式的增量数据</p><p><strong>优点</strong></p><ul><li>重启Redis时，前半部分(大部分数据)是RDB格式，加载速度快</li><li>后半部分是AOF格式，尽可能减少数据的丢失</li></ul><h3 id="发布-订阅模式">发布/订阅模式</h3><p>一种消息通信模式，两个角色发布者、订阅者</p><p>SUBSCRIBE命令可以让客户端订阅任意数量的频道，每当有新消息发送到被订阅的频道时，信息就会发送给所有订阅该频道的客户端</p><p>客户端执行订阅指令之后，就会进入订阅状态，之后就只能接收 <code>subscribe</code>、<code>psubscribe</code>、<code>unsubscribe</code>、<code>punsubscribe</code> 这四个命令。新订阅的客户端，是<strong>无法收到这个频道之前的消息</strong>，这是因为 Redis 并不会对发布的消息持久化的。</p><p>Redis的两种发布/订阅模式</p><ul><li>基于频道Channel</li><li>基于模式Pattern</li></ul><h4 id="基于频道Channel">基于频道Channel</h4><p>发布者可以向指定的频道Channel发送消息，订阅者可以从订阅的多个Chanel中接收到此消息。发出去的消息不会被持久化</p><div class="code-wrapper"><pre class="language-redis" data-language="redis"><code class="language-redis">&#x2F;&#x2F; 发布publish [target_channel] [message]&#x2F;&#x2F; 订阅(可一次订阅多个频道)subscribe [target_channel_1] [target_channel_2] ...</code></pre></div><p>客户端subscribe，进入订阅状态后客户端可能收到3种类型的回复，回复由三部分组成</p><table><thead><tr><th>消息类型</th><th>第二部分</th><th>第三部分</th></tr></thead><tbody><tr><td>subscribe</td><td>订阅成功的频道的名称</td><td>当前客户端订阅的频道数目</td></tr><tr><td>message</td><td>产生消息的频道</td><td>消息的内容</td></tr><tr><td>unsubscribe</td><td>频道名称</td><td>当前客户端订阅的频道数目</td></tr></tbody></table><p><strong>底层: 如何实现</strong></p><p>通过字典实现，key为正在被订阅的频道, value为一个链表，包含所有订阅了这个频道的客户端</p><p>当调用 <code>publish channel message</code> 命令， 程序首先根据 channel 定位到字典的键， 然后将信息发送给字典值链表中的所有客户端。</p><p><img src="https://pdai.tech/images/db/redis/db-redis-sub-3.svg" alt=""></p><h4 id="基于模式Pattern">基于模式Pattern</h4><p><img src="https://pdai.tech/images/db/redis/db-redis-sub-5.svg" alt=""></p><p>当有信息发送到 tweet.shop.kindle 频道时， 信息除了发送给 clientX 和 clientY 之外， 还会发送给订阅 <a href="http://tweet.shop">tweet.shop</a>.* 模式的 client123 和 client256</p><p>通配符中?表示1个占位符，*表示任意个占位符(包括0)，?*表示1个以上占位符。</p><p><strong>如何实现</strong></p><p>使用链表，链表中的每个节点包含订阅该模式的客户端，pattern表示当前被订阅的模式</p><p><img src="https://pdai.tech/images/db/redis/db-redis-sub-10.svg" alt=""></p><h2 id="面试-v2">面试</h2><h3 id="基础-v4">基础</h3><h4 id="Redis到底是单线程还是多线程？">Redis到底是单线程还是多线程？</h4><ul><li>Redis6.0版本前的单线程指网络IO喝键值对读写是由一个线程完成的</li><li>Redis6.0后引入多线程是指网络请求采用了多线程，而键值对读写命令仍然是单线程，所以Redis依然是<strong>并发安全</strong>的(其持久化喝集群数据同步等是由额外线程完成的)</li></ul><h4 id="Redis单线程为什么这么快？">Redis单线程为什么这么快？</h4><ol><li>Redis命令执行基于内存操作</li><li>命令执行说单线程操作，没有线程切换开销</li><li>基于多路复用机制提升Redis I/O利用率</li><li>使用高效的数据存储结构：全局Hash表、跳表、压缩列表、链表等</li></ol><h3 id="进阶-v5">进阶</h3><h4 id="缓存问题">缓存问题</h4><h5 id="缓存穿透">缓存穿透</h5><p>用户不断请求缓存和数据库中都没有的数据，而按规则如果从存储层查不到数据则不写入缓存，着将导致这个每次进行这个请求都要到数据库去查询，缓存失效(避免无效id查询对数据库的攻击)</p><p>解决方案</p><ul><li>接口层增加校验，用户鉴权校验，查询id参数进行合理性校验</li><li>对于缓存和数据库中都不存在的数据，将键值对记为Key-Null, 并设置缓存有效时间，防止攻击用户反复用一个id进行攻击</li><li>使用<strong>布隆过滤器bloomfilter</strong>，快速判断某个元素是否存在于集合中</li></ul><h5 id="缓存击穿">缓存击穿</h5><p>缓存中没有但数据库中有的数据(一般是缓存的数据缓存时间到期被删除), 这时如果并发用户特别多，同时缓存中没读到数据，就只能去数据库中读取，造成数据库压力过大。例如秒杀活动数据在缓存中失效，到点秒杀时，就会出现问题(属于缓存雪崩的子集)</p><p>解决方案</p><ul><li>设置热点数据永不过期或延长过期时间</li><li>重要的接口做好限流策略，防止用户恶意请求。进行降级准备，接口中某些服务不可用时，进行<strong>熔断</strong>，失败快速返回机制。</li><li>加互斥锁</li></ul><h5 id="缓存雪崩">缓存雪崩</h5><p>缓存中的数据大批量到达过期时间或Redis服务宕机，而此时查询数据量大，引起数据库压力过大。缓存击穿指并发查同一条数据，而雪崩是指很多数据都过期了</p><p>解决方案</p><ul><li>缓存数据的过期时间随机设置，防止大批数据同时过期</li><li>将热点数据均匀分布在不同的缓存数据库中</li><li>延长过期时间</li><li>互斥锁： 如果访问的的数据不在 Redis中，就加锁，保证同一时间只有一个请求构建缓存</li></ul><p>如果是Redis故障宕机而引发雪崩，可以用以下几种方案解决：</p><ul><li>服务熔断，暂停对应用业务对缓存服务的访问，直接返回错误</li><li>请求限流，只允许少部分请求发送到数据库进行请求</li><li>构建Redis集群</li></ul><h5 id="缓存污染">缓存污染</h5><p>缓存中一些只会被访问一次或几次的数据，之后便不会被再次访问，但其仍然留在缓存中消耗空间，时间一长后，缓存被占满了，就需要额外的开销(也就是使用Redis淘汰判断策略淘汰数据)</p><p><strong>缓存淘汰策略</strong></p><ul><li>不淘汰: noeviction。直接返回错误</li><li>对设置了过期时间的数据进行淘汰<ul><li>volatile-random</li><li>volatile-ttl，越早过期的数据优先被选择</li><li>Volatile-lru，最近最少使用的原则(时间)。</li><li>Redis会记录每个数据的最近一次被访问的时间戳。在Redis在决定淘汰的数据时，第一次会随机选出 N 个数据，把它们作为一个候选集合。接下来，Redis 会比较这 N 个数据的 lru 字段，把 lru 字段值最小的数据从缓存中淘汰出去</li><li>volatile-lfu，最近不经常使用(频数)。Redis 会在候选集合中，根据数据 lru 字段的后 8bit 选择访问次数最少的数据进行淘汰。当访问次数相同时，再根据 lru 字段的前 16bit 值大小，选择访问时间最久远的数据进行淘汰。</li></ul></li><li>全部数据进行淘汰<ul><li>allkeys-random</li><li>allkeys-lru</li><li>allkeys=lfu</li></ul></li></ul><h4 id="数据库和缓存一致性">数据库和缓存一致性</h4><p>使用场景： Redis作为缓冲，Mysql等作为数据库</p><p>不管先写Mysql再更新缓存还是先更新缓存再更写Mysql都容易出现数据不一致的情况。例如：</p><ol><li>先删除缓存，正准备写数据库时，另一个线程来读取，发现缓存为空再读取数据库，此时就读到脏数据</li><li>先写库，正准备更新缓存，此时线程宕机了，没有删除掉缓存，也会出现不一致的情况</li></ol><p><strong>更新缓存的四种设计模式：</strong></p><ul><li>Cache aside</li><li>Read through</li><li>Write through</li><li>Write back</li></ul><h5 id="Cache-Aside-旁路策略">Cache Aside-旁路策略</h5><p>读之前先读缓存，缓存没有则读取数据库，取出数据后放入缓存中，同时返回响应；写时先更新数据库，再<strong>删除缓存(让缓存失效)</strong></p><p><strong>不管是先删除缓存再更新数据库还是先更新数据库再删除缓存都会造成混存和数据库数据不一致的问题！</strong></p><p>但是如果是先更新数据库再更新缓存，考虑以下情况:</p><ol><li>请求A要求查询数据库一个字段值(缓存中不存在)</li><li>查到数据但未写入缓存时，B请求更新该数据，使其自增，更新数据库的值，并清空缓存值</li><li>请求A将读到的旧值写入缓存中</li></ol><p>此时仍然造成了数据库与缓存不一致的问题，但是这种概率是非常小的。因为缓存的写入远快于数据库的写入，实际中很难出现请求B更新了数据库并且删除了缓存，请求A才更新完缓存的情况。可以姑且理解为执行完数据库操作后只要极少的时间就执行完缓存更新了。</p><p>Cache Aside适合读多写少的场景，不适合写多的场景，因为写入比较频繁时，缓存的数据将会被频繁地清理</p><blockquote><p><strong>考虑这样一个问题：如果更新数据库操作成功，但删除缓存操作失败，那此时缓存中还是旧数据，该怎么办？</strong></p><p>兜底策略： 设置缓存数据过期时间,但这样在数据未过期的一段时间内，数据都是脏的</p></blockquote><p><strong>如何保证写数据库和删除Redis缓存都成功？</strong></p><ul><li>重试机制(异步)</li><li>订阅Mysql binlog(异步)</li></ul><h5 id="重试机制">重试机制</h5><p>使用消息队列，将删除缓存的操作加入到消息队列，由消费者来操作数据。</p><p>如果应用删除缓存失败，就从消息队列中重新读取数据，然后再次删除，反复重试。成功则从消息队列中移除</p><p><strong>订阅Mysql binlog，再删除缓存</strong></p><p>由于Mysql操作一条命令成功后会产生一条日志，记录在binlog中，所以可以通过订阅这个日志文件，拿到要操作的数据，再执行缓存删除，比如阿里巴巴开源中间件Canal</p><p>Canal 模拟 MySQL 主从复制的交互协议，把自己伪装成一个 MySQL 的从节点，向 MySQL 主节点发送 dump 请求，MySQL 收到请求后，就会开始推送 Binlog 给 Canal，Canal 解析 Binlog 字节流之后，转换为便于读取的结构化数据，供下游程序订阅使用。</p><blockquote><p>参考文章：</p><p>🔗: <a href="https://pdai.tech/">《Java全栈知识体系》</a></p><p>🔗: <a href="https://xiaolincoding.com/">《小林Coding》</a></p><p>🔗:<a href="https://www.cnblogs.com/jelly12345/p/15223184.html">《Redis写时拷贝（COW）总结》</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
      <tag>NoSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java JUC源码分析</title>
    <link href="/2023/02/26/Java-JUC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2023/02/26/Java-JUC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1>Java JUC源码分析</h1><h2 id="概念-v7">概念</h2><h3 id="三大特性">三大特性</h3><h4 id="原子性">原子性</h4><p>一个或者多个操作在CPU执行的过程中不被中断的特性</p><h4 id="可见性">可见性</h4><p>一个线程修改一个变量后，其他线程能够立即得知这个修改</p><p>各自的线程有其工作内存，即保存时的副本存储的空间</p><h4 id="有序性">有序性</h4><p>代码的执行顺序</p><p>编译器 和 处理器执行指令时会进行从排序，改变语序   这里<strong>注意什么时候能改什么时候不能改！</strong></p><h3 id="Volatile">Volatile</h3><ol><li><p>保证不同线程对变量操作的内存可见性（修改变量直接刷新回主存），使缓存行无效</p></li><li><p><strong>禁止指令重排序</strong>   注意是并不是完全就是一样的顺序，只保证先后顺序</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210313233725385.png" alt="image-20210313233725385"></p></li></ol><h4 id="为什么不能保证-count-原子性？">为什么不能保证 count++ 原子性？</h4><p>单个变量的读写 具有原子性 i = 100</p><p>但复合操作则不行   i++</p><p>底层机制：内存屏障</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210313233706649.png" alt="image-20210313233706649"></p><p>使用 ： 状态标记、单例模式</p><h2 id="锁">锁</h2><h3 id="锁的分类">锁的分类</h3><ul><li>可重入、不可重入</li><li>悲观锁、乐观锁</li><li>公平锁、非公平锁</li><li>互斥锁、共享锁</li></ul><p>结构  可重入锁 读锁 写锁</p><p>将大的方法加入同步锁会影响执行效率</p><p><strong>sleep 抱着锁睡觉</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210303172037854.png" alt="image-20210303172037854"></p><h3 id="锁到底锁什么">锁到底锁什么</h3><p>synchronized 默认锁的是this  方法的调用者</p><p>但是this 中的对象则不能同步 ，要同步哪个对象 就锁哪个</p><h4 id="死锁">死锁</h4><p><strong>两个或多个线程在等待对方释放资源；某个同步块同时拥有两个以上对象的锁</strong></p><p>产生死锁的条件<br>1.互斥条件：一个资源每次只能被一个进程使用。<br>2.请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br>3.不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。<br>4.循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</p><h4 id="Synchronized和Lock的区别">Synchronized和Lock的区别</h4><ul><li>Lock可以判断是否获取到了锁</li><li>lock必须要手动释放，如果不释放锁，则出现死锁</li><li>Lock不一定会等待下去</li><li>可重入锁，不可中断，非公平</li><li>Lock适合锁大量的代码</li></ul><h4 id="虚假唤醒">虚假唤醒</h4><h2 id="Synchronized">Synchronized</h2><h3 id="synchronized到底是什么">synchronized到底是什么</h3><p>synchronized是一个<strong>重量级锁</strong>，实现<strong>依赖于JVM 的 monitor 监视器锁</strong>。主要使用monitorenter和monitorexit指令来实现方法同步和代码块同步。<br>在编译时，会将monitorexit指令插入到同步代码块的开始位置，而monitorexit插入方法结束处和异常处，并且每一个monitorenter都有一个与之对应的monitorexit。</p><p><strong>任何对象都有一个monitor与之关联</strong>，当一个monitor被持有后，它将被处于锁定状态，线程执行到monitorenter指令时间，会<strong>尝试获取对象所对应的monitor的所有权</strong>，即获取获得对象的锁，由于在编译期会将monitorexit插入到方法结束处和异常处，所以在方法执行完毕或者出现异常的情况会自动释放锁</p><p>synchronized一段代码块或者方法后，其实是将内部设涉及到的变量从CPU缓存中移除，必须去主存中拿数据。</p><p><strong>Java中的锁类型</strong></p><p>可重入锁、公平锁、互斥锁、自旋锁、偏向锁、轻量级锁、读写锁、共享锁</p><p>ReentrantLock 加锁原理： 更改标识符的值</p><p>synchronized 到底改变的是对象的什么属性？？？</p><p><strong>对象头</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307090828271.png" alt="image-20210307090828271"></p><p><strong>隐式</strong></p><p>synchronized方法 monitorexit</p><p>JVM可以从方法常量池中的方法表结构(method_info Structure) 中的 ACC_SYNCHRONIZED 访问标志区分一个方法是否同步方法</p><p>当方法调用时，调用指令将会 检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，执行线程将先持有monitor（虚拟机规范中用的是管程一词）， 然后再执行方法，最后再方法完成(无论是正常完成还是非正常完成)时释放monitor</p><p><strong>为何class文件会有两个monitorexit</strong></p><p>synchronized代码块  会有monitorenter…</p><p>为了保证在方法异常完成时 monitorenter 和 monitorexit 指令依然可以正确配对执行，编译器会自动产生一个异常处理器，这个异常处理器声明可处理所有的异常，它的目的就是用来执行 monitorexit 指令。从字节码中也可以看出多了一个monitorexit指令，它就是异常结束时被执行的释放monitor 的指令。</p><p><strong>为什么早期是重量级锁</strong></p><p>同时我们还必须注意到的是在Java早期版本中，synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的Mutex Lock来实现的，而操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高</p><h3 id="JVM对锁的优化"><strong>JVM对锁的优化</strong></h3><h4 id="锁升级">锁升级</h4><p>锁的升级： 无锁–偏向–轻量–重量</p><p>为什么升级： 1.6前只要拿不到锁，就要挂起当前线程，性能差</p><ul><li><p><strong>无锁、匿名偏向锁</strong>：当前对象没有作为锁存在</p></li><li><p><strong>偏向锁</strong></p><p>在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，因此为了减少同一线程获取锁(会涉及到一些CAS操作,耗时)的代价而引入偏向锁。偏向锁的核心思想是，如果一个线程获得了锁，那么锁就进入偏向模式，此时Mark Word 的结构也变为偏向锁结构，<strong>当这个线程再次请求锁时，无需再做任何同步操作，即获取锁的过程，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能</strong>。当一个线程访问同步代码块并获取锁时，会在Mark Word里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，而是检测Mark Word里是否存储着指向当前线程的偏向锁。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令即可。偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。所以，对于没有锁竞争的场合，偏向锁有很好的优化效果，毕竟极有可能连续多次是同一个线程申请相同的锁。但是对于锁竞争比较激烈的场合，偏向锁就失效了，因为这样场合极有可能每次申请锁的线程都是不相同的，因此这种场合下不应该使用偏向锁，否则会得不偿失，需要注意的是，偏向锁失败后，并不会立即膨胀为重量级锁，而是先升级为轻量级锁</p></li><li><p><strong>轻量级锁</strong></p><p>倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(<strong>1.6之后加入的</strong>)，此时Mark Word 的结构也变为轻量级锁的结构。<br><strong>采用自旋的方式，以CAS的形式获取锁资源</strong></p><p>轻量级锁能够提升程序性能的依据是“对绝大部分的锁，在整个同步周期内都不存在竞争”，注意这是经验数据。需要了解的是，轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁。</p><p><strong>自旋锁</strong><br>轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。</p></li><li><p><strong>重量级锁</strong></p><p>如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了</p></li></ul><p><strong>锁消除</strong></p><p>虚拟机在JIT编译时(可以简单理解为当某段代码即将第一次被执行时进行编译，又称即时编译)，通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁，通过这种方式消除没有必要的锁，可以节省毫无意义的请求锁时间，如下StringBuffer的append是一个同步方法，但是在add方法中的StringBuffer属于一个局部变量，并且不会被其他线程所使用，因此StringBuffer不可能存在共享资源竞争的情景，JVM会自动将其锁消除</p><p><strong>锁膨胀</strong></p><p>一个循环中频繁的获取和释放资源，开销很大，锁会扩大到循环外。</p><h3 id="自旋锁">自旋锁</h3><p>CAS   没有获取到锁的线程是不会阻塞的，要通过控制循环值不断获取</p><p>3个操作数  内存值 V（共享） 旧的预期值E（缓存） 要修改的新值N，仅当E == N时，才会修改  E!=N时，则再次查询主存中的V 使 E == N</p><p>底层：硬件</p><h2 id="wait和notify">wait和notify</h2><p>首先需要理解<strong>锁池</strong>和<strong>等待池</strong>这两个概念</p><h3 id="notify和notifyall区别">notify和notifyall区别</h3><p><strong>为什么使用notify可能产生死锁而使用notifyAll则不会</strong></p><h2 id="AQS">AQS</h2><h3 id="AbstractQueuedSynchronizer">AbstractQueuedSynchronizer</h3><p>AbstractQueuedSynchronizer抽象类， JUC包下的一个基类。是一个用于构建锁、同步器等线程协作工具类的框架ReentrantLock、ThreadPoolExecutor、Semaphore等。有了 AQS 以后，很多用于线程协作的工具类就都可以很方便的被写出来，有了 AQS 之后，可以让更上层的开发极大的减少工作量，避免重复造轮子，同时也避免了上层因处理不当而导致的线程安全问题，因为 AQS 把这些事情都做好了</p><p><strong>特点</strong></p><ul><li>提供volatile修饰的state对象，采用CAS方式修改。支持可重入的特点</li><li>维护FIFO双向链表Node表示等待队列</li><li>采用模板模式（protected方法）</li><li>主要方法tryAcquire/acquire/addWaiter/tryRelease(CAS轮训、挂起线程)</li><li>判断当前线程是否应该被挂起：看前一个节点的状态</li><li>Release时特点：从尾到头释放</li></ul><h4 id="方法解读">方法解读</h4><ul><li>tryAcquire：尝试获取锁，立即返回结果</li><li>acquire： 进入队列等待，直到获取</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 供上层编写, 模板方式</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Try the fast path of enq; backup to full enq on failure</span>    <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">// 完整入队</span>    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Must initialize</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 该编写逻辑决定了后续为何要从尾到头遍历</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h5 id="aquire方法"><strong>aquire方法</strong></h5><ul><li>先进行一次基于派生类实现的tryAcquire(有各自不同的特点)获取,若没有获取到锁</li><li>将当前等待获取锁的线程封装为一个Node，将其插入到FIFO的双向队列中。但这里插入的方式有快速插入和完全插入两种：<ul><li>快速插入：一次CAS比较</li><li>完全插入：自旋 + CAS方式</li></ul></li><li>插入成功后，就要根据当前队列的状态判断该线程是否需要被挂起<ul><li>如果当前线程节点处于头节点的后一个(头节点只占位用),则通过自旋的方式去拿锁</li><li>否则判断该线程是否应该被挂起（以避免无用自旋消耗CPU），判断当前节点的前置节点的waitStatus<ul><li>SIGNAL：前置节点也在等待拿锁，当前节点肯定也要挂起</li><li>大于0: 前置节点被取消，删除前面所有ws大于0的节点</li><li>其他状态: 尝试将前置节点ws置为SIGNAL</li></ul></li></ul></li></ul><blockquote><p>AQS Node 中SIGNAL状态的意义：只要前置节点释放锁，则就会通知标识为SIGNAL状态的后续节点的线程</p><p>CANCELLED状态的意义：在同步队列等待的线程等待超时或被中断，则需要从同步队列中取消该Node节点</p></blockquote><blockquote><p><strong>LockSupport.part作用是什么？为什么又有Thread.intterupted()?</strong></p><p>先说结论：处于等待队列中的线程无法响应外部的中断请求，只有当队列中的线程拿到锁后才去响应之前的中断请求</p><p>基础：当其他线程试图通过interrupt去中断一个处于wait或sleep的线程时则会产生异常。而LockSupport.part可以让线程进入waiting(jvm)/sleep(os)的状态，只能通过LockSupport.unpark或者interrupt方法去唤醒该线程。</p><p>所以等待线程在park后就被挂起了，如果有其他线程对其进行interrupt中断，则会return中断标志位(此时就为true) (但线程此时没有被中断)。在acquireQueued方法中通过成员变量interrupted存储了这个中断标志值，当线程获取到锁的时候，则会返回这个值(其意义就是，该线程获取到锁了，但需要被中断)。所以就会运行到acquire方法下的selfInterrupt方法中进行此线程的interrupt()</p></blockquote><h5 id="release方法"><strong>release方法</strong></h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>  <span class="token comment">// 将当前线程ws状态置为0以便不影响其他判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ul><li>尝试释放当前线程持有的锁，如果成功释放，则</li><li>CAS操作改变当前线程ws 以便不影响并发情况下其他线程的判断</li><li>判断下一个节点是否有效<ul><li>无效：从尾到头去找有效节点（从尾找到头，而不会在中途停止） <em>为什么要从尾到头</em></li><li>有效：通过LockSupport.unpark去释放锁</li></ul></li></ul><blockquote><p><strong>为什么这里是从尾到头去寻找有效节点？</strong></p><p>关键还要看enq方法，enq方法中的关键语句：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span></code></pre></div><p>CAS操作不能保证if代码块的线程安全，也就是在CAS操作与<em>t.next=node</em>之间可能有其他线程进行操作，进而导致 tail指向prev但prev未指向tail(<em>尽管最后都会顺利连接上</em>)，在这个过程中，如果有线程执行unparkSuccessor且按照从头到尾的顺序去遍历，就无法遍历到所有的节点，但从尾到头遍历是可以保证的，这主要是取决于<em>enq</em>方法中代码编写逻辑来决定的。</p></blockquote><h3 id="ReentrantLock">ReentrantLock</h3><p><strong>基于AQS</strong>，JUC编程中可以实现公平锁和非公平锁来对共享资源进行同步，与synchronized一样支持可重入，在调度上更灵活，支持更多功能.同时还可以支持可中断锁机制的实现实现</p><p><strong>实现Lock接口</strong>，具有lock tryLock unlock newCondition等方法</p><p>核心类 Sync 派生出公平锁FairSync类与非公平锁NonfairSync类</p><h4 id="Sync">Sync</h4><p>继承自AQS等抽象类，暴露lock方法用于派生类实现</p><h5 id="NonfairSync">NonfairSync</h5><blockquote><p><strong>为什么会有非公平锁？为什么非公平锁的效率比公平锁更高？</strong></p><p>个人理解：因为线程的挂起和唤醒需要一段时间，有一定开销，那么如果按照公平锁的方式，那肯定是当前线程释放锁后，肯定还需要唤醒下一个线程。但如果按照非公平锁的方式，如果当前线程释放锁后，存在一个刚开启的线程，它刚好被创建，则这个时候就不用被唤醒而直接进入就绪状态了。</p></blockquote><p>主要就两个方法：基于对Sync抽象父类实现的lock方法以及对AQS抽象父类实现的tryAcquire方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// NonfairSync</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><strong>lock方法</strong></p><p>lock方法实质就是先来一次CAS看锁是否被占用（不管前面是否有其他线程在等待），如果没有被占用，则占用该锁。如果这次没有获得锁，则会进入acquire方法。而aquire方法是AQS中的final修饰已实现的方法，内部会调用到tryAcquire这个方法，而NonfairSync中则重写了这个protected的方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// AQS</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Sync</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 可重入性的体现</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>通过NonfairSync的lock方法顺序是：</p><ul><li>先进行CAS来一次插队的非公平查看锁，如果锁被占用</li><li>再来一次非公平的CAS，并且这次是<strong>支持可重入</strong>的，如果锁被其他线程占用</li><li>走公平机制，进行排队获取</li></ul><blockquote><p>实现可重入方式的时候为什么要比较nextc正负？</p><p>因为state是基于int的，而当nextc正溢出时，则会产生负数，所以需要进行非负判断。也就可以说，可重入最大数目其实是有符号int表示的正数范围</p></blockquote><h5 id="FairSync">FairSync</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// FairSync</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 满足可重入特点</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>FairSync要求线程在获取锁时：</p><ul><li>如果锁没被占用，则查看是否有排在当前线程前等待获取锁的线程，如果没有</li><li>如果当前锁正在被当前线程持有，还要满足可重入的特点</li><li>否则，则返回false，进行排队</li></ul><h4 id="ReentrantLock-v2">ReentrantLock</h4><p>默认的无参构造是非公平锁机制</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实现可中断锁机制</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>值得注意的是，不管Sync是公平还是非公平的，这里tryLock其实是非公平获取锁的机制，这也就是为什么nonfairTryAcquire方法要在Sync中进行实现了</p><h5 id="可中断锁机制的实现"><strong>可中断锁机制的实现</strong></h5><p>Sync实现Lock接口提供了lock和lockInterruptibly方法。</p><p>lock方法与lockInterruptibly区别在于：</p><ul><li>lock考虑获取锁，获取锁后才响应之前的中断</li><li>lockInterruptibly优先考虑响应中断</li></ul><p>最终会进入到AQS到方法中。与之前的acquireQueued方法大同小异，作用就是线程通过这种方式等待获取锁时，在LockSupport.park挂起后，可以经过其他线程的interrupt唤醒，然后抛出异常。最终效果，也就是使得让等待中的线程立即中止。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// AQS</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment">// 关键语句</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="Condition">Condition</h4><p>对于synchornized关键字，其内部可以用wait 和 notify进行线程等待或唤醒(wait必须在线程同步的代码块中使用)。但在Lock实现类例如ReentrantLock中，则可以通过Condition的await、signal来进行等待和唤醒</p><p>且ReentrantLock可以唤醒指定条件的线程，而Object的唤醒是随机的</p><h4 id="与Synchronized区别">与Synchronized区别</h4><p>共同点：</p><ul><li>用来协调多进程对共享对象的访问</li><li>可重入锁，保证可见性和互斥性</li></ul><p>不同点：</p><ul><li>Re显示获得锁释放锁，sy隐式获得锁</li><li>Re属于API级别锁，sy属于JVM层的锁</li><li>Re<strong>可响应中断</strong>，sy不可以响应中断</li><li>Re实现公平锁</li><li>Re可通过Condition绑定多个条件</li><li>发生异常时 Re如果没有unlock去释放锁，则可能造成死锁，而sy会自动释放锁</li><li>Lock可以让等待锁的线程响应中断，而sy不会，使用sy时等待锁的线程会一直等待而不会响应线程</li><li>通过Lock可以知道线程是否获得了锁，而sy无法的得知</li></ul><h3 id="Map">Map</h3><p>HashMap存在的线程问题：插入时可能出现环形链表</p><p><strong>使HM的线程安全方式</strong></p><ul><li>Collections.synchronizedMap（）返回一个新的Map：使用synchronized进行互斥。使用代理new了一个新的🥱，直接锁住方法</li><li>ConccurentHashMap：使用新的锁机制，将HM进行拆分。</li></ul><h4 id="Hashtable">Hashtable</h4><p><strong>与HashTable区别</strong></p><ul><li>HT线程同步，HM线程不同步（实质就是每个方法都加了synchronized锁）</li><li>HT不允许有键值有空值</li><li>HM默认数量是16, 2倍增长库容，HT数组默认为11，增长 2x+1</li></ul><p><strong>既不支持Null key也不支持Null value</strong></p><p>这是因为Hashtable使用的是安全失败机制（fail-safe），这种机制会使你此次读到的数据不一定是最新的数据。</p><p>如果你使用null值，就会使得其无法判断对应的key是不存在还是为空，因为你无法再调用一次contain(key）来对key是否存在进行判断，ConcurrentHashMap同理。</p><p><strong>解决问题</strong></p><p>多线程下添加元素的安全性</p><p>何为安全？多线程插入时的线程不安全问题  – 用hashTable可解决</p><p><strong>如何实现</strong></p><p>synchronized 锁方法</p><h4 id="ConcurrentHashMap-v2">ConcurrentHashMap</h4><blockquote><p>注意⚠️: JDK版本 1.7</p></blockquote><p>Hashtable存在的问题：性能差，一把锁锁住了整个资源</p><p>采用策略：<strong>分段锁</strong></p><p><em>ConcurrentHashMap&lt;K, V&gt; extends AbstractMap&lt;K, V&gt; implements ConcurrentMap&lt;K, V&gt;, Serializable</em></p><p>核心内部类： Segment、HashEntry</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230228093431667.png" alt=""></p><p><strong>内部变量</strong></p><ul><li>DEFAULT_CONCURRENCY_LEVEL，CHM的并发程度。默认是 16，也就是说 ConcurrentHashMap 有 16 个 Segments，所以理论上，这个时候，最多可以同时支持 16 个线程并发写，只要它们的操作分别分布在不同的 Segment 上。这个值可以在初始化的时候设置为其他值，但是<strong>一旦初始化以后，它是不可以扩容的</strong>。</li><li>loadFactor：负载因子，给每个Segment内部使用</li></ul><h5 id="HashEntry">HashEntry</h5><p>类似Node的链表节点，但与HM的Entry不同，这里在初始化时还有一段代码</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> nextOffset<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        UNSAFE <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Unsafe</span><span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> k <span class="token operator">=</span> <span class="token class-name">HashEntry</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        nextOffset <span class="token operator">=</span> UNSAFE<span class="token punctuation">.</span>objectFieldOffset            <span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>这里主要是获取next相对于此对象内存地址的偏移量，为了后续能在CAS操作中直接对next进行操作</p><h5 id="Segment">Segment</h5><p><strong>Segment继承自ReentrantLock</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_SCAN_RETRIES <span class="token operator">=</span>    <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">64</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span><span class="token comment">/** * The number of elements. Accessed only either within locks * or among other volatile reads that maintain visibility. */</span><span class="token keyword">transient</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment">/** * The total number of mutative operations in this segment. * Even though this may overflows 32 bits, it provides * sufficient accuracy for stability checks in CHM isEmpty() * and size() methods.  Accessed only either within locks or * among other volatile reads that maintain visibility. */</span><span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span><span class="token comment">/** * 下一次需要扩容的阈值 * The table is rehashed when its size exceeds this threshold. * (The value of this field is always &lt;tt>(int)(capacity * * loadFactor)&lt;/tt>.) */</span><span class="token keyword">transient</span> <span class="token keyword">int</span> threshold<span class="token punctuation">;</span></code></pre></div><h5 id="操作">操作</h5><h6 id="插入">插入</h6><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// CHM</span><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 实际就是取hash的高4位</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">>>></span> segmentShift<span class="token punctuation">)</span> <span class="token operator">&amp;</span> segmentMask<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>UNSAFE<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>segments<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;&lt;</span> SSHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> SBASE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>         s <span class="token operator">=</span> <span class="token function">ensureSegment</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>第一层Put： 这里也就是取key hash的高x位 (比如concurrencyLevel为2^n，则就取高n位，这里取决于segment初始设置成多少)作为所在segment的索引，如果所在segment为null，则初始化这个segment。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">ensureSegment</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>segments<span class="token punctuation">;</span>    <span class="token keyword">long</span> u <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> SSHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> SBASE<span class="token punctuation">;</span> <span class="token comment">// raw offset</span>    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> seg<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>seg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>UNSAFE<span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> proto <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// use segment 0 as prototype</span>        <span class="token keyword">int</span> cap <span class="token operator">=</span> proto<span class="token punctuation">.</span>table<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">float</span> lf <span class="token operator">=</span> proto<span class="token punctuation">.</span>loadFactor<span class="token punctuation">;</span>        <span class="token keyword">int</span> threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>cap <span class="token operator">*</span> lf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token punctuation">[</span>cap<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>seg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>UNSAFE<span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// recheck</span>            <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>lf<span class="token punctuation">,</span> threshold<span class="token punctuation">,</span> tab<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>seg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>UNSAFE<span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> seg <span class="token operator">=</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> seg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>初始化的过程中会使用到UNSAFE借助offset去安全地检查值，为什么？因为可能有很多线程在并发地创建同一个segment，因此需要判断。在最终通过CAS操作去完成Segment的创建<br>而这里为什么会在CHM初始化时去初始化第一个segment呢？因为在这里接住segment[0]处的数组长度和负载因子来初始化segment[k]了，而为什么使用“当前”的segment[0]呢？因为segment[0]可能已经被扩容过了</p><p>第二层Put：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Segment</span><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span>        <span class="token function">scanAndLockForPut</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">V</span> oldValue<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">;</span>        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> <span class="token function">entryAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> first<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">K</span> k<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                    <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> c <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> threshold <span class="token operator">&amp;&amp;</span> tab<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>                    <span class="token function">rehash</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token function">setEntryAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>modCount<span class="token punctuation">;</span>                count <span class="token operator">=</span> c<span class="token punctuation">;</span>                oldValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>这里先尝试通过tryLock快速获取该Segment的锁，如果获取到了</p><ul><li>通过key到hash与该segment HashEntry数组长度-1进行与运算得到该元素在该segment下的HashEntry位置</li><li>拿到该HashEntry下的第一个元素（采用UNSAFE 线程安全方式）</li><li>此时就是在HashEntry中，也就是链表结构了。从前往后遍历，如果key值相等 或者hash相等且equals，则改变其值</li><li>如果遍历到最后还是没找到满足条件的node，则采用<strong>头插法</strong>，把node插入到该HashEntry中(判断是否需要对该Segment进行扩容)</li></ul><p><strong>scanAndLockForPut</strong></p><p>如果第二层Put尝试获取锁失败，则会用该方法来获取锁</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Segment</span><span class="token keyword">private</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">scanAndLockForPut</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> <span class="token function">entryForHash</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> retries <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// negative while locating node</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> f<span class="token punctuation">;</span> <span class="token comment">// to recheck first below</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retries <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// speculatively create node</span>                    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                retries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>                retries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>retries <span class="token operator">></span> MAX_SCAN_RETRIES<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>retries <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                 <span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">entryForHash</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e <span class="token operator">=</span> first <span class="token operator">=</span> f<span class="token punctuation">;</span> <span class="token comment">// re-traverse if entry changed</span>            retries <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>先自己再进行一次tryLock，拿到锁了，直接返回null。如果没拿到锁：</p><ul><li>如果该位置的HashEntry为空，则先创建一个HashEntry</li><li>如果不为空，则尝试去从前往后遍历key值相同的。如果没找到，最终会回到上一步。（可以理解为预先做一些事情，这样在第二层Put中就不用再次初始化node了）。</li><li>如果这时候出现了并发情况，也就是有其他的元素插入到了这个Segment的HashEntry数组的指定位置中，那就需要从该HashEntry的头开始，再去进行遍历</li><li>如果通过循环尝试获取锁次数超过指定值（单核次数为1多核次数为64），则lock阻塞自己，直到获取锁后返回</li></ul><h6 id="查询">查询</h6><p>根据hash和segmentShift、segmentMask等通过 UNSAFE类+offset 找到元素所在的segment，再去找元素所在的HashEntry索引，然后遍历此Entry链表。<br>需要注意的是查询操作是没有加锁的</p><h6 id="扩容">扩容</h6><p>当插入节点时，这个Segment中总节点数count大于该Segment可容量节点数目threshold时，将触发扩容操作。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Segment</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span>        <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sizeMask <span class="token operator">=</span> newCapacity <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldCapacity <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> oldTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>   <span class="token comment">//  Single node on list</span>                newTable<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Reuse consecutive sequence at same slot</span>                <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> lastRun <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">int</span> lastIdx <span class="token operator">=</span> idx<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> last <span class="token operator">=</span> next<span class="token punctuation">;</span>                     last <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                     last <span class="token operator">=</span> last<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> k <span class="token operator">=</span> last<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> lastIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        lastIdx <span class="token operator">=</span> k<span class="token punctuation">;</span>                        lastRun <span class="token operator">=</span> last<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                newTable<span class="token punctuation">[</span>lastIdx<span class="token punctuation">]</span> <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                <span class="token comment">// Clone remaining nodes</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p <span class="token operator">=</span> e<span class="token punctuation">;</span> p <span class="token operator">!=</span> lastRun<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">V</span> v <span class="token operator">=</span> p<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                    <span class="token keyword">int</span> h <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>                    <span class="token keyword">int</span> k <span class="token operator">=</span> h <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span>                    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> n <span class="token operator">=</span> newTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    newTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> p<span class="token punctuation">.</span>key<span class="token punctuation">,</span> v<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> nodeIndex <span class="token operator">=</span> node<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span> <span class="token comment">// add the new node</span>    node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>newTable<span class="token punctuation">[</span>nodeIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newTable<span class="token punctuation">[</span>nodeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>    table <span class="token operator">=</span> newTable<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>大致思想还是与HM一致，由于Segment是不能扩容的，只能去扩容Segment的HashEntry数组长度(2倍)。然后需要重新去计算Mask并对数组中的元素进行移位：<strong>最高位与1比较判断是否需要进行移位(idx值要么保持不变，要么为idx+oldCapcity)</strong>.对原来HashEntry链表中的元素进行判断。JDK1.7的思想我认为是有一点优化的思想在里面：即从前往后遍历，试图找到一个节点lastRun，该节点到尾节点更新后idx值都是一样的，然后将lastRun直接插入到指定索引的Entry数组中，对于在lastRun之前的节点，那其值可能是idx也可能是idx+oldCapacity，就对每个节点的idx进行单独计算再头插。最终将插入导致rehash的这个新节点再头插入到指定的HashEntry中</p><blockquote><p>⚠️:不同的Segment下的HashEntry数组长度可能是不同的</p></blockquote><h2 id="CAS-v3">CAS</h2><p><strong>原理</strong></p><p>乐观锁：假设程序汇总并发少，让线程不断尝试更新</p><p>若：内存位置的值 == 预期原值 -&gt; 则赋予新值。通过while循环完成。</p><p>优点：不用进行用户态 内核态的切换</p><p>缺点：自旋时间不确定、开销大、只能保证一个共享变量的原子操作(多个共享变量可进行合并然后使用CAS–AtomicRefernce)</p><p><strong>CAS是如何保证线程安全的？</strong></p><p>如何保证Compare和Swap的原子性：通过UNSAFE类实现，提供硬件级别的原子操作(native方法)</p><p><strong>ABA问题</strong></p><p>CAS在操作时会检查值是否改变，但如果原来值为A，被其他线程通过CAS改成B，然后又被改成A，这个时候去进行CAS，发现值还是A，则不会更新值，但其实值已经发生了改变。如何解决这个问题，就需要使用版本号作为每次更改的依据，相当于(ArrayList中的modCount)。增加版本控制： AtomicStampedReference，不但会判断原值，还会比较版本信息</p><p><strong>两种实现线程安全的方式</strong></p><ul><li>加锁: Synchronized/Lock</li><li>不加锁: CAS Loop &amp; Volatile (轻量)</li></ul><h2 id="FutureTask详解">FutureTask详解</h2><p>FutureTask为Future提供了基础实现，线程安全由CAS保证。常用啦封装Callable和Runnable，作为一个任务提交到线程池中</p><h3 id="Future接口"><strong>Future接口</strong></h3><p>futurei提供了五个方法，用于cancel  isCancel isDone</p><p>get   get(timeout)</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 任务被取消、执行过程中发生异常也属于完成</span>    <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span>    <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><strong>Thread只支持Runnable接口</strong></p><p>通过线程池方式，submit一个callable ，同时线程池也i支持runnable形式，也一个 支持runnbale 的 返回一个future</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210428192019015.png" alt="image-20210428192019015"></p><h3 id="源码解读">源码解读</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230228154729573.png" alt=""></p><p>FutureTask<s>实现</s>了Runnable和Callable接口，所以FutureTask既能够当作一个Runnable被Thread执行，也能作为Future来得到Callable到计算结果(Callable作为其成员变量)。</p><p><strong>Callable接口</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Computes a result, or throws an exception if unable to do so.     *     * @return computed result     * @throws Exception if unable to compute a result     */</span>    <span class="token class-name">V</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="成员变量"><strong>成员变量</strong></h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// volatile修饰, 保证在线程间的可见性</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NEW          <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 新的任务或正在被执行的任务</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COMPLETING   <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 任务完成或有异常，但结果还没有保存到outcome中</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NORMAL       <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 任务已经执行完成且结果保存到outcome中 </span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXCEPTIONAL  <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 任务发生异常且原因保存到outcome中</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED    <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 调用cancel(false),任务被取消且不中断任务执行线程</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INTERRUPTING <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 调用cancel(true),任务被取消并且要中断任务执行线程但是还没有中断任务执行线程之前</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INTERRUPTED  <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// 调用cancel(true),任务被取消并且要中断任务执行线程后</span><span class="token comment">/** 内置Callable变量，在完成后置为空*/</span><span class="token keyword">private</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> callable<span class="token punctuation">;</span><span class="token comment">/** 执行结果 */</span><span class="token keyword">private</span> <span class="token class-name">Object</span> outcome<span class="token punctuation">;</span> <span class="token comment">// non-volatile, protected by state reads/writes</span><span class="token comment">// 跑Callable的线程</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> runner<span class="token punctuation">;</span><span class="token comment">/** Treiber stack of waiting threads */</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">WaitNode</span> waiters<span class="token punctuation">;</span></code></pre></div><h4 id="构造FutureTask"><strong>构造FutureTask</strong></h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> callable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>callable <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callable <span class="token operator">=</span> callable<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> NEW<span class="token punctuation">;</span>       <span class="token comment">// ensure visibility of callable</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span> <span class="token class-name">V</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callable <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">callable</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> NEW<span class="token punctuation">;</span>       <span class="token comment">// ensure visibility of callable</span><span class="token punctuation">&#125;</span><span class="token comment">// 封装后的Callable</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RunnableAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Runnable</span> task<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">T</span> result<span class="token punctuation">;</span>    <span class="token class-name">RunnableAdapter</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">T</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ul><li>如果是传入Callable，则直接赋给内置的callable变量并更新state</li><li>如果传入Runnbale，则需要封装成实现了Callable接口的RunnableAdapter再赋值给callable变量</li></ul><h4 id="run方法"><strong>run方法</strong></h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> NEW <span class="token operator">||</span>        <span class="token operator">!</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> runnerOffset<span class="token punctuation">,</span>                                     <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> callable<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> state <span class="token operator">==</span> NEW<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">V</span> result<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> ran<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ran <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                ran <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token function">setException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ran<span class="token punctuation">)</span>                <span class="token function">set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// runner must be non-null until state is settled to</span>        <span class="token comment">// prevent concurrent calls to run()</span>      <span class="token comment">// 后续会讲这里为什么要讲runner置空</span>        runner <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// state must be re-read after nulling runner to prevent</span>        <span class="token comment">// leaked interrupts</span>      <span class="token comment">// 此处不太理解</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> INTERRUPTING<span class="token punctuation">)</span>            <span class="token function">handlePossibleCancellationInterrupt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> NEW<span class="token punctuation">,</span> COMPLETING<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        outcome <span class="token operator">=</span> v<span class="token punctuation">;</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">putOrderedInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> NORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// final state</span>        <span class="token function">finishCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">finishCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// assert state > COMPLETING;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WaitNode</span> q<span class="token punctuation">;</span> <span class="token punctuation">(</span>q <span class="token operator">=</span> waiters<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// CAS方式移除等待线程变量</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> waitersOffset<span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">Thread</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  q<span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment">// 后续会降到这个unpark</span>                  <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token class-name">WaitNode</span> next <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              q<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// unlink to help gc</span>              q <span class="token operator">=</span> next<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  callable <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 置空callable</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handlePossibleCancellationInterrupt</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// It is possible for our interrupter to stall before getting a</span>    <span class="token comment">// chance to interrupt us.  Let's spin-wait patiently.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> INTERRUPTING<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> INTERRUPTING<span class="token punctuation">)</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// wait out pending interrupt</span><span class="token punctuation">&#125;</span></code></pre></div><ul><li>新建任务，将runner通过CAS替换为当前线程（CAS避免并发下多进程启动FutureTask造成run多次运行）</li><li>调用Callable接口的call方法，并捕获异常。<ul><li>如果成功执行不抛出异常：CAS设置state状态为COMPLETING，赋值outcome，CAS设置state状态为NORMAL，并调用finishCompletion方法唤醒等待线程</li><li>如果执行失败抛出异常：CAS设置state状态为COMPLETING，赋值outcome为具体的异常Throwable，CAS设置state状态EXCEPTIONAL，调用finishCompletion方法唤醒等待线程。若线程未被挂起，则表明希望当前线程挂起</li></ul></li></ul><h4 id="get方法"><strong>get方法</strong></h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>unit <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;=</span> COMPLETING <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token function">awaitDone</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> COMPLETING<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">report</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">V</span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> x <span class="token operator">=</span> outcome<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> NORMAL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>  <span class="token comment">// 被取消，则返回取消异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> CANCELLED<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CancellationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 产生异常则抛出指定异常</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="核心方法awaitDone"><strong>核心方法awaitDone</strong></h4><p>理解awaitDone需要理解FutureTask中的链表结构成员WaitNode，维护的是通过get方法等待该FutureTask结果的线程队列。所以实际情况中会有多个线程会调用到FutureTask到get方法，所以也就需要一个成员变量runner去区别当前线程，所以这也是为什么run方法中要进行runner置空的操作</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">awaitDone</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> timed <span class="token operator">?</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanos <span class="token operator">:</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token class-name">WaitNode</span> q <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> queued <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">removeWaiter</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> state<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> COMPLETING<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> COMPLETING<span class="token punctuation">)</span> <span class="token comment">// cannot time out yet</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WaitNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queued<span class="token punctuation">)</span>          <span class="token comment">// 注意这里的写法. q.next = waiters 返回的还是waiters(只是相当于简化了代码)</span>            queued <span class="token operator">=</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> waitersOffset<span class="token punctuation">,</span> q<span class="token punctuation">.</span>next <span class="token operator">=</span> waiters<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>timed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nanos <span class="token operator">=</span> deadline <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">removeWaiter</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> state<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>          <span class="token comment">// 注意这里的阻塞</span>            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ul><li>先看一下有没有等待限制，如果有就算一下截止时间</li><li>看该线程有没有被中断，如果被中断，则移除等待节点并抛出异常</li><li>如果当前状态为结束状态 state&gt;COMPLETING，则置空等待节点的线程，并返回状态</li><li>如果当前状态为COMPLETING，则应该让出CPU 等待其执行好完毕</li><li>如果当前状态为NEW，表示正在执行：<ul><li>如果等待节点为null，则创建一个等待节点(初始情况一定会被创建)</li><li>如果等待节点已被创建但未进入到等待中，则就排进链表中，采用<strong>头插法</strong></li><li>如果等待节点已经被排进链表中，则可以挂起了</li><li>如果设置了超时时间，则看是否超时，如果超时了，就把当前等待线程移除链表并返回当前FutureTask状态(超时后会在get方法中通过该state判断并抛出超时异常)</li><li>如果设置了超时但尚未超时，则park进行有时限的阻塞</li></ul></li></ul><blockquote><p><strong>这里通过park阻塞了该线程，那么在哪里进行唤醒呢？</strong></p><p>解铃还须系铃人，在run方法中，顺利完成Callable后会进行finishCompletion，这一步就是通过LockSupport.unpark依次去唤醒所有的等待线程</p></blockquote><h4 id="cancel"><strong>cancel</strong></h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>state <span class="token operator">==</span> NEW <span class="token operator">&amp;&amp;</span>          UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> NEW<span class="token punctuation">,</span>              mayInterruptIfRunning <span class="token operator">?</span> INTERRUPTING <span class="token operator">:</span> CANCELLED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// in case call to interrupt throws exception</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mayInterruptIfRunning<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span> t <span class="token operator">=</span> runner<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span> <span class="token comment">// final state</span>                UNSAFE<span class="token punctuation">.</span><span class="token function">putOrderedInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> INTERRUPTED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token function">finishCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ul><li>检查当前状态，如果为NEW，则通过CAS根据是否可被中断将其改为CANCELLED或者INTERRUPTING</li><li>如果是可被中断的cancel，则对当前线程进行打断，并设置线程已中断的状态</li><li>唤醒所有等待线程</li></ul><h3 id="启动">启动</h3><blockquote><p><strong>为什么不能直接调用futureTask的get方法？为什么会一直阻塞</strong></p><p>FutureTask get 中涉及的方法有死循环，这时候Callable都没有run起来，所以会进行park而无法被唤醒</p></blockquote><p><strong>因此FutureTask有两种启动方式：</strong></p><ul><li>通过ExecutorService启动</li><li>通过Thread包装进行启动</li></ul><p>futuretask必须放在thread中 ，start后才能进行isdone等的操作</p><p>（如何判断isDone isCancel   ？  状态量）</p><p>threadpool无法执行futuetask,会返回null</p><p><strong>但是</strong></p><p>其实executor.submit a Future 其实也是跑了一个futuretask</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回一个futuretask</span>        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><strong>延伸</strong></p><p>Thread.start如何启动？Threadgroup？</p><p><strong>如何停止线程</strong></p><p><strong>stop方法</strong></p><p>立即停止线程 释放锁</p><p>为什么stop方法是Deprecated的？数据不一致问题</p><p><strong>interrupt方法</strong></p><p>设置中断标志位，在外部配合isInterrupted()或者interrupted方法进行判断</p><p>两者区别： interrupted会把标志位清空（所以：连续两次调用该方法时第二次返回false）</p><h2 id="ThreadPoolExecutor">ThreadPoolExecutor</h2><p><strong>意义</strong></p><p>减少开销，创建和销毁资源存在时间成本，进行一组线程的管理</p><p><strong>父级结构</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230301093810061.png" alt=""></p><p><strong>原理概述</strong></p><p>提交一个任务到线程池后</p><ul><li>当前线程池中在运行的线程数量是否少于corePoolSize<ul><li>是：创建一个新的工作线程</li><li>否：判断BlockingQueue是否满了<ul><li>没满：将线程放进BQ中</li><li>满了：如果创建一个新的工作线程使当前运行的线程数量数目超过maximumPoolSize，则交给RejectHandler来处理</li></ul></li></ul></li></ul><h3 id="源码分析">源码分析</h3><h4 id="构造">构造</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span>                          <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>                          <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span></code></pre></div><ul><li>corePoolSize: 线程池的核心线程数，就算是空的也不会被销毁</li><li>maximumPoolSize：线程池能容纳的最大线程数目</li><li>TimeUnit + keepAliveTime：空闲线程最大等待新线程进入的时间（超时将会被销毁）</li><li>workQueue：保存等待被执行的任务的阻塞队列。<strong>BlockingQueue类型</strong></li><li>threadFactory: 创建线程的工厂，自定义的线程工厂可以给每个新建的线程设置线程名</li><li>handler：线程的饱和策略，如果阻塞队列满了且没有空闲的工作线程。则会采用一以下的策略：<ul><li>AbortPolicy：直接抛出异常</li><li>CallerRunsPolicy：用调用者所在的线程执行任务</li><li>DiscardOldestPolicy：丢弃阻塞队列中最靠前的任务，并执行当前任务</li><li>DiscardPolicy：直接丢弃该任务</li></ul></li></ul><h4 id="三种预制的线程池类型"><strong>三种预制的线程池类型</strong></h4><p><strong>Executors.newFixedThreadPool</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                  <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>线程池线程数量达到corePoolSize后，即使线程池没有可执行的任务，也不会释放线程.</p><p>工作队列为无界队列LinkedBlockingQueue，队列容量为Integer.MAX_VALUE,因此keepAliveTime和饱和策略handler基本上是不会作用的</p><p><strong>Executors.newSingleThreadExecutor</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>初始化的线程池中只能有一个线程，如果该线程异常结束，会重新创建一个新的线程继续执行任务。使用无界队列，所以handler和keepAlive基本失效</p><p><strong>Executors.newSingleThreadExecutor</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                  <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>最大线程数达到Integer.MAX_VALUE，使用SynchronousQueue作为阻塞队列，keepAlive会作用</p><h4 id="关键属性">关键属性</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"> <span class="token comment">// 状态ctl是由Atmoic类管理的,高三位表示状态, 低29位表示线程数目</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>RUNNING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 111 0000000..000</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment">// 存放任务的阻塞队列</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">;</span><span class="token comment">// worker的集合</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">></span></span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 历史达到的worker最大值</span> <span class="token keyword">private</span> <span class="token keyword">int</span> largestPoolSize<span class="token punctuation">;</span><span class="token comment">// 采用AQS锁</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 饱和策略</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">;</span><span class="token comment">// 常驻线程数目(不会被销毁)</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> corePoolSize<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">;</span></code></pre></div><ul><li>Running 111：接受新任务，也能处理阻塞队列的任务</li><li>SHUTDOWN 000：不接受新任务但可以处理阻塞队列的任务</li><li>STOP 001：不接受新任务，不处理阻塞队列里的任务，并且会中断处理过程中的任务</li><li>TIDYING 010：当前线程池没有工作线程，调用terminated方法</li><li>TERMINATED 011： terminated方法调用完成</li></ul><h3 id="工作流程">工作流程</h3><h4 id="核心类-v2">核心类</h4><h5 id="Worker">Worker</h5><p>基于AQS并实现Runnable接口，实质是线程池的工作线程的实现。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span><span class="token class-name">Runnable</span> firstTask<span class="token punctuation">;</span><span class="token keyword">volatile</span> <span class="token keyword">long</span> completedTasks<span class="token punctuation">;</span><span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> firstTask<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// inhibit interrupts until runWorker</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstTask <span class="token operator">=</span> firstTask<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token function">getThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="Execute">Execute</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// ThreadPoolExecutor</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*     * Proceed in 3 steps:     *     * 1. If fewer than corePoolSize threads are running, try to     * start a new thread with the given command as its first     * task.  The call to addWorker atomically checks runState and     * workerCount, and so prevents false alarms that would add     * threads when it shouldn't, by returning false.     *     * 2. If a task can be successfully queued, then we still need     * to double-check whether we should have added a thread     * (because existing ones died since last checking) or that     * the pool shut down since entry into this method. So we     * recheck state and if necessary roll back the enqueuing if     * stopped, or start a new thread if there are none.     *     * 3. If we cannot queue task, then we try to add a new     * thread.  If it fails, we know we are shut down or saturated     * and so reject the task.     */</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ul><li>通过ctl去获取当前线程数，如果小于核心线程数，添加一个工作线程</li><li>如果当前线程池还在运行中且阻塞队列中还能容纳这个任务(就把这个任务放进队列中)。则<strong>再次判断状态</strong>，如果当前线程没在运行就把这个任务移除,并进行reject策略</li><li>如果当前线程池处于Running状态但没有工作线程，则创建一个工作线程Worker</li><li>如果工作队列满了，则 尝试去创建一个工作线程，如果失败了，就执行reject</li></ul><blockquote><p><strong>这里为什么需要double check ctl？</strong></p><p>第一步判断了线程池正在运行且阻塞队列成功的放入了该任务。但可能下一个时刻线程池的状态就改变，所以也就是如果改变过程发生在检查线程池状态之前 加入任务到阻塞队列之后的话，这样就会出问题，所以要在成功插入队列后再进行一次检查，验证加入到队列之前ctl的状态都是没问题的。</p></blockquote><h4 id="AddWorker">AddWorker</h4><p><em>private boolean addWorker(Runnable firstTask, boolean core)</em></p><ul><li>先判断线程池是否在正常RUNNING态，如果是在SHUTDOWN态且</li><li>判断当前工作线程数是否超出规定(core为true则采用corePoolSize, false采用maximumPoolSize为依据)</li><li>通过CAS方式改变ctl来增加工作线程数目，如果CAS失败，则说明可能是ctl发生改变，重新再循环一次。如果成功：</li><li>初始化一个Worker，调用mainLock，上锁，再次检查线程池状态。检查线程是否被启动，若没有</li><li>workers集合中添加这个工作线程（这也是为什么要上锁的主要原因），看是否需要更新下历史最大线程数，启动这个Worker线程。</li><li>如果添加这个工作线程失败，则将其从workers中移除，并减少工作线程数</li></ul><blockquote><p>这里出现了一种语法，之前没见过。其实是类似goto语句，这里作者可能只是不想设置标志位选择是彻底跳出上层循环还是从第二层循环返回第一层循环重新开始选择了使用这个语法。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">tag<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// ....</span>   <span class="token keyword">break</span> tag<span class="token punctuation">;</span>   <span class="token comment">// ...</span>   <span class="token keyword">continue</span> retry<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div><p>需要注意的是,break tag表示跳到tag出且不再执行循环，continue是跳到tag处重新执行循环</p></blockquote><h4 id="runWorker">runWorker</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> wt <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Runnable</span> task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>    w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// allow interrupts</span>    <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// If pool is stopping, ensure thread is interrupted;</span>            <span class="token comment">// if not, ensure thread is not interrupted.  This</span>            <span class="token comment">// requires a recheck in second case to deal with</span>            <span class="token comment">// shutdownNow race while clearing interrupt</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span> <span class="token operator">||</span>                 <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                  <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Throwable</span> thrown <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                task <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>                w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ul><li>Worker先取出当前的第一个任务，并释放Worker自己的锁</li><li>判断该任务是否为空，如果为空则通过getTask方法从阻塞队列中拿一个任务过来(getTask可能会阻塞)。如果没有任务，则会通过<strong>while循环</strong>一直获取任务</li><li>对Worker上锁，保证线程不被其他线程中断</li><li>检查ctl，若线程池处于中断状态，则将线程中断</li><li>执行beforeExecute切面方法(ThreadPoolExecutor预留)</li><li>run这个task，并捕获可能出现的异常</li><li>执行afterExecute方法</li><li>完成收尾工作：置空task、completedTasks++，解锁Worker</li><li>如果产生异常，则会执行processWorkerExit，依据情况进行Worker的销毁或重建</li></ul><h4 id="getTask">getTask</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Runnable</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// Did the last poll() time out?</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Check if queue empty only if necessary.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> STOP <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Are workers subject to culling?</span>        <span class="token keyword">boolean</span> timed <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">||</span> wc <span class="token operator">></span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>wc <span class="token operator">></span> maximumPoolSize <span class="token operator">||</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> timedOut<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>wc <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndDecrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Runnable</span> r <span class="token operator">=</span> timed <span class="token operator">?</span>                workQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">)</span> <span class="token operator">:</span>                workQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> r<span class="token punctuation">;</span>            timedOut <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> retry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ul><li>如果当前线程池状态为STOP或者已经在 SHUTDOWN状态中且阻塞队列中没有等待的线程，则会销毁该线程</li><li>如果(当前线程数目&gt;线程池最大可容量线程数 || 设置了核心线程空闲一段时间后销毁且当前已经超时) &amp;&amp; (当前工作线程&gt;1 || 阻塞队列为空)，则CAS减少当前线程数目并且销毁</li><li>根据是否允许核心线程idle超时后不被销毁采取从阻塞队列中用poll有限等待或take无限等待，如果超时则会设置超时标志。keepAliveTime也就是在此处生效</li></ul><h4 id="submit">submit</h4><p>由AbstractExecutorService实现，实质就是将Runnable、Callable等包装成一个RunnableFuture(<strong>实质上是一个FutureTask</strong>)并execute</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">T</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ftask<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="ThreadLocal">ThreadLocal</h2><p>为使用相同变量的每个线程都创建不同的存储。当使用ThreadLocal来维护变量时, ThreadLocal会为每个线程创建单独的变量副本, 避免因多线程操作共享变量而导致的数据不一致的情况。</p><p><strong>不是用于解决共享变量的问题，也不是为了协调线程同步，而是为了方便每个线程处理自己的状态而引入的机制</strong></p><p>应用：session管理、数据库链接管理</p><p><strong>为什么会使用ThreadLocal呢？</strong></p><p>考虑以下场景：</p><ol><li>用户在打开Database连接或使的时候，以前写的代码往往是调用static Connection getConnection()这种方法去获取一个静态的connection，多个线程使用一个connection，在高并发的情况下很有可能一个线程准备关闭该connection，而另外一个线程正准备使用该connection，如果没有做额外的同步操作的话就会出问题。</li><li>如果将Connection变为普通类，则每个线程创建线程时都需要new一次，这能保证并发问题不发生，但同时，每个线程都要开启和关闭一个connection，这对服务器的压力是很大的。</li></ol><h3 id="源码梳理">源码梳理</h3><h4 id="Get-Set">Get &amp; Set</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadLocalMap<span class="token punctuation">.</span>Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>Thread类中有ThreadLocalMap的成员变量threadLocals。这里主要通过根据当前线程拿到threadLocals, 然后再从<strong>该线程的ThreadLocalMap</strong>通过当前线程key拿到Entry，进而拿到key和value。如果map为空的话，则需要初始化</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">T</span> value <span class="token operator">=</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">TerminatingThreadLocal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TerminatingThreadLocal</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TerminatingThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 模板方式</span><span class="token keyword">protected</span> <span class="token class-name">T</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">T</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    t<span class="token punctuation">.</span>threadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>初始化时通过initialValue设置key的value(如果有重写这个方法，就不为null)，然后再创建map,并插入这个entry</p><p>总结一下：通过静态的方式获得线程隔离的变量</p><h3 id="ThreadLocalMap">ThreadLocalMap</h3><p><strong>特点</strong></p><ul><li>ThreadLocalMap没有实现Map接口，更没有继承AbstractMap，可以说它是Map但又不完全像Map那样强大</li><li>存放的key都是ThreadLocal&lt;?&gt;类型,计算hashCode由threadlocal去决定</li><li>ThreadLocalMap的Entry基于 WeakReference</li><li>该方法仅用一个Entry数组来存储Key Value且Entry也不是链表形式，每个数组的slot中只存一个Entry。如果存在index相同或者容量超过threshold则需要rehash扩容(2倍扩容)。需要注意的是，如果扩容时idx还是相同，则会尝试把当前元素放在该idx后续位置。这也就造成了在getEntry的时候如果发现当前idx的key不等时，则需要依次比较后续位置的key</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">replaceStaleEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token operator">++</span>size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cleanSomeSlots</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sz<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sz <span class="token operator">>=</span> threshold<span class="token punctuation">)</span>        <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>这里还需要注意的一点是：ThreadLocalMap的Entry是WeakReference类型的，所谓WeakReference，表明其只能生存到下一次gc之前，所以当k==null时有可能是根本没有这个key也有可能是该Entry已经被回收了，则要调用replaceStableEntry替换过期的数据，做了什么还不知道。</p><h3 id="内存泄漏">内存泄漏</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230301164158265.png" alt=""></p><p>在使用线程池操作ThreadLocal的情况下可能出现问题：线程池中的线程可能工作完后不会停止，处于idle态，那么这时候进行gc，有WeakReference<ThreadLocal>自然就被清理，但是这时候还存在Thread Ref -&gt; Thread(Heap) -&gt; ThreadLocalMap -&gt; Entry  -&gt; Value的强连接引用，最终就导致key为null但value不为null</p><p>为避免出现内存泄漏，ThreadLocalMap提供remove方法，也就是找到key对应的idx位置并且清理掉这个entry</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 清除对ThreadLocal的弱引用, 置key为null</span>            e<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 清除key为null的元素</span>            <span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><strong>正确使用ThreadLocal</strong></p><ul><li>每次调用完ThreadLocal都调用其remove方法清除数据</li><li>将ThreadLocal定义为private static，这样就一直存在ThreadLocal的强引用，无法被gc回收，也就能保证任何时候都能通过ThreadLocal的弱引用访问到Entry到value置</li></ul><h2 id="BlockingQueue">BlockingQueue</h2><h3 id="BlockingQueue-v2">BlockingQueue</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230311152802535.png" alt=""></p><table><thead><tr><th>方法</th><th>立即抛异常</th><th>立即返回特定值</th><th>阻塞</th><th>超时</th></tr></thead><tbody><tr><td>插入</td><td>add</td><td>offer</td><td>put</td><td>offer</td></tr><tr><td>移除</td><td>remove</td><td>poll</td><td>take</td><td>poll</td></tr><tr><td>检查</td><td>element</td><td>peek</td><td></td><td></td></tr></tbody></table><p><strong>各种阻塞队列</strong></p><ul><li>ArrayBlockingQueue：有界的阻塞队列，内部实现是将对象放进数组中的，所以需要指定数组的初始大小，且**不支持扩容！**使用takeIndex和putIndex维护当前存在数组的元素索引区间</li><li>LinkedBlockingQueue：使用链表维护的阻塞队列，可以存放无限多个元素(理论上)</li><li>DelayQueue：对元素进行持有直到一个特定的延迟过期</li><li>SynchronousQueue：内部同时只能容单个元素</li></ul><h3 id="BlockingDeque">BlockingDeque</h3><p>表示一个线程放入和提取的双端队列，可以在任意一端插入或者拿走元素</p><table><thead><tr><th>方法</th><th>立即抛异常</th><th>立即返回特定值</th><th>阻塞</th><th>超时</th></tr></thead><tbody><tr><td>插入</td><td>addFirst/addLast</td><td>offerFirst/offerLast</td><td>putFirst/putLast</td><td>offerFirst/offerLast</td></tr><tr><td>移除</td><td>removeFirst/removeLast</td><td>pollFirst/pollLast</td><td>takeFirst/takeLast</td><td>pollFirst/pollLast</td></tr><tr><td>检查</td><td>getFirst/getLast</td><td>peekFirst/peekLast</td><td></td><td></td></tr></tbody></table><h2 id="应用">应用</h2><h3 id="生产者消费者实现">生产者消费者实现</h3><p><strong>基于Condition和Lock实现</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 缓冲池不为空</span>    <span class="token keyword">static</span> <span class="token class-name">Condition</span> notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 缓冲池不为满</span>    <span class="token keyword">static</span> <span class="token class-name">Condition</span> notFull <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token string">"s"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token string">"s"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> MAX_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// wait</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Producer-"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    pool<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Producer-"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"add a object to pool, remain: "</span> <span class="token operator">+</span> pool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    notEmpty<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// wait</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer-"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    pool<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer-"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"consume a object to pool, remain: "</span> <span class="token operator">+</span> pool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    notFull<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8特性学习</title>
    <link href="/2022/07/30/Java8%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/07/30/Java8%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>Java8特性学习</h1><blockquote><p>Mybatis中出现了一些与Lambda相关的函数方法，使得在编程时非常的方便，但自己却不知道如何使用基于Java8的语法</p></blockquote><h2 id="概述">概述</h2><p><strong>优点</strong></p><ul><li>大数量下处理集合效率高</li><li>代码可读性高，代码简洁，开发快速</li><li>易于并发编程</li><li>减少嵌套</li></ul><h3 id="函数式编程思想">函数式编程思想</h3><p>面向对象的思想关注的说用什么对象完成什么事情，而函数式编程关注是对数据进行了什么操作</p><h2 id="Lambda表达式">Lambda表达式</h2><p>本质是JDK8 的<strong>语法糖</strong>，能对某些匿名内部类的写法进行简化，是函数式编程思想的重要体现。<strong>不关注是什么对象，而关注我们对数据进行了什么操作</strong></p><h3 id="示例">示例</h3><p>其中一种较为常见的Lambda表达式如下，传参是一个接口并且接口中只定义了一个方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Runnable Thread Start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p><strong>注意，这里()代表的那个接口中的唯一的那个方法，而不是指代那个接口</strong></p><p><strong>返回值</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">testFunc</span><span class="token punctuation">(</span>value <span class="token operator">-></span>  value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testFunc</span><span class="token punctuation">(</span><span class="token class-name">MyInt</span> myInt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> myInt<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">MyInt</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>如果匿名类函数只有一行，则可以直接不加大括号和return，也表示返回值。否则则需要添加大括号和return（如果有返回类型要求的话）</p><p><strong>优化规则</strong></p><ul><li>函数体只有一行代码时，可以忽略掉大括号，return语句以及随后的分号</li><li>方法只有一个参数时小括号可以省略</li><li>参数类型可以省略</li></ul><h2 id="Stream流">Stream流</h2><p>用来对集合或数组进行链状流式的操作</p><h3 id="常用操作">常用操作</h3><h4 id="创建流"><strong>创建流</strong></h4><p>集合对象.stream()</p><h4 id="中间操作">中间操作</h4><p><strong>filter</strong>：根据某个条件过滤，返回值为Boolean值</p><p><strong>map</strong>：通过某种转化，把流转化为<strong>承载</strong>另一种数据（格式）的流，<strong>只能把一个对象转化成另一个对象来作为流中的元素</strong></p><p><strong>sort</strong>：有参和无参两种，有参需要提供Comparator</p><p><strong>distinct</strong>： 去重操作，通过类的内部equals方法进行比较</p><p><strong>limit skip</strong>：限制总条数为多少或跳过<strong>开头</strong>的n个元素</p><p><strong>flatMap</strong>：把一个对象转化为多个对象作为流中的元素，比如一个对象中有一个<code>List&lt;Object&gt;</code> 则flatMap可以将所有对象的该属性整合成一个承载Object的流，而map只能转化为承载<code>List&lt;Object&gt;</code>的流</p><h4 id="终结操作">终结操作</h4><div class="note note-primary">            <p><strong>惰性求值</strong>：如果一个流中没有终结操作，则这个流不会启动<br><strong>一次性</strong>：一个流进过一个终结操作后则不能再次被使用</p>          </div><p><strong>forEach</strong></p><p><strong>count</strong></p><p><strong>max&amp;min</strong>: 需要传入<code>Optional&lt;Compartor&gt;</code>，指出以哪一种方式获得最大最小值</p><p><strong>collect</strong></p><p>把当前流转化为一个集合</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// List 转化  stream.collect(Collectors.toList());</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> defaultPersonArrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>person <span class="token operator">-></span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> person <span class="token operator">-></span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>这里Collectors是java.util.stream下的类</p><p><strong>anyMatch</strong>: 判断有任意符合匹配条件的元素，只要有一个则就满足</p><p><strong>allMatch</strong>: 全部满足为true</p><p><strong>noneMatch</strong>: 流中的元素是否都不符合</p><p><strong>findAny</strong>: 获取流中对任意一个元素，<strong>无法保证一定是流中的第一个元素</strong></p><p><strong>findFirst</strong>: 获取流中的第一个元素</p><p><strong>reduce</strong></p><p>对流中的数据按照制定的计算方式给出一个结果（缩紧操作）。可以直接给出初值也可以不设置初值（不设置时第一个元素为初值）</p><h2 id="Optional">Optional</h2><p>优雅地避免空指针异常，减少非空判断对代码行数。每次通过查询或计算得到结果时，若方法内部没有处理空数据的逻辑，则在外部代码部分就必须判断结果是否为空</p><h3 id="使用">使用</h3><p>类似包装类</p><p>将一个对象封装成Optional</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> person1 <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 传入对象必须非空</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> person1 <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p><strong>ifPresent</strong></p><p>安全消费，如果不为空的话，则进行处理</p><p><strong>orElseGet</strong></p><p>安全获取值，如果数据不为空则返回该数据，为空则根据代码返回另一个值</p><p><strong>orElseThrow</strong></p><p>安全获取值，如果值不存在则抛出一个自己指定的异常</p><p><strong>get</strong> 不安全获取值，如果Optional中不存在值，则会抛出异常</p><p><strong>filter</strong> 如果不符合条件，则会变成一个无数据的Optional对象</p><p><strong>isPresent</strong> 是否存在值 返回boolean</p><p><strong>map&amp;flatMap</strong> 同Stream，只是变成了单一对象</p><h2 id="函数式接口">函数式接口</h2><p>函数接口： 只有一个抽象方法的接口（默认方法不算）</p><p>**JDK函数式接口都加上了<code>@FunctionalInterface</code>，但无论是否有此注解，只要接口中只有一个方法则都是函数式接口。此注解只是一个标注 **</p><p>JDK中默认给出了几个函数式接口。Consumer消费接口、 Function计算转换接口（接受一个T类型数据并返回为R类型数据）、 Predict判断接口、生产型接口Supply（生成一个类型的对象）等</p><p>至于BiConsumer 、 BiFunction等，差别是需要两个参数</p><h3 id="默认方法搭配">默认方法搭配</h3><p>例如Predict接口中还有and、or之类的默认方法，在使用stream时可以通过or、and来拼接条件（但似乎无法使用lambda来实现拼接，只能使用匿名内部类的方式）</p><h2 id="方法引用">方法引用</h2><p>使用lambda时若方法体中只有一个方法的引用，则可以用方法引用进一步优化代码，例如Mybatis中的lambdaQueryWrapper使用查询时就有Class::Function</p><p><strong>格式：类名/对象名 :: 方法名</strong></p><ul><li><p><strong>调用静态方法</strong>：抽象方法只有一行嗲吗，且其中的参数都按照顺序传入静态方法中中，额可以直接使用 类名:方法名 的方式（参数都不用写了）</p></li><li><p><strong>引用对象的实例方法</strong>：前置条件与上类似，但最终为 <strong>对象</strong>名:方法名</p></li><li><p><strong>引用类的实例方法</strong>： 实现的方法体只有一行代码，且这行代码调用了第一个参数的成员方法，并且实现的接口的方法中<strong>剩余的所有参数</strong>都按照顺序传入到这个成员方法中。类名:方法名</p></li><li><p><strong>构造器引用</strong>：一样，抽象方法中定义的参数都按照顺序传入了构造器中，类名:new</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Echo-软工实训-团队SpringBoot项目总结</title>
    <link href="/2022/07/08/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%AE%AD-%E5%9B%A2%E9%98%9FSSM%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2022/07/08/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%AE%AD-%E5%9B%A2%E9%98%9FSSM%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1>Echo-软工实训-团队SpringBoot项目总结</h1><blockquote><p>忙碌了4周，终于结束了学院的实训课程，也是大学以来最后一个由团队协作完成的实训项目，也算是自己比较用心与团队成员一起完成的项目了。虽然最终效果还不是很好，但自己还是花了许多时间与精力，第一次比较正规的组织开发，在此进行一下复盘，总结一下组织开发时自己一些疏忽之处与项目开发时所遇到的问题。也算是自己后端实际开发所码的第一块砖了</p></blockquote><h2 id="介绍-v8">介绍</h2><p>所选定的项目是基于CSDN与知乎之间的开发者论坛社区 <strong>Echo</strong>, 感觉在想法上是结合了这两者与Hexo博客的感觉。这个命名是很好的，有几层语义，一是Echo本身有回声的意思，希望开发者在技术论坛进行发帖、讨论与求问时能得到回应；二是有理想的希望, 有叫声就有回声，有付出就有收货；三是Echo本来就作为Linux命令的关键词，也有双关之意。</p><p>项目主要分为三大模块：</p><ol><li><strong>用户前端页面</strong>（用户进行操作的界面，包括发表文章、查看文章等）</li><li><strong>管理员前端界面</strong>（管理员操作的界面，包括封禁用户、文章，上架热门文章，查看文章总数等）</li><li><strong>通用后端界面</strong>（统一对管理员和用户前端发来的请求进行处理并响应）</li></ol><p><strong>前端页面的部分展示</strong></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220708094350410.png" alt="登录主页"></div><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220708094908059.png" alt="注册界面"></div><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220708094421987.png" alt="首页"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220708094510465.png" alt="文章页面"></div><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220708094601371.png" alt="搜索界面"></div></div></div><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220708094609133.png" alt="搜索用户界面"></div><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220708094714625.png" alt="文章发表界面"></div><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220708094817675.png" alt="文章提交界面"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220708094806254.png" alt="文章封面可裁剪"></div><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220708094836673.png" alt="个人界面"></div></div></div><h2 id="团队开发">团队开发</h2><p>由于前几次开发由于部分同学不熟悉Git操作等，导致还是有部分使用顺序开发 发Zip包的情况，这次咬咬牙，统一了下开发规范并写明了必须使用Git和Github来进行分支和仓库管理，并且在前后端开发规范上也做了一些统一。还有开会讨论的时候也有线上、线下交流问题而导致的项目进度延后等问题，也统一使用飞书作为线上沟通软件，飞书云文档作为每次开会和重要任务分配的说明，许多文档都放在飞书上，不得不说，提前写好开发规范文档，让队员们在开发之前先熟悉如何写统一的代码，包括后端常量的统一、前端API请求的统一封装、Git分支命名与Github提pr流程等都有说明（感觉这是自己做的比较好的一点），虽然花了点时间，但事实证明这点时间是值得的。</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220708103250108.png" alt="image-20220708103250108"></p><h2 id="技术">技术</h2><p>总结一下用到的一些技术和框架</p><h3 id="后端">后端</h3><p>后端配置和安全验证方面基本上是我在做，对这方面也是初次接触，可能还有考虑不周之处</p><ul><li>整体采用SpringBoot + MybatisPlus搭建的后端框架</li><li>整合了JWT与SpringSecurity作为登录验证模块, 有登录拦截模块</li><li>支持JavaMail发送邮件</li><li>整合Swagger-UI方便查看API信息</li><li>使用ASpect作为日志打印模块</li><li>部分功能采用线程池技术，减少同步的耗时</li><li>整合Tencent 对象存储COS SDK，支持下发临时Key，避免SecretKey直接存储在前端而引发泄露问题</li></ul><h3 id="用户前端">用户前端</h3><p>为了前后端分离，用户前端我们采用了Vue 2.6来开发，整合Element-UI作为设计元素辅助，封装Axios进行网络请求并进行拦截，支持md语法的回显主要是通过一个vue-markdown的库来完成，最终效果还是非常完善。但这部分工作不由我来完成，故在这里不赘述。有兴趣可移步至 <a href="https://wleoo.gitee.io/">WLeoo’s Blog</a> 与 <a href="https://dognew0126.github.io/">dogNew’s Blog</a></p><h3 id="数据库">数据库</h3><p>数据库主要还是采用Mysql与Redis，对单条数据量大且数据条数多的实体(例如用户、文章信息等)都存储在Mysql中，对一些经常访问且数据量较小的条目（例如用户Token验证与用户关注列表等）就放在Redis中存储，Redis与Mysql都是通过Docker部署在一台服务器的不同端口上，与本地端口与数据文件地址形成映射关系。</p><p>用户上传的图片不由服务器保存，而直接交由第三方COS对象存储服务（Tencent COS）。</p><h2 id="问题-v4">问题</h2><p>这次开发中其实有非常多的问题，第一个问题就是没有在开发时遇到的这些问题及时记录，而是拖到项目结束才来复盘 😓，这里分类来列出</p><p><strong>团队合作</strong></p><ol><li><strong>数据库设计应当提前与团队成员在项目初期讨论出初稿</strong>。而我们只是虽然在飞书云文档上敲定了一些字段设计，但没有考虑的部分还有很多，导致后期还花了一些时间在数据库讨论上（同时也造成了开发初期数据库无法确定，导致数据不能插入，不能测试数据库数据查询）</li><li><strong>团队成员分工不明确与需求划分不全</strong>。项目开发前没有彻底讨论出功能需求与开发时功能划分，导致在后期还有部分功能无人开发</li><li><strong>没有提前确定前后端请求接口</strong>。也比较特殊，因为我们每个人既负责了前端又负责了后端，并且是按照功能模块进行划分的，所以自己负责自己功能模块的前后端，这也导致了一些后端接口的冗余与冲突。应该是提前规范API，然后就直接能够在前端中先封装好API请求了，而不是写了后端再填前端。</li><li><strong>没有规定成员开发模块的DDL</strong>。没有掌握每个人的开发进度，容易造成最终交付日期与质量的不确定性。</li><li><strong>没有预留Review时间</strong>。项目合并完后，只是简单的看了下有没有问题，但是涉及到一些功能没有覆盖（导致最终验收的时候还有一两个bug）</li></ol><p><strong>后端</strong></p><input type="checkbox" disabled > 数据库主键字段设计还存在问题（自增？雪花算法？UUID？唯一字符串？）以及他们分别的应用场景是什么</br><input type="checkbox" disabled > SpringSecurity验证流程没有搞清楚，项目开发时只知道怎么用，而不知道为什么</br><input type="checkbox" disabled > WebSecurityConfigurerAdapter Web安全配置已过时，如何使用SecurityFilterChain来作为替代</br><input type="checkbox" disabled > Springboot线程池技术的应用与线程池技术感觉又忘了，不太熟悉其作用了。</br><input type="checkbox" disabled > Mybatis-Plus对某一实体的查询(例如多个操作只查询其中几个字段)，没有进行封装，导致出现了大量Duplicate Code，只为了做相同的wrapper.select(....)操作</br><input type="checkbox" disabled > 用了Swagger-UI但没有完全使用@APIOperation来说明接口的使用场景</br><input type="checkbox" disabled > 权限分配与认证这一块因为时间缘故基本没有做</br><input type="checkbox" disabled > 对Service层中因Dao层的查询可能导致的异常没有进行捕获，导致请求返回不规范</br><input type="checkbox" disabled > 对Java8 中出现的Stream和Lambda等特性一点都不熟悉，有场景需要使用时不能使用这样更快捷的编程方式（Mybatis-Plus）</br><p><strong>前端</strong></p><h2 id="总结-v16">总结</h2>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
      <tag>SSM</tag>
      
      <tag>Team Work</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring源码之旅</title>
    <link href="/2022/06/17/Spring%E6%BA%90%E7%A0%81%E4%B9%8B%E6%97%85/"/>
    <url>/2022/06/17/Spring%E6%BA%90%E7%A0%81%E4%B9%8B%E6%97%85/</url>
    
    <content type="html"><![CDATA[<h1>Spring源码之旅</h1><blockquote><p>SpringFramework: 5.2.20-RELEASE</p></blockquote><h2 id="Core">Core</h2><h3 id="ApplicationContext">ApplicationContext</h3><p>ApplicationContext就是Spring容器中的一种抽象表示，先看一下ApplicationContext接口的源码</p><p>注释中如下介绍：</p><blockquote><p>Central interface to provide configuration for an application. This is read-only while the application is running, but may be reloaded if the implementation supports this.<br>An ApplicationContext provides:</p><ul><li>Bean factory methods for accessing application components. Inherited from ListableBeanFactory.</li><li>The ability to load file resources in a generic fashion. Inherited from the org.springframework.core.io.ResourceLoader interface.</li><li>The ability to publish events to registered listeners. Inherited from the ApplicationEventPublisher interface.</li><li>The ability to resolve messages, supporting internationalization. Inherited from the MessageSource interface.</li><li>Inheritance from a parent context. Definitions in a descendant context will always take priority. This means, for example, that a single parent context can be used by an entire web application, while each servlet has its own child context that is independent of that of any other servlet.</li></ul></blockquote><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">EnvironmentCapable</span><span class="token punctuation">,</span> <span class="token class-name">ListableBeanFactory</span><span class="token punctuation">,</span> <span class="token class-name">HierarchicalBeanFactory</span><span class="token punctuation">,</span> <span class="token class-name">MessageSource</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationEventPublisher</span><span class="token punctuation">,</span> <span class="token class-name">ResourcePatternResolver</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回容器的唯一Id</span>    <span class="token class-name">String</span> <span class="token function">getApplicationName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回应用名称</span>    <span class="token class-name">String</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 展示名</span>    <span class="token keyword">long</span> <span class="token function">getStartupDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 容器启动时间</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">ApplicationContext</span> <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AutowireCapableBeanFactory</span> <span class="token function">getAutowireCapableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">;</span> <span class="token comment">// 获得自动装配的bean工厂</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/ApplicationContext.png" alt="ApplicationContext继承关系图"></p><table><thead><tr><th>父接口</th><th>作用</th></tr></thead><tbody><tr><td>EnvironmentCapable</td><td>具有获取环境相关参数的功能，propertiess文件</td></tr><tr><td>ListableBeanFactory</td><td>提供Bean迭代功能的BeanFactory</td></tr><tr><td>HierarchicalBeanFactory</td><td>提供父容器的访问功能的BeanFactory</td></tr><tr><td>MessageSource</td><td>对国际化文件支持的基础接口</td></tr><tr><td>ApplicationEventPublisher</td><td>应用事件的发布接口</td></tr><tr><td>ResourcePatternResolver</td><td>资源解析和加载的接口</td></tr></tbody></table><p>ApplicationContext的实现类</p><p><img src="/home/pplong/.config/Typora/typora-user-images/image-20220618100624379.png" alt="image-20220618100624379"></p><p>下一层至ConfigurableApplicationContext接口，发现其有很多set和add方法，用来配置ApplicationContext，提供了父容器、环境、类加载器、BeanFactory等，同时还继承了Lifecycle, Closeable接口，可以进行生命周期的控制和关闭操作</p><p>再往下层AbstractApplicationContext，其继承于DefaultResourceLoader，实现了多个接口的通用方法（为其子类减负），ConfigurableListableBeanFactory对象的一些操作进行了保留</p><h4 id="ClassPathXmlApplicationContext">ClassPathXmlApplicationContext</h4><p><strong>1. 初始化</strong></p><p>通常进行的xml配置，会进入到这一步构造函数初始化（其中refresh为true）</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations<span class="token punctuation">,</span> <span class="token keyword">boolean</span> refresh<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ApplicationContext</span> parent<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setConfigLocations</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>refresh<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>而super(parent)实则为null，在递归构造其中间许多抽象父类的也仅有super(parent)而不做其他操作，最终在最初抽象子类AbstractApplicationContext中添加了<code>ResourcePatternResolver </code>并将其指定为<code>PathMatchingResourcePatternResolver</code>，也就是指定了资源检索器，能检索到classpath*: …等的资源，而setParent为其指定了Environment环境属性，如果存在父类的ApplicationContext，就合并这两个类的环境属性。Environment属性中包含了许多环境设置，包括本机的环境设置(PATH 、JAVA_HOME 、USER等等)</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ApplicationContext</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setParent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>resourcePatternResolver <span class="token operator">=</span> <span class="token function">getResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token class-name">ResourcePatternResolver</span> <span class="token function">getResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setParent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ApplicationContext</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Environment</span> parentEnvironment <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parentEnvironment <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableEnvironment</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span><span class="token punctuation">)</span> parentEnvironment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><strong>2. setConfigLocation</strong></p><p>在<code>abstractRefreshableConfigApplicationContext</code>才有的方法，进行非空验证，并根据Environment中ConfigurablePropertyResolver的resolveRequiredPlaceholders解决路径寻找问题，以字符串的形式保存在<code>abstractRefreshableConfigApplicationContext</code>中</p><p><strong>3. refresh</strong></p><p>来自<code>AbstractApplicationContext</code>接口的方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Prepare this context for refreshing.</span><span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Tell the subclass to refresh the internal bean factory.</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Prepare the bean factory for use in this context.</span><span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">// Allows post-processing of the bean factory in context subclasses.</span><span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Invoke factory processors registered as beans in the context.</span><span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Register bean processors that intercept bean creation.</span><span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Initialize message source for this context.</span><span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Initialize event multicaster for this context.</span><span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Initialize other special beans in specific context subclasses.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Check for listener beans and register them.</span><span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Instantiate all remaining (non-lazy-init) singletons.</span><span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Standard</span><span class="token comment">// Last step: publish corresponding event.</span><span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span><span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Destroy already created singletons to avoid dangling resources.</span><span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Reset 'active' flag.</span><span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Propagate exception to caller.</span><span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token comment">// Reset common introspection caches in Spring's core, since we</span><span class="token comment">// might not ever need metadata for singleton beans anymore...</span><span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><strong>1-1. prepareRefresh</strong></p><p>先做一些刷新前的准备活动，包括设置容器的启动时间、打开容器的活跃状态、验证必要需求(或者说是环境变量，如果没有该环境变量则会抛出异常)<code>validateRequiredProperties</code>，可通过继承<code>AbstractApplicationContext</code>的实现子类然后重写<code>initPorpertySources</code>方法<code>getEnvironment().setRequiredProterties(&quot;xxxx&quot;)</code>设置</p><p><strong>1-2. obtainFreshBeanFactory</strong></p><p>然后获取ConfigurableListableBeanFactory并进行一系列设置，先检查是否有BeanFactory（初始化时肯定是没有的），没有便加载一个，装填进来，做一些设置，使得ApplicationContext有了BeanFactory的所有功能</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">closeBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">DefaultListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">createBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 为了通过id反序列获取到beanFactory对象</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setSerializationId</span><span class="token punctuation">(</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"I/O error parsing bean definition source for "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// customize加载在load配置文件之前，那么如何定义？</span><span class="token comment">// 为什么是customize: protected : 可通过重写来改变</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 是否允许覆盖相同名称下的不同定义的对象</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowBeanDefinitionOverriding <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>beanFactory<span class="token punctuation">.</span><span class="token function">setAllowBeanDefinitionOverriding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowBeanDefinitionOverriding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">// 是否允许bean之间存在循环依赖</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>beanFactory<span class="token punctuation">.</span><span class="token function">setAllowCircularReferences</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><strong>loadBeanDefinitions</strong></p><p>接下便是解析的最重要的方法，加载Bean定义，调用自AbstractApplicationContext，先穿那个件一个读取XML Bean定义的读入类，然后添加该ApplicationContext的环境和资源加载器、实体解析器。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span><span class="token class-name">XmlBeanDefinitionReader</span> beanDefinitionReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Configure the bean definition reader with this context's</span><span class="token comment">// resource loading environment.</span>beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Allow a subclass to provide custom initialization of the reader,</span><span class="token comment">// then proceed with actually loading the bean definitions.</span>    <span class="token comment">// 设置是否对配置文件进行验证</span><span class="token function">initBeanDefinitionReader</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>那么这个实体解析器是什么？发现其实际上是EntityResolver接口的实现，那么EntityResolver接口是干什么用的？其源码注释为：</p><blockquote><p>If a SAX application needs to implement customized handling for external entities, it must implement this interface and register an instance with the SAX driver using the setEntityResolver method.<br>The XML reader will then allow the application to intercept any external entities (including the external DTD subset and external parameter entities, if any) before including them.</p></blockquote><p>SAX(Simple API for XML)这里也就跟xml文件的结构解析有联系了（自己对xml文件的结构还不熟悉），可以解释为对xml的规范文件xsd(xml schema definition)或dtd(document type definition)等包含标签的定义信息，可被EntityResolver进行读取和解析，后续了解后xml文件结构后对这里继续深入…</p><p>然后根据获得 ConfigResources（创建ClassPathXmlApplicationContext没有设置ApplicationContext时便不会设置）来进行读取，然后就由XmlBeanDefinitionReader来进行读取</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">XmlBeanDefinitionReader</span> reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configResources <span class="token operator">=</span> <span class="token function">getConfigResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>configResources <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configResources<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations <span class="token operator">=</span> <span class="token function">getConfigLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>configLocations <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> locations<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>locations<span class="token punctuation">,</span> <span class="token string">"Location array must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> location <span class="token operator">:</span> locations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        count <span class="token operator">+=</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>先进行resourceLoader的判断（之前默认为main方法中new的ApplicationContext的类）</p><p><code>ResourcePatternResolver</code>是干嘛的？注释为：<code>Strategy interface for resolving a location pattern (for example, an Ant-style path pattern) into Resource objects.</code>也就是能够进行资源文件的路径解析</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">></span></span> actualResources<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ResourceLoader</span> resourceLoader <span class="token operator">=</span> <span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceLoader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>            <span class="token string">"Cannot load bean definitions from location ["</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"]: no ResourceLoader available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceLoader <span class="token keyword">instanceof</span> <span class="token class-name">ResourcePatternResolver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Resource pattern matching available.</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResourcePatternResolver</span><span class="token punctuation">)</span> resourceLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>resources<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>actualResources <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>actualResources<span class="token punctuation">,</span> resources<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Loaded "</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">" bean definitions from location pattern ["</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>                <span class="token string">"Could not resolve bean definition resource pattern ["</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Can only load single resources by absolute URL.</span>        <span class="token class-name">Resource</span> resource <span class="token operator">=</span> resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>actualResources <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            actualResources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Loaded "</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">" bean definitions from location ["</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// AbstractApplicationContext</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token class-name">String</span> locationPattern<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcePatternResolver<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>locationPattern<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>AbstractApplicationContext实现了<code>ResourcePatternResolver</code>接口所以有接口定义的Resource[] getResources方法且会发现其beanDefinitionReader.setResourceLoader(this)实际设置的是ClassPathXMLApplicationContext，所以能够就进入到AbstractApplicationContext的getReources方法，实际又调用到了自身属性<code>resourcePatternResolver</code>的getResources方法，那这个resourcePattherResolver从什么时候初始化的呢？会发现其在AbstractApplicationContext初始化时就已经new了一个，其类型是实现了<code>ResourcePatternResolver</code>接口的类<code>PathMatchingResourcePatternResolver</code>，可知这才是真正解析文件路径的解析器，注释：</p><blockquote><p>A ResourcePatternResolver implementation that is able to resolve a specified resource location path into one or more matching Resources. The source path may be a simple path which has a one-to-one mapping to a target Resource, or alternatively may contain the special “classpath*:” prefix and/or internal Ant-style regular expressions (matched using Spring’s AntPathMatcher utility). Both of the latter are effectively wildcards.</p></blockquote><p>然后开始在其父类AbstractBeanDefinitionReaader中<code>loadBeanDefinitions</code>这里的这个方法进行了重构，接受的不再是String…对象而是Resource…对象</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> resources<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>resources<span class="token punctuation">,</span> <span class="token string">"Resource array must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Resource</span> resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>count <span class="token operator">+=</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><code>loadBeanDefinitions</code>作为接口<code>BeanDefinitionReader</code>定义的方法，由<code>AbstractBeanDefinitionReader</code>实现，由于加载的是XML文件，所以最终会到其子类<code>XmlBeanDefinitionReader</code>中重写的方法，先创建一个EncodedResource(<code>Holder that combines a Resource descriptor with a specific encoding or Charset to be used for reading from the resource.</code>)</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// XmlBeanDefinitionReader</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">Resource</span> resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">EncodedResource</span> encodedResource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">,</span> <span class="token string">"EncodedResource must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Loading XML bean definitions from "</span> <span class="token operator">+</span> encodedResource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EncodedResource</span><span class="token punctuation">></span></span> currentResources <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcesCurrentlyBeingLoaded<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentResources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token string">"Detected cyclic loading of "</span> <span class="token operator">+</span> encodedResource <span class="token operator">+</span> <span class="token string">" - check your import definitions!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">InputSource</span> inputSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>encodedResource<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>inputSource<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">doLoadBeanDefinitions</span><span class="token punctuation">(</span>inputSource<span class="token punctuation">,</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token string">"IOException parsing XML document from "</span> <span class="token operator">+</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>currentResources<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>currentResources<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcesCurrentlyBeingLoaded<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="note note-info">            <p>classpath 代表什么意义</p>          </div><p>在<code>PathMatchingResourcePatternResolver</code>，主要根据传入的locationPattern（是否有前后缀），通过<code>ResourceLoader</code>来找到对应的资源文件并具体为Resource对象（Resource只是规范的接口，具体到其实现类）</p><ol><li><p>允许对BeanFactory二次加工（postProcessBeanFactory是可重写的protected空方法）</p></li><li><p>处理所有的BeanFactoryPpostProcessor</p></li><li><p>注册BeanPostProcessor</p></li><li><p>初始化Message源</p></li><li><p>初始化应用消息广播</p></li><li><p>留给子类来初始化其他的bean</p></li><li><p>在所有注册的bean中查找ApplicationListener bean并注册到广播中</p></li><li><p>初始化剩下的单实例</p></li><li><p>完成刷新：清除资源缓存，通知生命周期处理器并start，发出事件通知</p></li></ol><h3 id="Bean">Bean</h3><h4 id="LifeCycle">LifeCycle</h4><h4 id="FactoryBean">FactoryBean</h4><h4 id="BeanFactory">BeanFactory</h4>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK动态代理</title>
    <link href="/2022/06/15/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <url>/2022/06/15/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1>JDK动态代理</h1><blockquote><p>Spring AOP 和注解中涉及到一些JDK动态代理的内容，想要理解一下在Java层的动态代理具体过程。</p><p>涵盖内容： 代理的例子、静态/动态代理概念、JDK中动态代理原理、Java层动态代理过程分析</p></blockquote><h2 id="引入">引入</h2><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bird</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// core code</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>考虑有如上的实例类，在业务中我们需要对一个或者多个方法做出某些变化，为其添加一些额外的功能，那可能或怎么做？</p><p><strong>1. 直接修改源方法</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start fly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// core code</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end fly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start sing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end sing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>这种方法是最直接的，但有很多问题：</p><ol><li>不符合开闭原则，“<strong>对外开发对内封闭</strong>”；</li><li>如果要修改的方法有许多，那则会有很大的修改成本，重复代码过多</li></ol><p>由此考虑通过<strong>代理</strong>(Proxy)来实现一种便捷的第三方的操作</p><h2 id="静态代理">静态代理</h2><p>代理：其他对象提供一种代理以<strong>控制对这个对象的访问</strong>。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p><p><strong>对上述例子的改进</strong></p><p>将核心方法抽象成接口，原有业务类（或核心代码类）实现该接口（理解为主要执行类）。新建代理类同样实现该接口（保持方法不变性）并且<strong>持有原有业务类的实例</strong>（这里为了更好低抽象，可以将业务类的类型变为接口类型，而非其实体类）</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BirdAbility</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BirdImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BirdAbility</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BirdProxy</span> <span class="token keyword">implements</span> <span class="token class-name">BirdAbility</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 使用接口作为类名</span>    <span class="token class-name">BirdAbility</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTarget</span><span class="token punctuation">(</span><span class="token class-name">BirdAbility</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fly start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fly end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sing start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sing end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>通过静态代理，能让代码有一定的封闭性，开闭原则满足，但还是不能解决代码冗余和过多工作量的问题。此外由于规定的接口是BirdAbility，则其只能接受BirdAbility的实现类，而无法为其他类做代理，如果要为所有类添加该功能，则可能要写很多的代理类和接口。</p><p>如何少写代理类而完成代理任务？</p><h2 id="动态代理-v2">动态代理</h2><p>能否通过接口而直接动态创造一个代理类呢？</p><h3 id="Proxy">Proxy</h3><h4 id="getProxyClass">getProxyClass()</h4><p>Proxy类的getProxyClass(ClassLoader loader,Class&lt;?&gt;… interfaces)能够接受Class对象及一个定义该class的classloader，来创建一个<strong>加强版的代理类</strong>，拥有其所有方法和构造器$Proxy0</p><p>需要注意的这种方法创建的代理类只能通过传入InvocationHandler实例来构造，没有无参方法。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> birdProxyClass <span class="token operator">=</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">getProxyClass</span><span class="token punctuation">(</span><span class="token class-name">BirdAbility</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BirdAbility</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>birdProxyClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// $Proxy0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> constructor <span class="token operator">:</span> birdProxyClass<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span><span class="token function">toGenericString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//public com.sun.proxy.$Proxy0(java.lang.reflect.InvocationHandler)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> declaredMethod <span class="token operator">:</span> birdProxyClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> declaredField <span class="token operator">:</span> birdProxyClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/v2-2b77f72c33aa99d2b3ddf112ef269368_r.jpg" alt="preview"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/v2-3979759089c5226bf8997b141109632d_r.jpg" alt="静态代理"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/v2-ccdc245db98539305abc7ffef9da46b5_720w.jpg" alt="动态代理"></p><p>而$Proxy0类是动态生成的，如何保留并查看这个类的class？<br>在IDEA Run And Debug Configuration中添加一下VM Option即可<code>-Djdk.proxy.ProxyGenerator.saveGeneratedFiles=true</code></p><p>可以看这里，Proxy0实现了规定的接口并且继承Proxy类，基本所有的方法都插入了h.invoke，这里的h属性即是InvocationHandler，通过传入自定义的InvocationHandler实现类来执行invoke方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">InvocationHandler</span> h<span class="token punctuation">;</span>            <span class="token keyword">protected</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>h <span class="token operator">=</span> h<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $<span class="token class-name">Proxy0</span> <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">BirdAbility</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m0<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m2<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m3<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m4<span class="token punctuation">;</span>    <span class="token keyword">public</span> $<span class="token class-name">Proxy0</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> param1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m0<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m1<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>var1<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 无参情况</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 有参情况</span>   <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>var1<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            m0 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"BirdAbility"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m4 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"BirdAbility"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"fly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>var3<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="note note-primary">            <p><strong>getProxyClass Deprecated</strong></p><blockquote><p>Proxy classes generated in a named module are encapsulatedand not accessible to code outside its module.{@link Constructor#newInstance(Object…) Constructor.newInstance}will throw {@code  IllegalAccessException} when it is called on an inaccessible proxy class.</p></blockquote><p>也就是在调用getProxyClass时可能会抛出IllegalAccessException异常，而newProxyInstance则不会，以后可改用该方法</p>          </div><h3 id="InvocationHandler">InvocationHandler</h3><p>InvocationHandler本身是一个接口</p><h4 id="Invoke">Invoke</h4><p>从上匿名定义的 InvocationHandler实验可知，每次通过Proxy创建的代理类调用方法时，都会进入到invoke方法中，invoke能辨认当前代理对象、方法名、参数列表，并且返回值直接返回到方法中</p><p>目前为止，理一下思路：<br>Proxy创建动态代理类$Proxy➡️ Proxy对每个方法会执行InvocationHandler的Invoke方法➡️ 具体怎么实现由Invoke方法规定</p><p>那么如何将具体业务类与代理类进行一个关联呢？主要是传入当前代理类的Proxy</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Object</span> proxy <span class="token operator">=</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"invocation start -- method "</span> <span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"invocation end -- method "</span> <span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> result<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><h2 id="源码">源码</h2><blockquote><p>JDK源码版本：corretto-15.0.2</p></blockquote><p>就以上述代码为例，分析一下newProxyInstance干了什么事？长篇源码警告 ⚠️<br>猜测：动态加载了Proxy动态生成的代理类，有了代理类在JVM中，那之后new一个实例都不是事，所以问题都落在了<strong>如何动态地将一个接口加载成其代理的动态类</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CallerSensitive</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span>                                      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>                                      <span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> caller <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Look up or generate the designated proxy class and its constructor.</span>    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cons <span class="token operator">=</span> <span class="token function">getProxyConstructor</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> cons<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>这里经过调试，发现类的加载操作在getProxyConstructor这一步中（当然注释也写出来了…）</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getProxyConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> caller<span class="token punctuation">,</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// optimization for single interface</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> intf <span class="token operator">=</span> interfaces<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>caller <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">checkProxyAccess</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> intf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> proxyCache<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>intf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>                loader<span class="token punctuation">,</span>                <span class="token punctuation">(</span>ld<span class="token punctuation">,</span> clv<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">ProxyBuilder</span><span class="token punctuation">(</span>ld<span class="token punctuation">,</span> clv<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// interfaces cloned</span>            <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> intfsArray <span class="token operator">=</span> interfaces<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>caller <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">checkProxyAccess</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> intfsArray<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> intfs <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>intfsArray<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> proxyCache<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>intfs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>                loader<span class="token punctuation">,</span>                <span class="token punctuation">(</span>ld<span class="token punctuation">,</span> clv<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">ProxyBuilder</span><span class="token punctuation">(</span>ld<span class="token punctuation">,</span> clv<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>判断接口数目，如果接口数目为1，那就直接取其Class，检查一下代理权限，为什么要检查呢？注释中有写</p><blockquote><p>To define a proxy class, it performs the access checks as in Class.forName (VM will invoke ClassLoader.checkPackageAccess):</p><ol><li>“getClassLoader” permission check if loader == null</li><li>checkPackageAccess on the interfaces it implements</li></ol><p>If an interface is non-public, the proxy class must be defined by the defining loader of the interface.  If the caller’s class loader is not the same as the defining loader of the interface, the VM will throw IllegalAccessError when the generated proxy class is being defined.</p></blockquote><p>也就是如果一个接口不是公有的，那这个代理类必须必须被定义接口的加载器定义，如果caller的class与定义接口的加载器不一致，则就会抛出异常（暂不清楚这里caller的作用）</p><p>检查一下如果不为1的话就要使用interfaces.clone()，尚不清楚为什么要用clone</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> proxyClass <span class="token operator">=</span> <span class="token function">defineProxyClass</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cons<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        cons <span class="token operator">=</span> proxyClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>constructorParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cons<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre></div><p>关键的build方法加载Class的代码一眼可知 defineProxyClass</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">defineProxyClass</span><span class="token punctuation">(</span><span class="token class-name">Module</span> m<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//.....</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyPkg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// all proxy interfaces are public</span>        proxyPkg <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">isNamed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> PROXY_PACKAGE_PREFIX <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token operator">:</span> PROXY_PACKAGE_PREFIX<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyPkg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">.</span><span class="token function">isNamed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                <span class="token string">"Unnamed package cannot be added to "</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> num <span class="token operator">=</span> nextUniqueNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> proxyName <span class="token operator">=</span> proxyPkg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">?</span> proxyClassNamePrefix <span class="token operator">+</span> num                            <span class="token operator">:</span> proxyPkg <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> proxyClassNamePrefix <span class="token operator">+</span> num<span class="token punctuation">;</span>    <span class="token class-name">ClassLoader</span> loader <span class="token operator">=</span> <span class="token function">getLoader</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">trace</span><span class="token punctuation">(</span>proxyName<span class="token punctuation">,</span> m<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Generate the specified proxy class.</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> proxyClassFile <span class="token operator">=</span> <span class="token class-name">ProxyGenerator</span><span class="token punctuation">.</span><span class="token function">generateProxyClass</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> proxyName<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> accessFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> pc <span class="token operator">=</span> JLA<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> proxyName<span class="token punctuation">,</span> proxyClassFile<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"__dynamic_proxy__"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reverseProxyCache<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassFormatError</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>proxyPkg和num拼接起我们最终看到的包名proxyName <code>com.sun.proxy.$Proxy0</code> ，这里统计proxy的数量的num用了Atomic原子类，为什么用这个类呢?利用自旋锁CAS来保证线程安全。<br>最主要的加载步骤来了，ProxyGenerator.generateProxyClass，其居然是直接加载！也就是通过运行时转换二进制的byte[]数组表示的class字节码</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateProxyClass</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span>                                 <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                                 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> interfaces<span class="token punctuation">,</span>                                 <span class="token keyword">int</span> accessFlags<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ProxyGenerator</span> gen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyGenerator</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> name<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> accessFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classFile <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">generateClassFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>saveGeneratedFiles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">int</span> i <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">Path</span> path<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token class-name">Path</span> dir <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token function">dotToSlash</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createDirectories</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>                                path <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> classFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>                                    <span class="token string">"I/O exception saving generated file: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> classFile<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>通过ProxyGenerator去创建class字节码文件</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateClassFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token function">addProxyMethod</span><span class="token punctuation">(</span>hashCodeMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addProxyMethod</span><span class="token punctuation">(</span>equalsMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addProxyMethod</span><span class="token punctuation">(</span>toStringMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> intf <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> m <span class="token operator">:</span> intf<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">addProxyMethod</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> intf<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProxyMethod</span><span class="token punctuation">></span></span> sigmethods <span class="token operator">:</span> proxyMethods<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">checkReturnTypes</span><span class="token punctuation">(</span>sigmethods<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">generateConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span>        <span class="token keyword">return</span> <span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>generateClassFile 指明了为什么Proxy生成的代理类会有hashCode 、 equals 和 toString方法，因为在生成的时候就已经静态地加上了，然后这里遍历每一个接口，对接口中不是静态方法的方法进行添加，最终toByteArray()整合字节码数据，返回到上一步方法中，会根据是否有存入到本地的设置来选择是否写入到disk。<br>回到Proxy中</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> pc <span class="token operator">=</span> JLA<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> proxyName<span class="token punctuation">,</span> proxyClassFile<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"__dynamic_proxy__"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>途经System类中转，最终进入到会进入到ClassLoader类，进到native方法（也部分证明是从JVM层所提供的特性）</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">defineClass1</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span>                                        <span class="token class-name">ProtectionDomain</span> pd<span class="token punctuation">,</span> <span class="token class-name">String</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>总结一下，Load Class In JVM的流程图</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220616000455155.png" alt="Load Class In JVM"></p><h2 id="总结">总结</h2><p>了解了JDK为接口提供的方便的代理操作，了解了如何动态加载代理类，对部分源码还存有疑惑，待经验技术再积累积累再回头看看。这部分源码涉及的注释比较详细，再次阅读时还要借助到注释</p><div class="note note-info">            <p>参考文章🔗</p><p><a href="https://zhuanlan.zhihu.com/p/62534874">知乎-浅谈JDK动态代理（上）</a><br><a href="https://zhuanlan.zhihu.com/p/62660956">知乎-浅谈JDK动态代理（中）</a></p>          </div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译JDK源码并调试Native方法</title>
    <link href="/2022/06/15/%E7%BC%96%E8%AF%91JDK%E6%BA%90%E7%A0%81%E5%B9%B6%E8%B0%83%E8%AF%95Native%E6%96%B9%E6%B3%95/"/>
    <url>/2022/06/15/%E7%BC%96%E8%AF%91JDK%E6%BA%90%E7%A0%81%E5%B9%B6%E8%B0%83%E8%AF%95Native%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>编译JDK源码并调试Native方法</h1><blockquote><p>在学习反射的过程中核心方法Native反射的invoke0方法是Native的，还想多研究一下C层的代码，于是开始捣鼓如何调试JDK源码中Native方法。</p><p>概要：编译自己的JDK源码、通过Clion与IDEA调试Native方法</p></blockquote><h2 id="编译JDK源码">编译JDK源码</h2><div class="note note-info">            <p>个人环境<br>Linux: 5.10.121-1-MANJARO<br>gcc/g++: 12.1.0<br>Java:<br>java version “1.7.0_80”<br>Java™ SE Runtime Environment (build 1.7.0_80-b15)<br>Java HotSpot™ Server VM (build 24.80-b11, mixed mode)</p>          </div><h3 id="准备-v2">准备</h3><h4 id="下载JDK源码">下载JDK源码</h4><p>注意是要下载JDK SourceCode 而非是DevelopmentKit 之类的<br>由于JDK8版本的编译在我的Manjaro上屡次出错（这里之后会提到），我将待编译的JDK版本暂时提升到15，先编译高版本的。这里下载 <a href="http://hg.openjdk.java.net/jdk/jdk15/">OpenJDK 15</a></p><div class="note note-info">            <p>当然这里还有另外一种方式，通过Mercurial的hg clone下载，不过更有效的是针对老版本的JDK8之类的，先hg clone 指定的JDK版本，再sh get_source.sh去获取指定的内容</p>          </div><h4 id="环境配置">环境配置</h4><p>由于AUR中已经有比较全面的编译工具base-devel，所以这里只需要再安装一个ccache即可</p><h3 id="编译-v3">编译</h3><div class="code-wrapper"><pre class="language-sh" data-language="sh"><code class="language-sh">sh configure --disable-warnings-as-errors --enable-debug --with-jvm-variants&#x3D;server --with-boot-jdk&#x3D;&#x2F;home&#x2F;pplong&#x2F;.jdks&#x2F;corretto-15.0.2</code></pre></div><p>成功后再make images或make all</p><div class="code-wrapper"><pre class="language-sh" data-language="sh"><code class="language-sh">make images</code></pre></div><p>即可得到源码</p><h3 id="错误">错误</h3><p>编译JDK8时不论是什么版本一直会出现这样的报错，我猜应该是gcc和g++的版本过高导致warning被当成error对待，但是换成gcc 7时也不能成功编译，出现同样的错误，不知道是哪里依赖缺失？</p><div class="code-wrapper"><pre class="language-sh" data-language="sh"><code class="language-sh">## Starting langtoolsCompiling 2 files for BUILD_TOOLS&#x2F;opt&#x2F;SourceCode&#x2F;jdk8u60&#x2F;langtools&#x2F;src&#x2F;share&#x2F;classes&#x2F;com&#x2F;sun&#x2F;tools&#x2F;javac&#x2F;parser&#x2F;JavacParser.java:310: 错误: 找不到符号        return tk.accepts(S.token(lookahead + 1).kind);                                                ^  符号:   变量 kind  位置: 类 Token&#x2F;opt&#x2F;SourceCode&#x2F;jdk8u60&#x2F;langtools&#x2F;src&#x2F;share&#x2F;classes&#x2F;com&#x2F;sun&#x2F;tools&#x2F;javac&#x2F;parser&#x2F;JavacParser.java:318: 错误: 找不到符号        return tk1.accepts(S.token(lookahead + 1).kind) &amp;&amp;                                                 ^  符号:   变量 kind  位置: 类 Token&#x2F;opt&#x2F;SourceCode&#x2F;jdk8u60&#x2F;langtools&#x2F;src&#x2F;share&#x2F;classes&#x2F;com&#x2F;sun&#x2F;tools&#x2F;javac&#x2F;parser&#x2F;JavacParser.java:319: 错误: 找不到符号</code></pre></div><p>这个问题以后还有待解决</p><h3 id="安装-v2">安装</h3><p>在IDEA ProjectStucture中进行如下设置，添加编译好的JDK，注意路径</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220615121115012.png" alt="image-20220615121115012"></p><p>不过这个时候无法查看和修改源码，需要在设置中切换源码目录，删除掉原有的SourcePath并且添加该源码主目录下src文件夹</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220615121346567.png" alt="image-20220615121346567"></p><p><strong>快速编译</strong></p><p>在IDEA中修改源码文件后，重新在源码主目录中进行<code>make images</code>(因为不是全量编译了，只编译更改的部分，所以很快)，再次运行项目便能实现源码的更改</p><h2 id="调试">调试</h2><h3 id="前置">前置</h3><p>项目的JDK必须与Clion中打开的源码目录相同</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Obj</span><span class="token punctuation">></span></span> objClass <span class="token operator">=</span> <span class="token class-name">Obj</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">Obj</span> obj <span class="token operator">=</span> objClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> go <span class="token operator">=</span> objClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"go"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        go<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// break point</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220615121839779.png" alt="源码断点"></p><p>在native方法invoke0中断点，并且相应的在Clion中对应的方法断点</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220615122322598.png" alt="image-20220615122322598"></p><h3 id="开始-v2">开始</h3><p>需要调试Java项目到对应的断点，然后项目目录内命令行 <code>jps</code>查看对应的进程，找到类名与当前断点类相同的进程（若是源码类，可能出现unknown）</p><p><strong>在Clion项目下<code>Ctrl + alt + 5</code> attach to process，将Clion依附到正在执行的进程中</strong>，这一步可能会报错，ptrace permissioin not permitted之类的，需要<code>echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope</code>设置一下ptrace_scope</p><p>然后再在Java项目中深入断点，这样便成功进入到C层的项目中并且可以进行断点调试。</p><blockquote><p>📖 参考文章</p><p>🔗 <a href="https://www.bilibili.com/video/BV1zT4y177Zf?spm_id_from=333.337.search-card.all.click&amp;vd_source=54e58923618f5f75efa9edc84b0400b0">Biliblii - CodeSheep - JDK都没手动编译过，敢说自己是Java程序员吗？实战编译Java源码（JDK源码,JVM）视频教程</a><br>🔗 <a href="https://www.youtube.com/watch?v=8Cjeq4l5COU">Youtube - recipeNoD002 - Debugging JNI code with IntelliJ/CLion</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射原理探究</title>
    <link href="/2022/06/14/Java%E5%8F%8D%E5%B0%84%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/"/>
    <url>/2022/06/14/Java%E5%8F%8D%E5%B0%84%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h1>Java反射原理探究</h1><blockquote><p>为什么要写这篇文章？基于Spring的学习我需要对Java的反射和注解机制有一个全面的认知，并且注解中有许多关系也牵扯到反射的原理，所以先学好反射才能学习注解等内容</p></blockquote><p>Reflection is a feature in the Java programming language. It allows an executing Java program to examine or “introspect” upon itself, and manipulate internal properties of the program. For example, it’s possible for a Java class to obtain the names of all its members and display them.<br>这句释义来自Oracle对Java反射的解释，即允许Java程序在运行时获取自身的信息并且可以操作类或者对象的内部属性。</p><p>反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。一开始并不知道要初始化的类对象，无法使用new关键字来创建对象。</p><p>Java 反射主要提供以下功能：</p><ul><li>在运行时判断任意一个对象所属的类；</li><li>在运行时构造任意一个类的对象；</li><li>在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；</li><li>在运行时调用任意一个对象的方法</li></ul><p><strong>反射重要的用途就是  开发各种框架</strong></p><h2 id="基础-v2">基础</h2><h3 id="Class">Class</h3><p><strong>Class是反射的基础</strong></p><p><strong>6种情况下必须立即对类进行初始化（主动引用）</strong></p><h2 id="使用-v2">使用</h2><p><strong>获取反射中Class对象</strong></p><ol><li><p>通过包名直接获取</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span></code></pre></div></li><li><p>使用class字面量（用于在编译前就知道的类）</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></code></pre></div></li><li><p>使用类<strong>对象</strong>的getClass()方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clazz <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></li></ol><p><strong>对Class对象的属性进行操作</strong></p><p>getDeclared… ： 获取包括私有属性(方法)在内的所有属性(方法)</p><blockquote><p>参考文章：</p><p><a href="https://www.sczyh30.com/posts/Java/java-reflection-1/">深入解析Java反射(1)</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java注解探究</title>
    <link href="/2022/06/14/Java%E6%B3%A8%E8%A7%A3%E6%8E%A2%E7%A9%B6/"/>
    <url>/2022/06/14/Java%E6%B3%A8%E8%A7%A3%E6%8E%A2%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h1>Java注解探究</h1><div class="note note-info">            <p>为什么学习？以前只是初步了解注解的概念，但实际应用场景寥寥无几。因为最近才开始深入的学习Spring，希望从底层弄懂其原理，当然作为Spring一定会用到的关键的注解，例如@Autowired之类的，要弄清其原理则肯定首先要弄懂Java的注解机制，因此才有了本文</p><p>关于本文你可能需要提前了解：📖 <a href="http://www.pplong.top/2022/06/14/Java%E5%8F%8D%E5%B0%84%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/">Java的反射</a>、📖 <a href="http://www.pplong.top/2022/06/15/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/">JDK动态代理机制</a><br>关于本文包含的内容：注解的概念、注解的结构、自定义注解、注解字节码层面和Java层面探究</p>          </div><h2 id="介绍-v2">介绍</h2><p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。</p><p>Java 语言中的<strong>类、方法、变量、参数和包</strong>等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。</p><p><strong>注解主要被反射所读取并进行配置</strong><br>❔ 为什么？因为反射是JVM所提供的特性，能读取内存中字节码的信息</p><p><strong>内置的注解</strong></p><p>Java 定义了一套注解，共有 7 个，3 个在 java.lang 中，剩下 4 个在 java.lang.annotation 中。</p><p><strong>作用在代码的注解是</strong></p><ul><li>@Override - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li><li>@Deprecated - 标记过时方法。如果使用该方法，会报编译警告。</li><li>@SuppressWarnings - 指示编译器去忽略注解中声明的警告。</li></ul><p>作用在其他注解的注解(或者说 元注解)是:</p><ul><li>@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</li><li>@Documented - 标记这些注解是否包含在用户文档中。</li><li>@Target - 标记这个注解应该是哪种 Java 成员。</li><li>@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</li></ul><p>从 Java 7 开始，额外添加了 3 个注解:</p><ul><li>@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li><li>@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。</li><li>@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次</li></ul><h2 id="基本结构">基本结构</h2><h3 id="规定">规定</h3><p><strong>注解可涵盖的数据类型</strong></p><ul><li>八种基本数据类型</li><li>String</li><li>枚举</li><li>Class</li><li>注解类型</li><li>以上类型的一维数组，数组的赋值用{}声明（只有一个元素时{}可省略）</li></ul><p>如果使用其他类型的对象，则会报错<br><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220616105156419.png" alt="image-20220616105156419"></p><p>若注解中只有<strong>一个</strong>方法<strong>value()</strong>，则注解时可以直接不加方法名称说明，@Hello(“myname”)即可</p><h3 id="结构">结构</h3><p><strong>注解的本质是一个继承了Annotation接口的接口</strong></p><div class="note note-primary">            <p>基础回顾： Interface中的方法默认都是public abstract的，且属性默认是static的</p>          </div><p><strong>Annotation</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Annotation</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Returns the annotation type of this annotation.     * @return the annotation type of this annotation     */</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">></span></span> <span class="token function">annotationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><strong>ElementType</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ElementType</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** Class, interface (including annotation type), or enum declaration */</span>    TYPE<span class="token punctuation">,</span>    <span class="token comment">/** Field declaration (includes enum constants) */</span>    FIELD<span class="token punctuation">,</span>    <span class="token comment">/** Method declaration */</span>    METHOD<span class="token punctuation">,</span>    <span class="token comment">/** Formal parameter declaration */</span>    PARAMETER<span class="token punctuation">,</span>    <span class="token comment">/** Constructor declaration */</span>    CONSTRUCTOR<span class="token punctuation">,</span>    <span class="token comment">/** Local variable declaration */</span>    LOCAL_VARIABLE<span class="token punctuation">,</span>    <span class="token comment">/** Annotation type declaration */</span>    ANNOTATION_TYPE<span class="token punctuation">,</span>    <span class="token comment">/** Package declaration */</span>    PACKAGE<span class="token punctuation">,</span>    <span class="token comment">/**     * Type parameter declaration     *     * @since 1.8     */</span>    TYPE_PARAMETER<span class="token punctuation">,</span>    <span class="token comment">/**     * Use of a type     *     * @since 1.8     */</span>    TYPE_USE<span class="token punctuation">&#125;</span></code></pre></div><p><strong>RetentionPolicy</strong></p><ul><li>Source: 仅在源码中使用，不会生成在Class文件中，JVM也检测不到</li><li>Class: 在Class文件中生成（能在Class文件中看到该注解的标注），但JVM中检测不到（在加载字节码文件进入内存中时便会筛去）</li><li>Runtime：JVM检测的出 =&gt; <strong>能够通过getAnnotation(…)来检测该注解</strong></li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Annotation retention policy.  The constants of this enumerated type * describe the various policies for retaining annotations.  They are used * in conjunction with the &#123;@link Retention&#125; meta-annotation type to specify * how long annotations are to be retained. * * @author  Joshua Bloch * @since 1.5 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RetentionPolicy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Annotations are to be discarded by the compiler.     */</span>    SOURCE<span class="token punctuation">,</span>    <span class="token comment">/**     * Annotations are to be recorded in the class file by the compiler     * but need not be retained by the VM at run time.  This is the default     * behavior.     */</span>    CLASS<span class="token punctuation">,</span>    <span class="token comment">/**     * Annotations are to be recorded in the class file by the compiler and     * retained by the VM at run time, so they may be read reflectively.     *     * @see java.lang.reflect.AnnotatedElement     */</span>    RUNTIME<span class="token punctuation">&#125;</span></code></pre></div><p>一个Annotation与一个RetentionPolicy关联，并且与1-n个ElementType关联；ElementType来指定Annotation的类型，指明Annotation的用途；RetentionPolicy指定Annotation的作用域，三种作用域的作用在上述注解中均已说明。</p><h2 id="实验-v2">实验</h2><h3 id="使用-v3">使用</h3><p>getAnnotation指定的注解来获取指定的注解类型，可直接调用该<strong>注解对象</strong>下的方法，进而获取其中的数据</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"123"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"zyl"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Hello</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"hhh"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Obj</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// .....</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Obj</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Obj</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">Hello</span> annotations <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotations<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h2 id="探究">探究</h2><h3 id="字节码层">字节码层</h3><p>定义一个简单的注解，然后通过javap -c -v 反编译其class文件</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">Classfile &#x2F;opt&#x2F;JavaProjects&#x2F;AnnotationStudy&#x2F;target&#x2F;classes&#x2F;Hello.class  Last modified 2022-6-14; size 442 bytes  MD5 checksum 4db04dd07931cec8b63bb2890dd0ad0d  Compiled from &quot;Hello.java&quot;public interface Hello extends java.lang.annotation.Annotation  minor version: 0  major version: 52  flags: ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT, ACC_ANNOTATIONConstant pool:   #1 &#x3D; Class              #18            &#x2F;&#x2F; Hello   #2 &#x3D; Class              #19            &#x2F;&#x2F; java&#x2F;lang&#x2F;Object   #3 &#x3D; Class              #20            &#x2F;&#x2F; java&#x2F;lang&#x2F;annotation&#x2F;Annotation   #4 &#x3D; Utf8               value   #5 &#x3D; Utf8               ()Ljava&#x2F;lang&#x2F;String;   #6 &#x3D; Utf8               AnnotationDefault   #7 &#x3D; Utf8               123   #8 &#x3D; Utf8               SourceFile   #9 &#x3D; Utf8               Hello.java  #10 &#x3D; Utf8               RuntimeVisibleAnnotations  #11 &#x3D; Utf8               Ljava&#x2F;lang&#x2F;annotation&#x2F;Target;  #12 &#x3D; Utf8               Ljava&#x2F;lang&#x2F;annotation&#x2F;ElementType;  #13 &#x3D; Utf8               FIELD  #14 &#x3D; Utf8               METHOD  #15 &#x3D; Utf8               Ljava&#x2F;lang&#x2F;annotation&#x2F;Retention;  #16 &#x3D; Utf8               Ljava&#x2F;lang&#x2F;annotation&#x2F;RetentionPolicy;  #17 &#x3D; Utf8               RUNTIME  #18 &#x3D; Utf8               Hello  #19 &#x3D; Utf8               java&#x2F;lang&#x2F;Object  #20 &#x3D; Utf8               java&#x2F;lang&#x2F;annotation&#x2F;Annotation&#123;  public abstract java.lang.String value();    descriptor: ()Ljava&#x2F;lang&#x2F;String;    flags: ACC_PUBLIC, ACC_ABSTRACT    AnnotationDefault:      default_value: s#7 &#125;SourceFile: &quot;Hello.java&quot;RuntimeVisibleAnnotations:  0: #11(#4&#x3D;[e#12.#13,e#12.#14])  1: #15(#4&#x3D;e#16.#17)</code></pre></div><p>可以看到，本质上注解是继承于Annotation接口的，也就是注释本质上是一种接口，自定义的方法变成了抽象的方法，并带有特殊的AnnotationDefault说明。</p><p>那提到了接口，而注解又涉及到反射，那自然想到了JDK的动态加载，于是在VMOptions里开一下<code>-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true</code>显示一下Proxy加载的class文件，果然看到其被JDK动态加载</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220616111005419.png" alt="image-20220616111005419">而</p><p>预先加载了Retention的注解，因为Hello的注解中有使用到Retention注解（那为啥没有Target？）</p><h3 id="源码层面">源码层面</h3><blockquote><p>JDK 版本： 1.8.0_312</p></blockquote><p>经过调试发现，途经一系列调用，最终进行Proxy.newProxyInstance，并且传入的是一个AnnotationInvocationHandler，type表示一个该注解Class对象（interface）,memberValues表明<strong>使用该注解的对象</strong>下注解的方法与对应的值，本质是一个LinkedHashMap，存储方法名与对应的Object值</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Annotation</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token class-name">Annotation</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>                    type<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> type <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">AnnotationInvocationHandler</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> memberValues<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>定位到AnnotationInvocationHandler的invoke方法，查看生成的这个代理类是如何进行方法调用的。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> member <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Handle Object and Annotation methods</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>member<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> paramTypes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>            paramTypes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">equalsImpl</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>paramTypes<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Too many parameters for an annotation method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">"toString"</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token function">toStringImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"hashCode"</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token function">hashCodeImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"annotationType"</span><span class="token operator">:</span>            <span class="token keyword">return</span> type<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Handle annotation member accessors</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> memberValues<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IncompleteAnnotationException</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">ExceptionProxy</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ExceptionProxy</span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            result <span class="token operator">=</span> <span class="token function">cloneArray</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>即代理类在调用方法时对自定义的方法，会通过Map memberValues去取之前存有的注解中的值。而注解中设置的值<strong>并不直接在生成的$Proxy类中</strong>，而是通过构造该类时传入的AnnotationInvocationHandler中的Map&lt;String, Object&gt; memberValues来管理，在每次invoke时去get对应的值</p><h2 id="总结-v2">总结</h2><p>注解是一种帮助快速开发的手段，通过主要Java反射来检测和执行，依赖JDK动态代理的机制。</p><div class="note note-info">            <p>参考文章： 📖  <a href="https://zhuanlan.zhihu.com/p/60966151">知乎-注解(上)</a>     📖 <a href="https://www.runoob.com/w3cnote/java-annotation.html">Java注解（Annotation） </a> 📖 <a href="https://www.runoob.com/w3cnote/java-annotation.html">RUNOOB-Java 注解</a></p>          </div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring一知半解</title>
    <link href="/2022/06/14/Spring%E4%B8%80%E7%9F%A5%E5%8D%8A%E8%A7%A3/"/>
    <url>/2022/06/14/Spring%E4%B8%80%E7%9F%A5%E5%8D%8A%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1>Spring一知半解</h1><blockquote><p>Spring的重要性不言而喻，但之前一直听别人的实践课，照猫画虎地做且从来没做笔记，导致自己学完后忘了很多，并且没有理解。但对Spring的结构和原理的探索是必须的、且是不可避免的，不如就从现在开始！</p><p>当前所学习的Spring Framework版本： 5.2.20-RELEASE</p><p>本文所涵盖的内容：Spring基本概念、Spring Framework介绍、Spring基本使用<br>建议阅读时搭配 📖 <a href="">Spring源码探究这篇文章</a>食用，效果更佳</p></blockquote><h2 id="介绍-v3">介绍</h2><h3 id="AOP">AOP</h3><blockquote><p>🔗  <a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">Wiki – AOP</a></p><p><strong>面向切面的程序设计</strong>（Aspect-oriented programming，AOP，又译作<strong>面向方面的程序设计</strong>、<strong>剖面导向程序设计</strong>），是<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6">计算机科学</a>中的一种<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B">程序设计思想</a>，旨在将<a href="https://zh.wikipedia.org/wiki/%E6%A8%AA%E5%88%87%E5%85%B3%E6%B3%A8%E7%82%B9">横切关注点</a>与业务主体进行进一步分离，以提高程序代码的<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B">模块化</a>程度。通过在现有代码基础上增加额外的通知（Advice）机制，能够对被声明为“切点（Pointcut）”的代码块进行统一管理与装饰，比如说：“对所有方法名以<code>set*</code>开头的方法添加后台日志”。该思想使得开发人员能够将与代码核心业务逻辑关系不那么密切的功能（如日志功能）添加至程序中，同时又不降低业务代码的可读性。</p></blockquote><p><strong>为什么会有AOP出现</strong></p><p>考虑一个在OOP下的应用场景，例如一个业务方法 <code>updateUserMoney()</code>中，除了本身的业务代码外，还可能涵盖安全检查、日志检查、事务处理</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUserMoney</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">securityCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Transaction</span> tx <span class="token operator">=</span> <span class="token function">startTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 核心业务逻辑</span>            tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"created book: "</span> <span class="token operator">+</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>这就让一个本来普通的方法就挤了很多很多的额外附加的内容，增大了不必要的开发量，即便用了代理模式，一样会造成重复的代码和过多的接口</p><p>那不如把安全、日志、事务等这些与实际业务不太相关但有必须的内容抽象成不同的切面(PointCut)，以一种自动化的方式把切面<strong>织入</strong>（Weave）进核心逻辑中。类似invoke，在<code>updateUserMoney</code>方法调用时，先对方法进行<strong>拦截</strong>，在方法前后执行这些不同切面的内容处理，这样便能达到既不破坏原有核心业务方法的内容又能可修改地进行功能增加。</p><p><strong>理解一下AOP中的概念</strong></p><ul><li>Aspect(切面): 类似Java中的类声明，例如用@Aspect定义一个切面</li><li>Join Point(连接点): 在应用执行中能插入切面的一个点(是一个整体的概念，每个应用有多个位置适合织入，都是连接点，但只有我们选择的具体位置是切入点)</li><li>Advice(通知): 在切面中某个连接点采取的动作，有四种不同的通知方式: around/before/after/exception/return</li><li>Pointcut(切入点): 通知所要织入的具体位置</li><li>Introduction(介绍): 为原有的对象增加新的属性和方法</li><li>Target Object(代理对象): 由一个或多个切面代理的对象</li><li>AOP Proxy(AOP代理): AOP框架创建的对象. Spring中主要有两种：<strong>JDK动态代理</strong>和<strong>CGLIB代理</strong></li><li>Weaving(织入): 在Java平台上，对于AOP的织入，有3种方式：<ul><li>编译期：<strong>在编译时，由编译器把切面调用编译进字节码</strong>，这种方式需要<strong>定义新的关键字并扩展编译器</strong>，AspectJ就扩展了Java编译器，使用关键字aspect来实现织入；</li><li>类加载器：在目标类被装载到JVM时，通过一个特殊的类加载器，对目标类的字节码重新“增强”；</li><li>运行期：目标对象和切面都是普通Java类，通过<strong>JVM的动态代理功能</strong>或者第三方库实现运行期动态织入。是最简单的方式，S<strong>pring的AOP实现就是基于JVM的动态代理</strong></li></ul></li></ul><p>Spring下AOP的执行顺序(有待验证):</p><ul><li>无异常: Surrond前 -&gt; Before -&gt; MethodExecute() -&gt; AfterReturning -&gt; After -&gt; Around后</li><li>异常: Surrond前 -&gt; Before -&gt; MethodExecute() -&gt; AfterThrowing -&gt; After</li></ul><h3 id="IOC">IOC</h3><p><strong>IoC - Inversion of Control - 控制反转</strong></p><p>为什么会有IoC出现？考虑一下场景：</p><p>JDBC时代，在不同的<code>Dao</code>层，需要获取数据库连接获得dataSource进而才能对数据库进行操作，那么有许多个Dao对象去获取DataSource实例，可能的形式像这样：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">DataSourceConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSource</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span></code></pre></div><p>但是其实DataSource大可以不用new啊，因为其实同样的Config拿到的是一样的DataSource对象。new解决的问题便是，如果一个类完不成的任务，就在这个类中委托给另一个类来执行，那这种<strong>委托</strong> 或者说这种<strong>协调</strong>关系靠什么来处理呢？在IoC时代之前，便是由new关键字来进行，但这种方式造成了组件之间的耦合。而IoC便将这种委托关系从组件内部的new …的方式提升到<strong>外部容器</strong>来管理，容器在运行期间将组件间的依赖关系动态地注入进组件中</p><p><strong>理解为什么new会造成耦合</strong></p><p>如下代码，如果RabbitToy发生了变化（构造函数、实现方法、参数、属性等），那RabbitToy所影响的所有类都需要做出变化，因为这些变化实际上是写死在代码中的，这就造成了类之间的耦合。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Toy</span> toy<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        toy <span class="token operator">=</span> <span class="token class-name">RabbitToy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>如果在类A的内部去实例化类B，那么两者之间会出现较高的<strong>耦合</strong>，一旦类B出现了问题，类A也需要进行改造，如果这样的情况较多，每个类之间都有很多依赖，那么就会出现牵一发而动全身的情况，<strong>程序会极难维护</strong>，并且很容易出现问题。要解决这个问题，就要<strong>把A类对B类的控制权</strong>抽离出来，交给一个第三方去做，把控制权反转给第三方，就称作<strong>控制反转（IOC Inversion Of Control）</strong>。</p><p><strong>理解Spring的控制反转： 对Spring来说 Spring负责控制了对象的生命周期和对象间的关系，所有的类都在Spring中登记，需要提前告知Spring你是什么东西，你需要什么东西，然后Spring会在运行过程中，当你需要时会把你需要的东西主动给你。类的创建和销毁都有Spring来决定，<strong>控制对象生命周期的不再是引用它的对象，而是Spring IoC Container</strong>，这就达到了</strong>控制反转**的效果。</p><p>那Spring是如何动态的把一个类所需要的对象给它呢？ <strong>DI 依赖注入</strong></p><h4 id="DI">DI</h4><p>Dependency Injection : 依赖注入</p><p>现在A类依赖B类，并不在A类中直接new 对象B，而是通过配置在外部文件中，B类的实例不在代码中创建，而是外部通过构造函数传入</p><p>依赖注入的技术基础是<strong>多态机制</strong>与<strong>反射机制</strong>。</p><div class="note note-warning">            <p><strong>思考</strong>： 那我通过构造器搭配new的方式能否解决解耦的问题？仅创建到Son类时传入一个特定的Father的子类对象，效果不是和DI是一样的吗？</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Father</span> father<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token class-name">Father</span> father<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>father <span class="token operator">=</span> father<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div>          </div><p>上面提到的问题也能解耦，但是还是需要在代码内部new 或者找到一个所需的Father对象来配置，但通过外置文件配置就不需要在代码中写出。<strong>通过接口、构造函数、setter方法都是依赖注入可行的方式</strong></p><p><strong>总结一下</strong> ：控制反转是一种<strong>思想</strong>，是能够解决问题的一种可能的结果，而依赖注入（Dependency Injection）就是其最典型的<strong>实现方法</strong>。由第三方（<strong>我们称作IoC容器</strong>）来控制依赖，把他通过<strong>构造函数、属性或者工厂模式</strong>等方法，注入到类A内，这样就极大程度的对类A和类B进行了<strong>解耦</strong>。</p><h3 id="Spring">Spring</h3><p>通常我们说Spring，往往指的是Spring全家桶，Spring框架分为多个模块，应用项目可以根据需要选择</p><blockquote><p>At the heart are the modules of the core container, including a configuration model and a dependency injection mechanism.</p></blockquote><p><strong>核心容器的模块是核心Core，包括配置模型和依赖项注入机制</strong>。并且Spring 框架为不同的应用程序体系结构提供了基础支持，包括消息传递，事务性数据和持久性以及 Web。它还包括基于 Servlet 的 Spring MVC Web 框架，以及并行的 Spring WebFlux 反应式 Web 框架。</p><h2 id="Core-v2">Core</h2><h3 id="IoC">IoC</h3><h4 id="Introduce">Introduce</h4><blockquote><p>The <code>org.springframework.beans</code> and <code>org.springframework.context</code> packages are the basis for Spring Framework’s IoC container.</p></blockquote><p>BeanFactory 接口提供了一种高级的配置机制，能够管理任何类型的对象（提供配置框架和基本功能）；ApplicationContext是BeanFactory的子接口，它增加了企业特定功能：</p><ul><li>与 Spring 的 AOP 功能轻松集成</li><li>消息资源处理(用于国际化)</li><li>Event publication</li><li>特定于应用程序层的上下文，例如用于 Web 应用程序的<code>WebApplicationContext</code>。</li></ul><p><strong>Spring中的bean</strong></p><blockquote><p>In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called <strong>beans</strong>. A <strong>bean</strong> is an object that is instantiated, assembled, and managed <strong>by a Spring IoC container</strong>. Otherwise, a bean is simply one of many objects in your application. Beans, and the dependencies among them, are reflected in the configuration metadata used by a container.</p></blockquote><p>构成应用程序主干并由Spring IoC容器管理的对象称为bean，bean由容器实例化、组装和管理。bean及其之间的依赖关系反应在容器使用的配置元数据中</p><h4 id="Container">Container</h4><p><code>org.springframework.context.ApplicationContext</code>接口代表Sping IoC容器并且负责bean的初始化、配置和装配。容器通过读取元数据来获取有关要实例化、配置和组装哪些对象的指令。<strong>配置元数据以XML、Java注解或Java代码表示</strong></p><p>而Spring提供了ApplicationContext接口的集中实现，创建ClassPathXml…和FileSystemXml…的实例均可</p><p><img src="https://docs.spring.io/spring-framework/docs/current/reference/html/images/container-magic.png" alt="The Spring IoC container"></p><p>Spring IoC使用一种配置元数据的形式，表示开发者如何告诉Spring容器实例化、配置并组装对象。传统上还是用XML来进行配置，还可以用其他形式的元数据信息：</p><ul><li><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-annotation-config">Annotation-based configuration</a>：Spring 2.5 引入了对基于注解的配置元数据的支持。</li><li><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-java">Java-based configuration</a>：从 Spring 3.0 开始，Spring JavaConfig 项目提供的许多功能成为了核心 Spring Framework 的一部分。因此，您可以使用 Java 而不是 XML 文件来定义应用程序类外部的 bean。要使用这些新功能，请参见<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html">@Configuration</a>，<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html">@Bean</a>，<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Import.html">@Import</a>和<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/DependsOn.html">@DependsOn</a>注解。</li></ul><p>Spring配置包含至少一个容器必须管理的bean的定义。基于 XML 的配置元数据将这些 bean 配置为顶级<code>&lt;beans/&gt;</code>元素内的<code>&lt;bean/&gt;</code>元素。 Java 配置通常在<code>@Configuration</code>类中使用<code>@Bean</code>注解的方法。</p><p>这些bean定义对应于组成应用程序的实际对象，通常，定义数据访问对象（DAO）、基础结构对象（例如Hibernate中的SessioniFactories）等</p><p>📝 <a href="#demo-application-bean-01">Demo-01： 通过ClassPathXml来定义ApplicationContext进而定义bean的实例</a></p><h4 id="Bean-v2">Bean</h4><p>Bean通过配置的xml文件，由Spring IoC Container创建，在容器本身内这些bean被表示为BeanDefinition对象，包含以下元数据：</p><ul><li>包限定的类名：通常，定义了 Bean 的实际实现类。</li><li>Bean 行为配置元素，用于声明 Bean 在容器中的行为(作用域，生命周期回调等)。</li><li>引用其他 bean 进行其工作所需的 bean。这些引用也称为协作者或依赖项。</li><li>要在新创建的对象中设置的其他配置设置，例如，池的大小限制或在 Management 连接池的 bean 中使用的连接数</li></ul><p>该元数据转换为构成每个 bean 定义的一组属性。下表描述了这些属性（具体地表现在BeanDefinition源码中）：</p><table><thead><tr><th style="text-align:left">Property</th><th style="text-align:left">Explained in…</th></tr></thead><tbody><tr><td style="text-align:left">Class</td><td style="text-align:left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-class">Instantiating Beans</a></td></tr><tr><td style="text-align:left">Name</td><td style="text-align:left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-beanname">Naming Beans</a></td></tr><tr><td style="text-align:left">Scope</td><td style="text-align:left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes">Bean Scopes</a></td></tr><tr><td style="text-align:left">Constructor arguments</td><td style="text-align:left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators">Dependency Injection</a></td></tr><tr><td style="text-align:left">Properties</td><td style="text-align:left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators">Dependency Injection</a></td></tr><tr><td style="text-align:left">Autowiring mode</td><td style="text-align:left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-autowire">Autowiring Collaborators</a></td></tr><tr><td style="text-align:left">Lazy initialization mode</td><td style="text-align:left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-lazy-init">Lazy-initialized Beans</a></td></tr><tr><td style="text-align:left">Initialization method</td><td style="text-align:left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-lifecycle-initializingbean">Initialization Callbacks</a></td></tr><tr><td style="text-align:left">Destruction method</td><td style="text-align:left"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-lifecycle-disposablebean">Destruction Callbacks</a></td></tr></tbody></table><p><a href="">BeanDefinition源码探究</a></p><p><strong>Bean的命名</strong></p><p>每个bean有一个或者多个标识符，在承载bean的容器内标识符必须唯一，配置多个标识符，可以在XML中通过<code>name=&quot;a, b, c&quot;</code>来配置，context.getBean()即可通过id又可通过name来查找。bean的命名一般是驼峰式</p><p>通过<code>&lt;alias/&gt;</code>来定义别名（对id和name均生效），适配大型系统中每个子系统自己的对象定义集</p><p><strong>Bean的实例化</strong></p><p>当被需要时，Container将查看命名bean的配方recipe，并使用该bean定义封装的配置元数据来创建实际对象。</p><ul><li>通过构造方法实例化。当通过构造方法创建一个 bean 时，所有普通类都可以被 Spring 使用并与之兼容。</li><li>使用静态工厂方法实例化。定义使用静态工厂方法创建的 bean 时，请使用<code>class</code>属性来指定包含<code>static</code>工厂方法的类，并使用名为<code>factory-method</code>的属性来指定工厂方法本身的名称。</li><li>使用实例工厂方法实例化（以上两个方法均不太清楚，源于对工厂方法的理解不清楚）</li></ul><h4 id="Dependency">Dependency</h4><h5 id="DI-v2">DI</h5><blockquote><p>Dependency injection (DI) is a process whereby objects define their dependencies (that is, the other objects with which they work) only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method. The container then injects those dependencies when it creates the bean.</p></blockquote><p>依赖注入(DI)是一个过程，通过该过程，对象只能通过构造函数参数，工厂方法的参数或在构造或创建对象实例后在对象实例上设置的属性来定义其依赖关系(即，与它们一起工作的其他对象)。从工厂方法返回。然后，容器在创建 bean 时注入那些依赖项。</p><p>DI存在的两个变体：<strong>基于构造函数的注入</strong>和<strong>基于Setter的依赖注入</strong></p><ul><li><p>基于构造函数的注入</p><ul><li><p>如果主要使用构造函数注入，则可能会创建无法解决的循环依赖方案。</p><p>例如：A 类通过构造函数注入需要 B 类的实例，而 B 类通过构造函数注入需要 A 类的实例。如果为将类 A 和 B 相互注入而配置了 bean，则 Spring IoC 容器会在运行时检测到此循环引用，并抛出<code>BeanCurrentlyInCreationException</code>。</p></li></ul></li><li><p>基于Setter的依赖注入</p><ul><li>通过@Required()在对应Setter方法上可指定对应的属性为必要配置依赖项</li><li>set注入能解决以上问题，配置循环依赖关系</li></ul></li></ul><h5 id="配置Bean">配置Bean</h5><p><strong>构造器配置</strong></p><p><strong>属性配置</strong></p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></div><p>xml中通过<code>value</code>声明<strong>字符串</strong>表示的对象来指定特定name属性的值</p><p>也可以通过p-namespace或c-namespace进行更简洁的XML配置，将在标签体中的配置转化为在标签内进行，例如</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"myDataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.apache.commons.dbcp.BasicDataSource"</span>        destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"close"</span>        p<span class="token operator">:</span>driverClassName<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span>        p<span class="token operator">:</span>url<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/mydb"</span>        p<span class="token operator">:</span>username<span class="token operator">=</span><span class="token string">"root"</span>        p<span class="token operator">:</span>password<span class="token operator">=</span><span class="token string">"masterkaoli"</span><span class="token operator">/</span><span class="token operator">></span></code></pre></div><p><strong>1. 使用 idref：</strong><code>idref</code>元素只是将容器中另一个 bean 的<code>id</code>(<strong>字符串值</strong>-不是引用)传递给<code>&lt;constructor-arg/&gt;</code>或<code>&lt;property/&gt;</code>元素的一种防错方法。</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theTargetBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theClientBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>targetName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>idref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theTargetBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- equals: &lt;property name="targetName" value="theTargetBean"/> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></div><p>第一种形式优于第二种形式，因为使用<code>idref</code>标签可以使容器在部署时验证所引用的命名 Bean 实际上是否存在。在第二个变体中，不对传递给<code>client</code> bean 的<code>targetName</code>属性的值执行验证。仅在实际实例化<code>client</code> bean 时才发现拼写错误(极有可能导致致命的结果)。</p><p>**2. 使用parent： **通过<code>parent</code>属性指定目标 bean 将创建对当前容器的父容器中的 bean 的引用。 <code>parent</code>属性的值可以与目标 Bean 的<code>id</code>属性或目标 Bean 的<code>name</code>属性中的值相同。<strong>目标 Bean 必须位于当前容器的父容器中</strong>。</p><p>也可以在bean中嵌套bean，此时则不需要定义ID或name，内部bean始终是匿名的，并且与外部bean一起创建</p><p><strong>3. 在bean中配置集合</strong></p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>moreComplexObject<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.ComplexObject<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- results in a setAdminEmails(java.util.Properties) call --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adminEmails<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>administrator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[emailprotected]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>support<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[emailprotected]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[emailprotected]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- results in a setSomeList(java.util.List) call --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>a list element followed by a reference<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- results in a setSomeMap(java.util.Map) call --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>an entry<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>just some string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a ref<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- results in a setSomeSet(java.util.Set) call --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someSet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>just some string<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></div><p>需要注意的是，props是map的简化版，用来只存储字符串型的键值对</p><p>并且Spring还支持在配置文件层的集合合并，通过父子bean来进行操作 参考 <a href="#sucession-of-bean">bean的继承</a></p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token attr-name">abstract</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.ComplexObject<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adminEmails<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>administrator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[emailprotected]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>support<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[emailprotected]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adminEmails<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- the merge is specified on the child collection definition --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span> <span class="token attr-name">merge</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sales<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[emailprotected]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>support<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[emailprotected]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span></code></pre></div><p><strong>4. 使用<code>&lt;null/&gt;</code></strong></p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- equal: obj.setEmail(null); --></span></code></pre></div><p><strong>5. 使用复合属性名称</strong></p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>something<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>things.ThingOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fred.bob.sammy<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></div><p><code>something</code> bean 具有<code>fred</code>属性，该属性具有<code>bob</code>属性，该属性具有<code>sammy</code>属性，并且最终的<code>sammy</code>属性被设置为<code>123</code>的值。为了使它起作用，在构造 bean 之后，<code>something</code>的<code>fred</code>属性和<code>fred</code>的<code>bob</code>属性一定不能为<code>null</code>。否则，将抛出<code>NullPointerException</code>。</p><h5 id="初始化bean">初始化bean</h5><p>若一个bean是另一个bean的依赖项，使用<code>ref</code>能够满足大多数场景。但有时bean间的依赖性不太直接(何时需要触发类中的静态初始值设定项，例如用于数据库驱动程序注册)，使用<code>depends-on</code>能在初始化使用该元素时强制地初始化一个或者多个bean</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanOne<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ExampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager, ceo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ManagerBean<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></div><p><strong>懒初始化bean</strong></p><p>默认情况下，ApplicationContext会急于创建和配置所有的 singleton bean。可使用<code>lazy-init</code>属性来控制。但如果该bean是未延迟初始化的bean的依赖项时，AppContext也会创建这个bean，因为其依赖关系必须被满足。</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.something.ExpensiveToCreateBean<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>not.lazy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.something.AnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></div><h5 id="方法注入">方法注入</h5><h4 id="bean-scope">bean scope</h4><p>bean的作用域  <code>scrop=xxx</code></p><table><thead><tr><th>Scope</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-scopes-singleton">singleton</a></td><td>(默认)将每个 Spring IoC 容器的单个 bean 定义范围限定为单个对象实例。</td></tr><tr><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-scopes-prototype">prototype</a></td><td>将单个 bean 定义的作用域限定为任意数量的对象实例。</td></tr><tr><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-scopes-request">request</a></td><td>将单个 bean 定义的范围限定为单个 HTTP 请求的生命周期。也就是说，每个 HTTP 请求都有一个在单个 bean 定义后面创建的 bean 实例。仅在可感知网络的 Spring <code>ApplicationContext</code>中有效。</td></tr><tr><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-scopes-session">session</a></td><td>将单个 bean 定义的范围限定为 HTTP <code>Session</code>的生命周期。仅在可感知网络的 Spring <code>ApplicationContext</code>上下文中有效。</td></tr><tr><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-scopes-application">application</a></td><td>将单个 bean 定义的范围限定为<code>ServletContext</code>的生命周期。仅在可感知网络的 Spring <code>ApplicationContext</code>上下文中有效。</td></tr><tr><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/web.html#websocket-stomp-websocket-scope">websocket</a></td><td>将单个 bean 定义的范围限定为<code>WebSocket</code>的生命周期。仅在可感知网络的 Spring <code>ApplicationContext</code>上下文中有效。</td></tr></tbody></table><ul><li>Singleton 单例对象 <em>(default)</em>: 一个实例对应所有匹配id的bean, 例如DAO层对象</li><li>Prototype 原型对象: 每次对bean提出请求时，都会创建一个新的bean实例 。Spring不管理 原型bean的完整声明周期，容器将实例化、配置或组装原型对象，然后将其交给Client端，无需对该原型实例进一步记录</li></ul><h4 id="customize-bean">customize bean</h4><h5 id="生命周期回调">生命周期回调</h5><p><strong>开始</strong></p><p>要与容器对 bean 生命周期的管理进行交互，可以实现 Spring <code>InitializingBean</code>和<code>DisposableBean</code>接口。容器对前者调用<code>afterPropertiesSet()</code>，对后者调用<code>destroy()</code>，以使 Bean 在初始化和销毁 Bean 时执行某些操作。例如判断XML注入的属性值是否为null，是否符合规范，否则抛出异常等…</p><p><code>org.springframework.beans.factory.InitializingBean</code>接口允许容器在容器上设置了所有必需的属性后，bean 可以执行初始化工作。但其不必要地将代码耦合到 Spring（不是很理解）。可以使用<code>init-method</code>属性指定具有无效无参数签名的方法的名称。通过 Java 配置，可以使用<code>@Bean</code>的<code>initMethod</code>属性。<code>init-method</code>方法的调用是在整个对象创建后（包括构造器生成和property注入）执行。可以直接在方法上使用@PostConstruct来指定（但自己试了好像没有效果）</p><p><strong>销毁</strong></p><p>实现<code>org.springframework.beans.factory.DisposableBean</code>接口后，当包含 bean 的容器被销毁时，bean 可以获取回调。同样也会造成耦合 。对应的xml配置为<code>destroy-method</code> ，Java @Bean可通过destroyMethod属性来设置</p><p>也可在顶层的bean上设置<code>default-init-method</code>或<code>default-destroy-method</code>来设置该bean下创建的所有bean的默认init和destroy方法，非常方便</p><p><strong>启动和关闭回调</strong></p><p><code>Lifecycle</code>接口为具有自己的生命周期要求(例如启动和停止某些后台进程)的任何对象定义基本方法。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>任何 SpringManagement 的对象都可以实现<code>Lifecycle</code>接口</p><p>不太懂 ⬆️</p><h5 id="bean感知Container">bean感知Container</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>可以叫做控制反转再反转，前面说过为解决一些IoC控制反转解决不了的问题，Spring也允许bean在运行时感知ApplicationContext。一种用途是通过编程方式检索其他 bean。有时，此功能很有用。但是，通常应避免使用它，因为它将代码耦合到 Spring，并且不遵循控制反转样式，在该样式中，将协作者作为属性提供给 bean。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanNameAware</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">setBeanName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>返回该bean对象定义的id或name，在填充常规 bean 属性之后但在初始化回调之前调用</p><p>除此之外还有其他更多的感知接口…</p><table><thead><tr><th>Name</th><th>Injected Dependency</th><th>Explained in…</th></tr></thead><tbody><tr><td><code>ApplicationContextAware</code></td><td>声明<code>ApplicationContext</code>。</td><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-aware">ApplicationContextAware 和 BeanNameAware</a></td></tr><tr><td><code>ApplicationEventPublisherAware</code></td><td>附件<code>ApplicationContext</code>的事件发布者。</td><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#context-introduction">ApplicationContext 的其他功能</a></td></tr><tr><td><code>BeanClassLoaderAware</code></td><td>类加载器，用于加载 Bean 类。</td><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-class">Instantiating Beans</a></td></tr><tr><td><code>BeanFactoryAware</code></td><td>声明<code>BeanFactory</code>。</td><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-aware">ApplicationContextAware 和 BeanNameAware</a></td></tr><tr><td><code>BeanNameAware</code></td><td>声明 bean 的名称。</td><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-factory-aware">ApplicationContextAware 和 BeanNameAware</a></td></tr><tr><td><code>BootstrapContextAware</code></td><td>运行容器的资源适配器<code>BootstrapContext</code>。通常仅在支持 JCA 的<code>ApplicationContext</code>实例中可用。</td><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/integration.html#cci">JCA CCI</a></td></tr><tr><td><code>LoadTimeWeaverAware</code></td><td>定义的编织器，用于在加载时处理类定义。</td><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#aop-aj-ltw">在 Spring Framework 中使用 AspectJ 进行加载时编织</a></td></tr><tr><td><code>MessageSourceAware</code></td><td>解决消息的已配置策略(支持参数化和国际化)。</td><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#context-introduction">ApplicationContext 的其他功能</a></td></tr><tr><td><code>NotificationPublisherAware</code></td><td>Spring JMX 通知发布者。</td><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/integration.html#jmx-notifications">Notifications</a></td></tr><tr><td><code>ResourceLoaderAware</code></td><td>配置的加载程序，用于对资源的低级别访问。</td><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#resources">Resources</a></td></tr><tr><td><code>ServletConfigAware</code></td><td>当前容器运行的<code>ServletConfig</code>。仅在可感知网络的 Spring <code>ApplicationContext</code>中有效。</td><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/web.html#mvc">Spring MVC</a></td></tr><tr><td><code>ServletContextAware</code></td><td>当前容器运行的<code>ServletContext</code>。仅在可感知网络的 Spring <code>ApplicationContext</code>中有效。</td><td><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/web.html#mvc">Spring MVC</a></td></tr></tbody></table><p>但是使用这些接口均会让代码与Spring API绑定在一起（也就是需要Srping API 的回调数据，而非是属于自己的方法），不遵循IoC样式</p><h4 id="Container-Extension">Container Extension</h4><p>通常，应用程序开发人员不需要将<code>ApplicationContext</code>实现类作为子类（什么意思？）。相反，可以通过插入特殊集成接口的实现来扩展 Spring IoC 容器。</p><h5 id="BeanPostProcessor自定义bean">BeanPostProcessor自定义bean</h5><blockquote><p><code>BeanPostProcessor</code> instances operate on bean (or object) instances. That is, the Spring IoC container instantiates a bean instance and then <code>BeanPostProcessor</code> instances do their work.</p></blockquote><p>Spring IoC容器实例化一个bean，然后BeanPostProcess实例完成其工作。什么工作？也即可在bean实例创建 调用init-method方法前后进行回调</p><p><code>ApplicationContext</code>自动检测实现<code>BeanPostProcessor</code>接口的配置元数据中定义的所有 bean。 <code>ApplicationContext</code>将这些 bean 注册为后处理器，以便以后在 bean 创建时可以调用它们。也可以使用<code>addBeanPostProcessor</code>通过<code>ConfigurableBeanFactory</code>以编程方式注册它们。</p><p>可以配置多个<code>BeanPostProcessor</code>实例，并且可以通过设置<code>order</code>属性来控制这些<code>BeanPostProcessor</code>实例的执行 Sequences。仅当<code>BeanPostProcessor</code>实现<code>Ordered</code>接口时，才可以设置此属性。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>直接通过<code>&lt;bean class=&quot;com.pplong.dao.InstancePostBeanProcessor&quot;/&gt;</code>插入到xml中即可实现BeanPostProcessor的注册</p><h5 id="BeanFactoryPostProcessor自定义配置元数据">BeanFactoryPostProcessor自定义配置元数据</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>与BeanPostProcessor略有不同，<code>BeanFactoryPostProcessor</code>对 Bean 配置元数据进行操作。也就是说，Spring IoC 容器允许<code>BeanFactoryPostProcessor</code>读取配置元数据，并可能<strong>在容器实例化<code>BeanFactoryPostProcessor</code>实例以外的任何 bean 之前</strong>*对其进行更改。</p><p><code>BeanFactoryPostProcessor</code>也支持通过Ordered接口来设置启动顺序</p><p><code>ApplicationContext</code>自动检测实现<code>BeanFactoryPostProcessor</code>接口的部署到其中的所有 bean。</p><p>其实现类包括PropertyPlaceholderConfigurer、PropertyOverrideConfigurer等</p><p><a id="sucession-of-bean"></a></p><p><strong>bean的继承</strong></p><p>bean之间也可以有继承的层次关系，结合parent关键字。让子bean继承并可重写父bean的属性</p><p>还可通过abstract指定该bean为抽象的，抽象的bean是不会加载实例的，不会通过getBean()得到实例。<strong>抽象bean主要作用是用来作为模板</strong>。声明抽象bean时可以不同指定其类，但需要在子bean中声明</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testObj<span class="token punctuation">"</span></span> <span class="token attr-name">abstract</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>nnn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>nnn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testObj<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.pplong.dao.TestObj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zyl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>nnn3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></div><h4 id="基于注解的容器配置">基于注解的容器配置</h4><p>通过其<a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html#beans-java">JavaConfig</a>选项，Spring 允许以非侵入方式使用 注解，而无需接触目标组件的源代码，使用<code>&lt;context:annotation-config/&gt;</code>配置在XML文件中</p><ul><li>@Required：必须显式地配置属性</li><li>@Autowired：<ul><li>应用于构造函数上</li><li>应用于“传统” setter 方法</li><li>应用于具有任意名称和多个参数的方法</li><li>应用于字段，甚至将其与构造函数混合使用</li></ul></li><li>@Primary：按类型自动布线可能会导致多个候选对象，因此通常有必要对选择过程进行更多控制。表示当多个 bean 可以自动连接到单值依赖项的候选对象时，应优先考虑特定的 bean。用于构造函数上</li><li>@Qualifier：将限定符值与特定的参数相关联，从而缩小类型匹配的范围，以便<strong>为每个参数选择特定的 bean</strong></li><li>@Resource：指定注入的bean的名称，若未指定则采用默认名</li><li>@PostConstruct 与 @PreDestroy</li></ul><h4 id="ClassPath扫描和托管组件">ClassPath扫描和托管组件</h4><p>通过扫描 Classpath 来隐式检测候选组件的选项。候选组件是与过滤条件匹配的类，并在容器中注册了相应的 Bean 定义。这消除了使用 XML 进行 bean 注册的需要。</p><p>Spring 提供了进一步的构造型 注解：<code>@Component</code>，<code>@Service</code>和<code>@Controller</code>。 <code>@Component</code>是任何 Spring管理组件的通用构造型。</p><p><strong>自动检测类并注册 Bean 定义</strong></p><p>向<code>ApplicationContext</code>注册相应的<code>BeanDefinition</code>实例，将<code>@ComponentScan</code>添加到<code>@Configuration</code>类中，其中<code>basePackages</code>属性是两个类的公共父包，Sping会自动扫描这些Component组件bean并进行注册</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"org.example"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span>  <span class="token punctuation">&#123;</span>   <span class="token comment">// ...</span><span class="token punctuation">&#125;</span></code></pre></div><p>也可以直接使用<code>  &lt;context:component-scan base-package=&quot;org.example&quot;/&gt;</code></p><p>默认情况下，唯一检测到的候选组件是用<code>@Component</code>，<code>@Repository</code>，<code>@Service</code>，<code>@Controller</code>注解 的类或本身用<code>@Component</code>注解 的定制 注解。可以通过应用自定义过滤器来修改和扩展此行为。将它们添加为<code>@ComponentScan</code>注解的<code>includeFilters</code>或<code>excludeFilters</code>参数(或<code>component-scan</code>元素的<code>include-filter</code>或<code>exclude-filter</code>子元素)。每个过滤器元素都需要<code>type</code>和<code>expression</code>属性</p><h1>使用</h1><h2 id="基础-v3">基础</h2><h3 id="配置bean">配置bean</h3><p><a id="demo-application-bean-01"></a></p><p><strong>通过ClassPathXml来定义ApplicationContext进而定义bean的实例</strong></p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- beans.xml --></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testObj<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.pplong.dao.TestObj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zyl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TestObj</span> testObj <span class="token operator">=</span>  context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"testObj"</span><span class="token punctuation">,</span> <span class="token class-name">TestObj</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>可以看到在Xml中能够配置指定class的bean并且通过构造器与属性能为其赋值，最终通过context.getBean(targetId)来获取指定id下的bean对象</p><p>也可以通过import将多个XML文件进行整合，但所有导入的路径都要相对于进行导入的定义文件</p><div class="note note-warning">            <p>⚠️ 可以但不建议使用相对的“ …/”路径引用父目录中的文件。这样做会创建对当前应用程序外部文件的依赖关系。特别是，不建议对<code>classpath:</code> URL(例如<code>classpath:../services.xml</code>)使用此引用，在 URL 中，运行时解析过程选择“最近”Classpath 根，然后查看其父目录。Classpath 配置的更改可能导致选择其他错误的目录。</p>          </div><p>也可以通过静态方法进行注入，不过需要通过<code>factory-method</code>声明静态方法名，并且静态方法的 参数由<code>&lt;constructor-arg/&gt;</code>指出</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createInstance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anotherExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yetAnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExampleBean</span> createInstance <span class="token punctuation">(</span>    <span class="token class-name">AnotherBean</span> anotherBean<span class="token punctuation">,</span> <span class="token class-name">YetAnotherBean</span> yetAnotherBean<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ExampleBean</span> eb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// some other operations...</span>    <span class="token keyword">return</span> eb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="note note-primary">            <p>🔗 参考文章:</p><ul><li>📖 <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/">Spring-Framework Reference</a></li><li>📖 <a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/core.html">Spring Framework 中文文档 </a></li><li>📖 <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">Wiki - Aspect-oriented programming</a></li><li>📖 <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1266265125480448">使用AOP- 廖雪峰的官方网站</a></li><li>📖 <a href="https://zhuanlan.zhihu.com/p/33492169">浅谈控制反转与依赖注入</a></li><li>📖 <a href="https://www.qikegu.com/docs/1541">理解依赖注入（DI – Dependency Injection）</a></li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSRF介绍</title>
    <link href="/2022/05/04/CSRF%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/05/04/CSRF%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1>CSRF介绍</h1><blockquote><p>看了CORS和SOP后还想继续了解一下Web安全的一些攻防，怕以后搭建后端的时候可能会有坑，这里先入个门</p></blockquote><h2 id="介绍">介绍</h2><p><strong>Cross-Site Request Forgery 跨站请求伪造</strong>，也可称为“One  Click Attack” 或者 “Session Riding”。通过伪装网站受信任的用户发送的请求来破坏数据</p><p><strong>引入</strong></p><p><strong>为什么会发生CSRF攻击？</strong> <strong>——浏览器的隐式认证</strong></p><p>一般网站不会直接通过无Cookie的GET请求来直接修改内部数据，这也是不推荐的做法。一般需要在网站用户登录后，在本地浏览器和服务器端分别存有有效Cookie和Session的情况下，请求携带Cookie才能通过认证，进而修改数据。<br>而在本地含有某域的Cookie的情况下，对该域的请求浏览器会自动携带Cookie（而Cookie具有不可跨域性，所以在不同域下的请求不会携带不同的Cookie）</p><p><strong>考虑一个场景：</strong></p><ul><li>我在网站A成功登录了自己的用户，未注销</li><li>在Cookie的有效期内，我在同一浏览器的另一个Tab页面内访问了另一个恶意网站</li><li>假设这个恶意网站通过script或者img的src发送POST或者GET请求，指向了网站A 更改用户数据的操作（因为浏览器隐式认证的功能，在Cookie存在时访问网站会自动携带上网站的Cookie）[从而使得网站A误以为是用户进行的操作]</li></ul><div class="note note-primary">            <p>由于携带了 Cookie，且发送了跨域的请求，服务器Access-Control-Allow-Origin没有设置为* ，那么一定会触发SOP，那么：</p><p><strong>SOP能限制CRSF攻击吗？</strong></p><p>不能，因为SOP只是拦截了服务器返回的相应，但发出的请求仍然是成功处理的（可以看响应码返回的是200），可以这样理解：SOP是对浏览器用户做了保护，但并没有为请求的对象做保护。（这里自己想了很久，以为SOP直接拦截了客户端发出的请求，后来实验才发现只是拦截了服务器返回的响应）</p>          </div><h2 id="实验">实验</h2><p>搭建一个简易的后台环境模拟服务器，通过存取Cookie来观察是否存在浏览器的隐式认证</p><blockquote><p>Utils : Tornado  Chrome</p></blockquote><p>思路：</p><ul><li>通过直接浏览器访问服务器一URL，处理GET请求，并在服务端为response塞入一个自定义Cookie</li><li>不清除该Cookie ，访问恶意网站，其中恶意网站的Script包含一个发送到服务器的POST请求</li><li>查看该请求是否携带前者的Cookie</li></ul><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MainHandler</span><span class="token punctuation">(</span>tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 处理GET请求, 添加Cookie</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">'zyl'</span><span class="token punctuation">,</span> <span class="token string">'zzzzz'</span><span class="token punctuation">)</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220504101749696.png" alt="模拟登录"></p><div class="code-wrapper"><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 服务端发送POST请求</span>    <span class="token keyword">var</span> xhr  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token string">"http://localhost:9002/post"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> postData <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">'name'</span><span class="token operator">:</span><span class="token string">'value'</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 重要, 使得发送的请求能够附带Cookie参数</span>    xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div><p>可以看到，由恶意页面发送的请求确实携带了目标网站的Cookie，这里需要区分一点的是：<strong>恶意网站本身并不知道服务器保存的正常网站的Cookie是什么</strong>，它只是利用了隐式认证的特点，通过浏览器发送了这个带有Cookie的请求。而服务端恰好又认为，既然你带了Cookie，那你肯定是受信任的，那我就允许这个操作，结果就会引发悲剧…</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220504101917870.png" alt="恶意页面中向服务端发送的POST请求"></p><div class="note note-warning">            <p><strong>一个超级超级超级小的坑</strong></p><p>怪自己对HTTP请求各种参数和XHR配置不熟悉，这里其实最开始使用的是img src的请求嵌入没有观察到浏览器有附带Cookie，然后使用XHR发送POST请求也没有观察到，其实是<strong>因为XHR没有配置withCredentials = true</strong>，导致请求本身没有携带Cookie，卡了很久…（因为自己一直在想，我服务端是不是出了什么问题才导致不能请求不携带Cookie？但其实服务端本身没有错，问题是在恶意网站，因为是恶意网站发出的请求，所以恶意网站会想尽办法让浏览器带上Cookie）</p><p>XHR的发送请求的Cookie携带问题解决了，但通过img的src请求还是不能验证带有Cookie，这里还存有疑惑❓</p>          </div><h2 id="如何防范">如何防范</h2><h3 id="Referrer验证">Referrer验证</h3><p>在请求体中加入Referrer的验证，判断是否是从指定的网站发送的请求，不过Referrer作为请求头可以更改，所以只能过滤一些低级的攻击</p><h3 id="验证码判断">验证码判断</h3><p>很多的网站在进行关键操作时都需要进行验证码判断，就是为了确保你做的操作一定是人工进行的而非机器请求，一是为了防止你过度请求，减少数据库压力，二是确保这个请求确实是你发出的（例如删除个人信息等），而非恶意网站发出</p><h3 id="Anti-CSRF-Token（常用）">Anti CSRF Token（常用）</h3><p>在许多请求体中，可能都会见到csrf-token类似这样的请求头。服务端在生成页面或者请求时会给一个Token，（在页面中放在Head处），并且在每次重新时都不一样，发送请求时会发送这个Token，在服务器过滤器中会验证这个Token，<strong>验证成功后就会销毁掉</strong></p><p>由于网页发送请求时会去找head meta中的csrf-token并装进请求头中，恶意网站去伪造请求时却获取不到这个值（无法进入页面去取head值，也不能预测到token的值），所以就能够成功的进行防御</p><p>未完…</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Web Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫案例整合</title>
    <link href="/2022/04/30/Python%E7%88%AC%E8%99%AB%E6%A1%88%E4%BE%8B%E6%95%B4%E5%90%88/"/>
    <url>/2022/04/30/Python%E7%88%AC%E8%99%AB%E6%A1%88%E4%BE%8B%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1>Python爬虫案例整合</h1><blockquote><p>整合一下自己写的一些爬虫案例，涉及一些常见的反爬机制和思路梳理</p></blockquote><p>Github仓库地址：<a href="https://github.com/PPLong222/PythonSpiderCases">PythonSpiderCases</a></p><h2 id="樱花动漫网站视频爬取">樱花动漫网站视频爬取</h2><p>(樱花动漫)[<a href="http://dmh8.com">http://dmh8.com</a>]</p><p><img src="/home/pplong/.config/Typora/typora-user-images/image-20220430230303132.png" alt="image-20220430230303132"></p><p>一直想做一个自动更新追番的题型，以及做一个简易的搜索爬取。</p><ul><li>Version 1：<ul><li>支持在本地输入名称查询，获取对应的名称列表，选择序号，并获取对应的URL，获取该番剧的集数并下载指定集数范围的视频，合并到一个文件夹中</li><li>支持对网页验证码的解析（API引入 ，存在使用次数限制）</li><li>支持对下载的m3u8视频进行AES-128解码</li></ul></li></ul><h3 id="分析">分析</h3><p><strong>类型</strong>：这是一种典型的<strong>带加密类型</strong>、二次索引、<strong>m3u8视频格式</strong>的在线视频网站，非常典型，许多国内许多的网站都用的这种格式。</p><h4 id="入手">入手</h4><p>可以学习的思路：爬虫分析时，先<strong>从内到外</strong>。即<strong>先爬取自己最想要的数据，然后再由内到外，扩展到不太需要的边缘模块</strong>。这里我最想要的就是获取视频的一集，所以我直接进入到视频播放页面看。</p><ol><li>老步骤，先看HTML是否有video src，当然肯定不会有的，发现则是通过js动态加载的。又看XHR请求，发现是很多的ts文件请求和两个主要的m3u8请求<img src="/home/pplong/.config/Typora/typora-user-images/image-20220430232928248.png" alt="image-20220430232928248">，一个m3u8引出主要的m3u8地址，而这个主要的m3u8文件则是真正的视频m3u8文件，指示所有ts请求，所以要溯源找到最主要的m3u8文件请求的地址</li><li>然后查看Chrome加载后带Script的HTML，发现其实video标签嵌入了一层<strong>iframe</strong>中，这也是一般同类型网站比较常用的加载方法</li><li>所以又返回在HTML源代码页面查看是否有iframe标签，这里其实发现了iframe标签但没找到具体的src指向。后来通过Chrome 调用栈调试才找到源头，其实iframe的src也是写死在了html中的，只是通过变量形式藏在了另一个script标签下。这里也是难找的点，即：我在前面引入了一个无关变量，通过后面的js代码去调用这个变量，溯源时就比较难找。<br>这里还有一个盲点，部分script代码直接写在了div中，而没有script标签包裹，估计可能会涉及到动态的取出标签并转换成代码（但有什么意义呢？）</li><li>正则表达式提取到这个url后，请求，并返回包含所有ts请求的m3u8文件，存到本地，然后对每个ts文件下载并存入到本地<ul><li>注意部分视频会对ts文件进行加密，要判断主要m3u8文件中是否包含Key的url，如果有则要提取key并对每个ts文件进行对应的解密，这里则是AES-128</li><li>对每个ts文件合并（顺序依照index.m3u8的指示顺序），比较神奇的是，居然可以直接 cat a b c … &gt; test.ts通过这种方式直接整合视频，但似乎一些播放器不支持ts文件的播放，目前可以播放的是mpv播放器👍</li></ul></li><li>优化：异步引入。因为对每一ts文件的请求和存入本地的操作可以是异步的（最后整合是都下载完成之后才整合）</li></ol><p>到这里，一集的视频的抓取就完成了，但缺点是必须提供对应番剧的对应集数的URL，所以下一步拓展应该是通过具体视频页面获取所有集数，并指示出对应集数的URL</p><div class="note note-warning">            <p><strong>坑点</strong>：需要注意一下，对一些情况或者一些其他网站，有时候会存在对某一ts请求未响应的情况，最开始考虑是代理的问题，后来一段时间后又没问题。又考虑是服务器端的主动拉黑，但觉得不太可能，可能还是网络波动的问题，如果不太放心还是可以设置在总请求数每达到多少时sleep一下</p>          </div><h4 id="集数">集数</h4><p>到这一步需要提供的url就从具体视频某一集到具体视频介绍页面的url，并提供可选择的下载参数（例如下载的开始集数和结束集数）。</p><p>做法还是比较简单，因为可得的内容都写死在html中，所以直接通过正则表达式去取就行了。不过吓人的是，有些集数有1000多集，则网页中就直接塞了1000多个block，离谱</p><h4 id="搜索">搜索</h4><p>搜索应该是比较技巧的一部分，也涉及到很多网站的验证机制，在首次不带Cookie或Cookie过期的请求下是，搜索会弹出验证码输入框，这里我的解决方案是Selenium + Cookie</p><p>为什么不继续使用相对较快request获取页面并再次获取验证码的图片再去识别呢？因为这里网站用的是动态图片的机制，带一个random参数 例如 <a href="http://www.dmh8.com/index.php/verify/index.html?r=0.21647202821721345%EF%BC%8C%E6%AF%8F%E6%AC%A1%E8%AF%B7%E6%B1%82%E7%9A%84%E5%9B%BE%E7%89%87%E9%83%BD%E4%B8%8D%E4%B8%80%E8%87%B4%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E6%88%91%E8%8E%B7%E5%8F%96%E5%88%B0%E4%BA%86%E9%A1%B5%E9%9D%A2%E5%9B%BE%E7%89%87%E7%9A%84url%EF%BC%8C%E4%BD%86%E6%98%AF%E5%86%8D%E6%AC%A1%E8%AF%B7%E6%B1%82%E6%98%AF%E5%8D%B4%E5%8F%91%E7%8E%B0%E6%98%AF%E5%8F%A6%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%88%E5%8F%AF%E8%83%BD%E8%B7%9FTimeStamp%E6%9C%89%E5%85%B3%E7%B3%BB%EF%BC%89%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E4%B8%8D%E8%A1%8C%EF%BC%8C%E6%89%80%E4%BB%A5%E6%88%91%E9%80%89%E6%8B%A9%E6%98%AFSelenium+%E6%88%AA%E5%9B%BE%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%BF%9D%E5%AD%98%E5%BD%93%E5%89%8DCookie%E5%88%B0%E6%9C%AC%E5%9C%B0%EF%BC%8C%E6%96%B9%E4%BE%BF%E4%B8%8B%E6%AC%A1%E4%BD%BF%E7%94%A8">http://www.dmh8.com/index.php/verify/index.html?r=0.21647202821721345，每次请求的图片都不一致，也就是我获取到了页面图片的url，但是再次请求是却发现是另一张图的请求（可能跟TimeStamp有关系），所以这种方式不行，所以我选择是Selenium+截图的方式，并且保存当前Cookie到本地，方便下次使用</a></p><ul><li><p>先发送一个预请求</p><ul><li>如果本地有Cookie，则携带Cookie去找<ul><li>如果没有显示验证码的block元素，那就通过。</li><li>如果显示了验证码的block，则证明Cookie过期，则Selenium发送请求</li></ul></li><li>如果本地无Cookie，则直接Selenium发送请求</li></ul></li><li><p>Selenium验证：</p><ul><li><p>创建一个driver，读取输入框并且写入要查的值并且回车，跳转到验证码页面后对页面进行截屏，然后获取到验证码在html的坐标和大小，对截图进行裁取，以获得验证码的图片，将图片以二进制形式交由第三方验证方API-- <em>超级鹰</em> 来做验证，将返回的数据填入input框中，并输入回车。保存cookie</p><p>注意这里一个坑点：</p><p>Selenium中get_cookies()得到的是标准的键值对形式，但在Chrome中其实Cookie是经过转化的</p><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>'domain'<span class="token operator">:</span> '.www.dmh8.com'<span class="token punctuation">,</span> 'httpOnly'<span class="token operator">:</span> False<span class="token punctuation">,</span> 'name'<span class="token operator">:</span> 'Hm_lpvt_ea6972a9380e5a8a6607cc4c62409955'<span class="token punctuation">,</span> 'path'<span class="token operator">:</span> '/'<span class="token punctuation">,</span> 'secure'<span class="token operator">:</span> False<span class="token punctuation">,</span> 'value'<span class="token operator">:</span> '<span class="token number">1651335658</span>'<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>'domain'<span class="token operator">:</span> '.www.dmh8.com'<span class="token punctuation">,</span> 'expiry'<span class="token operator">:</span> <span class="token number">1682871658</span><span class="token punctuation">,</span> 'httpOnly'<span class="token operator">:</span> False<span class="token punctuation">,</span> 'name'<span class="token operator">:</span> 'Hm_lvt_ea6972a9380e5a8a6607cc4c62409955'<span class="token punctuation">,</span> 'path'<span class="token operator">:</span> '/'<span class="token punctuation">,</span> 'secure'<span class="token operator">:</span> False<span class="token punctuation">,</span> 'value'<span class="token operator">:</span> '<span class="token number">1651335658</span>'<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>'domain'<span class="token operator">:</span> 'www.dmh8.com'<span class="token punctuation">,</span> 'httpOnly'<span class="token operator">:</span> False<span class="token punctuation">,</span> 'name'<span class="token operator">:</span> 'PHPSESSID'<span class="token punctuation">,</span> 'path'<span class="token operator">:</span> '/'<span class="token punctuation">,</span> 'secure'<span class="token operator">:</span> False<span class="token punctuation">,</span> 'value'<span class="token operator">:</span> '550o7c1716kbh8gaqo8je29uo2'<span class="token punctuation">&#125;</span></code></pre></div><p><img src="/home/pplong/.config/Typora/typora-user-images/image-20220501002215451.png" alt="image-20220501002215451"></p><p>所以要将json转化为对应的字符串格式</p></li></ul></li><li><p>发送request请求：带上刚刚获得的Cookie去进行搜索request解析返回的HTML页面，将获得的结果和对应的url通过正则表达式提取，返回list形式。</p><ul><li>TODO：目前只支持一页的搜索结果（后期可以考虑做成全部搜索结果或者动态展示某一页的搜索结果）</li></ul></li><li><p>选择对应的url，则就直接由外到内回到第二步 然后再根据集数回到第一步就可以得到视频了</p></li></ul><h3 id="代码-v3">代码</h3><p>贴上异步下载的代码块，主要注意这里的异步下载方式（要异步，则发生耗时时都要异步）</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_download</span><span class="token punctuation">(</span>index_name<span class="token punctuation">,</span> dir_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""download ts files in index m3u8 file """</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>M3U8_INDEX<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>dir_name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>M3U8_INDEX<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>dir_name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>RAW_M3U8_DIR<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>dir_name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>RAW_M3U8_DIR<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>dir_name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>M3U8_INDEX<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>dir_name<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>index_name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">async</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token comment"># get the last name to storage</span>                name <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span><span class="token punctuation">(</span>download_single_m3u8file<span class="token punctuation">(</span>dir_name<span class="token punctuation">,</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>            <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">download_single_m3u8file</span><span class="token punctuation">(</span>dir_name<span class="token punctuation">,</span> url<span class="token punctuation">,</span> name<span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> resp<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>RAW_M3U8_DIR<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>dir_name<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start write file "</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>            <span class="token keyword">await</span> <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token keyword">await</span> resp<span class="token punctuation">.</span>content<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"successfully write file "</span> <span class="token operator">+</span> url<span class="token punctuation">)</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>什么是CORS</title>
    <link href="/2022/04/26/%E4%BB%80%E4%B9%88%E6%98%AFCORS/"/>
    <url>/2022/04/26/%E4%BB%80%E4%B9%88%E6%98%AFCORS/</url>
    
    <content type="html"><![CDATA[<h1>SOP与CORS</h1><h2 id="问题溯源">问题溯源</h2><p>为什么我会遇到这个问题呢？如果你也有类似的经历，那么接下来的内容就或许能够帮助你解决问题</p><p><strong>1. 通过服务器网页上的js脚本想在线获取leetcode的数据</strong></p><p>通过网页上的js脚本给leetcode发送请求，这个bug发现花了很长时间，因为在自己的Chrome上以前也发生过类似的CORS请求失败问题，当时没有深究，查了下 下载了Allow CORS这个插件，立马解决了问题。后来浏览器就一直保持Allow CORS打开的情况。<br>后来自己写<a href="https://www.npmjs.com/package/hexo-leetcode-calendar">hexo-leetcode-calendar</a>的js再次通过CORS去访问其他网站，但发现在手机上显示不出来画面和数据（但我自己的客户端上却没有问题）。（当时认为是Canvas在高清的手机屏上绘制存在冲突）又因为不会移动端Chrome调试，查了很久才定位到是网络请求出了问题，这才溯源突然发现CORS的问题，然后一切的一切的一切瞬间是那么豁然开朗，从最开始的网页CORS报错到无法访问Bilibili和YouTube的一些资源，再到现在的脚本绘制不显示，顿时就通了。脚本的主要问题就是 <strong>没抓$.get()的报错，导致啥错发生了在浏览器上都不知道</strong></p><p><strong>2. 无法访问bilibili和Youtube的部分资源</strong></p><p>如果你的Chrome突然无法搜索bilibili，又或者能够正常访问Youtube网页但无法正常观看Youtube视频，那你可能要检查一下你的Chrome插件了，之前一段时间内突然不能访问Bilibili了，不能登录也不能观看视频，Youtube也离奇报错，能够翻墙、正常搜索视频却不能观看。一直以为是代理哪儿设置错了（经典代理背锅）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220426173912299.png" alt="image-20220426173912299"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220426174053301.png" alt="image-20220426174053301"></p><p>写完这篇文章后我打开Allow-CORS 抓了下包，发现很多都是CORS error，可能原因是虽然你客户端是不启用CORS了，但我可能有一些脚本不会被Allow-CORS拦截而发送请求。</p><h2 id="介绍-v4">介绍</h2><p><strong>Cross-Origin Resource Sharing</strong>：一种允许当前域的资源被其他域的脚本请求访问的机制，通常由于<strong>同域安全策略(Same Origin Policy)</strong>，浏览器会禁止这种跨域请求的返回。<strong>（注意，只是过滤掉返回的请求，但实际上请求是成功发送给服务端的, 只是发回来的数据被浏览器扔掉了）</strong></p><p><strong>Domain 域</strong>（协议schema 主机host 端口号port）都必须一致的</p><p>什么又是<strong>同源策略</strong>？举个例子，比如在我的网站上有个js脚本，js脚本要通过get去获取另一个网站的数据并返回，最终在我的网站上显示，这就产生了跨域的请求。本来只是当前浏览器 &lt;—&gt; 我的网站 的双向响应，但由于js脚本发出的请求，就当前浏览器就要去往其他的服务器发送请求（<strong>注意，这里并不是网站的服务器去发送请求，而是访问的客户端去发送</strong>），这往往可能是不安全的，因为我可以根据Cookie去其他的网站上发送请求</p><h2 id="实验-v3">实验</h2><blockquote><p>工具：PyCharm 、Tonardo 、Wireshark、Chrome</p></blockquote><p>首先通过fetch去测试在当前域下去访问该域的一些资源，肯定是可行的。</p><h3 id="搭建简单的服务器">搭建简单的服务器</h3><p>我先通过基于python的tornado搭建了简易的服务器，监听9002端口并返回数据</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tornado<span class="token punctuation">.</span>ioloop<span class="token keyword">import</span> tornado<span class="token punctuation">.</span>web<span class="token keyword">class</span> <span class="token class-name">MainHandler</span><span class="token punctuation">(</span>tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">makeApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>Application<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">r"/"</span><span class="token punctuation">,</span> MainHandler<span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> makeApp<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">9002</span><span class="token punctuation">)</span>    tornado<span class="token punctuation">.</span>ioloop<span class="token punctuation">.</span>IOLoop<span class="token punctuation">.</span>current<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><h3 id="CORS访问">CORS访问</h3><p>我在网站的console上，调用fetch去获取不同域的数据，这里便出现了CORS的限制。“服务器没有返回可以进行跨域访问的说明”</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220426155024359.png" alt="image-20220426155024359"></p><p>所以这时候问题出在服务器，服务器对发出的resp需要添加CORS的说明响应头</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>set_header<span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"https://pplong.top"</span><span class="token punctuation">)</span></code></pre></div><p>此时浏览器便可以成功打印</p><div class="note note-info">            <p><strong>小坑</strong></p><p>这里还有个跟代理有关的坑点</p><p>最开始是用设置了Clash代理的Chrome去做fetch请求，但只返回了Promise对象而未返回数据，后来用未开启代理的Firefox去请求，则得到了正常的数据。未验证但估计跟proxy有关系，可能是数据返回给Proxy延时太久？</p>          </div><p>即<strong>Access-Control-Allow-Origin</strong>为服务器指明了从那些域来的跨域请求可以我可以接受</p><h3 id="Preflight">Preflight</h3><p>如果正如之前请求Leetcode API一样，如果加上一个Content Type ，那么一样会报错，这里就涉及到Preflight的知识了</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220426162442588.png" alt="image-20220426162442588"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220426164610722.png" alt="probably-mistake"></p><p>Preflight 一般指的就是OPTIONS请求，在浏览器认为即将要执行的请求可能会对服务器造成不可预知的影响时，会由浏览器自动发出，与服务器沟通是否能发送类似的请求。</p><h4 id="如何触发">如何触发</h4><p>刚刚的GET请求就没有触发Preflight，那具体什么时候会触发浏览器发送该请求呢？</p><ol><li>请求方法：POST GET HEAD</li><li>请求头： Accept<code> </code>Accept-Language<code> </code>Content-Language<code> </code>Content-Type<code> </code>DPR<code> </code>Downlink<code> </code>Save-Data<code> </code>Viewport-Width<code>  </code>Width</li><li><strong>Content-Type</strong>：text/plain<code> </code>multipart/form-data<code> </code>application/x-www-form-urlencoded</li><li>…</li></ol><p>不满足以上四种条件的都会触发浏览器的预检，所以我这里设置了Content-Type，则触发了预检，来看一下具体抓包的细节。</p><h4 id="抓包">抓包</h4><p>这里首先在浏览器内看到第一个包，类型是OPTIONS，把它想发的请求类型、想要运作的请求头都发了出去，并且说明了FetchMode是cors的，随后浏览器便返回一个 405的包，说明请求不被允许</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220426163732009.png" alt="image-20220426163732009"></p><p>通过服务器中options方法来进行对OPTIONS请求的处理，在tornado中，未经过预检的命令则不会通过OPTIONS，不会进入到对应的请求方法体中，所以要处理这个问题，应该要处理options函数。</p><p>回到前面的两个错误响应，首先第一张是因为我只为get请求设置了Allow-Origin，但这是一个预检的OPTIONS请求，而对应options请求的服务器响应没有设置，所以还需要为options设置跨域请求的域名白名单。</p><p>第二个错误响应是因为我们设置了可能造成影响的请求头（触发Preflight的根源），服务器没有允许设置了这个类型的请求头可以通过，所以还需要添加<strong>Access-Control-Allow-Headers</strong>，为这样的请求头放行</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"receive!"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>set_header<span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"http://www.pplong.top"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Hello World"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">options</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>set_header<span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"http://www.pplong.top"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>set_header<span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"Content-Type"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"trigger options"</span><span class="token punctuation">)</span></code></pre></div><p>客户端成功响应</p><h3 id="Max-Age">Max-Age</h3><p><strong>Access-Control-Max-Age</strong> 指明服务器在指定时间内不用为同一请求执行多次预检，没有在服务器中给客户端返回此值，则多次跨域请求 每次都会触发预检。<strong>这个值仅仅是告诉客户端，让他不用做预检处理，而服务端本身是没有什么操作的</strong></p><h4 id="一个诡计">一个诡计</h4><p>由于max-age是只存在浏览器内的，所以这就可能导致一个问题，考虑如下场景：</p><p>如果我的服务器最开始是允许某个网站跨域访问并且保持一定时间的max-age内不用预检，但运行一段时间后我反悔了，我在服务器端删去了这个请求头，那请问客户端在max-age内进行跨域访问还会触发预检吗？</p><p><strong>答案是否定的！</strong> 因为浏览器不会触发预检，所以也就无法进入处理到options方法，那就有可能让访问者对服务器通过危险的请求例如DELETE或PUT等来对数据进行修改，这就造成了隐患！</p><p>这里我也进行了实验，先打开服务器端的max-age，让浏览器请求数据并保存max-age，然后服务器删去max-age请求头，让客户端再次请求，可以发现，客户端未发送OPTIONS包而直接发送了POST包。</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220426172021100.png" alt="image-20220426172021100"></p><p>（即使改变的服务器的数据，一样能成功请求并返回200的响应码）</p><p>如果后端人员突然变更该请求头，那么就可能导致安全问题，虽然具体到应用层面，后端设置可能更为复杂，可能有自己的判断标志，但常规来讲这样做可能导致风险。（给自己提个醒🤕, 防止日后出大问题 ）</p><h2 id="深入">深入</h2><h3 id="CORS会造成哪些问题？">CORS会造成哪些问题？</h3><p><strong>信息泄露</strong></p><p>比如你刚在网站上登录了账户，浏览器保存了cookie，如果这时候你访问另一个恶意网站，那么如果没有同源策略则你的浏览器内的账户cookie可能就会被获取</p><h3 id="如何绕过CORS？">如何绕过CORS？</h3><h4 id="JSONP">JSONP</h4><p><strong>从script标签的可跨域性入手，且默认是javascript类型执行的</strong></p><p>由于script src可跨域获取，所以通过在src中往js请求塞入参数，这个参数是之前script定义的方法 + 参数值来进行，服务端通过取这些参数和值，直接包装成一个函数返回。也就是说我根本可以没有js函数，js请求只是个幌子，因为html5中默认的script类型是text/javascript，所以只要返回来的是与html script关联的<strong>正确的函数代码</strong>，那就可以执行</p><div class="code-wrapper"><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3200</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/getData'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 注意Function.prototype很重要，指定是函数类型（原理还没搞清楚）</span>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> callback <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Person'</span><span class="token punctuation">,</span>    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">'男'</span>  <span class="token punctuation">&#125;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>callback<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// value == jsonpCallback(&#123;"name":"张三","message":"Person","sex":"男"&#125;)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发送成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></div><div class="code-wrapper"><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">HTML</span>内自定义的函数体 <span class="token operator">--</span><span class="token operator">></span><span class="token keyword">function</span> <span class="token function">jsonpCallback</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"123123"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://127.0.0.1:3200/getData?callback=jsonpCallback<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220426200501038.png" alt="image-20220426200501038"></p><p>成功打印，但JSONP有缺陷，通过url的方式，只能实现get请求，其他请求就不能执行了，所以范围还是比较局限。因此也就有了CORS</p><h4 id="CORS">CORS</h4><p>本文所介绍到的</p><h2 id="回顾">回顾</h2><p>回顾前面的问题，尝试先清空缓存后开启Allow-CORS，然后进行未被允许的CORS请求，发现响应码200并返回正常数据，随后进行抓包发现，只发送了一个GET请求，即浏览器自身直接忽略了预检这一步骤。</p><p>Bilibili CORS Error中，基本上都是js脚本触发的CORS Error，说明可能js脚本中一些xhr类函数的执行没有被Allow-CORS捕获并重新设置，进入到错误js中调试后发现引发了我们都已熟悉了的这个问题</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220426175608360.png" alt="image-20220426175608360"></p><h2 id="总结-v15">总结</h2><p>好了，一句话，<s><strong>罪魁祸首：Allow-CORS全锅！</strong></s> 😆</p><p>其实还是一个前后端通信一个比较经典的问题，相信实战的时候肯定还会遇到此类问题，到时候应该还会有新的心得</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为你的Hexo博客添加LeetCode日历</title>
    <link href="/2022/04/25/%E4%B8%BA%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0LeetCode%E6%97%A5%E5%8E%86/"/>
    <url>/2022/04/25/%E4%B8%BA%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0LeetCode%E6%97%A5%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1>为你的Hexo博客添加LeetCode日历</h1><div style="display: inline-block;">    <a target="_blank" href="https://hexo.io/"><img height="20" src="https://img.shields.io/badge/Build-Hexo-blue?logo=Hexo&style=flat&logoColor=3686F0&color=3686F0"></a><img height="20" src="https://img.shields.io/badge/Build-JavaScript-blue?logo=javascript&style=flat&logoColor=e1ea3d&color=f0a835"><a target="_blank" href="https://www.npmjs.com/package/hexo-leetcode-calendar"><img height="20" src="https://img.shields.io/badge/Publish-npm-blue?logo=npm&style=flat&logoColor=e1ea3d&color=f01822"></a>    <a target="_blank" href="https://github.com/PPLong222/hexo-leetcode-calendar"><img height="20" src="https://img.shields.io/badge/Repo-Github-blue?logo=github&style=flat&logoColor=5fa1e7&color=5fa1e7"></a></div><h2 id="介绍-v6">介绍</h2><p><strong>hexo-leetcode-calendar</strong>可以让你在以hexo为驱动的博客页面展示leetcode用户的提交记录，包括近一年的提交记录，以及每一天对应的天数（动态显示），并能分题型难易程度显示已解决的问题数。（灵感源自<a href="">hexo-githubcalendar</a>）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220425194054775.png" alt="image-20220425194054775"></p><center><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/demostration.gif"></center><h2 id="安装">安装</h2><h3 id="快速上手">快速上手</h3><p>定位到hexo主目录下，并打开命令行，通过npm命令安装：</p><div class="code-wrapper"><pre class="language-sh" data-language="sh"><code class="language-sh">npm install hexo-leetcode-calendar --save</code></pre></div><p>安装完成后，可以在你博客的md文档任何位置插入以下内容</p><div class="code-wrapper"><pre class="language-markdown" data-language="markdown"><code class="language-markdown">&#123;% leetcode username %&#125;</code></pre></div><p>然后执行：hexo clean &amp;&amp; hexo g &amp;&amp; hexo s，你就可以在本地进行预览了</p><h3 id="自定义">自定义</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220425203816033.png" alt="image-20220425203816033"></p><p>可以参照一下格式自定义你个人的leetcode calendar，首先定位到目录下的站点配置文件 _config.ta（<strong>不是主题配置文件</strong>），参照以下内容添加</p><div class="code-wrapper"><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">leetcodecalendar</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">submitGap</span><span class="token punctuation">:</span> <span class="token number">5</span>  <span class="token key atrule">showIcon</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">color</span><span class="token punctuation">:</span>    <span class="token key atrule">submitColor</span><span class="token punctuation">:</span> <span class="token string">'#c4c6c9'</span>    <span class="token key atrule">bgColor</span><span class="token punctuation">:</span> <span class="token string">'#252d38'</span>    <span class="token key atrule">subColors</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'#ebedf0'</span><span class="token punctuation">,</span> <span class="token string">'#bef5cb'</span><span class="token punctuation">,</span> <span class="token string">'#85e89d'</span><span class="token punctuation">,</span> <span class="token string">'#34d058'</span><span class="token punctuation">,</span> <span class="token string">'#1c992f'</span><span class="token punctuation">]</span></code></pre></div><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>enable</td><td>开启插件（否则不会显示）</td></tr><tr><td>submitGap</td><td>为提交分间隔来显示颜色，例如0~gap个绘制白色 gap~2*gap -1个为绿色</td></tr><tr><td>showIcon</td><td>是否显示中间的Leetcode图标</td></tr><tr><td>submitColor</td><td>提交次数的文字颜色</td></tr><tr><td>bgColor</td><td>日历背景颜色</td></tr><tr><td>subColors</td><td>不同层次的提交数所对应的颜色数组（从低到高）</td></tr></tbody></table><p>Github地址: <a href="https://github.com/PPLong222/hexo-leetcode-calendar">hexo-leetcode-calendar</a> 如果觉得喜欢的话可以star一下</p><h2 id="更新-v2">更新</h2><h2 id="特点-v3">特点</h2><ul><li>支持部分移动设备上的显示（屏幕过小时有删减）</li></ul><h2 id="TODO">TODO</h2><ul><li>支持在一个页面显示多个calendar</li><li>支持英语显示</li><li>增加标题title配置</li></ul><h2 id="感谢">感谢</h2><blockquote><p>站在巨人的肩膀上才能看得更高</p></blockquote><p>感谢<a href="https://github.com/TankNee/hexo-douban-card">hexo-douban-card</a> 与 <a href="https://github.com/Zfour/hexo-github-calendar">hexo-githubcalendar</a> 在设计和构思上提供思路和解决方案</p><p>如果你有好的提议或插件不适配你的主题，请联系</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式整合</title>
    <link href="/2022/04/21/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%B4%E5%90%88/"/>
    <url>/2022/04/21/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1>正则表达式</h1><blockquote><p>正则表达式很强大，但一直不是很清楚具体语法，每次遇到想匹配的字符串都是在网上抄，终于有时间好好整合一下，做一个总的整理，并且将后续项目中可能用到的匹配式也收录进来。</p></blockquote><h2 id="语法">语法</h2><h3 id="位置">位置</h3><ul><li><p>^ : 匹配输入字符串开始的位置</p><ul><li><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>+以一个或多个数字开头</li></ul></li><li><p>$ : 匹配输入字符串的结束位置</p><ul><li>abc$表示以abc结尾</li></ul></li><li><p>\b: 匹配单词边界（字与空格的位置）</p><ul><li>\b的位置非常重要，对于’Chapter’ /\bChap/是从开始匹配 /pter\b/是从匹配到末尾</li></ul></li><li><p>\B: 非单词边界</p><ul><li>与\b的区别：匹配的字符处于非单词边界，‘Chapter’ /\Bapt/匹配，对apter则不匹配</li></ul></li></ul><h3 id="个数">个数</h3><ul><li>+: 匹配一个或多个</li><li>{n,m}: 限制匹配个数</li><li>[0-9] 匹配单个数字<ul><li>[0-9]+匹配一个或多个数字</li></ul></li></ul><h3 id="匹配">匹配</h3><ul><li><code>[abc]</code>: 匹配单个字符a\b\c\d，有就匹配<ul><li><code>[^abc]</code>: 匹配除了描述字符集的所有单个字符（结果是单个）</li><li><code>[a-z]</code>: 匹配a-z的所有单个字符（结果是单个）</li></ul></li><li>. : 匹配除了换行符\n \r外的所有字符 = <code>[^\r\n]</code>(单个)</li><li><code>[\s\S]</code>: 匹配所有<ul><li>\s: 匹配所有空白符</li><li>\S: 匹配非空白符</li></ul></li><li>\w: 匹配数字、字母、下划线 = [A-Za-z0-9]</li></ul><h4 id="非打印字符">非打印字符</h4><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">\cx</td><td style="text-align:left">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td style="text-align:left">\f</td><td style="text-align:left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td style="text-align:left">\n</td><td style="text-align:left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td style="text-align:left">\s</td><td style="text-align:left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td></tr><tr><td style="text-align:left">\S</td><td style="text-align:left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td style="text-align:left">\v</td><td style="text-align:left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><h4 id="特殊字符">特殊字符</h4><table><thead><tr><th style="text-align:left">特别字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">$</td><td style="text-align:left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 <code>\$</code>。</td></tr><tr><td style="text-align:left">( )</td><td style="text-align:left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 <code>\(</code> 和 <code>\)</code></td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">匹配前面的子表达式零次或多次。要匹配 <code>*</code> 字符，请使用 <code>\*</code></td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 <code>\+</code>。</td></tr><tr><td style="text-align:left">.</td><td style="text-align:left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 <code>\.</code> 。</td></tr><tr><td style="text-align:left">[</td><td style="text-align:left">标记一个中括号表达式的开始。要匹配 [，请使用 <code>\[</code>。</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 <code>\?</code>。</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。‘\n’ 匹配换行符。序列 <code>\\</code> 匹配 <code>\</code>，而 <code>\(</code> 则匹配 “(”。</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 <code>\^</code>。</td></tr><tr><td style="text-align:left">{</td><td style="text-align:left">标记限定符表达式的开始。要匹配 {，请使用 <code>\&#123;</code>。</td></tr><tr><td style="text-align:left">|</td><td style="text-align:left">指明两项之间的一个选择。要匹配 |，请使用 <code>|</code>。</td></tr></tbody></table><h4 id="界定符">界定符</h4><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">*</td><td style="text-align:left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">匹配前面的子表达式一次或多次。例如，‘zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">匹配前面的子表达式零次或一次。例如，“do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td style="text-align:left">{n}</td><td style="text-align:left">n 是一个非负整数。匹配<strong>确定的 n 次</strong>。例如，‘o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td style="text-align:left">{n,}</td><td style="text-align:left">n 是一个非负整数。<strong>至少匹配n 次</strong>。例如，‘o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。‘o{1,}’ 等价于 ‘o+’。‘o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td style="text-align:left">{n,m}</td><td style="text-align:left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，“o{1,3}” 将匹配 “fooooood” 中的前三个 o。‘o{0,1}’ 等价于 ‘o?’。<strong>注意在逗号和两个数之间不能有空格。</strong></td></tr></tbody></table><h4 id="选择">选择</h4><ul><li>?=: exp1(?=exp2): 查找exp2前面的<strong>exp1</strong><ul><li>zyl(?=[\d]+) : 查找一串数字前的zyl字符</li></ul></li><li>?&lt;: (?&lt;=exp2)exp1: 查找exp2后面的<strong>exp1</strong><ul><li>(?&lt;=[\d]+)zyl: 查找一串数字后的zyl字符</li><li>(?&lt;!exp2)exp1: 查找前面不是exp2的exp1</li></ul></li><li>?!: exp1(?!exp2): 查找exp1后不是exp2的字符串</li></ul><h4 id="反向引用">反向引用</h4><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个<strong>临时缓冲区</strong>中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。<strong>缓冲区编号从 1 开始，最多可存储 99 个捕获</strong>的子表达式。</p><p>反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 例如：匹配相邻且相同的单词</span>a <span class="token operator">=</span> <span class="token string">"Is is the cost of of gasoline going up up"</span><span class="token comment"># /\b([a-z]+) \1\b/gi</span><span class="token comment"># \b([a-z]+) 表示将匹配单词并存入到缓存中</span><span class="token comment"># \1\b表示刚刚的那个单词，实现了重复利用</span><span class="token comment"># 注意：完成一次匹配后，()缓存会清空了</span></code></pre></div><h2 id="修饰符">修饰符</h2><p>写在表达式外，用于指定额外的匹配策略</p><table><thead><tr><th style="text-align:left">修饰符</th><th style="text-align:left">含义</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">i</td><td style="text-align:left">ignore - 不区分大小写</td><td style="text-align:left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td style="text-align:left">g</td><td style="text-align:left">global - 全局匹配</td><td style="text-align:left">查找所有的匹配项。</td></tr><tr><td style="text-align:left">m</td><td style="text-align:left">multi line - 多行匹配</td><td style="text-align:left">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td style="text-align:left">s</td><td style="text-align:left">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td><td style="text-align:left">默认情况下的圆点 <strong>.</strong> 是匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>在匹配的结果中包含换行符 \n</strong></td></tr></tbody></table><p>如果对多行字符串’abc\n acss\n’不使用-m，则^a只能匹配到一个结果，反之则会有多个结果</p><h2 id="匹配案例">匹配案例</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>0-9 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫入门</title>
    <link href="/2022/04/21/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
    <url>/2022/04/21/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1>Python爬虫入门</h1><blockquote><p>初衷：希望能从Leetcode上爬取个人登录一年的每天提交次数的json，通过mouse in触发js事件的然后绘制的HTML块，希望学习完后能够做到，也能轻松爬取豆瓣等资源</p><p>这篇文章涉及到的知识：</p><ul><li>Python Lib: Scrapy Re BeautifulSoup Selenium XPath</li><li>Web: Request Response Cookie Session</li><li>Chrome: Debug-Tips</li></ul></blockquote><h2 id="Request">Request</h2><p><a href="https://docs.python-requests.org/zh_CN/latest/user/quickstart.html">快速上手</a></p><h3 id="辨析">辨析</h3><p><strong>正常从页面访问，返回的Request的请求头</strong></p><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9</span></span><span class="token header"><span class="token header-name keyword">Cache-Control</span><span class="token punctuation">:</span> <span class="token header-value">max-age=0</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">__vtins__Jf1FrphVHSZkysQl=%7B%22sid%22%3A%20%2256fa7d47-8eae-5875-ad17-c0ec88a3cc8a%22%2C%20%22vd%22%3A%201%2C%20%22stt%22%3A%200%2C%20%22dr%22%3A%200%2C%20%22expires%22%3A%201650535320988%2C%20%22ct%22%3A%201650533520988%7D; __51uvsct__Jf1FrphVHSZkysQl=1; __51vcke__Jf1FrphVHSZkysQl=af87f021-3cf9-5d99-952d-95d503a0a38f; __51vuft__Jf1FrphVHSZkysQl=1650533520995</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">www.pplong.top</span></span><span class="token header"><span class="token header-name keyword">If-Modified-Since</span><span class="token punctuation">:</span> <span class="token header-value">Thu, 21 Apr 2022 06:26:32 GMT</span></span><span class="token header"><span class="token header-name keyword">If-None-Match</span><span class="token punctuation">:</span> <span class="token header-value">"6260f918-9669"</span></span><span class="token header"><span class="token header-name keyword">Proxy-Connection</span><span class="token punctuation">:</span> <span class="token header-value">keep-alive</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36</span></span></code></pre></div><p><strong>通过Request访问，返回的请求头</strong></p><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> 'Server'<span class="token operator">:</span> 'nginx/<span class="token number">1.14</span>.<span class="token number">1</span>'<span class="token punctuation">,</span>  'Date'<span class="token operator">:</span> 'Thu<span class="token punctuation">,</span> <span class="token number">21</span> Apr <span class="token number">2022</span> <span class="token number">09</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">48</span> GMT'<span class="token punctuation">,</span>  'Content-Type'<span class="token operator">:</span> 'text/html'<span class="token punctuation">,</span>  'Content-Length'<span class="token operator">:</span> '<span class="token number">38505</span>'<span class="token punctuation">,</span>  'Last-Modified'<span class="token operator">:</span> 'Thu<span class="token punctuation">,</span> <span class="token number">21</span> Apr <span class="token number">2022</span> <span class="token number">06</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">32</span> GMT'<span class="token punctuation">,</span>  'Connection'<span class="token operator">:</span> 'keep-alive'<span class="token punctuation">,</span> 'ETag'<span class="token operator">:</span> '<span class="token string">"6260f918-9669"</span>'<span class="token punctuation">,</span>  'Accept-Ranges'<span class="token operator">:</span> 'bytes'<span class="token punctuation">&#125;</span></code></pre></div><p>正常得到了内容，但请求头不一样（因为Request和Chrome对请求头的包装不同）</p><h3 id="过滤">过滤</h3><p>从豆瓣获取json的api中，如果通过浏览器访问，能够正常得到json页面，但如果通过request得到，则得不到，这里就可能是服务器在接收到Request时会去检查请求头有无设置一些特殊的参数。我先在Chrome上去获取了这个页面，避免cookie和其他的请求头参数，我使用新的firefox去访问这个页面，发现还是可以访问，说明不存在cookie等的因素，考虑是没有python中request没有User-Agent请求头，将Chrome的复制并添加到Request中，发现能够正常请求。</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36'</span><span class="token punctuation">&#125;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://movie.douban.com/j/chart/top_list?type=24&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre></div><p>但让人疑惑的是，最后去打印request.headers，发现却没有新加的这些参数，但为什么又能够正常的发送请求？这里还不是很清楚（因为我自己也设置了代理，不清楚是否是代理造成的问题）引用一下官方的话：</p><blockquote><p>注意: 定制 header 的优先级低于某些特定的信息源，例如：</p><ul><li>如果在 <code>.netrc</code> 中设置了用户认证信息，使用 headers= 设置的授权就不会生效。而如果设置了 <code>auth=</code> 参数，<code>.netrc</code> 的设置就无效了。</li><li>如果被重定向到别的主机，授权 header 就会被删除。</li><li>代理授权 header 会被 URL 中提供的代理身份覆盖掉。</li><li>在我们能判断内容长度的情况下，header 的 Content-Length 会被改写。</li></ul><p>更进一步讲，Requests 不会基于定制 header 的具体情况改变自己的行为。只不过在最后的请求中，所有的 header 信息都会被传递进去。</p></blockquote><h3 id="数据">数据</h3><p>一个请求百度翻译的例子，找到对应Post方式的请求，通过请求头明确其Request URL，查看其请求体，则可以开始编写带data的Post请求</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'kw'</span><span class="token punctuation">:</span> <span class="token string">'dog'</span><span class="token punctuation">&#125;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://fanyi.baidu.com/sug'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>headers<span class="token punctuation">)</span></code></pre></div><p><strong>爬取数据后，记得close关闭这个请求</strong></p><h3 id="进阶-v4">进阶</h3><h4 id="登录处理-Cookie">登录处理 Cookie</h4><p>理解正常登录流程：登录成功后为什么不用再次登录？Cookie中含有加密的信息，与设备信息是绑定的。</p><p>session：一连串的的请求，这个过程中cookie不会消失，通过session.post session.get来保持会话，保存cookie</p><h4 id="实战">实战</h4><h5 id="Referrer的应用–梨视频抓取">Referrer的应用–梨视频抓取</h5><p>抓取梨视频单个视频的案例</p><p><strong>一个有意思的点–主页面和请求的不同点</strong></p><p>Google-Chrome的F12开发工具中显示的其实是动态的HTML页面（原生 + JS代码创建的），而查看<strong>网页源代码</strong>，其实只是查看的是对应的一条主HTML页面请求的页面，是不包含JS的，只返回一个HTML页面。这就造成了一个现象，比如梨视频能在F12中看到video标签，但在页面源代码内看不到，侧面说明了其实video标签是 通过js动态加载到主页面的</p><div class="note note-primary">            <p>Tips:  <img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220421210323532.png" alt="image-20220421210323532">点击开发者工具的这个按钮，能够自由的在页面上选择并定位元素，再也不用一步一步的找了！</p>          </div><p>位这里发现其实单个视频页面，梨视频会返回一个视频的json，包含视频的url，但独立通过url访问视频时，却无法访问（404）再次分析，HTML video标签内的src是有效的</p><div class="code-wrapper"><pre class="language-sh" data-language="sh"><code class="language-sh"># video_image: &quot;https:&#x2F;&#x2F;image1.pearvideo.com&#x2F;cont&#x2F;20220418&#x2F;cont-1759035-12669061.jpeg&quot;https:&#x2F;&#x2F;video.pearvideo.com&#x2F;mp4&#x2F;adshort&#x2F;20220418&#x2F;cont-1759035-15863820_adpkg-ad_hd.mp4 # 转义的 有效https:&#x2F;&#x2F;video.pearvideo.com&#x2F;mp4&#x2F;adshort&#x2F;20220418&#x2F;1650545630017-15863820_adpkg-ad_hd.mp4 # 原始的 无效</code></pre></div><p>发现仅有中间部分不一致，其中1650545630017是当前时间戳，cont-1759035正好代表了图片image的描述，说明后台在内部进行了转换，使得不能直接从json返回的url读到地址（但其实还是可以的）</p><p>直接对该api url的地址进行访问，会返回异常情况，加上U-A Cookie，发现也没有用</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>    <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">&#125;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.pearvideo.com/videoStatus.jsp?contId=1759035&amp;mrd=0.8055881311378088'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment"># "resultMsg":"该文章已经下线！",</span></code></pre></div><p>这时就体现出请求头防盗链Referrer的作用了，什么是Referrer，Referrer就是你从哪个页面访问的这个页面，指向的是上一个页面的url，请求头上加上正确的Referrer，则可以访问到数据。这里就说明网站仅对Referrer进行了筛查，正确的Referrer才放行</p><h4 id="注意点">注意点</h4><h2 id="数据解析">数据解析</h2><p>为什么需要数据解析？</p><p><strong>一些数据没有通过api进行json返回，而是直接嵌在了HTML里面</strong></p><h3 id="Re">Re</h3><p>Regular Expression ：正则表达式</p><p>速度快，效率高、准确性高</p><h3 id="XPath">XPath</h3><p>XPath: XML Path Language ，最初用于在XML中搜索，由于XML与HTML结构相似性，同样可以用于HTML元素搜索。<strong>使用路径表达式在XML中进行导航</strong></p><p>为什么是它？提供非常间接明了的路径选择表达式，方便的寻找节点</p><h4 id="匹配规则">匹配规则</h4><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml <span class="token operator">=</span>  etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'./index.html'</span><span class="token punctuation">,</span> etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*'</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># 打印的是页面所有的元素节点指针</span></code></pre></div><ul><li>//tag：代表要获取的标签名</li><li>//tag/a：tag标签下的所有a标签子节点</li><li>//tag//a：tag标签下所有子孙a标签节点</li><li>//tag[@key=‘value’]：tag标签下所有属性为key 值为value的节点（精确匹配）<ul><li>属性有多个值，精确匹配则无效。需要用到//tag[<strong>contains</strong>(@key,“value”)]来表示</li><li>多属性匹配：//tag[@class=‘a’ <strong>and</strong> @key=‘value’]，还可以用or mod != &gt; &lt; &lt;=等</li></ul></li><li>//tag/…/：tag标签的父标签</li><li>//tag/@key：tag标签下key属性的值</li><li>//tag/a/text()：获取tag标签的子节点a标签的text内容（可以理解为innerHTML？）</li><li>指定位置选取：<ul><li>//tag[1] ：选取第二个tag节点</li><li>//tag[last()]：最后一个节点</li><li>//tag[position()❤️]：索引位置小于3</li><li>//tag[last() - 2]：倒数三个元素</li></ul></li><li>节点轴：<ul><li>//tag/ancestor:: *：获取tag所有祖先节点（包括html）</li><li>//tag/ancestor::div ：获取tag为div的<strong>祖先</strong>节点</li><li>//tag/attribue:: * ：返回tag标签的所有属性值</li><li>//tag/child:: *：tag标签 所有<strong>直接</strong> 子节点</li><li>//tag/descendant:: *：tag标签所有子孙节点</li><li>//tag/following:: *[2] ：tag标签后第三个节点</li><li>//tag/following-sibling：tag标签的同级节点</li></ul></li></ul><div class="note note-info">            <p>参考：<a href="https://www.w3school.com.cn/xpath">W3CSchool</a></p>          </div><h2 id="Selenium">Selenium</h2><h2 id="Scrapy">Scrapy</h2><p><strong>特点</strong>：异步性：异步发送多个爬取请求；礼貌性：限制爬取速率、限制每个域和IP的并发请求量</p><p>安装Scrapy库</p><p>Pycharm对应项目直接pip install scrapy</p><p>scrapy startproject xxx创建一个scrapy项目，项目中初始结构：</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">tutorial<span class="token operator">/</span>    scrapy<span class="token punctuation">.</span>cfg            <span class="token comment"># deploy configuration file</span>    tutorial<span class="token operator">/</span>             <span class="token comment"># project's Python module, you'll import your code from here</span>        __init__<span class="token punctuation">.</span>py        items<span class="token punctuation">.</span>py          <span class="token comment"># project items definition file</span>        middlewares<span class="token punctuation">.</span>py    <span class="token comment"># project middlewares file</span>        pipelines<span class="token punctuation">.</span>py      <span class="token comment"># project pipelines file</span>        settings<span class="token punctuation">.</span>py       <span class="token comment"># project settings file</span>        spiders<span class="token operator">/</span>          <span class="token comment"># a directory where you'll later put your spiders</span>            __init__<span class="token punctuation">.</span>py</code></pre></div><h3 id="入门-v2">入门</h3><p><strong>创建第一个Scrapy脚本</strong></p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">QuoteSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"quotes"</span><span class="token comment"># 也可以通过内置变量start_urls定义url，此时默认callback为parse</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        urls <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'https://quotes.toscrape.com/page/1/'</span><span class="token punctuation">,</span>            <span class="token string">'https://quotes.toscrape.com/page/2/'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        page <span class="token operator">=</span> response<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>        filename <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'quotes-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>page<span class="token punctuation">&#125;</span></span><span class="token string">.html'</span></span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Saved file </span><span class="token interpolation"><span class="token punctuation">&#123;</span>filename<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span></code></pre></div><ul><li>name:必须是独特的</li><li>start_requests: 定义目标url与callback</li><li>parse：request得到response后解析页面，进行操作</li></ul><p>scrapy crawl xxx开始执行这个爬虫项目</p><div class="note note-primary">            <p>为什么用在start_request中用yield？</p><p>因为有多个页面，要分别对其进行解析，使其在一收到相应体后调用分别的callback对其进行解析，而不是等待所有url请求的网页结构体返回后一次性解析</p>          </div><h2 id="基础案例">基础案例</h2><div class="note note-primary">            <p>以下案例仅用于初始阶段学习，后续进阶案例请前往<a href="http://www.pplong.top/2022/04/30/Python%E7%88%AC%E8%99%AB%E6%A1%88%E4%BE%8B%E6%95%B4%E5%90%88/">Python爬虫案例整合</a></p>          </div><h3 id="爬取网易云音乐评论">爬取网易云音乐评论</h3><h4 id="结构研究">结构研究</h4><p>先查看网页结构，发现网页源代码中是完全没有评论相关的内容的，说明是网页是通过url请求后期使用js加载的，所以直接定位到url中</p><p>在若干个请求中分析url内容，发现匹配项：</p><p><a href="https://music.163.com/weapi/comment/resource/comments/get?csrf_token=%E5%A4%A7%E6%A6%82%E9%95%BF%E8%BF%99%E6%A0%B7%EF%BC%8C">https://music.163.com/weapi/comment/resource/comments/get?csrf_token=大概长这样，</a><strong>Post请求</strong>查看请求体是带有params和encSecKey的，发现数据都是经过加密处理的，这就很恼火了，因为但从网页url分析https://music.163.com/#/song?id=208902，仅仅指明了歌曲的id，本应该直接从id和当前评论pageNumber去返回给我数据，但服务器做了加密处理，使得不那么容易去拿到我想要的数据，所以这里就需要用到GoogleChrome的调用栈的功能</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220422223020117.png" alt="响应体"></p><p>点击右方的initiator即可查看这个url的调用栈，通过调用栈Call Stack中，对代码进行格式化后（点击左下角{ }）设置断点，然后重新刷新页面依次去分析调用过程</p><h4 id="加密处理">加密处理</h4><p>这里网易先进行了一些config的请求，当来到属于该url的请求时，通过下推调用栈观察其param在<strong>何时</strong>从可理解的id转化为不可理解的token，最终发现加密函数</p><div class="code-wrapper"><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 随机生成16位字符</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">></span> d<span class="token punctuation">;</span> d <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>           e <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">.</span>length<span class="token punctuation">,</span>           e <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>           c <span class="token operator">+=</span> b<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> c   <span class="token punctuation">&#125;</span><span class="token comment">// AES加密，b为密钥 a为data，得到encParam</span>   <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> c <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>         <span class="token punctuation">,</span> d <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"0102030405060708"</span><span class="token punctuation">)</span>         <span class="token punctuation">,</span> e <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>         <span class="token punctuation">,</span> f <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>           <span class="token literal-property property">iv</span><span class="token operator">:</span> d<span class="token punctuation">,</span>           <span class="token literal-property property">mode</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token constant">CBC</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token comment">// RSA加密，得到secKey</span>   <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> d<span class="token punctuation">,</span> e<span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token function">setMaxDigits</span><span class="token punctuation">(</span><span class="token number">131</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSAKeyPair</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>       e <span class="token operator">=</span> <span class="token function">encryptedString</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token parameter">d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>         <span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 先进行一次加密，再对加密的数据再次加密</span>       <span class="token keyword">return</span> h<span class="token punctuation">.</span>encText <span class="token operator">=</span> <span class="token function">b</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">,</span>       h<span class="token punctuation">.</span>encText <span class="token operator">=</span> <span class="token function">b</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>encText<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>       h<span class="token punctuation">.</span>encSecKey <span class="token operator">=</span> <span class="token function">c</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">,</span>       h   <span class="token punctuation">&#125;</span><span class="token comment">// enter function</span>   window<span class="token punctuation">.</span>asrsea <span class="token operator">=</span> d<span class="token punctuation">,</span></code></pre></div><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// d: 原始数据</span>d<span class="token operator">:</span> <span class="token string">"&#123;\"rid\":\"R_SO_4_208902\",\"threadId\":\"R_SO_4_208902\",\"pageNo\":\"1\",\"pageSize\":\"20\",\"cursor\":\"-1\",\"offset\":\"0\",\"orderType\":\"1\",\"csrf_token\":\"\"&#125;"</span><span class="token comment">// 中文字符转为的key</span>e<span class="token operator">:</span> <span class="token string">"010001"</span><span class="token comment">// f: </span>f<span class="token operator">:</span> <span class="token string">"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7"</span><span class="token comment">// 中文字符转为的key</span>g<span class="token operator">:</span> <span class="token string">"0CoJUm6Qyw8W8jud"</span><span class="token comment">// 随机生成16位字符</span>i<span class="token operator">:</span> <span class="token string">"lmkFmnPxWkSzB2OD"</span></code></pre></div><h4 id="代码">代码</h4><p>原始参数是可以直接模仿的，主要是如何加密的过程。所以要自动化发送请求，就要<strong>模拟它的加密过程</strong>。这里暂时不研究RSA加密，只关注AES加密。</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64encode<span class="token keyword">import</span> requests<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token comment"># 抓取一个特例音乐</span>i1x <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'csrf_token'</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token string">'cursor'</span><span class="token punctuation">:</span> <span class="token string">"-1"</span><span class="token punctuation">,</span>    <span class="token string">'offset'</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>    <span class="token string">'orderType'</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token string">'pageNo'</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token string">'pageSize'</span><span class="token punctuation">:</span> <span class="token string">"20"</span><span class="token punctuation">,</span>    <span class="token string">'rid'</span><span class="token punctuation">:</span> <span class="token string">'R_SO_4_208902'</span><span class="token punctuation">,</span>    <span class="token string">'threadId'</span><span class="token punctuation">:</span> <span class="token string">"R_SO_4_208902"</span><span class="token punctuation">&#125;</span>url <span class="token operator">=</span> <span class="token string">"https://music.163.com/weapi/comment/resource/comments/get?csrf_token="</span>d <span class="token operator">=</span> i1xe <span class="token operator">=</span> <span class="token string">'010001'</span><span class="token comment"># f = buV2x(Rg6a.md)</span>f <span class="token operator">=</span> <span class="token string">"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7"</span><span class="token comment"># g = buV2x(["爱心", "女孩", "惊恐", "大笑"])</span>g <span class="token operator">=</span> <span class="token string">"0CoJUm6Qyw8W8jud"</span>i <span class="token operator">=</span> <span class="token string">"KERgVgrbxP7ZK6Ht"</span><span class="token keyword">def</span> <span class="token function">getSecKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"1b8ed8e70825247c537c60f6fb6d7d63a0202873b77d8afe8870ad384e2062f8c4f2dee6c34f71a0e2ad574396a02eb541a5839fa92219b7523cbb44515dc1dbe6e78748f7b17e17b7ece5b49e562b5588a5b46dfc77c3f0ac3ce53cdd6ba170c6dac069aa75ea16405c2ac7f975e88259e710d879cbe6fbd3fadbcb067e78fa"</span><span class="token keyword">def</span> <span class="token function">to_16</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    pad <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span>    data <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>pad<span class="token punctuation">)</span> <span class="token operator">*</span> pad    <span class="token keyword">return</span> data<span class="token comment"># 模拟加密过程</span><span class="token keyword">def</span> <span class="token function">encrypto</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">':arg a代表Data b代表密钥'</span>    iv <span class="token operator">=</span> <span class="token string">'0102030405060708'</span>    data <span class="token operator">=</span> to_16<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token operator">=</span>key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> IV<span class="token operator">=</span>iv<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">)</span>    bs <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b64encode<span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getParams</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp1 <span class="token operator">=</span> encrypto<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    temp2 <span class="token operator">=</span> encrypto<span class="token punctuation">(</span>temp1<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token keyword">return</span> temp2<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">'params'</span><span class="token punctuation">:</span> getParams<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'encSecKey'</span><span class="token punctuation">:</span> getSecKey<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    jsonTxt <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>jsonTxt<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hotComments'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div><p>**注意一个坑点：**python3.10中需要在升级pybluez导致AES出现SystemError  <a href="https://stackoverflow.com/questions/70999481/how-do-i-resolve-py-ssize-t-clean-macro-must-be-defined-for-formats-for-py">Stack-Overflow: How do I resolve ‘PY_SSIZE_T_CLEAN macro must be defined for ‘#’ formats’ for Pybluez on Windows 10</a>，所以我这里降级了再次运行的</p><p>最终能得到正确的结论，注意传参和加解密时很多时候要求的是utf-8形式的编码，然后AES要求编码的data要是16的倍数，key是16 24 32的倍数，所以需要填补缺失的Data，随便填满即可。</p><h3 id="异步爬取一本小说">异步爬取一本小说</h3><p><a href="https://dushu.baidu.com/pc/reader?gid=4306063500">百度小说–西游记</a></p><h4 id="思路">思路</h4><p>这里主要注意一下思路：先<strong>同步</strong>地获取指定一本书的id和章节编号cid，然后根据cid去<strong>异步</strong>的请求每一章节的数据并<strong>异步</strong>地写进文件</p><ul><li><strong>异步的概念</strong>：不仅发送请求是异步的，通过aiofiles实现读写的时候也是异步执行的，这一点就非常的高效。</li></ul><h4 id="代码-v2">代码</h4><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> aiofiles<span class="token keyword">import</span> requests<span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">getCatatgory</span><span class="token punctuation">(</span>bookId<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://dushu.baidu.com/api/pc/getCatalog?data=&#123;"book_id":"'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>bookId<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"&#125;'</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    titles <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'novel'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'items'</span><span class="token punctuation">]</span>    book_id <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'novel'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'book_id'</span><span class="token punctuation">]</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> title <span class="token keyword">in</span> titles<span class="token punctuation">:</span>        cid <span class="token operator">=</span> title<span class="token punctuation">[</span><span class="token string">'cid'</span><span class="token punctuation">]</span>        name <span class="token operator">=</span> title<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>getContent<span class="token punctuation">(</span>book_id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">getContent</span><span class="token punctuation">(</span>book_id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span>    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'book_id'</span><span class="token punctuation">:</span> book_id<span class="token punctuation">,</span>        <span class="token string">'cid'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>book_id<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cid<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>        <span class="token string">'need_bookinfo'</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    params <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>params<span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'https://dushu.baidu.com/api/pc/getChapterContent?data=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>params<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> resp<span class="token punctuation">:</span>            dic <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>url<span class="token punctuation">)</span>            txt <span class="token operator">=</span> dic<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'novel'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>            <span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'./books/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                <span class="token keyword">await</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    bookId <span class="token operator">=</span> <span class="token number">4306063500</span>    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>getCatatgory<span class="token punctuation">(</span>bookId<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Web Spider</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Fluid--博客装修整理</title>
    <link href="/2022/04/07/Hexo-Fluid-%E5%8D%9A%E5%AE%A2%E8%A3%85%E4%BF%AE/"/>
    <url>/2022/04/07/Hexo-Fluid-%E5%8D%9A%E5%AE%A2%E8%A3%85%E4%BF%AE/</url>
    
    <content type="html"><![CDATA[<h1>Hexo Fluid博客装修</h1><blockquote><p>自从博客从Next主题迁移到Fluid后，基本上就没有变动太多东西，但现在看了别人的博客比如基于Butterfly的，就不太满足于目前的Fluid了。ButterFly固然好，但太花哨，适合之后针对前端学习的时候用这款主题，我更喜欢Fluid的整体布局，但细节方面，就需要去自己DIY了，这也就有了这篇文章</p></blockquote><p>Done-TODO List：</p><input type="checkbox" disabled checked="checked"> 增添更新时间模块并自动更新<br><input type="checkbox" disabled checked="checked"> 新增友链<br><input type="checkbox" disabled checked="checked"> 添加总字数<br><input type="checkbox" disabled checked="checked"> 添加Github贡献<br><input type="checkbox" disabled checked="checked"> 使hexo支持md表情<br><input type="checkbox" disabled checked="checked"> 添加唠唠楼<br><ul><li><input type="checkbox" disabled > 美化样式框 <br></li></ul><input type="checkbox" disabled checked="checked"> 新增电影界面 <br><ul><li><input type="checkbox" disabled > 继续美化<br></li></ul><input type="checkbox" disabled checked="checked"> 美化代码板块<br><ul><li><input type="checkbox" disabled checked="checked"> 添加语言识别<br></li><li><input type="checkbox" disabled checked="checked"> 添加代码块折叠<br></li></ul><input type="checkbox" disabled checked="checked"> 添加更新时间<br><ul><li><input type="checkbox" disabled > 手机端显示异常 <br></li></ul><input type="checkbox" disabled > 添加回顾模块的特定样式<br><input type="checkbox" disabled checked="checked"> 添加Github徽标<br><h2 id="更新">更新</h2><h3 id="增添更新时间模块并自动更新">增添更新时间模块并自动更新</h3><p><span class="label label-primary">Time : 2022 / 4 / 7</span></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220407212939266.png" alt="image-20220407212939266"></div><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220407212809434.png" alt="image-20220407212809434"></div></div></div><h4 id="1-添加脚本">1. 添加脚本</h4><p>网上Copy的js脚本，自动识别目录下的md文档，根据是否有category来增加updated的font-matter，如果有则忽略。比较实用。我改了部分参数，不想把脚本放在_posts下，我放在次目录的另一目录js中，更改了相应的参数</p><div class="code-wrapper"><pre class="language-js" data-language="js"><code class="language-js"><span class="token hashbang comment">#!/usr/bin/env node</span><span class="token comment">/*批量更新修改时间博客自动更新文章的修改时间*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'脚本开始运行..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//请求文件系统</span><span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token string">"./txt"</span><span class="token punctuation">;</span> <span class="token comment">//设置读取和写入的文件，当前目录下的test文件</span><span class="token keyword">var</span> RegExp<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(updated:\s*)((\d&#123;2&#125;(([02468][048])|([13579][26]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9])))))|(\d&#123;2&#125;(([02468][1235679])|([13579][01345789]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\s((([0-1][0-9])|(2?[0-3]))\:([0-5]?[0-9])((\s)|(\:([0-5]?[0-9])))))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">"../_posts/"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>files</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> len<span class="token operator">=</span>files<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">var</span> file<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>file<span class="token operator">=</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//console.log("读取文件：",file);</span><span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">".md"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"正在处理文件："</span><span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">writeFileTime</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*file:读取时间的文件以及写入内容的文件fs: 文件系统*/</span><span class="token keyword">function</span> <span class="token function">writeFileTime</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span>fs</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    file<span class="token operator">=</span><span class="token string">"../_posts/"</span><span class="token operator">+</span>file<span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//读取文件内容</span><span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"读取文件内容错误："</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//console.log("文件"+file+"的内容：",data);</span><span class="token keyword">if</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//如果匹配到`updated`字段</span>fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//读取文件信息，创建时间等</span><span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"读取文件信息错误："</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> updateds<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//console.log("updated数组:",updateds);</span><span class="token keyword">if</span><span class="token punctuation">(</span>updateds<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件"</span><span class="token operator">+</span>file<span class="token operator">+</span><span class="token string">"匹配到多处update字段"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> updated<span class="token operator">=</span>updateds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"updated: "</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//时间格式化为2018/01/29 21:33:30</span><span class="token comment">//console.log("updated:",updated);</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>mtime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>updated<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 只要修改时间和文章内updated时间差大于1000毫秒*60*5=5分钟就触发更新</span><span class="token keyword">var</span> result<span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">,</span><span class="token string">"updated: "</span><span class="token operator">+</span><span class="token function">getFormatDate</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>mtime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//替换更新时间</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//写入新的文件内容</span><span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"写文件错误："</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">utimes</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>atime<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>mtime<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//还原访问时间和修改时间</span><span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"修改时间失败："</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"成功更新时间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* timeStr:时间，格式可为："September 16,2016 14:15:05、 "September 16,2016"、"2016/09/16 14:15:05"、"2016/09/16"、 '2014-04-23T18:55:49'和毫秒 dateSeparator：年、月、日之间的分隔符，默认为"-"， timeSeparator：时、分、秒之间的分隔符，默认为":" */</span><span class="token keyword">function</span> <span class="token function">getFormatDate</span><span class="token punctuation">(</span><span class="token parameter">timeStr<span class="token punctuation">,</span> dateSeparator<span class="token punctuation">,</span> timeSeparator</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dateSeparator <span class="token operator">=</span> dateSeparator <span class="token operator">?</span> dateSeparator <span class="token operator">:</span> <span class="token string">"-"</span><span class="token punctuation">;</span>    timeSeparator <span class="token operator">=</span> timeSeparator <span class="token operator">?</span> timeSeparator <span class="token operator">:</span> <span class="token string">":"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>timeStr<span class="token punctuation">)</span><span class="token punctuation">,</span>            year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 获取完整的年份(4位,1970)</span>            month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 获取月份(0-11,0代表1月,用的时候记得加上1)</span>            day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 获取日(1-31)</span>            hour <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 获取小时数(0-23)</span>            minute <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 获取分钟数(0-59)</span>            seconds <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 获取秒数(0-59)</span>            <span class="token constant">Y</span> <span class="token operator">=</span> year <span class="token operator">+</span> dateSeparator<span class="token punctuation">,</span>            <span class="token constant">M</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>month <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> <span class="token punctuation">(</span>month <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>month <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> dateSeparator<span class="token punctuation">,</span>            <span class="token constant">D</span> <span class="token operator">=</span> <span class="token punctuation">(</span>day <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> day <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> day<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">,</span>            h <span class="token operator">=</span> <span class="token punctuation">(</span>hour <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> hour <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> hour<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> timeSeparator<span class="token punctuation">,</span>            m <span class="token operator">=</span> <span class="token punctuation">(</span>minute <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> minute <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> minute<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> timeSeparator<span class="token punctuation">,</span>            s <span class="token operator">=</span> <span class="token punctuation">(</span>seconds <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> seconds <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> seconds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            formatDate <span class="token operator">=</span> <span class="token constant">Y</span> <span class="token operator">+</span> <span class="token constant">M</span> <span class="token operator">+</span> <span class="token constant">D</span> <span class="token operator">+</span> h <span class="token operator">+</span> m <span class="token operator">+</span> s<span class="token punctuation">;</span>    <span class="token keyword">return</span> formatDate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>Node.js还是可以呀，能够以脚本方式直接执行，有空可以看看~</p><h4 id="2-补充主脚本">2. 补充主脚本</h4><p>cd到脚本目录js下，执行这个函数就行了</p><h4 id="3-写HTML-JS">3. 写HTML/JS</h4><p>其实这里Fluid已经给出<a href="https://github.com/fluid-dev/hexo-theme-fluid/issues/162">一种解决方式</a>了，但是因为最终的效果不太好<img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220407212023590.png" alt="image-20220407212023590"></p><p>所以还是选择自定义的方式。</p><p>思路是 先根据文章页Cover上原有的时间HTML，这肯定是通过date的font-matter生成的，于是通过查看网页源代码定位这个模块，然后去找到post-meta.ejs文件，找到两个类似的div，然后仿照date去添加updated，但这里也要注意，还需要在主题配置文件下添加，因为theme.post.meta.updated.enable其实就是去查主题配置文件下的相应字段，然后更改了下基于moment js的时间设置，“LL a” - &gt; “LLL”</p><div class="code-wrapper"><pre class="language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!-- 自定义的更新时间 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>post<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>updated<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iconfont icon-clipcheck<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>time</span> <span class="token attr-name">datetime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">full_date</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>updated<span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD HH:mm'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">pubdate</span><span class="token punctuation">></span></span>    Updated: <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">full_date</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>updated<span class="token punctuation">,</span> theme<span class="token punctuation">.</span>post<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>updated<span class="token punctuation">.</span>format<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>time</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div><p>最终大功告成！显示布局方面还需要改变，文字部分太长，但相比官网添加的，我对这个已经很满意了</p><h3 id="新增友链">新增友链</h3><p><span class="label label-primary">Time : 2022 / 4 / 7</span></p><p>一直没增友链，这下增加上去，根据文档改主题配置就行了，记得补充中文翻译</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220407213731552.png" alt="image-20220407213731552"></p><h3 id="添加总字数">添加总字数</h3><p><span class="label label-primary">Time : 2022 / 4 / 7</span></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220407214058095.png" alt="image-20220407214058095"></div><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220407214022354.png" alt="image-20220407214022354"></div></div></div><p>很久就有的想法了，不过一直受限于思路，以为可能要sh去统计字数，没想到npm 的 hexo-wordcount已经提供了这个功能。传入一个整体网页参数site即可<br>思路还是老方法，通过HTML块去定位代码，发现关联部分在archive.ejs和archive-list.ejs，前者传参给后者，后者进行显示。这里我也添加了一个参数计算了总字数，然后在后者中进行显示</p><div class="code-wrapper"><pre class="language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!-- archive.ejs --></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/archive-list.ejs'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">postTotal</span><span class="token operator">:</span> site<span class="token punctuation">.</span>posts<span class="token punctuation">.</span>length <span class="token punctuation">,</span><span class="token literal-property property">postBitTotal</span><span class="token operator">:</span> <span class="token function">totalcount</span><span class="token punctuation">(</span>site<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token comment">&lt;!-- archive-list.ejs--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label label-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'postTotal'</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>postTotal<span class="token punctuation">)</span>     </span><span class="token delimiter punctuation">%></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label label-success<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'postBitTotal'</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>postBitTotal<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre></div><p>还要注意，这里’postTotal’,是一个类似键值对的东西，值是format的string字符串，比如xxxx %d xxx ，所以还需要定位到其语言配置界面设置一下。并且<br>我之前似乎wordcount没有更新，或者用的是Fluid的wordcount所以它提示找不到totalcount这个方法，重新npm i save xxxx 一下就OK了。最终用Label修饰了一下，之后可以考虑增大一下字体</p><h3 id="添加Github贡献">添加Github贡献</h3><p><span class="label label-primary">Time : 2022 / 4 / 7</span></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220407215426141.png" alt="image-20220407215426141"></p><p>以为可以直接添加基于博客Local的计数，不过没有找到，只有基于github的计数，所以还又得添加github repo，现在也是双repo了🉑（别问为啥Github提交这么少，因为都是提交到云服务器上的😢 ）</p><p>主要参考小冰的博客<a class="btn" href="https://zfe.space/post/hexo-githubcalendar.html" title="title">教程：hexo-githubcalendar 插件 1.0</a>，也推一下他的网站，插件都非常不错！通过html的id或name去挂载这个table，三件事：npm下载；站点配置增加；页面嵌入js。还支持修改颜色大小等，都在_config.yaml中，颜色之类的可以后期优化</p><h3 id="添加唠唠楼">添加唠唠楼</h3><p><span class="label label-primary">Time : 2022 / 4 / 8</span></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220410161440199.png" alt="image-20220410161440199"></p><p>想添加一个自言自语的模块，这个算是一个初级版本了 😆</p><p>之前有考虑过用现成的叨叨 hexo-daodao，通过vercel搭建，但似乎是用的别人的数据，不太好，后来寻找到了基于Artitalk 和 LeanCloud的解决方案 具体的博客参加<a href="https://juejin.cn/post/6958014853403377672">使用leanCloud给Hexo博客加上artitalk说说模块</a>。但是css太丑了，就自己找了下artitalk的官网的配置文件，用自己的css稍微改了下，虽然还是不太满意UI，不过自定义的目的算是达到了一半</p><p>之后考虑做成这种效果：<img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220410172808872.png" alt="image-20220410172808872">脱离原有的框，一条信息独立成单独的框</p><h3 id="新增电影界面-👍">新增电影界面 👍</h3><p><span class="label label-primary">Time : 2022 / 4 / 8 – 2022 / 4 / 10</span></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220410162508365.png" alt="image-20220410162508365"></div><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220410162535972.png" alt="image-20220410162535972"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220410162543859.png" alt="image-20220410162543859"></div></div></div><p>这个算是比较用心做的一个页面了哈哈，准备搞成周更的好电影收集系列。</p><h4 id="溯源">溯源</h4><p>其实最开始想做成Butterfly这种的<img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220410162817114.png" alt="image-20220410162817114"></p><p>搜索了下其实是基于hexo-douban的，但是奈何这个npm包是3、4年前才update的，造成了很多依赖的版本冲突问题，自己用上了很多时候没有反应，并且生成界面的时候耗时较长，后来换了个类似的hexo-butterfly-douban但界面又不太好看，且也是经常generate不出来。正好又看到了hexo-douban-card的包，比较喜欢这种卡片的设计，后来一咬牙，自己写页面算了，还可以自定义。麻烦一点，但是可定制性高。</p><h4 id="HTML静态分页">HTML静态分页</h4><p>这里主要复杂点就是这个静态分页，不过查了一下资料，还是比较容易。通过去设置html div style的display属性（但缺陷可能是：后期元素一多静态页面加载很慢，生成很慢，甚至去设置display的时候也会慢一点）。</p><p>这里思路是先统计多少个类名相同的div，然后再去通过当前页面号mask和open对应的div。那如何控制页面？通过js控制，也是抄了点网上的代码，但比较笨，通过不同类名来控制，每次需要手动添加元素到数组中，稍作修改，我这里直接getElementsByClassName就行了，不用手动修改总页数和长度。小贴一下代码</p><div class="code-wrapper"><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 定义一个数组，保存当前所有页面的class name</span>   <span class="token keyword">var</span> page_index <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"my-single-movie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输入pagename，打开指定的div，隐藏其他的div</span>   <span class="token keyword">function</span> <span class="token function">page_option</span><span class="token punctuation">(</span><span class="token parameter">pageIdx</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> page_index<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">!=</span> pageIdx<span class="token punctuation">)</span>                page_index<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>       page_index<span class="token punctuation">[</span>pageIdx<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"block"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 点击 返回第一页按钮 执行的操作</span>   <span class="token keyword">function</span> <span class="token function">first_click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token function">page_option</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'currentPage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 点击 跳到最后一页按钮 执行的操作</span>   <span class="token keyword">function</span> <span class="token function">last_click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> total_page <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'totalPage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>       <span class="token function">page_option</span><span class="token punctuation">(</span>page_index<span class="token punctuation">[</span>page_index<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'currentPage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span>total_page<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 点击 上一页按钮 执行的操作</span>   <span class="token keyword">function</span> <span class="token function">prev_click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> cur_page <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'currentPage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_page <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'currentPage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>cur_page<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token function">page_option</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>cur_page<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 点击 下一页按钮 执行的操作</span>   <span class="token keyword">function</span> <span class="token function">next_click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> cur_page <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'currentPage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>       <span class="token keyword">var</span> total_page <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'totalPage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_page <span class="token operator">&lt;</span> total_page<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'currentPage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>cur_page<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token function">page_option</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>cur_page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 手动改变当前页码时执行的操作</span>   <span class="token keyword">function</span> <span class="token function">choose_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> cur_page <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'currentPage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>       <span class="token function">page_option</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>cur_page<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>当然啦，也将跳转的按钮小做美化，保持跟Fluid主题样式的一致性，但是添加了hover动效后会偶尔出现Chrome崩溃，我不知道是linux chrome的问题还是代码问题，有待验证。</p><h4 id="hexo-douban-card">hexo-douban-card</h4><p>这个还有个小点，第一点是有时候generate时会通过api爬数据并写进来，比较慢，后期考虑skip-render了；第二点是有时候generate报错，是因为豆瓣的原因，要么是访问限制了 需要自己手动去输入验证码，要么是cookie过期，到时候重新在config里填一下cookie就行了。</p><p>发现css blur好有意思啊，一个参数就设置了想要的背景效果，这种模糊的亚克力般的感觉。当然这个css也是可以更换的🙂，准备后期魔改一下，也有考虑通过api去爬数据然后自己生成html，但是略麻烦，这里暂时先这样。</p><h4 id="美化">美化</h4><ul><li>增加组图的hover效果</li><li>添加英文字体</li><li>修复卡顿崩溃现象</li><li>单图优化，自适应</li><li>跳转动画</li></ul><h4 id="待优化点">待优化点</h4><ul><li><s>首尾页还存在不完善之处</s> 已修复</li><li>整体界面有待继续美化和统一</li><li><s>想把图片展示部分 部分做成hover scale的，但是有点麻烦</s> 已完成</li></ul><h3 id="美化代码板块">美化代码板块</h3><p><span class="label label-primary">Time : 2022 / 4 / 8 – 2022 / 4 / 9</span></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220410165405168.png" alt="image-20220410165405168"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220410165429966.png" alt="image-20220410165429966"></div></div></div><p>用MacPanel的样式，稍微好看了一些。思路还是改css，添加了_custom下的自定义css，但基于主题代码highlight的问题，颜色不易分辨，改了下主题配置文件的highlight库，用了prime.js的。有个坑点是，主题配置下打开linenumber显示行号，css样式会扯掉，所以就先关闭了行号功能</p><p>但这里知乎上看到一篇更好的，Butterfly支持的代码样式，还有折叠代码和显示当前语言功能，但我这里限于主题不能直接copy，准备之后魔改一波。加上代码语言和折叠功能</p><h4 id="显示代码语言">显示代码语言</h4><p><span class="label label-success">Time : 2022 / 4 / 11</span></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220411185249424.png" alt="image-20220411185249424"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220411185306916.png" alt="image-20220411185306916"></div></div></div><p>默认代码框不展开，因为展开的时候例如LeetCode页面就太长了，虽然HTML加载是同样的时间，但为了美观还是先设置为不展开。</p><p><strong>获取HTML:before的问题</strong></p><p>支持显示代码语言的思路是：先找到html下对应的代码框block，发现其有内置的代码语言（已经读取并设置到html中），只需要自己添加一个block并获取代码块就行了。但这里我其实最开始想通过设置代码整体框的:before的content值来做的，因为很方便也不用添加什么元素，但这里有一个问题，因为我的最终赋值是在页面加载后通过js代码去读取（未在生成html时就赋值），所以之后就要动态的去get :before这个Element，但:before作为伪元素，其实不是太好get 和 set一些值（尝试了一下不太行，但可能是未onLoad后进行操作导致的），因为最后其实html是当做一个整体来的，所以这里后来换了思路：自己加一个div，通过<strong>绝对布局</strong>，将div固定到固定位置，然后去设置这个div的值，相比只设置div的content，单独加div的可定制度也更高。定位到添加兄弟元素的文件，加上就这一行代码就行了。</p><p><strong>HTML内get元素值的问题</strong></p><p>这里还踩了一个HTML加载的坑，我的自定义js通过fluid是加载在页面底部的。我通过加载页面后去run我的这个js，js中去get对应的div的一些元素值（比如代码语言），但其实运行后得到的值是undefined，log父元素发现并不是有层级的div，而是近乎raw格式的键值对，猜测可能是HTML部分值还没有填入？这里涉及到前端页面的渲染和数值加载的过程，但是应该是页面未完全加载的问题，js中等待页面完全加载好后，再跑这个方法就行，这是js 等待html加载的两种方法。</p><div class="code-wrapper"><pre class="language-js" data-language="js"><code class="language-js"> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 速度更快，还未渲染img等图片</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'onload'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 速度较慢，等页面完全加载好后才调用</span></code></pre></div><h4 id="新增代码框收缩">新增代码框收缩</h4><p><span class="label label-success">Time : 2022 / 4 / 11</span></p><p>支持代码框动态收缩和恢复，这个需求太重要了，早就想做，不过套了下知乎的没用。自己先做了个v1.0版本的。不支持动画效果</p><p>思路：找对应的模块，增加下拉和收缩的iconfont div ，通过js设置click的listener</p><p><strong>js中var const</strong></p><p>var是函数作用域，允许值修改，变量提升，多次重定义<br>const作用域与let一样，块作用域，const是基本类型值，值不可变，如果为引用的数据类型，则引用的变量不可变，必须先初始化才能使用</p><p>这里我其实最开始用的var变量，导致一直执行监听函数的是最后一个div块，后来发现才更改为const</p><h4 id="待优化">待优化</h4><ul><li>为代码框收缩添加动画效果</li></ul><h3 id="添加更新时间">添加更新时间</h3><p><span class="label label-primary">Time : 2022 / 4 / 10</span></p><p>本来想按照更新时间排序文章的，这里hexo config也给了可配置的设置，但后来想想还有点早，因为才添加了updated字段，很多文件更新时间不是真实的，先按照date排序吧，就先添加一个顶部的最近更新时间和文章的提醒。（最开始还想通过脚本静态写入并读取的方式解决，但是太麻烦并且也没有必要）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220410170438778.png" alt="image-20220410170438778"></p><p>数据部分其实还挺有说头的，这里代码段在index.ejs中，如果通过page.posts获取，那么只是得到一页的文章数目。尝试阅读官网文档，发现有list_posts的全局方法，可按照字段排序显示所有的post，但只是名字，不太好。然后突然看到有site这个全局变量…服了，可通过这个变量获取网站基本所有信息，然后就按照updated字段 sort了，得到最近更新文章的post，然后在去取updated和title，但这里updated也是偷了懒，因为之前看fluid issue的时候有人提了一嘴，然后开发人员就出了每篇文章的updated提醒，显示为离现在多少天前更新的，我就用了这个函数，就不用去显示和转换麻烦的Moment&lt;…&gt;了。</p><p>HTML部分的话主要还是ejs不会使用，居然能够直接在html部分通过&lt;%= %&gt;进行赋值！离谱，非常好用，这里解决了href的问题。然后加了下循环飞入和hover暂停的的动画效果，太懒了，直接加在index.styl里的</p><div class="code-wrapper"><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">// 自定义顶部更新bar和动画.latest_post</span><span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> latest_post_ani 10s linear infinite<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.latest_post:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> latest_post_ani</span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* 调整初始位置*/</span>          <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* 父盒子宽度减去100% */</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>600px - 400%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="缺陷">缺陷</h4><p>手机端显示存在缺陷</p><h3 id="添加EChart">添加EChart</h3><h3 id="小优化"><strong>小优化</strong></h3><h4 id="添加Github徽标">添加Github徽标</h4><p><span class="label label-primary">Time : 2022 / 4 / 12</span></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220413101346107.png" alt="image-20220413101346107"></p><p>非常好用，直接去https://shields.io/即可，然后导入到自己 的footer.ejs下就行了</p><h4 id="自定义页面添加FancyBox效果">自定义页面添加FancyBox效果</h4><p><span class="label label-primary">Time : 2022 / 4 / 14</span></p><p>在post界面会自动包含fancybox的div，但自定义界面不行，，plugin.js在生成页面的时候会去追加fancybox。这部分js代码我copy的很冗余，不会写jQuery，我就直接copy了函数体，改了下条件为自定义页面的图片元素，然后修复了下图片高宽不对齐的情况(max-width:100%  追加height:100%)。这部分代码有待优化</p><h4 id="使hexo支持md表情">使hexo支持md表情</h4><p><span class="label label-primary">Time : 2022 / 4 / 7</span></p><p>实现Hexo对markdown的表情符号的支持，npm装什么hexo-emoji啥的就行了，不然网站显示👍 为: +1 :。</p>]]></content>
    
    
    <categories>
      
      <category>娱乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Html</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Git Hooks</title>
    <link href="/2022/04/04/%E6%B5%85%E5%85%A5Git-Hooks/"/>
    <url>/2022/04/04/%E6%B5%85%E5%85%A5Git-Hooks/</url>
    
    <content type="html"><![CDATA[<h1>初识Git Hooks</h1><blockquote><p>最近因为想充利用服务器的即时服务功能，希望把Hexo上的文档直接转化成PDF格式，不用电脑上操作，直接手机上通过FTP获取即可。所以本篇涉及到一些Linux简单脚本、pandoc命令和hexo操作、git知识</p></blockquote><h2 id="背景">背景</h2><p>希望能够通过钩子和Git仓库将我的Hexo博客的md文档同步到Server的仓库中，因为hexo部署的文件项目是public的html网页而非pdf，所以当我想要具体的pdf时，就不能通过Server获取，而只能通过个人电脑转化，就造成了需求。</p><h2 id="介绍-v7">介绍</h2><p>如同Hooks所表示的意思那样，就像一个钩子思想，commit、push等操作都是不同的钩子，你可以选择在出钩之前进行一些操作，也可以在拉钩时完成一些操作。<br>目的在于：提升对git仓库使用的效率，提供一些模块化、可嵌入的功能操作</p><h3 id="模块-v2">模块</h3><ul><li>pre-commit：提交信息之前进行，检查即将提交的快照，是否有遗漏</li><li>prepare-commit-msg：启动信息编辑器之前</li><li>commit-msg：钩子接受一个参数</li><li><strong>post-commit</strong>：钩子在整个提交过程完成后运行，不接受任何参数，一般用于通知</li><li>pre-rebase：变基之前</li><li>post-checkout</li><li><strong>pre-push</strong>：更新了远程引用但<strong>尚未传送对象时</strong>调用</li></ul><p><strong>服务端钩子</strong> 服务端常用</p><ul><li>pre-receive：处理来自客户端的推送操作，在接受对象之前进行</li><li>update：与上类似，但如果推送这同时向多个分支推送内容，pre-receive只运行一次，update会为每一个被推送的分支各运行一次。</li><li><strong>post-receive</strong>：挂钩在整个过程完成以后结束运行，用来更新其他系统服务或者通知用户</li></ul><h2 id="应用-v2">应用</h2><p>初衷：hexo -d后执行hooks，将blog原仓库同步到Server中</p><h3 id="问题-v3">问题</h3><ol><li><p>Hexo仓库太大，且我只需要Post的md文件就行，没必要占用多的空间</p><p>解决：在_posts文件夹下建立git的本地仓库，设置服务端上对应的远程仓库为remote，当然还需要设置receive denyCurrentBranch false。</p></li><li><p>git push到服务端，远程仓库其实完全是git接管的文件，不是我想要的源文件形式</p><p>想要得到源文件形式，需要再次clone本地仓库，这样从git的仓库下得到源文件。</p></li><li><p><strong>hexo -g -d本身是不执行git 常规命令的</strong>？</p><ol><li>这里是个坑点，写好脚本后我常识在hooks中建立我的pre-push等脚本，但未得以通过hexo -d实现，但hexo -d确实触发了远端的post-receive hook，说明确实有接受对象，但没有通过git的本地 push吗？感觉这里自己的理解可能还是有问题，但根据实验得出的结论似乎就是这样。可能hexo结合了git有它自己的一套管理措施，又或者它绕过了git的客户端hook…</li><li>于是为了解决这个问题，我又回到了最初的想法，写一个脚本，既能hexo -g -d 又可以在_posts的仓库下再次push到远程库，不触发hexo repository的hook，而是触发_posts仓库的hooks，这样也能做到不干扰到原仓库而实现md文档转移的问题</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于WireShark的网络分析</title>
    <link href="/2022/03/30/%E5%9F%BA%E4%BA%8EWireShark%E7%9A%84%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/"/>
    <url>/2022/03/30/%E5%9F%BA%E4%BA%8EWireShark%E7%9A%84%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1>基于WireShark的网络分析</h1><blockquote><p>一直对网络抓包这块很感兴趣，并且WireShark也一直吃灰，借这个机会通过WireShark分析一下传输层和网络层（TCP、IP）具体到数据包的封装细节和具体的工作细节</p></blockquote><h2 id="介绍-v5">介绍</h2><p><strong>WireShark</strong></p><p>前称Ethereal，是一个网络封包分析软件，截取网络封装包，尽可能详细地显示网络封包信息 开源开源开源！</p><h2 id="网络分析">网络分析</h2><h3 id="三次握手">三次握手</h3><p>主要看传输层的分析</p><h4 id="Hello">Hello</h4><p>报文首部结构在这里，可以一一对照</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210914163318606.png" alt="image-20210914163318606"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220331162210966.png" alt="image-20220331162210966"></p><p>解释一些之前不太懂的含义：</p><ul><li>源端口号是从Linux较靠后的“客户端端口”范围随机提供的（为什么有源端口？-&gt;找得到回来的路），到哪去，肯定是到为HTTP开放的80端口上。</li><li>序列号：客户端系统随机产生的32位，这里wireshark优化了一下 提供了相对的值</li><li>确认序列号：为0，因为是我请求，不需要确认什么</li><li>Flag：<ul><li>SYN打开表示建立连接，仅SYN为1的包为SYN包，只有<strong>服务端受到客户端发来的SYN包，才可以建立联系</strong></li></ul></li><li>接受窗口大小：指定窗口大小</li><li>检验和：TCP整体检验（包括载荷）[12字节伪首部]  TCP首部校验和计算三部分：TCP首部+TCP数据+TCP伪首部</li><li><strong>选项</strong>：<ul><li>MSS：[限定载荷数据长度]设置了自己的MSS值，以便与服务端进行沟通，选择最小值</li><li>SACK：允许优化的重传方式</li><li>Window Scale：表明自己的窗口扩大因子</li></ul></li></ul><h4 id="I-hear-u">I hear u</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220331165900512.png" alt="image-20220331165900512"></p><p>服务器返回的，从服务端的80端口到客户端指定的端口。这里Sequence Number是服务端选定的，确认号是在客户端的序列号的+1；由于是希望建立连接，所以SYN=1，且表示确认收到信息，所以ACK=1；表明了自己支持的接受窗口大小（这里&lt;客户端）；表明了自己不同的MSS。其他信息意义都相同。也在Option中表明自己是否支持SACK</p><h4 id="Let’s-talk">Let’s talk</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220331170950616.png" alt="image-20220331170950616"></p><p>客户端向服务端表明我知道你能听到我了</p><p>序列号在之前自己发的原有基础+1（与学的不同？）确认号在对方发来的序列号基础上加1；Window size为正确的factor * size值（为什么是这个值？）</p><p><strong>理解Ghost Byte</strong></p><h3 id="正常传输">正常传输</h3><p><strong>发送HTTP请求</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220331171820581.png" alt="image-20220331171820581"></p><p>客户端向服务器发送HTTP GET请求，请求某URL下的资源；从这里开始就有payload了；确认号为之前服务端发来的序列号 +1；PSH（表明是该请求的最后一个数据包，方便通知应用程序及时从网络缓存中去拿数据）和ACK（表示响应，我收到你之前的消息了）都打开；Window Size 采用之前规定好的（但没有factor了，为啥？怎样能确保最终为size*factor?）</p><p><strong>响应</strong></p><p>服务端先回应我收到你HTTP请求的响应，序列号在服务端之前发送给客户端的基础上+1，同时还会有window size的调整。然后就另起数据包，开始发数据了</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220331190932943.png" alt="image-20220331190932943"></p><p>可以看到，<strong>确认号和序列号都不变</strong>，主要是有了payload，开始负载数据。且之后的传输中，确认号都等于对方的序列号+payload长度</p><p><strong>窗口的应用</strong></p><p>发现了有趣之处<img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220331191642232.png" alt="image-20220331191642232">，此时Server同时传了两个TCP PDU给Client，但Client只用了一个ACK包就表明受到，这里就涉及到TCP的窗口知识了</p><p>最终在传完一整个请求的数据包时，Client返回最后一个数据包的ACK包，随之Server向Client传HTTP 200的响应包，（PSH和ACK = 1）<strong>到这里，对服务器来说，才算是把一个请求响应结束！</strong>。Client返回ACK包表示收到，（猜测可能会在这里浏览器会初步加载没有css js等的页面）。</p><p>然后Client可以开始发送新的HTTP请求，比如get css文件等</p><h4 id="TCP-Stream">TCP Stream</h4><p>在这里，对一个返回数据量较大的HTTP请求，WireShark会显示&quot;TCP segment of a reassembled PDU&quot;，这里其实对TCP的知识还不太熟悉。今天看了下先勉强解释下，与IP分片不同，因为一个返回数据量大的请求会把数据从TCP层拆分，他们具有不同的确认号和序列号，以类似流的形式持续达到目的端口，可在WireShark里“Follow TCP Streams”能够看到完整的数据包（对于一个网页请求，完整数据就是一个网页的html代码）。<br><a href="https://www.wireshark.org/lists/wireshark-users/200805/msg00206.html">🔗 WireShark的对TCP PDU的解释</a>  <a href="https://www.wireshark.org/docs/wsug_html_chunked/ChAdvReassemblySection.html">🔗 What is Packet Reassembly</a></p><p>对之前的数据包来说，WireShark会标注[Reassembled PDU in frame:xxx]，其中xxx就代表的是HTTP 200等响应的回复，代表这是一个完整的数据</p><p><strong>一个ACK包确认多个发送包</strong></p><p>例如这里便用一个ACK确认了两个发送的包</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220405130940538.png" alt="image-20220405130940538"></p><h3 id="异常情况分析">异常情况分析</h3><h4 id="Sack">Sack</h4><p>结构：在Option中，1字节表示类型，1字节表示该SACK部分占用字节长度，剩下的字节分别为左右edge的范围 一般总共为10个字节，最多携带3个SACK(留10个字节要给TimeStamp)</p><p><strong>解释一下某些情况下Bytes in flight的猛增现象</strong></p><p>刚看的时候一直被不按 未被ACK的包造成的Bytes in flight猛增现象搞混，分析了一下 。</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220405194323205.png" alt="image-20220405194323205"></p><p>例如这里，在经历两次Dup ACK 后，Bytes in flight从4194激增到50328，为什么？依次做减法：1122595 - 50328 = 1072267，正是考虑到其实有最初DUP  ACK包的最小SACK的left edge值，说明了什么？其实是到上一个包发送的Seq + length 到 SACK left edge的差，令人惊讶的是，它把没有尚未接受的包也考虑在内</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220405195326028.png" alt="image-20220405195326028"></p><p>接下来也类似，尽管有两个SACK，但还是将最近包的Seq+length 与最初SACK的left edge做差，表明这之间的包没有收到。尽管两个SACK之间的包。</p><p>这里实践总结就是如果服务端在传大于ACK的其他包，则值为当前Seq+length - 最初SACK left edge；如果正在传当前要的ACK，则SACK最大值的left edge - Seq不过这里还未完全理解</p><p>**其实就是Server发送的，但Client还未接收到的数据的总和，不要搞得太复杂了 **</p><h4 id="Dup-Packet">Dup Packet</h4><p>TCP Duplicate Packet ：指示与之前已ack的包有相同的序列号和确认号，通常是带有SACK的。比如这里：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220405144319645.png" alt="image-20220405144319645"></p><p>Server的637693、639091的数据包过快到达（之前的包可能因时延还未到达），但Client无法根据顺序接受这个包，TCP顺序不匹配，所以Client再发送一条ACK 包，确认号和序列号都与上一条相同，所以被标注为TCP Duplicate ACK (Packet)。<br>更有意思的是，其TCP Option中带有637693-640489的SACK，表明之前的两个包我有了，但是顺序不对，还没接到从我ACK开始的包</p><p>过多的Duplicate Packet指明可能当前网络丢包率较高</p><h4 id="TCP-Retransmission">TCP Retransmission</h4><p>一个典型的案例：<img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220405151110207.png" alt="image-20220405151110207"></p><p>这里就比较清楚，之前传的15379的包Client一直没接收到，然后Client就不断的给Server发带有更新SACK的Dup ACK Packet，Server后来接收到这个包，知道自己之前发的15379的包可能loss了，所以重新发了一个15379的包</p><h4 id="Congestion-Control">Congestion Control</h4><p>拥塞控制：<strong>服务端</strong>负荷过重，请求过多</p><h4 id="TCP-Keep-Alive">TCP Keep-Alive</h4><p>长连接 保活，一段时间内一方未回应或未发包，就会发送一个Keep-Alive包 无载荷Seq与上一个包重合，如果对方在线，就会回一个包，来确保连接继续</p><h4 id="Window-Size">Window Size</h4><p>遇到一个坑点，自己用的梯子，所以去访问自己的服务器时，Window Size总是1398,并且访问其他的网站时，也都显示的是从某一个指定的网站上返回过来的数据，难怪去filter host却找不到对应的数据包，原来是我代理的问题，后来把代理改了应该就没有问题了</p><p>但有时候机器性能太好、网络 太好，导致无法捕获到Window Full情况，就需要手动调整Linux TCP的窗口大小：</p><h5 id="Linux设置Window-Size">Linux设置Window Size</h5><ol><li>route -ne查看默认路由表。</li><li>sudo  route del default删除默认路由表</li><li>sudo route add default gw 172.20.10.1 window xxx dev wlo1，增加新的路由表，带有window约束</li></ol><p>（会发现网页的加载都变慢许多）还有一些方法是临时修改/etc/sys/net下的文件，没试过怕改错。</p><h3 id="四次挥手">四次挥手</h3><p>为了直观了解挥手情况，不受其他因素影响，这里我采用的是从ssh断开连接的情况</p><p>输入exit后，敲入回车，Client给Server发回车的数据包，Server发相应的数据包在terminal中显示；Client发ack报表示已经接受</p><p><strong>第一次挥手</strong></p><p>Client - &gt; Server：客户端完成了所有请求，要求断开。FIN 和 ACK均置为1，确认号还是对方发的上一个包的序列号+payload.length</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220331200819661.png" alt="image-20220331200819661"></p><p><strong>第二次挥手</strong></p><p>Server -&gt; Client：表明我已经接收到你的结束请求，ACK=1</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220331220424436.png" alt="image-20220331220424436"></p><p><strong>第三次挥手</strong></p><p><strong>Server-&gt;Client</strong>：表明“那我也走了”，与Client类似，设置FIN和ACK=1，这时<strong>确认号要在第二次的基础上+1</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220331221931572.png" alt="image-20220331221931572"></p><p><strong>第四次挥手</strong></p><p>Client -&gt; Server：客户端说我也知道你要走了，发送后进入2MSL后，进入CLOSED状态。Server接受到这个数据包时，不再发数据包，进入CLOSED状态</p><div class="note note-primary">            <p>对四次挥手的细节及原由  移步《计网》</p>          </div><h3 id="Telnet过程">Telnet过程</h3><h3 id="SSH过程">SSH过程</h3><h4 id="基于docker的SSH过程">基于docker的SSH过程</h4><h3 id="FTP过程">FTP过程</h3><h3 id="网络拥塞控制分析">网络拥塞控制分析</h3><h3 id="DNS过程">DNS过程</h3><h3 id="TLS过程">TLS过程</h3><p><strong>为什么在三次握手后会有Client Hello</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>WireShark</tag>
      
      <tag>TCP/IP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MATLAB入门</title>
    <link href="/2022/02/16/MATLAB%E5%85%A5%E9%97%A8/"/>
    <url>/2022/02/16/MATLAB%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1>MATLAB入门</h1><h2 id="基本常识">基本常识</h2><p>MATLAB默认数据类型是double</p><p>Inf：无限大 eps：2.2204e-016无限小</p><p><strong>不加“；”，则会打印出该等式的结果值</strong></p><p><strong>Matlab索引从 1 开始</strong></p><p><strong>Calling Priority</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220216095307953.png" alt="image-20220216095307953"></p><p>%% ：区分一个section</p><p>一行打不完 用… 可以在第二行继续写</p><h3 id="数组">数组</h3><h3 id="条件表达式">条件表达式</h3><p>注意都要有end结尾</p><ul><li>if elseif else</li><li>switch case  <strong>otherwise</strong></li><li>while</li><li>for n = a:increment:c</li></ul><h3 id="函数">函数</h3><p>function [A B] = …表示结果是多个结果</p><p>function handle</p><div class="code-wrapper"><pre class="language-matlab" data-language="matlab"><code class="language-matlab">f <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre></div><p>相当于是函数指针 f是指向函数exp(-2*x)的指针</p><h3 id="矩阵">矩阵</h3><h4 id="矩阵查询"><strong>矩阵查询</strong></h4><p>A=[1,2,3;4,5,6;6,7,8],对于通过A(x)查找矩阵中的某个数，是按照列从上至下的顺序来的，而非行<br>A([a b c])可查找多个数<br>A([a b;a c;])得到矩阵<br>A([a b],[a c]) row a b 和 col a c的交集</p><h4 id="矩阵变换"><strong>矩阵变换</strong></h4><p>替换某个数：A(r,c)=x<br>等差数列应用 A=[1:5; 2:3:15;-2:0.5:0]</p><p>对A矩阵，A(3,:)=[]可将该行抹掉，达到删除的效果</p><h4 id="矩阵运算"><strong>矩阵运算</strong></h4><p>A.*B：直乘，结果矩阵的（i , j）=A(i,j) * B(i,j)<br>./  .^：效果同上</p><h4 id="便捷指令">便捷指令</h4><ul><li>eye(n)：n维单位矩阵</li><li>zeros(r,c)：零矩阵</li><li>ones(r,c)：全为1的矩阵</li><li>diag([a,b,c])：对角矩阵</li><li>max(A)：找到每个<strong>col</strong>中最大的数</li><li>sum  min mean（求平均）同上</li><li>sort(A)：不改变A，另外创建一个矩阵 对每个col按升序排序</li><li>sortrows(A)：基于第一列的元素按升序给矩阵排序，注意这里是一整行的移动，与sort不同</li><li>size(A)：求row 和 col数</li><li>length(A)：求row，即vector</li><li>find(A==x)：求矩阵A中等于x的位置（索引方式返回）</li></ul><h3 id="运算符">运算符</h3><p>*<em>一定要注意./ .<em>的应用，考虑引入向量是否会出错</em></em></p><p><strong>‘：’ (Colon)</strong></p><p>等差数列  A=[1:100] first = 1 end = 100 step = 1<br>A=[1:2:100] first = 1 end = 100 step = 2<br>与字符混用 str=‘a’:2:‘z’</p><p>表全部：A(3,:)表示矩阵A的row 3的全部</p><p><strong>~=</strong>： 等于！=</p><h3 id="变量">变量</h3><p>变量类型</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220216182508540.png" alt="image-20220216175259436"></p><p>Matlab类型转换 通过函数进行 例如int16(x)</p><h4 id="字符串">字符串</h4><p>字符串连接Concat: [s1,s2]</p><p>字符串中字符的比较 str=='a’是str每个字符与’a’进行比较，且str==‘a’与’a’==str有不同的意义，一个是一维的比较一个是多维的比较</p><p>字符串查找替换：str(str==‘l’) = ‘L’<br>str=='l’返回的是逻辑结果，例如11000010，指示了对应的索引位置—多索引位置的指示</p><h3 id="结构体">结构体</h3><p>可用struct函数去声明一个struct（‘name’,value,‘name’,value,…），<a href="http://xn--Student-ug4k22bt62ad85bzoyc.name">也可以直接Student.name</a> = …声明</p><p>结构体复用：Student(2).name  …<br>这时，Student就从单个变量，变成一维向量了</p><h4 id="结构体函数">结构体函数</h4><ul><li>rmfield</li><li>setfield</li><li>struct</li><li>sturct2cell</li><li>fieldnames</li><li>getfield</li><li>isfield</li><li>…</li></ul><h3 id="Cell-Array">Cell Array</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220216175259436.png" alt="image-20220216182508540"></p><p>声明一个Cell Array</p><div class="code-wrapper"><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>xxxx<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>xxxx<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>xxxx<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>xxxxx<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">% 也可以用这种方式A&#123;1,1&#125;=xxxx;</span></code></pre></div><p>每个Entry都有一个pointer指向对应的数据</p><p>查看Cell Array中的<strong>数据类型</strong>：A(1,1)<br>查看Cell Array中的数据值：A{1,1}</p><h4 id="Function">Function</h4><ul><li>cell：创建一个Cell Array</li><li>cell2mat</li><li>cell2struct</li><li>cekkduso</li><li>cellfun</li><li>cellplot</li><li>cellstr</li><li>num2cell</li></ul><h4 id="Multidimension-Array">Multidimension Array</h4><p>三维及以上的结构体，除了row 和 col外还有layer等</p><p>A{1,1,1}=xxx;声明一个</p><p>或者用<strong>cat</strong>连接：</p><p>cat(x,A,B)：A B为要连接的Array<br>x的值代表不同的维度：1-&gt;row;2-&gt;col;3-&gt;layer</p><p>重塑reshape(A,r,c)：将A Array变换成不同row col排布的Array</p><h3 id="进阶">进阶</h3><h4 id="File-Access">File Access</h4><ul><li>save mydata.mat -ascii ：将workspace所有data存入目标文件，提供不同编码格式的存入</li><li>load(‘filename’,‘-ascii’)：加载mat数据<ul><li>还可以读取xlsx文件的指定行列，比较牛逼</li></ul></li><li>xlswrite(‘filename.xlsx’,value,sheetpage,‘E2:E4’)：写数据到xlsx</li><li>xlsread：读取xlsx文件 [Score Header]=xlsread(filename)</li></ul><h5 id="File-I-O">File I/O</h5><ul><li>fopen(filename,‘r’)：返回fid</li><li>fclose</li><li>fscanf(fid,type(‘%d’),size)</li><li>fprintf(fid,format,value)</li><li>feof(fid)：检测文件是否结束<ul><li>while ~feof(fid)常用</li></ul></li></ul><h4 id="Graphics">Graphics</h4><p>MATLAB不会直接通过表达式画图，而是通过点来画图</p><p><strong>plot</strong></p><p>plot(x,y, format) / plot(y)  format详细信息搜索linspec</p><p><strong>legend()</strong> 为曲线添加图例</p><p><strong>title()</strong> 添加标题名称<br>xlabel()  ylabel()  zlabel()<br>text(0.25，2.5，str， ‘Interpreter’，‘latex’) 通过LaTex显示特殊的数学表达式 其中str=‘$ $xxxxx$ $’<br>annotation() 指示箭头</p><p>axis normal /equal(x y单位长度一致)/ square(x y 测量长度一样) /tight 限制坐标轴与图像的贴合程度</p><p>hold on hold off 使得能够在一个Figure里展现多个plot图<br>figure,plot(x,y) 使得画两个图，但gca和gcf就是新的了<br>figure(1)  figure(2) 指定不同的figure<br>grid on off 打开网格</p><p>在一个figure上画几个figure：subplot(row,col,index);</p><p><strong>Graphical Object</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220216095819976.png" alt="image-20220216203657198"></p><p>Utility functions：</p><ul><li>gca  （handle of axes）</li><li>gcf    (handle of figure)</li><li>allchild</li><li>ancestor</li><li>delete</li><li>findall</li><li>get / set 去设置不同property的属性值<ul><li>set(get(gca),‘key’,value)</li></ul></li></ul><h5 id="Save">Save</h5><p><strong>save指令</strong></p><p>saveas(gcf,‘filename’,‘formattype’)</p><p>高解析度  使用print</p><h5 id="Advanced">Advanced</h5><p><strong>Logarithm Plots</strong></p><p>semilogx semilogy loglog：以坐标轴的对数差距显示</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220217102911572.png" alt="image-20220217102911572"></p><div class="code-wrapper"><pre class="language-matlab" data-language="matlab"><code class="language-matlab">x<span class="token operator">=</span><span class="token function">logspace</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token operator">=</span>x<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'XTick'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Plot'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">semilogx</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Semilogx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">semilogy</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>YData<span class="token operator">=</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Semilogy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loglog</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>YData<span class="token operator">=</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'LogLog'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'XGrid'</span><span class="token punctuation">,</span><span class="token string">'on'</span><span class="token punctuation">)</span>A<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>gca<span class="token punctuation">)</span></code></pre></div><p><strong>plotyy</strong></p><p>两个y轴，一左一右</p><p><strong>Histogram</strong></p><p>hist()  histogram()  直方图</p><p><strong>Bar Charts</strong></p><p>bar()  bar3() 条形图</p><p>Stacked And Horizeontal Bar Charts</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220217103925576.png" alt="image-20220217103925576"></p><p><strong>Pie Charts</strong></p><p>圆饼图 pie()</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220217104032664.png" alt="image-20220217104032664"></p><p><strong>Polar Chart</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220217104137982.png" alt="image-20220217104137982"></p><p><strong>Stairs</strong></p><p>阶梯图 <img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220217104302289.png" alt="image-20220217104302289"></p><p><strong>Stem</strong></p><p>离散数据图<img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220217104342873.png" alt="image-20220217104342873"></p><p><strong>其他的图</strong></p><ul><li>BoxPlot 箱线图</li><li>errorbar</li><li>meshgrid 二三维网格图<ul><li><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220217110621149.png" alt="image-20220217110621149"></li><li>搭配colorbar</li><li><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220217111801286.png" alt="image-20220217110734864"></li><li>colormap去优化色调，有不同的色调选择</li></ul></li><li>imagesc</li><li>3D Plot<ul><li>plot3</li><li>meshgrid  : mesh  surf的区别<img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220217110734864.png" alt="image-20220217111801286"></li><li>contour：类似地理等高线</li><li>设置View Angle<ul><li>view()</li></ul></li><li>sphere 创建球面<ul><li>shading flat 去掉曲线</li><li>material shiny 使得对象具有相对于漫反射和环境光更高的镜面反射</li><li>axis vis3d off 去掉坐标轴和3d的拖动功能</li><li>light 打光</li></ul></li></ul></li></ul><h5 id="Draw">Draw</h5><p><strong>Fill</strong></p><p>在x y 点组限定的区域内填充</p><div class="code-wrapper"><pre class="language-matlab" data-language="matlab"><code class="language-matlab">t<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>x<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axis square off<span class="token punctuation">;</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'STOP'</span><span class="token punctuation">,</span><span class="token string">'Color'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'FontSize'</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">'FontWeight'</span><span class="token punctuation">,</span><span class="token string">'bold'</span><span class="token punctuation">,</span><span class="token operator">'</span>HorizontalAlignm</code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220217105235650.png" alt="image-20220217105235650"></p><h2 id="命令-v2">命令</h2><h3 id="Command"><strong>Command</strong></h3><ul><li>who：查看变量<ul><li>whos：查看变量以及Byte Type Size等信息</li></ul></li><li>clear [variable]：清掉一个Variable，不加则清楚所有的variable</li><li>format [style]：设置输出格式<ul><li><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220216203657198.png" alt="image-20220216095819976"></li></ul></li><li>clc：清屏</li><li>disp()：显示变量的值</li><li>prod()：乘、阶乘</li><li>tic toc：在需要之处加，返回中间运行的时间</li><li>close all：关闭所有figure</li><li>which（）：返回文件位置</li><li>cat(): Array concatenation</li><li>reshape()</li><li>linspace  logspace()</li><li>randn(1,x)</li></ul><h3 id="Draw-v2">Draw</h3><ul><li>plot(x,y)：二维线图</li></ul><h3 id="内置变量">内置变量</h3><ul><li>inputname 函数输入的变量名</li><li>mfilename</li><li>nargin 输入参数数目</li><li>nargout</li><li>varargin变长的输入参数列表</li><li>varargout</li></ul><blockquote><p>图片和部分内容来自B站<a href="https://www.bilibili.com/video/BV1GJ41137UH?p=4">MATLAB教程_台大郭彦甫（14课）原视频补档</a> 侵权即删</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MATLAB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unzip与ark解压踩坑</title>
    <link href="/2022/02/15/unzip%E4%B8%8Eark%E8%A7%A3%E5%8E%8B%E7%9A%84%E4%B8%8D%E5%90%8C/"/>
    <url>/2022/02/15/unzip%E4%B8%8Eark%E8%A7%A3%E5%8E%8B%E7%9A%84%E4%B8%8D%E5%90%8C/</url>
    
    <content type="html"><![CDATA[<h1>unzip与ark解压踩坑</h1><blockquote><p>最近安装Linux版本的MATLAB时，对zip压缩包直接采用的是Manjaro内置的解压方式Ark，但解压后出现问题，提示file too short ,一些so文件的名称出现问题，经过查证后，是ln -s 软链接出现问题【软链接相关解释在《Linux文件系统理解》文章中，可回顾一下】。以为是官方下载包不适配自己内核的问题，但自己ln 修复也不行，后通过AUR中查找下载MATLAB又太慢了，最后Google一下才发现可能是unzip的问题。</p></blockquote><h2 id="初步试验">初步试验</h2><p>先看下unzip -X -K时会做哪些事？</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220215160643304.png" alt="image-20220215160643304"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220215160741490.png" alt="image-20220215160741490"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220215160826476.png" alt="image-20220215160826476"></p><p>可以看出去，unzip inflate一些文件，并且进行了一些链接</p><p>这点之后也得到了验证 ls -al</p><p>unzip的解压后文件结果：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220215161815141.png" alt="image-20220215161815141"></p><p>ark的解压后文件结果：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220215163432509.png" alt="image-20220215163432509"></p><p>而在通过manjaro直接解压的方式的目录下没有这种链接，需要人工去链接</p><p>而Manjaro自带的解压方式是Ark，似乎直接通过ark解压zip文件不能保留解压后的链接引用信息，导致文件的安装问题，但用unzip去解压的话就不存在这个问题，可能原有的zip是通过unzip去zip的？然后只能通过unzip去解压？还有待进一步探究…</p><h2 id="后续实验">后续实验</h2><p>我把解压好的带有软链接的文件夹又通过两种方式压缩了一次 ， 其中zip是带有保留软链接的压缩方式的 zip -ry …，所以再次unzip的时候还是会保留软链接（当然ark方式解压还是不会有软链接），可以推断之前这个zip也是通过这种带有保留软链接的压缩方式压缩的，而ark方式压缩的则没有特性（或者说我还没有找到带有保留软链接的压缩指令）</p><h2 id="结论">结论</h2><p>ark在解压一些带有软链接的压缩文件时，不会去主动保留软链接来解压，所以可能出现链接问题导致软件无法正常运行。</p><p>看了这么多之后还是要小心点，对一些安装性质的压缩文件，还是看官方文档吧，官方说啥命令还是啥命令。<br>然后ark之后确实是不太敢用了，还是用zip和unzip安心点 😆</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将Hexo从Github Pages迁移到服务器</title>
    <link href="/2022/01/21/%E8%BF%81%E7%A7%BBHexo/"/>
    <url>/2022/01/21/%E8%BF%81%E7%A7%BBHexo/</url>
    
    <content type="html"><![CDATA[<h1>将Hexo从Github Pages迁移到服务器</h1><div class="note note-primary">            <p>服务器一直空着，之前Hexo博客又搭在Github上有时候从手机上访问图片加载很慢。一直想着迁移到云服务器上，奈何拖延症晚期，昨天终于是弄好了，不过还是踩了个终极沙币坑</p>          </div><h2 id="步骤">步骤</h2><h3 id="服务器方面">服务器方面</h3><ol><li><p>按照必要的git和nginx</p></li><li><p>建立hexo 部署后的public文件夹的实际保存地址 (/home/www/hexo)，赋予权限</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">chown -R $USER:$USER &#x2F;var&#x2F;www&#x2F;hexochmod -R 755 &#x2F;var&#x2F;www&#x2F;hexo</code></pre></div></li><li><p>编辑/etc/nginx/nginx.conf，root改为实际保存地址</p></li><li><p>创建blog的git仓库，在仓库下vim /hooks/post-receive添加以上</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bashgit --work-tree&#x3D;&#x2F;var&#x2F;www&#x2F;hexo --git-dir&#x3D;&#x2F;var&#x2F;repo&#x2F;ganahBlog.git checkout -f</code></pre></div><p>感觉是建立映射关系？</p><div class="note note-primary">            <p>2022 / 4 /10 回顾 ：其实这里是干湿分离，区分git工作目录和仓库源码目录，源码上传到git并不是直接传的源码部分，而是管理在.git文件下，git clone去通知.git文件返回指定分支的源码</p>          </div><p>赋予权限</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">chmod +x &#x2F;var&#x2F;repo&#x2F;ganahBlog.git&#x2F;hooks&#x2F;post-receive</code></pre></div></li><li><p>配置域名，在nginx配置文件中server_name修改一下即可</p></li></ol><h3 id="主机方面">主机方面</h3><ol><li>在hexo的全站配置文件下，修改deploy，repo改成：root@{ipaddress}:{repoaddreess.git}即可</li><li>建立主机和服务器的免密登录，主机ssh-keygen -t rsa，再ssh-copy-id root@ipaddr 即可，这里跟公钥私钥挂钩了哈</li></ol><h2 id="巨坑">巨坑</h2><p>来了来了</p><h3 id="1-git用户管理">1. git用户管理</h3><p>还有一种方法是新建git用户，赋予git用户权限，然后在git用户管理下去操作，但是这里我实际deploy后hexo的实际发布目录里没有文件，我怀疑是权限赋予的问题，比如新建git用户时权限没给到位，然后hexo文件的文件对git用户的读写的权限赋予</p><h3 id="2-hexo文件配置不支持">2. hexo文件配置不支持</h3><p>这里巨坑。我最开始hexo在fluid主题下的配置，有一个选项是force-https，强制升级https链接，本意是强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错），我以为没事我就打开了。</p><p>后头这里发布后，在本地能够成功预览，但deploy到服务器上，服务器本身没有错，但访问css等资源报错，但我通过浏览器输入路径访问有时候能够成功有时候不能访问成功，后头才发现是http和https的问题，https的时候就不能访问，http就能访问，这也是这里的问题。后头把这个选项改成false瞬间就好了。。。。找了半天，离大谱。<img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/2022-01-20_21-10.png" alt=""></p><div class="note note-success">            <p>最后再标记一下博客的内、外国访问地址</p><p>Github Pages：<a href="https://pplong.top">https://pplong.top</a><br>Cloud Tencent(Shanghai)：<a href="http://www.pplong.top">http://www.pplong.top</a></p>          </div>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>ErrorResolve</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概总结</title>
    <link href="/2022/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%80%BB%E7%BB%93/"/>
    <url>/2022/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1>数据库系统概总结</h1><h2 id="绪论">绪论</h2><p>数据库技术的四个基本概念： 数据、数据库、数据库管理系统和数据库系统</p><p><strong>数据</strong>(data)：数据库中存储的基本对象。定义：描述事务的符号记录，可以是数字也可以是文字、图形、图像…都可以经过数字化存储后存入计算机。</p><p><strong>数据库</strong>(DataBase)：长期存储在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按照一定的数据模型组织、描述和存储，具有较小的冗余度、较高的数据独立性和易扩展性，可为各种用户共享。<br>三个特点：<strong>永久存储、有组织、可共享</strong></p><p><strong>数据库管理系统</strong>(DataBase Management System ,DBMS)：位于用户与操作系统之间的一层数据管理软件，属于计算机的基础软件。<br>主要功能：</p><ol><li>数据定义 （提供数据定义语言DDL[Data Definition Language]）</li><li>数据组织、存储和管理</li><li>数据操纵 （提供数据操纵语言 DML[Data Manipulation Language]）</li><li>数据库的事务管理和运行管理</li><li>数据库的建立和维护功能</li><li>其他功能</li></ol><p><strong>数据库系统</strong>(DataBase System, DBS)：由数据库、数据库管理系统、应用程序和数据库管理员(DBA) 组成的存储、管理、处理和维护数据的系统</p><h3 id="数据库管理技术的发展">数据库管理技术的发展</h3><p><strong>1. 人工管理阶段</strong></p><p>数据处理方式：批处理</p><p>缺点：数据不保存、应用程序管理数据、数据不共享、数据不具有独立性</p><p><strong>2. 文件系统阶段</strong></p><p>特点：数据可长期保存、由文件系统管理数据<br>优点：数据共享性差、冗余度大、数据独立性差</p><p><strong>3. 数据库系统阶段</strong></p><p>特点：</p><ol><li><p>数据结构化（与文件系统的<strong>本质区别</strong>）</p></li><li><p>数据的共享性高、冗余度低且易扩充</p></li><li><p>数据独立性高</p><ol><li>物理独立性：用户的应用程序与数据库中数据的物理存储是相互独立的（用户程序无需了解）</li><li>逻辑独立性：用户的应用程序与数据库的逻辑结构是相互独立的（数据的逻辑结构改变时用户程序可以不变）</li></ol></li><li><p>数据由数据库管理系统统一管理和控制</p><p>数据库管理系统需要提供以下几个方面的数据控制功能：</p><ul><li>数据安全性保护：保护数据防止不合法使用造成的数据泄密和破坏</li><li>数据完整性检查：数据的正确性、有效性、相容性</li><li>并发控制</li><li>数据库恢复</li></ul></li></ol><p>数据库是长期存储在计算机内有组织、大量、共享的数据集合，可以供各种用户共享，有最小冗余度和较高的数据独立性。DBMS在数据库建立、运行和维护时对数据库进行同意控制保证数据的完整性和安全性，并在多用户同时使用时进行并发控制，在发生故障后对数据库进行恢复</p><p>DBS的出现让信息系统从以加工数据的程序为中心转向围绕共享的数据库为中心的新阶段</p><h3 id="数据模型">数据模型</h3><p>数据模型：对现实世界数据特征的抽象。是数据库系统的核心和基础</p><h4 id="两类数据模型">两类数据模型</h4><p>数据模型应满足的三方面要求：</p><ol><li>较为真实地模拟显示世界</li><li>容易被人理解</li><li>便于在计算机上实现</li></ol><p><strong>1. 概念模型</strong></p><p>也是信息模型，按用户的观点来对数据和信息建模，主要用于数据库设计</p><p>信息世界的节本概念：</p><ol><li>实体：客观存在并且可相互区别的事物</li><li>属性</li><li>码</li><li>实体型</li><li>实体集</li><li>联系</li></ol><p>概念模型的表示方法： 实体联系方法(E-R方法)</p><p><strong>2. 逻辑模型和物理模型</strong></p><p>按计算机系统的观点对数据建模，主要用于数据库管理系统的实现<br>其中物理模型是对数据的最底层抽象，描述数据在系统内部的表示方式和存取方法，火灾磁盘或者磁带上的存储方式和存取方式，面向计算机系统</p><p>数据模型是数据库系统的核心和基础</p><h4 id="数据模型的组成要素">数据模型的组成要素</h4><p>数据模型由以下三部分组成</p><ol><li>数据结构：描述数据库的组成对象以及对象之间的联系</li><li>数据对象：对数据库中各种对象的示例允许执行的操作的集合，包括操作及有关的操作规则</li><li>数据的完整性约束条件：一组完整性规则</li></ol><h4 id="常用的数据模型">常用的数据模型</h4><ul><li>层次模型<ul><li>最早出现</li><li>满足以下条件：<ul><li>有且只有一个节点没有双亲节点，为根节点</li><li>根以外的其他的节点有且只有一个双亲节点</li></ul></li><li>优点：<ol><li>数据结构简单清晰</li><li>查询效率高（记录之间的联系用有向边表示 ----- 指针）</li><li>提供了良好的完整性支持</li></ol></li><li>缺点：<ol><li>现实世界中许多联系费层次，不适用层次模型表示</li><li>如果一个节点具有多个双亲节点，用层次模型表示则十分笨拙，引入冗余数据</li><li>查询子女节点必须通过双亲节点</li><li>结构严密，层次命令趋于程序化</li></ol></li></ul></li><li>网状模型<ul><li>表示非树状结构的现实模型</li><li>满足以下条件：<ul><li>允许一个以上的节点无双亲</li><li>一个节点可以有多于一个的双亲</li></ul></li><li>网状模型中子女节点与双亲节点的联系不唯一</li><li>优点：<ol><li>直接描述显示世界</li><li>具有良好的性能，存取效率高</li></ol></li><li>缺点：<ol><li>结构复杂，随着环境扩大，数据库的结构变得越来越复杂</li><li>网状模型的DDL、DML复杂，要嵌入一种高级语言，用户不容易掌握</li><li>用户必须了解系统结构的细节，记录之间的联系通过存取路径实现，应用程序在访问数据时必须选择适当的存取路径</li></ol></li></ul></li><li>关系模型<ul><li><strong>最重要</strong>的一种数据模型</li><li>要求关系必须是规范化的，关系的每一个分量必须是一个不可分的数据项</li><li>关系模型中的数据操作是集合操作，操作对象和操作结果都是关系</li><li>优点：<ol><li>建立在严格的数学概念的基础上</li><li>概念单一、数据结构简单清晰，无论是实体还是实体之间的联系都用关系来表示，对数据的检索和更新结果也是关系</li><li>存取路径对用户透明，有更高的数据独立性，更好的安全保密性</li></ol></li></ul></li><li>面向对象数据模型</li><li>对象关系数据模型</li><li>半结构化数据模型</li></ul><h3 id="数据库系统的结构">数据库系统的结构</h3><p>模式：数据库中全体数据的逻辑结构和特征的描述，仅仅设计 型（对一类数据结构和属性的说明）的描述，不涉及具体的值。模式的一个具体值成为模式的一个实例，同一个模式可以有多个实例。模式的相对稳定的，实例是相对变动的。模式反应的是数据的结构及其联系，实例反应的是数据库某一时刻的状态</p><h4 id="数据库系统的三级模式结构">数据库系统的三级模式结构</h4><ol><li><p>模式（schema）：</p><p>也称为逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。是数据库系统模式结构的中间层。<br>模式实际上是数据库数据在逻辑级上的视图，一个数据库只有一个模式。<br>DBMS提供模式DDL来严格定义模式</p></li><li><p>外模式（external schema）：</p><p>也叫子模式、用户模式，是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</p><p>是模式的子集，一个数据库可有多个外模式，是各个用户的数据视图。</p></li><li><p>内模式（internal schema）：</p><p>存储模式，一个数据库只有一个内模式，是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式</p></li></ol><p>DBMS在三级模式之间提供两层映像：</p><ol><li><p>外模式/模式映像</p><p>对每一个外模式，DBS都有一个外模式/模式映像，定义了改外模式与模式之间的对应关系</p><p>模式改变时，由数据库管理员对各个外模式/模式的映像做出改变，可以使得外模式保持不变。应用程序是依据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，即数据的逻辑独立性。</p></li><li><p>模式/内模式映像</p><p>唯一的，定义了数据全局逻辑结构与存储结构之间的对应关系。当数据库的存储结构改变时，由数据库管理员对模式/内模式做出相应改变，可以使得模式不变，从而应用程序也不用改变，保证了数据的物理独立性</p></li></ol><h3 id="数据库系统的组成">数据库系统的组成</h3><ul><li>硬件平台及数据库</li><li>软件</li><li>人员<ul><li>注意一点。用户分成三类：偶然用户（中高级管理人员）、简单用户（普通用户）、复杂用户（具有高科学技术背景的人员）</li></ul></li></ul><h2 id="关系数据库">关系数据库</h2><h3 id="关系">关系</h3><ul><li><p>域：一组具有相同数据类型的值的集合</p></li><li><p>笛卡尔积</p></li><li><p>关系：</p><p>候选码：关系中的某一属性组的值能唯一标识一个元祖，而其自己不能，则称该属性组为候选码。若一个关系有多个候选码，则选定其中的一个为主码。候选码的诸属性称为主属性，不包含在任何候选码中的属性称为非主属性或者非码属性。<br>全码：候选码只包含一个属性，关系模式的所有属性是这个关系模式的候选码</p><p>关系的三种类型：</p><ul><li>基本关系</li><li>查询表</li><li>视图表：虚表，不对应实际存储的数据</li></ul></li></ul><h3 id="关系模式">关系模式</h3><p>关系模式是型，关系是值，关系模式是对关系的描述</p><h3 id="关系操作、">关系操作、</h3><h3 id="关系完整性">关系完整性</h3><p>关系模式中有三类完整性约束：实体完整性、参照完整性、用户定义完整性</p><ol><li>实体完整性：若属性A是基本关系R的主属性，则A不能取空值</li><li>参照完整性：若属性F是基本关系R的外码，它与基本关系S的猪吗Ks相对应，则对于R中每个元组在F上的值必须：（谁是谁的外码）<ol><li>或者取空值</li><li>或者等于S中某个元组的主码值</li></ol></li><li>用户定义完整新：用户定义的完整性就是针对某一具体关系数据库的约束条件，反应某一具体应用所设计的数据必须满足的语义要求</li></ol><h3 id="关系代数">关系代数</h3><p>抽象的查询语言，用对关系的运算来表达查询</p><p>关系代数的运算按照与运算符不同可以分为传统集合运算和专门的关系运算。</p><ol><li>传统集合运算：并、交、差、笛卡尔积</li><li>专门的关系运算：包括、投影、连接、除运算等<ul><li>连接：注意自然连接、外连接、左外连接、右外连接（符号如何表示）。悬浮元组是啥</li><li>除：理解如何算</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日语学习</title>
    <link href="/2022/01/01/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/01/01/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>趙さんの日本語勉強する</h1><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104130620.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134333.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134345.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134350.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134354.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134357.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134442.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134447.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134450.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134454.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134457.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134501.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134505.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134509.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134513.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134516.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134523.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134526.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134530.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134533.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134538.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134542.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134542.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134545.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134549.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134552.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134555.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134559.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134602.png" alt=""></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/QQ%E5%9B%BE%E7%89%8720220104134606.png" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件体系架构考试复习</title>
    <link href="/2021/11/10/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/11/10/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>软件体系架构考试复习</h1><h2 id="基本概念-v3">基本概念</h2><p><strong>软件体系架构</strong>：软件体系结构是具有一定形式的结构化元素，抽象的讲，软件体系结构包括构成系统的设计元素的描述，设计元素的交互，设计元素组合的模式，以及在这些模式中的约束。具体的讲，<strong>体系结构 = 组件+连接件+约束</strong></p><p><strong>组件</strong>：具有某种功能的<strong>可重用的软件模块单元</strong>，表示了系统中<strong>主要的计算单元和数据存储</strong>。</p><p><strong>连接件</strong>：表示了组件之间的交互，简单的连接件有：<strong>管道，过程调用，事件广播</strong>等，复杂的连接件有：<strong>客户-服务器通信协议，数据库和应用之间SQL连接</strong>等。</p><p><strong>约束</strong>：表示了组件和连接件的<strong>拓扑逻辑和约束</strong>。</p><p><strong>管道-过滤器：</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211110093740684.png" alt="image-20211110093740684"></p><p>每个过滤器都有一组输入集和输出集。过滤器从管道中读入数据流，对输入流进行内部转换和增量计算（丰富，精炼，转换，融合，分解），然后产生输出数据流并写入管道中。</p><p>特点：</p><p>每个过滤器必须是一个独立的实体：过滤器之间无需共享状态，即filter无需知道其输入管道和输出管道所连接的其他过滤器的存在，更不必关注相邻过滤器的实现细节。他仅仅需要对输入数据流进行特定的内部転换和增量计算，筛选出合适的数据。<br>数据到来是便被处理，不是收集然后处理，即在输入被完全消费之前，输出便产生了。<br>**管道是将数据从一个过滤器的输出端移动到另一个过滤器的输入端，是一个单向流。**不同的管道中流动的数据流，可能具有不同的数据格式。<br>应用示例<br>编译器、Unix管道、图像处理，信号处理，声音与图像处理</p><p>优点和缺点</p><ul><li><p>优点：</p><p>良好的隐蔽性和高内聚、低耦合：可以将整个系统的输入输出行为看成多个过滤器功能的简单合成。<br>支持功能模块的重用：任意两个过滤器只要相互间所传输的数据格式上达成一致，就可以连接在一起<br>系统容易维护和拓展：新的过滤器容易加入到系统中，旧的过滤器也可被改进的过滤器替换<br>允许对一些如吞吐量，死锁 等属性进行分析<br>支持并行执行：每一个过滤器既可以独立运行，也可与其他过滤器并发执行。</p></li><li><p>缺点：</p><p>不适合处理交互的应用<br>系统性能不高，并增加了编写过滤器的复杂性：数据传输缺乏通用标准，每个过滤器绝大部分时间消耗在数据格式的解析，转换，合成上。同样也不适用于大量共享数据的应用设置。</p></li></ul><p><strong>调用-返回风格</strong>：</p><p><a href="https://blog.csdn.net/qq_42475914/article/details/108087484">https://blog.csdn.net/qq_42475914/article/details/108087484</a></p><p><strong>七种软件架构模式</strong></p><p><a href="https://blog.csdn.net/omnispace/article/details/80224942?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163650884616780271535660%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163650884616780271535660&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-80224942.pc_search_mgc_flag&amp;utm_term=%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F&amp;spm=1018.2226.3001.4187">讲解</a></p><p><a href="https://blog.csdn.net/qq_41626229/article/details/85930248?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-85930248.pc_search_mgc_flag&amp;spm=1018.2226.3001.4187">2</a></p><ul><li>分层架构</li><li>多层架构</li><li>管道过滤器架构</li><li>客户端服务器架构</li><li>模型视图控制器架构</li><li>事件驱动架构</li><li>微服务架构</li><li>黑板模式 <a href="https://blog.csdn.net/aodya68040/article/details/102171976?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E9%BB%91%E6%9D%BF%E6%A8%A1%E5%BC%8F&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-6-102171976.pc_search_mgc_flag&amp;spm=1018.2226.3001.4187">介绍</a></li><li><a href="https://blog.csdn.net/G66565906/article/details/100762744?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163651249616780262582073%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163651249616780262582073&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-100762744.pc_search_mgc_flag&amp;utm_term=C2%E9%A3%8E%E6%A0%BC&amp;spm=1018.2226.3001.4187">C2风格</a></li></ul><p><a href="https://blog.csdn.net/yuhao22/article/details/105619370">七种软件架构设计原则</a></p><p><a href="https://blog.csdn.net/qq_37174526/article/details/85078396?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-85078396.pc_search_mgc_flag&amp;spm=1018.2226.3001.4187">C/S B/S 比较  三层CS  REST架构风格 黑板模式</a></p><p><a href="https://blog.csdn.net/thinkingforever/article/details/3160305?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163650984816780274121579%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163650984816780274121579&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-3160305.pc_search_mgc_flag&amp;utm_term=%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7&amp;spm=1018.2226.3001.4187">质量属性</a></p><p>可用性、可修改性、性能、安全性、可测试性、易用性</p><p><a href="https://wenku.baidu.com/view/67784e8dba0d4a7303763a14.html">软件体系结构组成、风格</a></p><p><a href="https://blog.csdn.net/qq_41800649/article/details/104650410?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163651135816780366584580%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163651135816780366584580&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-104650410.pc_search_mgc_flag&amp;utm_term=%E8%BD%AF%E4%BB%B6%E5%8D%B1%E6%9C%BA&amp;spm=1018.2226.3001.4187">软件危机</a></p><p><a href="https://wenku.baidu.com/view/26a5f0aa910ef12d2af9e779.html?rec_flag=default&amp;fr=Recommend_RelativeDoc-40381,60272,40340,60359-kpdrec_doc_pc_view-67784e8dba0d4a7303763a14&amp;sxts=1636511001147">BS CS 三层CS的区别 ，动态软件体系架构，哪些方面去评估软件体系架构</a></p><p><a href="https://blog.csdn.net/qq_40949254/article/details/78852620">4+!视图模型 软件危机  DSSA SOA</a></p><p><a href="https://blog.csdn.net/m0_37482190/article/details/103774853?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163651141816780269841231%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163651141816780269841231&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-103774853.pc_search_mgc_flag&amp;utm_term=%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84&amp;spm=1018.2226.3001.4187">4+1视图模型 SOA</a></p><p><a href="https://baike.baidu.com/item/atam/1652710?fr=aladdin">ATAM 架构权衡分析方法</a></p><p>介绍ATAM。<br>介绍商业动机；<br>介绍体系结构；<br>识别体系结构方法；<br>生成质量属性效用树。<br>分析体系结构方法。<br>头脑风暴和设定场景优先级。<br>分析体系结构方法；<br>提供评估结果；</p><p><a href="https://baike.baidu.com/item/SAAM">SAAM 体系结构分析方法</a></p><p>场景生成；<br>体系结构描写叙述；<br>场景的分类和优先级确定。<br>间接场景的单独评估。<br>对场景关联的评估。<br>形成整体评估；</p><p><a href="https://wenku.baidu.com/view/aa0de804e45c3b3567ec8bb5.html">题目1 ATAM表述 管道过滤器特点</a></p><p><a href="https://wenku.baidu.com/view/718aa2d0fd4ffe4733687e21af45b307e971f9e1.html?rec_flag=default&amp;fr=Recommend_RelativeDoc-40381,60272,40340,60359-kpdrec_doc_pc_view-aa0de804e45c3b3567ec8bb5&amp;sxts=1636512258928">题目2</a></p><p><a href="https://wenku.baidu.com/view/d809f7d87ed5360cba1aa8114431b90d6d858903.html?rec_flag=default&amp;fr=Recommend_RelativeDoc-40381,60272,40340,60359-kpdrec_doc_pc_view-a88bf77502768e9951e73889&amp;sxts=1636512350407">题目3 名词解释</a></p><p><a href="https://wenku.baidu.com/view/9249ea5a763231126edb11df.html?rec_flag=default&amp;fr=Recommend_RelativeRecommend-40381,60272,40340,60359-pc_view_otherlike_new-aa0de804e45c3b3567ec8bb5">题目4 名词解释和问答</a></p><p><a href="https://wenku.baidu.com/view/5deb7e1ca8114431b90dd8eb.html?fixfr=B0DOSKxVyIS3Ey48HcnErQ%253D%253D&amp;fr=income2-wk_go_search-search">题目5 偏画图</a></p><p><a href="https://wenku.baidu.com/view/7cd76ba8cad376eeaeaad1f34693daef5ff71366.html?fixfr=iCEVfdPyN5u2%252BxPnVoVOQA%253D%253D&amp;fr=income10-wk_go_searchX-search">题目6</a></p><p><a href="https://wenku.baidu.com/view/25e8606300020740be1e650e52ea551811a6c97d.html?fixfr=CwG8HDA9mdQLnjpnRG2brw%253D%253D&amp;fr=income12-wk_go_searchX-search">题目7 软件体系架构定义 ADD</a></p><p><a href="https://www.docin.com/p-2325692580.html">用例图类图</a></p><p><a href="https://www.doc88.com/p-2334903732994.html?r=1">华科原题</a></p><p>重点：BS CS 三层CS  质量属性   ATAM 评估方法步骤</p>]]></content>
    
    
    
    <tags>
      
      <tag>Exam</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理期末复习</title>
    <link href="/2021/11/05/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/11/05/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>数字图像处理复习</h1><h2 id="基本概念">基本概念</h2><p>图像在某点的强度或者灰度：在任何一堆空间坐标(x,y)处的幅值f。当x和y和灰度值f是有限的离散数值时，该图像为数字图像</p><p>取样：对坐标值进行数字化<br>量化：对幅值数字化</p><p>图像的动态范围：系统中最大可度量灰度与最小可检测灰度之比。上限取决于饱和度，下限取决于噪声，基本上，动态范围能由系统表示的最低和最高灰度级来确定</p><p>一副图像为k比特图像：一幅图像有2^k个灰度级</p><p>灰度：黑色调表示物体，黑色为基准色，不同饱和度的黑色来显示图像。灰度值0-255表示的亮度从深到浅</p><p>HSV模型</p><ul><li>饱和度Sat：：超过这个值的灰度级将会被剪切掉这样的一个最高值。原色饱和度最高，饱和度降低，色彩变得暗淡到没有彩（简单点理解就是颜色中的灰色量含量的高低）<br>色彩中含有彩色成分和消色成分（灰度）的比例。还有消色成分多时，色彩不包含，色觉弱灰度大，色彩显得暗淡，视觉效果弱。</li><li>明度Val：眼睛对光源和物体表面的敏感程度的感觉，主要由光纤强弱决定的视觉经验。指颜色的以南成都，色调相同的颜色，但明暗成都可能不同（指的是颜色中混合了多少白色或黑色。）<br>取决于光源强度，与物体表面的反射系数。</li><li>色相Hue：色彩的相貌，指各种颜色，红橙黄绿青蓝紫等，与色彩的敏感强弱没有关系。</li></ul><p>空间分辨率：图像中能够可分辨的最小细节的度量（每单位距离线对数和每单位距离点数（像素数）是最通用的单位）。例如每英寸点数dpi</p><p>灰度分辨率：灰度级中可分辨中的最小变化</p><p>对比度：一副图像中敏感区域最亮的白和最暗的黑之间不同亮度层级的测量，差异范围越大代表对比越小。高的对比度让图像更清晰醒目，色彩更加鲜艳</p><p>灰度变换：一个灰度区间映射到另一个灰度区间的变换。灰度变换可使图像动态范围加大，图像对比度扩展，图像清晰，特征明显，是图像增强的重要手段</p><p>链码：用曲线起始点的<a href="https://baike.baidu.com/item/%E5%9D%90%E6%A0%87/85345">坐标</a>和边界点方向代码来描述曲线或边界的方法</p><p>形状数：形状数是基于4 链码的边界描述符，它定义为值最小的4 链码的一阶差分码。由于形状数来源于4 链码的一阶差分码，所以它具有与起始点无关以及对旅转90度不敏感的特点，对任意旋转角度的归一化，通常采用的方法是将一个坐标轴与边界的主轴对齐，为了使其对旋转不敏感，应当先将x 轴旋转至与边界的主轴方向一致。</p><p>图像：图像是人类视觉的基础，是自然景物的客观反映，是人类认识世界和人类本身的重要源泉。“图”是物体反射或透射光的分布，“像“是人的视觉系统所接受的图在人脑中所形成的印象或认识，<a href="https://baike.baidu.com/item/%E7%85%A7%E7%89%87/1465692">照片</a>、绘画、剪贴画、地图、书法作品、手写汉学、传真、卫星云图、影视画面、X光片、脑电图、<a href="https://baike.baidu.com/item/%E5%BF%83%E7%94%B5%E5%9B%BE/399200">心电图</a>等都是图像</p><p><strong>数字图像</strong>：又称<strong>数码图像</strong>或<strong>数位图像</strong>，是二维图像用有限数字数值<a href="https://baike.baidu.com/item/%E5%83%8F%E7%B4%A0/95084">像素</a>的表示。由数组或矩阵表示，其光照位置和强度都是离散的。数字图像是由模拟<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%83%8F%E6%95%B0%E5%AD%97%E5%8C%96">图像数字化</a>得到的、以像素为基本元素的、可以用<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E8%AE%A1%E7%AE%97%E6%9C%BA/1531105">数字计算机</a>或数字电路存储和处理的图像。</p><p>图像数字化：是将空间分布和亮度取值军连续分布的模拟图像经采样和量化转换成计算机能够处理的数字图像的过程。</p><h2 id="空间滤波">空间滤波</h2><p>空间滤波：采用滤波处理的影像增强方法。能改善影像质量（去除高频噪声与干扰、影像边缘增强等）</p><ul><li>低通滤波（平滑）</li><li>高通滤波（锐化）</li><li>带通滤波</li></ul><p><strong>对数变换</strong>：s = clog(1+r),将输入中范围较窄的低灰度值映射为输出中较宽范围的灰度值，高灰度值相反会被压缩。<br>压缩像素值变化较大的图像的动态范围 ---- 以此强调图像低灰度部分</p><p><strong>伽马变换</strong>：s = c r^y<br>部分y值的伽马曲线将较窄范围的暗色输入值映射为较宽范围的输出值。与对数变换类似（y值大则输出灰度级高）<br>改变伽马值会改变彩色图像中的rgb比率</p><p><strong>分段线性变换函数</strong></p><ul><li>对比度拉伸</li><li>灰度级分层</li><li>比特平面分层</li></ul><h3 id="直方图">直方图</h3><h4 id="均衡化">均衡化</h4><p>直方图均衡化：增强动态范围偏小的图像的对比度（原始图像由于其灰度分布可能集中在较窄的区间，造成图像不够清晰）<br>对在图像中像素个数多的灰度值（即对画面起主要作用的灰度值）进行展宽，而对像素个数少的灰度值（即对画面不起主要作用的灰度值）进行归并，从而增大对比度，使图像清晰，达到增强的目的</p><p>灰度直方图可鞋厂一维离散函数:</p><p>$$h(k) = n_k \space k=0,1,…,L-1$$</p><p>灰度级出现的相对频率：</p><p>$$P_r(k) = n_k/N$$N代表像素的总数</p><p>均衡化步骤：</p><ol><li>统计不同灰度级的像素和和总像素数</li><li>计算原始图像的灰度分布频率</li><li>计算原始㐫的灰度累计分布频率 $$s_i = \sum_{i=0}^k \frac{n_i}{N}$$</li><li>计算上一步算的s_i并进行<strong>四舍五入</strong></li><li>进行映射</li></ol><p><strong>特点：</strong></p><p>如果图像整体偏暗或者偏亮，则均衡化使用，但对处理的数据不加选择，可能会干扰背景并降低有用信号的对比度。此外均衡化后图像的灰度级减少，某些细节会减少</p><h4 id="规格化">规格化</h4><p>均衡化优点能自动增强整个图像对比度(??)，但具体增强不容易控制</p><p>直方图匹配要求实现：输出的图像具有规定的直方图的形状。</p><p>过程：</p><ol><li>$$T® = (L-1)\int_0^rp_r(w)dw$$</li><li>$$G(z) = (L-1)\int_0^zp_z(t)dt=s$$</li><li>$$z = G<sup>{-1}[T®]=G</sup>{-1}(s)$$</li><li>用第一个式子进行均衡，图像的像素值是s值，对图像中具有s值的每个像素值还行z=G^-1(s)</li></ol><h4 id="局部均衡化">局部均衡化</h4><h3 id="空间滤波-v2">空间滤波</h3><p>就是直接在灰度值上，做一些滤波操作。滤波：将某个频率成分滤除。</p><p>$$g(x,y)=\sum_{s=-a}^a \sum_{t=-b}^bw(s,t)f(x+s,y+t)$$</p><h4 id="平滑滤波器">平滑滤波器</h4><ul><li>平均滤波<ul><li>滤波器范围内的点求平均值，使得图像平滑消除噪声</li></ul></li><li>加权滤波<br>$$g(x,y)=\frac{\sum_{s=-a}^a \sum_{t=-b}<sup>bw(s,t)f(x+s,y+t)}{\sum_{s=-a}</sup>a \sum_{t=-b}<br>^bw(s,t)}$$</li></ul><h4 id="统计排序滤波器">统计排序滤波器</h4><p>非线性空间滤波器</p><ul><li>最大值滤波器</li><li>最小值滤波器</li><li>中值滤波器：取出椒盐噪声</li></ul><h4 id="锐化滤波器">锐化滤波器</h4><p>突出灰度的过渡部分</p><p>一阶微分的图像锐化：梯度锐化<br>二阶微分的图像锐化：拉普拉斯锐化</p><p>一阶微分：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211105115404043.png" alt="image-20211105115404043"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211105115416045.png" alt="image-20211105115416045"></p><p>Sobel算子：用作边缘检测，运算图像亮度函数的灰度近似值</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211105115756505.png" alt="image-20211105115756505"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211105120121886.png" alt="image-20211105120121886"></p><p>$$G = \sqrt{G_x^2 + G_y^2}$$或者$$|G| = |G_x|+|G_y|$$</p><p>二阶微分：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211105114701781.png" alt="image-20211105114701781"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211105115242663.png" alt="image-20211105115242663"></p><h2 id="彩色图像">彩色图像</h2><h3 id="颜色模型">颜色模型</h3><p>三原色比例直接决定混合色调的饱和度，混合色亮度等于各原色亮度和</p><ul><li><p>RGB：相加混色模式。每种颜色分量越多，得到的颜色就越亮</p></li><li><p>CMY：青、洋红、黄加上黑色 ，相减色，因为它减少了视觉系统识别颜色所需要的反射光（作为RGB的互补色光而存在，通过从白光中减去RGB三原色）</p></li><li><p>HSI：色调（光波频率有关，表示人的感官对不同颜色的感受 ）饱和度（颜色纯度，加入白光会稀释饱和度） 亮度</p><ul><li>体色调H由角度表示，它反映了颜色最接近什么样的光谱波长，即光的不同颜色。通常假定0°表示的颜色为红色， 120°的为绿色， 240°的为蓝色。<br>从0°到360°的色相覆盖了所有可见光谱的彩色</li><li>饱和度S表征颜色的深浅程度，饱和度越高，颜色越深。饱和度参数是色环的原点（圆心）到彩色点的半径的长度。在环的边界上的颜色饱和度最高，其饱和度值为1；在中心的饱和度为0。</li><li>亮度I是指光波作用于感受器所发生的效应，其大小由物体反射系数来决定，反射系数越大，物体的亮度愈大，反之愈小。如果把亮度作为色环的垂线，那么H、S、I构成一个柱形彩色空间。灰度阴影沿着轴线自下而上亮度逐渐增大，由底部的黑渐变成顶部的白。圆柱顶部的圆周上的颜色具有最高亮度和最大饱和度。</li></ul></li></ul><p>WEB安全色：web安全色，就是网页安全色。 名字虽然有安全，但是和网站的安全无关。叫这个名字,是因为这些色彩在不同的显示设备和操作系统上表现基本一致。非安全色换一个OS环境，颜色就可能失真。</p><p>因为我们用的各种设备基本都是用RGB模式表示色彩，由R（红）、G（绿）、B（蓝）三原色混合成各种其它颜色。把原色按光强划分若干色阶，再各原色取一个色阶混合得到实际颜色。目前我们的PC把各个基本色彩的色阶划分256阶(00-FF)，R、G、B混合可得色彩为256^3=16777216种,即24位真彩色。但是这24位颜色不是所有的设备都能显示,有些设备只有256色,有些OS最后得到的颜色和Windows不同。其中有216种颜色,在几乎所有的彩色环境都能显示,就是推荐用在设计中的安全色了。它的来源却是在在256色(8位)老设备时代，那时候选定256种颜色的通常做法是：分RGB为6阶得216种色彩，再另外选择40种色彩凑成256色。216色来自于色阶的6等分,在各厂商的实现中都是一样，其它40种颜色由厂商自己选，所以各设备都不同。我们现在的256色阶(24位)，划分时都包含了以前的216种公共色。把256分6份取16进制,就是（00，33，66，99，CC，FF），现在取216色就是将这六个数字进行任意排列组合。如#0000FF为纯蓝，在web设计中，因为安全色都是双数，我们一般都把6字缩写成3字，这样#0000FF就是#00F。</p><h3 id="伪彩色">伪彩色</h3><ul><li>密度分层，灰度级 -&gt; 彩色</li><li>灰度级-彩色变换法<ul><li><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211107144418053.png" alt="image-20211107144418053"></li></ul></li><li>频域滤波法<ul><li>输出的图像的伪彩色与灰度级无光，取决于灰度图中不同的频率成分</li><li>如果为了突出图像中高频成分（即图像的细节）而将其变为蓝色，则只需要将蓝通道滤波器设计成高通滤波器。</li></ul></li></ul><p><strong>RGB-&gt;HSI</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211109093851072.png" alt="image-20211109093851072"></p><p><strong>HSI-&gt;RGB</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211109093902012.png" alt="image-20211109093902012"></p><h2 id="图像压缩">图像压缩</h2><p><strong>有损无损图像</strong></p><p><strong>马赫带效应</strong></p><p>马赫带效应（Mach band effect）是指视觉的<strong>主观感受</strong>在<strong>亮度有变化</strong>的地方出现<strong>虚幻的明亮或黑暗的条纹</strong>，马赫带效应的出现是人类的视觉系统造成的。<br>生理学对马赫带效应的解释是：<strong>人类的视觉系统有增强边缘对比度的机制</strong></p><h2 id="图像平滑">图像平滑</h2><h3 id="均值滤波">均值滤波</h3><h3 id="中值滤波">中值滤波</h3><h3 id="高通滤波">高通滤波</h3><p><strong>中值滤波和均值滤波的区别</strong></p><p>均值滤波相当于低通滤波，是一种线性滤波器。有将图像模糊化的趋势，采用线性的方法，平均整个窗口范围内的像素值、对椒盐噪声基本无能为力。对高斯噪声表现较好</p><p>中值滤波是非线性低通滤波器，优点是<strong>可以很好的过滤掉椒盐噪声</strong>，缺点是易造成图像的不连续性</p><p><strong>椒盐噪声</strong></p><p>脉冲噪声。随机出现的白点或者黑点。椒盐噪声的成因可能是影像讯号受到突如其来的强烈干扰而产生、类比数位转换器或位元传输错误等。例如失效的感应器导致像素值为最小值，饱和的感应器导致像素值为最大值。<br>除去的方式是中值滤波器</p><p><strong>高斯噪声</strong></p><p>高斯噪声是指它的<a href="https://baike.baidu.com/item/%E6%A6%82%E7%8E%87%E5%AF%86%E5%BA%A6%E5%87%BD%E6%95%B0/5021996">概率密度函数</a>服从<a href="https://baike.baidu.com/item/%E9%AB%98%E6%96%AF%E5%88%86%E5%B8%83/10145793">高斯分布</a>（即<a href="https://baike.baidu.com/item/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83/829892">正态分布</a>）的一类噪声。常见的高斯噪声包括起伏噪声、宇宙噪声、热噪声和散粒噪声等等。除常用抑制噪声的方法外，对高斯噪声的抑制方法常常采用数理统计方法。</p><p>由于不良照明和/或高温引起的传感器噪声。可通过平均滤波、中值滤波和高斯平滑来消除</p><p><strong>为什么中值滤波相对均值滤波能很好的除去椒盐噪声</strong></p><p>取中值。并且均值滤波容易让图像变得模糊</p><p><strong>开运算与闭运算</strong></p><p><a href="https://www.cnblogs.com/-wenli/p/11735633.html">https://www.cnblogs.com/-wenli/p/11735633.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>IMAGE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>聊聊这个小破站</title>
    <link href="/2021/11/02/%E8%81%8A%E8%81%8A%E8%BF%99%E4%B8%AA%E5%B0%8F%E7%A0%B4%E7%AB%99/"/>
    <url>/2021/11/02/%E8%81%8A%E8%81%8A%E8%BF%99%E4%B8%AA%E5%B0%8F%E7%A0%B4%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1>聊聊这个站</h1><h2 id="咋有这个想法？">咋有这个想法？</h2><p>其实最开始建立这个站还是因为对JavaWeb的痴迷，那时候特别想搭建个个人网站，大概是在19年末20年初的样子，特别想要搞个自己的服务器，整个自己的个人网站，<a href="http://xn--www-i68d52yea459dyo4a7ox.zhaoyunlong.com">然后整个域名www.zhaoyunlong.com</a> ，那可太洋气了。不过当时学web没有学多深，不知道怎么建博客网站，只觉得搭个tomcat就已经很牛逼了。</p><p>后来大二偶然间看到联创的一位优秀的学长在组会分享时用了自己的网站，我就特别来兴趣，当时就问了问他怎么搭建的，当时他就说了两个词 hexo和 github，后来凭着这两个词就直接改变了我之后的学习模式。我去搜了很多博客，试着去搭建了基于github的hexo博客网站，并配置到了pplong.top。感觉不错，后来通过图床 (-50￥) 引入了在线图片，能够及时发布图片在图床上，实现了博客的图片保存方式，再后来慢慢通过一些配置，搞了看板娘和动态特效之类的，但都是后话了。</p><p>NexT主题一直以简洁和快捷为特点，我也用了这个主题用了很久，各个方面都还算舒心。之后不知道为啥又想换主题了，试了试icarus主题，折腾半天偶然又看到室友的Hexo用的fluid主题，非常的nice,主要以图片为主，gallery和 cover 、thumbnail等，增加了一些动画元素，就是逼格比next好了点。立马换上，感觉不辍，一些简单的配置、支持latex、支持图床，这就是我想要的博客搭建了。</p><blockquote><p>其实难的不是问题本身，是我是否真正决定要做这件事，要做好这件事。</p></blockquote><p>还记得当时建站的时候也没想到自己能够一直维护到现在，并且进行了几次主题更换，也没有想到当时仅有的一片Hello-World.md能够衍生出现在许许多多的学习笔记。跌跌撞撞，在大学的几年，这个小破站也算是见证了我的成长吧。有一个好的seed真的很重要，当然自己也得把好的想法付诸行动，我本来是一个很懒的人，当时也只是空有这些想法，只是幻想着如果我这样做了，那我可真牛逼啊。但是一直没有做，其实网上一搜到处都是建站博客，搭建hexo博客的方式也很简单，简单几步就能完成。想找资源的人永远不缺资源。也是周围很优秀的人提供了这样的例子，让我少走了弯路。所以也让我想到，身边永远不缺优秀的人，向别人多学习一定是有助自己的成长的。</p><h2 id="我想干嘛">我想干嘛</h2><div class="note note-primary">            <p>这个网站用来记录自己学习各大工具、编程语言，甚至是考研内容都有记录，有包含具体使用过程的傻瓜记录，也有学习语言、内核和底层的问题，学习时随时想到的问题都会记录（但不一定会及时解决😢）。偶尔也会记录一些自己的学习感悟，就当做一个学习的避风港吧，希望在这里经常反思。毕竟现在的学习方式都很千篇一律</p>          </div><p>写了几十篇总结后，觉得现在写博客确实是一种不一样的感受，后悔的是当初学Spring和SpringMVC的时候就偷懒就没写，导致后面自己也没深入研究底层，搞得暑假学的全部都忘了。其实还是没有过脑子，感觉自己学的许多都没有过脑子，有时候自己敲出来反而还有助于自己记忆。还是学的不深刻，没有独立思考，如何学会独立思考比写好一个博客很重要！✨<br>现在学习内核时也越来越体会到写博客的好处，有时候突然想到某一个问题，能够立马在另一个模块下记录下来，在自己有空的时候能够集中处理一下.有时候自己想的问题很蠢也很有趣，现在回过头来看，确实比当初想想：下次遇到这个问题时再处理好多了。</p><h2 id="一些希望">一些希望</h2><ul><li>希望自己能够一直保持对技术的热爱</li><li>希望这个小破站能够运行20年</li><li>希望保持独立思考的脑子，常思考、常反思</li></ul><p>为者常成，行者常至。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Thought</tag>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>聊聊最近学习的感受</title>
    <link href="/2021/11/02/%E8%81%8A%E8%81%8A%E6%9C%80%E8%BF%91%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%84%9F%E5%8F%97/"/>
    <url>/2021/11/02/%E8%81%8A%E8%81%8A%E6%9C%80%E8%BF%91%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%84%9F%E5%8F%97/</url>
    
    <content type="html"><![CDATA[<h1>聊聊最近</h1><p>趁着最近对Linux的劲，这几天趁着双十一买了些书，偏向内核系。现在想想真的是挺后悔的，当时学习数据结构没有太认真的学习，导致后来看一些数据结构都会想半天，现在想看Linux内核，发现操作系统又没有学习好，导致一些地方需要反复询证，花了些时间。我在想，为啥当时就没有这种兴趣去学习呢？明明很重要，明明就与对底层原理的理解有很大帮助，为啥当时就不好好学呢？</p><hr><p>现在想了想，感觉还是当时没有兴趣和被一些杂七杂八的技术性的东西吸引住了。当时似乎还正式开始使用Linux，理解还停留在Win的操作系统层面。那我又转过来想，为什么现在对Linux和计组这么感兴趣呢？感觉这几天临近考试了，但是自己还是搁这一个劲的看Linux内核源码（主要看的还不是难的，看基础的都搁这一个劲的看，真服了都…）我想为啥突然对Linux这么感兴趣呢？本来以前还是挺拒绝的，比如啥ls cp mv 敲键盘不麻烦吗？我UI上随便妥妥拽拽就OK了，还有安个文件，还要啥make make install，我windows直接一个exe直接搞定啊。为啥呢？这几天我慢慢想了想</p>]]></content>
    
    
    
    <tags>
      
      <tag>Thought</tag>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux文件系统理解</title>
    <link href="/2021/11/01/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%90%86%E8%A7%A3/"/>
    <url>/2021/11/01/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1>fs是啥？文件系统？</h1><blockquote><p>一直不懂make rootfs fs是啥，Linux文件系统怎么存储，看了下博客抄了一些话</p></blockquote><h2 id="文件系统">文件系统</h2><h3 id="文件系统的基本组成"><strong>文件系统的基本组成</strong></h3><p>文件系统是操作系统中负责管理持久数据的子系统，说简单点，就是负责把用户的文件存到磁盘硬件中，因为即使计算机断电了，磁盘里的数据并不会丢失，所以可以持久化的保存文件。<br>文件系统的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，那组织的方式不同，就会形成不同的文件系统。<br>Linux 最经典的一句话是：「一切皆文件」，不仅普通的文件和目录，就连块设备、管道、socket 等，也都是统一交给文件系统管理的。</p><p>Linux文件系统回味每个文件分配两个数据结构： 索引节点和目录项，记录文件的原信息和目录层次结构</p><ul><li>索引节点：index node – inode 。记录文件的元信息、文件大小、访问权限、创建时间、修改时间、<strong>数据在磁盘的中的位置</strong>…是文件的唯一标识，一一对应，<strong>占用磁盘空间</strong>。为加速文件的访问，通常会把索引节点加载到内存中</li><li>目录项： directory entry – dentry，记录<strong>文件的名字</strong>、<strong>索引节点指针</strong>和其他目录项的层级关系，<strong>多个目录项关联就会形成目录结构</strong>，但与索引节点不同，目录项是<strong>内核维护的一个数据结构，不存放在磁盘，而是在内存中</strong></li></ul><p>目录项和索引项的关系是多对一<br>目录也是文件，用索引节点唯一表示，但在磁盘里保存子目录或者文件；而普通文件在磁盘离保存的是文件数据</p><div class="note note-success">            <p>目录项 != 目录</p><p>目录是文件，持久化在磁盘中，目录项是内核的数据结构，缓存在内存中<br>查询目录频繁从磁盘读 -&gt;效率低-&gt;内核把已经度过的目录用目录项数据结构缓存在内存中，提高fs的效率</p>          </div><h3 id="文件数据如何存在磁盘中？">文件数据如何存在磁盘中？</h3><p>磁盘读最小单位是扇区 —512B ，如果每次都写这么小的单位，则效率很低<br>所以fs把多个扇区组成一个逻辑快，每次读写的最小单位就是逻辑块（数据块）。Linux中逻辑块大小为4KB,提高了磁盘读写效率</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211101145853363.png" alt="image-20211101145853363"></p><p>磁盘格式化时，分成三个存储区域：</p><ul><li>超级块，存储fs的详细信息，块个数、块大小、空闲块。fs挂载时加载到内存</li><li>索引节点区：存储索引节点。文件被访问时加载到内存中</li><li>数据块区：存储文件或者目录数据</li></ul><h3 id="VFS">VFS</h3><p>前提：fs类型 多，os希望对用户提供一个统一的接口，一个代理人。“没有什么问题是加一层解决不了的”。于是用户层与os层之间就加了一层，叫<strong>虚拟文件系统 VFS</strong></p><p>VFS定义了一组所有fs都支持的数据结构和标准接口，程序员不需要了解所欲文件系统的工作原理，只需要知道VFS提供的API就行</p><p>又想到了今天读内核的设计和实现中的话</p><blockquote><p>“提供机制，而不是策略。”</p></blockquote><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211101150611713.png" alt="image-20211101150611713"></p><p>根据存储位置不同，fs可分为三类：</p><ul><li>磁盘的fs，数据直接存储在磁盘中 例如Ext2/3/4、XFS</li><li>内存的fs，数据不存在磁盘，而是在内存之上 /proc 和/sys的fs都属于这一类，读写这类文件，实际上是读写内核中先关的数据</li><li>网络fs，用来访问其他计算机主机数据的文件系统，比如NFS、SMB等</li></ul><p><strong>fs首先要挂在到某个目录才能正常使用，比如Linux在启动时会把系统文件挂在到根目录</strong></p><h3 id="文件描述符">文件描述符</h3><p>感觉有点像pcb/task_struct一样的东西</p><p>os会跟踪进程打开的所有文件，os位<strong>每个进程</strong>维护一个打开文件表，文件表离的每一项都是文件描述符</p><p>$$进程 \xrightarrow{1 \space \space n}文件表\xrightarrow{1 \space \space n}文件描述符 $$</p><blockquote><p>这里我还没学到Linux内核层面的文件描述符，估计以后会看到，先插个眼</p></blockquote><p>包含文件指针、<strong>文件打开计数器</strong>、文件磁盘位置、访问权限…</p><p>fs基本操作单位是数据块</p><h3 id="文件的存储方式">文件的存储方式</h3><h4 id="连续空间存放">连续空间存放</h4><p>文件的数据连续发存放在磁盘中，紧密相联，读取数据效率高（与因为一次磁盘寻道就可以读出整个文件）</p><p>前提：必须知道一个文件的大小，这样fs才会根据文件的阿晓在磁盘上找到一块连续的空间分配给文件。文件头需要指定起始块位置和长度。</p><p><strong>但是，文件如何扩容？？？</strong></p><p>问题：<strong>导致磁盘空间碎片</strong>和<strong>文件长度不易扩展</strong>（有JVM垃圾清理内味了）</p><h4 id="非连续空间存放">非连续空间存放</h4><ol><li><p>链表方式</p><p>离散的、不连续的 -&gt; 消除了磁盘碎片且文件长度可动态扩展</p><ol><li><p>隐式链表</p><p>文件头包含第一块和最后一块的位置，每个数据块都有一个指针指向下一块的位置（合理）</p><p>问题：</p><ul><li>无法直接访问数据块，只能通过指针顺序访问，不能根据索引直接访问（链表本身就存在的问题，如果你只向读一个文件的一点内容，那必须要把它之前的内容都过一遍）</li><li>数据块指针消耗了一定的空间分配id稳定性交叉，可能导致链表中的指针丢失而导致文件数据丢失(???)</li></ul></li><li><p>显示链接</p><p>把用于连接文件各个数据块的指针，显示的存放在内存的一张链表（<strong>文件分配表 – File Allocation Table FAT</strong>）里，该表在整个磁盘中仅设置一张，每个表项存放连接指针，指向下一个数据块号（磁盘中这么多文件啊？是否数据量过大？还是说是动态加载类型？）</p><p><strong>不太懂是怎么存的，每一个块都要在表中有记录？这种方式下，一个数据块只能分配给一个文件吗，感觉不合理啊？？？</strong></p><p>（答：破案了家人们，<strong>一个逻辑块只能存放一个文件内容，无论这个有多小</strong>，暂时对ext2来说是的，可以通过stat filename来查看）</p><p>特点：</p><ul><li>查找过程在内存中进行，速度快，减少了磁盘IO</li><li>缺点：不适用于大磁盘—&gt; 基于内存</li></ul></li></ol></li><li><p>索引方式</p><p>链表不能直接有效的访问</p><p><strong>为每个文件</strong>创建了一个<strong>索引数据块</strong>，里面存放的是指向文件数据块的<strong>列表指针</strong></p><p>文件头需要包含指向索引数据块的指针</p><ul><li>文件的创建、增缩方便</li><li>不会有碎片问题</li><li>支持顺序读写和随机读写</li></ul><p>问题：</p><ul><li>存在磁盘中，额外的开销</li></ul><p>如果一个文件很大，以至于一个数据块放不下索引信息，那要如何处理大文件的存放？ — 组合方式</p><p><strong>链式索引块</strong></p><p>在索引数据块中流出一个存放下一个索引数据块的指针，当这个索引数据块的信息用完了，就可以找到下一个索引数据块的信息。但也存在之前链表的问题，指针损坏会导致后面的数据错误</p><p><strong>多级索引块</strong></p><p>索引+索引，通过一个索引块来放多个索引数据块</p><p><img src="/home/pplong/.config/Typora/typora-user-images/image-20211101154444120.png" alt="image-20211101154444120"></p></li></ol><p><strong>早期Unix的fs</strong></p><p>根据文件所需的数据块数目阈值，通过不同方式存放。<br>文件头则可能包含 10、11、12、13个指针</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3hpYW9saW5jb2Rlci9JbWFnZUhvc3QvJUU2JTkzJThEJUU0JUJEJTlDJUU3JUIzJUJCJUU3JUJCJTlGLyVFNiU5NiU4NyVFNCVCQiVCNiVFNyVCMyVCQiVFNyVCQiU5Ri9Vbml4JTIwJUU1JUE0JTlBJUU3JUJBJUE3JUU3JUI0JUEyJUU1JUJDJTk1LnBuZw?x-oss-process=image/format,png" alt=""></p><h3 id="空闲空间管理">空闲空间管理</h3><p>要存一个数据块，则放在磁盘上的哪个位置？</p><h4 id="空闲表法">空闲表法</h4><p>为所有空间建立一张表，内容包括空闲去的第一个块号和空闲区的块的个数（连续分配方式）</p><p>这种方法仅当有少量的空闲区时才有较好的效果。因为，如果存储空间中有着大量的小的空闲区，则空闲表变得很大，这样查询效率会很低。另外，这种分配技术适用于建立连续文件。</p><h4 id="空闲链表法">空闲链表法</h4><p>空闲块中有指针指向下一个空闲块。只需要在主存中保存一个指针，指向第一个空闲块</p><p>简单，但不能随机访问，效率低，IO多，不适合大型文件系统</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211101155216951.png" alt="image-20211101155216951"></p><h4 id="位图法">位图法</h4><p>利用二进制的一位表示磁盘中的一个盘块情况，所有的盘块都有一个二进制位与之对应。0表示空闲，1表示分配</p><p>Linux fs采用</p><h3 id="fs结构">fs结构</h3><p>数据块的位图是放在磁盘块里的，假设是放在一个块里，一个块 4K，每位表示一个数据块，共可以表示 4 * 1024 * 8 = 2^15 个空闲块，由于 1 个数据块是 4K 大小，那么最大可以表示的空间为 2^15 * 4 * 1024 = 2^27 个 byte，也就是 128M。㘝通过一个块的位图+一系列的块最大也就表示128M的文件，如何解决这个问题</p><p><strong>块组</strong></p><p>N个块组 --&gt; N大的文件</p><p>Linux Ext2:</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211101155902200.png" alt="image-20211101155902200"></p><ul><li>引导块：系统启动时来引导</li><li>超级块：文件的重要信息，inode总个数、块总个数</li><li>块组描述符：文件系统中各个块组的状态（块组中空闲快和inode的数目）</li><li>数据位图+inode位图：表示对应的数据块或inode是否空闲</li><li>inode列表：包含了子块组中的所有inode，inode用于保存文件系统中与各个文件和目录相关的数据</li><li>数据块…</li></ul><h3 id="目录的存储方式">目录的存储方式</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211101160219286.png" alt="image-20211101160219286"></p><p>通常，第一项是「<code>.</code>」，表示当前目录，第二项是「<code>..</code>」，表示上一级目录，接下来就是一项一项的文件名和 inode。<br>可以用vim打开，自测后发现每一行都是其下文件的名字（似乎只读）</p><p>保存目录的格式为哈希表 --&gt; 提高查找效率，但需要避免哈希冲突</p><h3 id="软链接硬链接">软链接硬链接</h3><h4 id="硬链接">硬链接</h4><p>多个目录项中的索引节点指向同一个文件，也就是指向同一个inode。由于inode无法跨越fs，每个fs都有自己的inode的数据结构和列表，所以hard link不能cross fs.由于<strong>多个目录项都指向一个inode</strong>，所以只有删除文件的所有硬链接和源文件时，系统才会彻底删除该文件？？？？<strong>文件在磁盘中只有一次复制，磁盘空间占用小</strong><br>不能对文件夹进行硬链接，目的对象不能是已经存在的文件</p><p>源就是我、我就是源  ln 123.txt 1234.txt</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211101160922007.png" alt="image-20211101160922007"></p><h4 id="软链接">软链接</h4><p>相当于重新创建了一个文件，有<strong>独立的inode</strong>，但文件的内容却是另一个文件的路径。可以跨fs。删除源文件后就变成了死链接，不能使用。重新创建该目录的文件后，能够重新使用。目的对象不能是已经存在的文件</p><p>源就是我、我就是源  ln -s 123.txt 1234.txt</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211101161026563.png" alt="image-20211101161026563"></p><p><strong>疑问：为啥硬软链接会占用相同大小的空间？？？？不是硬链接在磁盘中只有一个备份吗且软链接只是数据块变成地址吗？为啥？</strong></p><p>举个栗子：</p><p>这里123.txt是源文件、12345.txt是硬链接、1234.txt是软连接</p><ol><li>删除123.txt,软链接无法使用，硬链接照常用</li><li>恢复123.txt，都可以使用，但硬链接无动于衷，已经失效了</li></ol><h3 id="文件IO">文件IO</h3><ul><li><p>缓冲与非缓冲IO</p><ul><li>缓冲：利用的是标准库的缓存实现文件的加速访问，而标准库再通过系统调用访问文件<ul><li>例如printf的换行输出</li></ul></li><li>非缓冲：直接用系统调用访问文件而不经过标准库缓存</li></ul></li><li><p>直接与非直接IO（内核：我不干扰）</p><ul><li>直接：不会发生内核缓存和用户程序之间数据复制，而是直接经过fs访问磁盘</li><li>非直接：读操作时，数据从内核缓存中拷贝给用户程序，写操作时，数据从用户程序拷贝给内核缓存，再<strong>由内核决定</strong>什么时候写入数据到磁盘</li></ul></li><li><p>阻塞与非阻塞IO 同步与非同步IO</p><ul><li><p>阻塞：用户执行read，线程阻塞，等待内核数据准备好后，并把数据从内核缓冲区拷贝到应用程序的缓冲区后，read才会返回（等待：内核数据准备好 + 数据从内核态拷贝到用户态）</p></li><li><p>非阻塞：read在数据未准备好的情况下立即返回，能继续执行，此时应用程序不断轮训内核，知道数据准备好，内核将数据拷贝到应用程序缓冲区，read调用能获得结果</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211101161653344.png" alt="image-20211101161653344"></p><p>解决傻乎乎的轮训方式： <strong>IO多路复用</strong> – 类似通知</p><p>实际上，无论是阻塞 I/O、非阻塞 I/O，还是基于非阻塞 I/O 的多路复用都是同步调用。因为它们在 read 调用时，内核将数据从内核空间拷贝到应用程序空间，过程都是需要等待的，也就是说这个<strong>过程是同步</strong>的，如果内核实现的拷贝效率不高，read 调用就会在这个同步过程中等待比较长的时间。</p></li><li><p>异步IO：发起aio_read后 立即返回，内核自动将数据进行拷贝，拷贝过程异步进行</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211101162010300.png" alt="image-20211101162010300"></p></li></ul></li></ul><p>总结一下：IO分为两个过程</p><ol><li>数据准备</li><li>数据从内核空间拷贝到用户进程缓冲区</li></ol><p>阻塞IO阻塞在1\2，非阻塞IO阻塞在2 —都是同步IO<br>异步IO 1、2都不会阻塞</p><p>例子</p><blockquote><p>阻塞 I/O 好比，你去饭堂吃饭，但是饭堂的菜还没做好，然后你就一直在那里等啊等，等了好长一段时间终于等到饭堂阿姨把菜端了出来（数据准备的过程），但是你还得继续等阿姨把菜（内核空间）打到你的饭盒里（用户空间），经历完这两个过程，你才可以离开。</p><p>非阻塞 I/O 好比，你去了饭堂，问阿姨菜做好了没有，阿姨告诉你没，你就离开了，过几十分钟，你又来饭堂问阿姨，阿姨说做好了，于是阿姨帮你把菜打到你的饭盒里，这个过程你是得等待的。</p><p>基于非阻塞的 I/O 多路复用好比，你去饭堂吃饭，发现有一排窗口，饭堂阿姨告诉你这些窗口都还没做好菜，等做好了再通知你，于是等啊等（select 调用中），过了一会阿姨通知你菜做好了，但是不知道哪个窗口的菜做好了，你自己看吧。于是你只能一个一个窗口去确认，后面发现 5 号窗口菜做好了，于是你让 5 号窗口的阿姨帮你打菜到饭盒里，这个打菜的过程你是要等待的，虽然时间不长。打完菜后，你自然就可以离开了。</p><p>异步 I/O 好比，你让饭堂阿姨将菜做好并把菜打到饭盒里后，把饭盒送到你面前，整个过程你都不需要任何等待。<br>原文链接：<a href="https://blog.csdn.net/qq_34827674/article/details/107992414">https://blog.csdn.net/qq_34827674/article/details/107992414</a> by 小林coding</p></blockquote><p>本篇博客主要誊抄 via <a href="https://blog.csdn.net/qq_34827674/article/details/107992414">一口气搞懂「文件系统」，就靠这 25 张图了</a> by 小林coding。侵权即删</p><h2 id="余留问题">余留问题</h2><h3 id="扇区">扇区</h3><h3 id="inode如何存储，dentry如何动态加载的">inode如何存储，dentry如何动态加载的</h3>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>File System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux指令</title>
    <link href="/2021/11/01/Linux%E6%8C%87%E4%BB%A4/"/>
    <url>/2021/11/01/Linux%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1>Linux指令</h1><h2 id="ls">ls</h2><ul><li>-i 查看inode号</li><li>-ll size+权限</li><li>-lh 同上，以不同存储单位显示</li></ul><h2 id="stat">stat</h2><ul><li>filename 查看某个文件的inode信息</li></ul><h2 id="System">System</h2><h3 id="fh">fh</h3><p>磁盘相关信息</p><ul><li>-h：查看电脑上挂载的分区的大小</li></ul><h2 id="Process">Process</h2><h3 id="ps"><strong>ps</strong></h3><ul><li>-A ：所有进程</li><li>-a ：同一终端下的所有进程</li><li>-u ：显示指定用户的所有进程</li><li>ps e ：显示每个程序使用的环境变量</li><li>ps f： 使用ASCII字符显示树状结构</li><li>-e ： 与-A指令一样</li><li>-x ：显示所有程序，不按照终端机区分</li><li>-au：显示详细信息</li><li>-aux：显示所有包含其他使用者的行程<ul><li>USER: 行程拥有者</li><li>PID: pid</li><li>%CPU: 占用的 CPU 使用率</li><li>%MEM: 占用的记忆体使用率</li><li>VSZ: 占用的虚拟记忆体大小</li><li>RSS: 占用的记忆体大小</li><li>TTY: 终端的次要装置号码 (minor device number of tty)</li><li>STAT: 该行程的状态:<ul><li>D: 不可中断的静止</li><li>R: 正在执行中</li><li>S: 静止状态</li><li>T: 暂停执行</li><li>Z: 不存在但暂时无法消除</li><li>W: 没有足够的记忆体分页可分配</li><li>&lt;: 高优先序的行程</li><li>N: 低优先序的行程</li><li>L:  有些页被锁进内存</li><li>l 多进程的</li><li>+ 位于后台的进程组；</li></ul></li><li>START: 行程开始时间</li><li>TIME: 执行的时间</li><li>COMMAND:所执行的指令</li></ul></li><li>-ef ：显示所有进程信息，包括命令行（与grep 连用来查找特定进程）</li><li>-eo：自定义显示，后面跟参数名,</li></ul><blockquote><p>ps工具标识进程的5种状态码:<br>D 不可中断 uninterruptible sleep (usually IO)<br>R 运行 runnable (on run queue)<br>S 中断 sleeping<br>T 停止 traced or stopped<br>Z 僵死 a defunct (”zombie”) process  (进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</p></blockquote><p>pstree -p：以树结构显示进程<br>pstree -apnh ：显示进程间的关系</p><h3 id="kill">kill</h3><ul><li>kill ，系统发送sigterm信号给程序，程序受到后可能立即停止、可能释放相应资源后停止、可能继续运行</li><li>kill -9，系统发送的是SIGKILL，即exit信号，不会被系统阻塞，直接杀掉程序</li><li>kill -15，发送信号给程序，程序根据自己情况选择停止时间（程序在等待IO，就不能立马停止）</li><li>-CONT 继续暂停的进程</li><li>-STOP 暂停进程</li></ul><h3 id="-v4">&amp;</h3><p>将进程放在后台运行，并返回一个id号。但关闭当前会话或终端后，就会停止执行</p><h3 id="nohup">nohup</h3><p>让进程在后台执行，并且关闭当前终端，进程也会继续执行，适合服务器进行的操作。但关闭终端后，在另一个终端里看不到jobs -l当前的信息。并且输出在终端的信息会显示在当前目录下的nohup.txt中</p><h3 id="fg-bg-jobs">fg\bg\jobs</h3><ul><li>fg pid：将一个在后台暂停的命令，变成在<strong>前台</strong>继续执行</li><li>bg pid：将一个在后台暂停的命令，变成在<strong>后台</strong>继续执行。<ul><li>但是例如进程有echo输出时，会输出到当前的终端。</li></ul></li><li>jobs：显示当前有多少在后台运行的命令（仅在当前终端启动的）<ul><li>-l ：显示pid</li></ul></li></ul><p>ctrl+z：将一个正在前台执行的命令放到后台，并使其暂停</p><h2 id="IO">IO</h2><h3 id="echo">echo</h3><ul><li>-e 能识别转义字符（\n等）</li></ul><h3 id="printf">printf</h3><h2 id="File">File</h2><h3 id="chmod">chmod</h3><p>change mode: 控制用户对文件的命令<br>Linux的文件调用权限分为三级：Owner \ Group \ Other User</p><p>r-w-x : Read-Write-Execute</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220404123127379.png" alt="image-20220404123127379"></p><p>只有文件所有者Owner和超级用户可以修改可以修改文件和目录的权限，也能够使用八进制修改权限</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220404123230668.png" alt="image-20220404123230668"></p><ul><li>u：表示文件的拥有者</li><li>g：表示与该文件拥有者所属的同一个群体</li><li>o：表示其他人</li><li>a：表示三者都是</li><li>+：增加权限 - 取消权限  = 唯一设定权限</li><li>-R：对目录下的文件与子目录递归进行操作的</li></ul><p>但是有一个奇怪的现象，我把一个文件设置为不可读不可写，然后我对文件强制进行修改 wq!保存，然后恢复权限去查看，发现数据都改变为强制修改的数据了</p><h3 id="mv">mv</h3><h3 id="cp">cp</h3><h3 id="find">find</h3><ul><li>-name  “filename” ：&quot; * xxxx * &quot;<ul><li>! -name 找到文件名字不是xxx结尾的</li></ul></li></ul><h2 id="Network">Network</h2><h3 id="ssh">ssh</h3><h3 id="scp">scp</h3><h3 id="netstat">netstat</h3><ul><li>-l ：显示监听端口</li><li>-a：显示所有端口</li></ul><h3 id="ifconfig">ifconfig</h3><p>显示和配置网卡的网络参数，可以设置MTU。</p><h3 id="route">route</h3><p>显示并设置静态路由表</p><ul><li>-n：不执行DNS反向查找，直接显示数字形式的IP地址</li><li>-e：netstat格式显示路由表</li><li>-v：详细信息显示</li></ul><p>删除路由记录<br>sudo route del default / (or xxxxx)</p><p>增加默认路由记录（0.0.0.0）<br>sudo route add default gw 172.20.10.1 window 2796 dev wlo1</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qemu+GDB调试Linux内核</title>
    <link href="/2021/10/30/%E8%B0%83%E8%AF%95Linux%E5%86%85%E6%A0%B8/"/>
    <url>/2021/10/30/%E8%B0%83%E8%AF%95Linux%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<h1>Qemu+GDB调试linux内核</h1><blockquote><p>在学习Linux内核的时候，想看一下内部是如何执行C语言代码的，能不能深入具体的内核源码层面，就像Android源码一样，或者Java的jdk源码。经过搜索后，发现还是很困难，这点让我还是比较吃惊。可能是C本来就是基于Linux的某一内核？所以要调试系统层面的调用的话非常困难，需要一些仿真和模拟的手段。这里我搜索到的工具方法是通过qemu + gdb + vscode + vm完成的</p></blockquote><p>工具： 虚拟机 with Ubuntu 20.04 、vmware、qemu、gdb</p><ol><li><p>碟中谍之我在Linux上装虚拟机装Linux<br>首先安装一下虚拟机，（VMware Workstation居然在AUR上有，非常好用），选择的是Ubuntu 20.04。当然 需要装一下vm-tools。当然这里还是有点问题，最开始装第一次的时候出现了，vm-tools装了无法使用、NAT （后来卸载重装了一个vm就好了）。</p></li><li><p>选择一个Linux内核下载，用的最新stable 5.14.15，直接刚.</p><ol><li>apt安装一些编译的必备插件 bison flex build-essential 等</li><li>sudo make menuconfig 。（记得选择允许调试）</li><li>sudo make -j 8 。这里如果报错，什么 No rule to make target ‘debian/canonical-certs.pem，就把make menuconfig生成的.config文件修改一下，CONFIG_SYSTEM_TRUSTED_KEYS等值为debian/canonical-certs.pem的key的value值都改为空， 就可以了</li><li>make modules_install</li><li>make install</li></ol></li><li><p>这里安装完后第一次有点插曲，为了修改默认的启动内核，把grub改炸了，当时把/etc/default/grub的default 改成一个数字了，导致开启直接启动memtest86.后来通过boot启动也不行，直接remake了(虚拟机真好)。后来发现需要先通过grep submenu /boot/grub/grub.cfg找到submenu,修改default为形式’Debian GNU/Linux, with Linux 4.7.0-1-amd64’然后update-grub会提示你用这个方式’gnulinux-4.7.0-1-amd64-advanced-65c9af03-3d9b-411c-99b2-a9ada0961a40’，然后就可以力。<br>这里我想的是开机弹出内核选择画面，后来查证，在ubuntu上启动时shift能进入选择界面（雀氏不错）</p></li><li><p>本机vscode安装ssh remote  qemu-system-x86 gdb并添加gdb设置</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">&#123;    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [        &#123;            &quot;name&quot;: &quot;kernel-debug&quot;,            &quot;type&quot;: &quot;cppdbg&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;miDebuggerServerAddress&quot;: &quot;127.0.0.1:1234&quot;,            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;&#x2F;vmlinux&quot;,            &quot;args&quot;: [],            &quot;stopAtEntry&quot;: false,            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,            &quot;environment&quot;: [],            &quot;externalConsole&quot;: false,            &quot;logging&quot;: &#123;                &quot;engineLogging&quot;: false            &#125;,            &quot;MIMode&quot;: &quot;gdb&quot;,        &#125;    ]&#125;</code></pre></div></li><li><p>然后进入到虚拟机内核代码，虚拟机随便编写一个c指令，然后make rootfs（这里是啥意思，文件系统空间？）qemu-system-x86_64 -kernel …/…/arch/x86/boot/bzImage -initrd …/rootfs.img -append nokaslr -S -s，进入到qemu等待调试界面</p></li><li><p>vscode直接start debugging 就可以咯</p></li></ol><p><strong>参考</strong></p><p><a href="https://wenfh2020.com/2021/06/23/vscode-gdb-debug-linux-kernel/">vscode + gdb 远程调试 linux 内核源码</a></p><p><a href="https://blog.csdn.net/ibless/article/details/82349507">Linux内核编译</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C</tag>
      
      <tag>调试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入Linux fork()函数</title>
    <link href="/2021/10/28/%E6%B7%B1%E5%85%A5Linux-fork-%E5%87%BD%E6%95%B0/"/>
    <url>/2021/10/28/%E6%B7%B1%E5%85%A5Linux-fork-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1>深入理解Linux 线程函数</h1><blockquote><p>在读《Linux内核设计与实现》时对Linux进程实现非常感兴趣，并且之前就一直想了解一下原理。于是还是抽空深入了一下。想结合一下新版本和旧版本的实现差异，所参考的源码版本是2.6.32.20和5.14.15</p></blockquote><h2 id="fork-v2">fork</h2><h3 id="一些例子">一些例子</h3><p>fork调用一次，能够返回两次。在子进程中返回0，父进程中返回子进程的id</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">fork_test_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"program begin with pid%6d  ppid%6d \n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">pid_t</span> id<span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    id <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    count <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// sleep(1);</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is son process, pid %6d ppid %6d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"forkid is %d\n"</span> <span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"count is %d\n"</span> <span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is father process, pid %6d ppid %6d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"forkid is %d\n"</span> <span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"count is %d\n"</span> <span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"program end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**    program begin with pid  5071  ppid  2930     this is father process, pid   5071 ppid   2930    forkid is 5072    count is 1    program endthis is son process, pid   5072 ppid   5071    forkid is 0    count is 1    program end    Process finished with exit code 0**/</span></code></pre></div><p>这里有一个很有趣的现象：如果把最开始的printf(“…\n”) 换行符去掉，则会在子进程中也看到相关的字符输出。这是为什么？fork不是只管fork后的代码吗？<br>这里要理解，fork拷贝的是整个进程除一些特殊变量的数据，printf在没有换行符加入时，不会flush其缓冲区内的字符，操作系统仅仅是把内容当道了stdout的缓冲队列中，没有实际的写到屏幕上，即缓冲区中还有数据。这时候fork时，也就把此部分的数据拷贝进去了，<s>在下次print时，就会顺带把缓冲区的数据打印出来</s>（测试后，没有print也会打印出，可能和系统控制的print打印时机有关）。<br>此处可以继续扩展理解 C语言中printf的缓冲机制</p><blockquote><p>补充： 这里可以研究一下这个代码<br>printf(“hhhh”); sleep(10);<br>printf(“hhh\n”);sleep(19);<br>能够更好的理解缓冲</p></blockquote><p>还有一点：如果取消掉注释部分的话，即子进程等待父进程执行一段时间。但父进程执行完后，子进程就不会再执行了(这里是父进程死了所有子进程也会跟着死吗？) ----不会 (能够通过ps -ef看到)<br>孤儿进程：父进程退出后，子进程还在运行。将被init进程所收养</p><p>还有一点：如果count是全局变量，结果也是一样的（全局变量也会被拷贝）</p><p>再来看一段代码</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">fork_test_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"program begin with pid%6d  ppid%6d \n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">pid_t</span> id<span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    count <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        id <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is son process, pid %6d ppid %6d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"forkid is %d\n"</span> <span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is father process, pid %6d ppid %6d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"forkid is %d\n"</span> <span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"program end\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>结果可以自行验证</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">program begin with pid  7056  ppid  2930 this is father process, pid   7056 ppid   2930forkid is 7057this is son process, pid   7057 ppid   7056forkid is 0this is father process, pid   7056 ppid   2930forkid is 7058program endthis is son process, pid   7058 ppid   7056forkid is 0program endthis is father process, pid   7057 ppid   7056forkid is 7059program endthis is son process, pid   7059 ppid   7057forkid is 0program endProcess finished with exit code 0</code></pre></div><p>从结果来看，似乎总是偏向先进行父进程的函数，再执行子进程的函数？（猜测也可能是因为为子进程划分地址时父进程就已经在run了？）</p><p>看一下这段代码，最终有多少个线程？？结果是20个，可以用进程二叉树的方法再推一下</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"+/n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="内核态">内核态</h2><p><strong>理解为何要有内核态？</strong></p><p>安全、可控。在进行系统调用、遇到异常、外围设备中断发生的时候等，进程需要从用户态切换到内核态实现一个内陷。此时执行代码会使用到当前进程的内核栈</p><h3 id="task-struct">task_struct</h3><p>每个进程都要内核中有一个进程控制块（PCB）来维护进程相关的信息，<strong>task_struct</strong>就是这样的结构体。</p><p>一些重要的成员属性:</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel 5.14.15</span><span class="token comment">// task的可能状态</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_RUNNING</span><span class="token expression"><span class="token number">0x0000</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_INTERRUPTIBLE</span><span class="token expression"><span class="token number">0x0001</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_UNINTERRUPTIBLE</span><span class="token expression"><span class="token number">0x0002</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__TASK_STOPPED</span><span class="token expression"><span class="token number">0x0004</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__TASK_TRACED</span><span class="token expression"><span class="token number">0x0008</span></span></span><span class="token comment">/* Used in tsk->exit_state: */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXIT_DEAD</span><span class="token expression"><span class="token number">0x0010</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXIT_ZOMBIE</span><span class="token expression"><span class="token number">0x0020</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXIT_TRACE</span><span class="token expression"><span class="token punctuation">(</span>EXIT_ZOMBIE <span class="token operator">|</span> EXIT_DEAD<span class="token punctuation">)</span></span></span><span class="token comment">/* Used in tsk->state again: */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_PARKED</span><span class="token expression"><span class="token number">0x0040</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_DEAD</span><span class="token expression"><span class="token number">0x0080</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_WAKEKILL</span><span class="token expression"><span class="token number">0x0100</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_WAKING</span><span class="token expression"><span class="token number">0x0200</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_NOLOAD</span><span class="token expression"><span class="token number">0x0400</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_NEW</span><span class="token expression"><span class="token number">0x0800</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_STATE_MAX</span><span class="token expression"><span class="token number">0x1000</span></span></span><span class="token comment">/* Convenience macros for the sake of set_current_state: */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_KILLABLE</span><span class="token expression"><span class="token punctuation">(</span>TASK_WAKEKILL <span class="token operator">|</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_STOPPED</span><span class="token expression"><span class="token punctuation">(</span>TASK_WAKEKILL <span class="token operator">|</span> __TASK_STOPPED<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_TRACED</span><span class="token expression"><span class="token punctuation">(</span>TASK_WAKEKILL <span class="token operator">|</span> __TASK_TRACED<span class="token punctuation">)</span></span></span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_THREAD_INFO_IN_TASK</span></span><span class="token keyword">struct</span> <span class="token class-name">thread_info</span>thread_info<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>cpu<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>__state<span class="token punctuation">;</span> <span class="token comment">// 进程状态</span><span class="token keyword">void</span><span class="token operator">*</span>stack<span class="token punctuation">;</span> <span class="token comment">// 指向内核栈的指针</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span>flags<span class="token punctuation">;</span> <span class="token comment">// 进程号，fork时给出</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span>ptrace<span class="token punctuation">;</span> <span class="token comment">// 被用来控制子进程的运行(断点调试),为0时代表不需要被追踪</span>    <span class="token class-name">pid_t</span>pid<span class="token punctuation">;</span> <span class="token comment">// 进程标识符</span><span class="token class-name">pid_t</span>tgid<span class="token punctuation">;</span> <span class="token comment">// 线程组标识符（Unix希望同一组线程具有相同的pid，与领头线程具有相同的pid）</span><span class="token keyword">int</span>prio<span class="token punctuation">;</span> <span class="token comment">// 动态优先级</span><span class="token keyword">int</span>static_prio<span class="token punctuation">;</span> <span class="token comment">// 保存静态优先级</span><span class="token keyword">int</span>normal_prio<span class="token punctuation">;</span> <span class="token comment">// 却绝静态优先级和调度策略</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span>rt_priority<span class="token punctuation">;</span> <span class="token comment">// 保存实时优先级</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>policy<span class="token punctuation">;</span> <span class="token comment">// 进程的调度策略(sched_normal sched_fifo....)</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span>tasks<span class="token punctuation">;</span> <span class="token comment">// 指向运行队列的指针</span><span class="token keyword">struct</span> <span class="token class-name">mm_struct</span><span class="token operator">*</span>mm<span class="token punctuation">;</span> <span class="token comment">// 进程内存管理信息</span><span class="token keyword">struct</span> <span class="token class-name">mm_struct</span><span class="token operator">*</span>active_mm<span class="token punctuation">;</span><span class="token keyword">int</span>exit_state<span class="token punctuation">;</span><span class="token keyword">int</span>exit_code<span class="token punctuation">;</span> <span class="token comment">// 只有进程终止时，才会达到这里</span><span class="token keyword">int</span>exit_signal<span class="token punctuation">;</span>    <span class="token keyword">int</span>pdeath_signal<span class="token punctuation">;</span> <span class="token comment">// 父进程终止时向子进程发送的信号</span>    <span class="token comment">/* Real parent process: */</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> __rcu<span class="token operator">*</span>real_parent<span class="token punctuation">;</span> <span class="token comment">// 指向操作系统执行进程的父进程（亲生父亲），如果不存在，则指向init进程</span><span class="token comment">/* Recipient of SIGCHLD, wait4() reports: */</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> __rcu<span class="token operator">*</span>parent<span class="token punctuation">;</span> <span class="token comment">// 指向当前进程的父进程（可能是继父），当当前进程终止时，需要向它发送wait4()信号</span>    <span class="token keyword">struct</span> <span class="token class-name">list_head</span>children<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span>sibling<span class="token punctuation">;</span> <span class="token comment">// 同级线程</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span><span class="token operator">*</span>group_leader<span class="token punctuation">;</span> <span class="token comment">// 进程组的领头进程</span>    <span class="token keyword">struct</span> <span class="token class-name">pid</span><span class="token operator">*</span>thread_pid<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">files_struct</span><span class="token operator">*</span>files<span class="token punctuation">;</span> <span class="token comment">// 打开文件的信息指针</span><span class="token keyword">struct</span> <span class="token class-name">signal_struct</span><span class="token operator">*</span>signal<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">thread_struct</span>thread<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="thread-info">thread_info</h3><p>对线程不同的一个信息描述，线程描述符</p><p>linux内核为每个进程都提供了一个内核栈。linux内核支持不同体系，但不同体系可能进程需要存储的信息不同（后面会提到），则需要一种通用的方式，将体系结构相关的部分和无关的部分区分。也就是为什么会有task_struct和thread_info。<br>task_struct提供了一种通用的方式来描述进程。<br>thread_info使得特定体系需要访问的那部分进程的数据，能<strong>通过thread_info来找到task_struct</strong></p><h4 id="结构-v3">结构</h4><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel 2.6.32.20</span><span class="token keyword">struct</span> <span class="token class-name">thread_info</span> <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span><span class="token operator">*</span>task<span class="token punctuation">;</span><span class="token comment">/* main task structure */</span><span class="token keyword">struct</span> <span class="token class-name">exec_domain</span><span class="token operator">*</span>exec_domain<span class="token punctuation">;</span><span class="token comment">/* execution domain */</span>__u32flags<span class="token punctuation">;</span><span class="token comment">/* low level flags */</span>__u32status<span class="token punctuation">;</span><span class="token comment">/* thread synchronous flags */</span>__u32cpu<span class="token punctuation">;</span><span class="token comment">/* current CPU */</span><span class="token keyword">int</span>preempt_count<span class="token punctuation">;</span><span class="token comment">/* 0 => preemptable,   &lt;0 => BUG */</span><span class="token class-name">mm_segment_t</span>addr_limit<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">restart_block</span>    restart_block<span class="token punctuation">;</span><span class="token keyword">void</span> __user<span class="token operator">*</span>sysenter_return<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span>uaccess_err<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></div><h4 id="thread-union">thread_union</h4><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// on linux-5.14.15</span><span class="token keyword">union</span> thread_union <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CONFIG_ARCH_TASK_STRUCT_ON_STACK</span></span>       <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> task<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CONFIG_THREAD_INFO_IN_TASK</span></span>       <span class="token keyword">struct</span> <span class="token class-name">thread_info</span> thread_info<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>       <span class="token keyword">unsigned</span> <span class="token keyword">long</span> stack<span class="token punctuation">[</span>THREAD_SIZE<span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// on linux 2.6.32.20</span><span class="token keyword">union</span> thread_union <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">thread_info</span> thread_info<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> stack<span class="token punctuation">[</span>THREAD_SIZE<span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></div><p>在物理内存中存放两种数据结构的方式：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211028202934914.png" alt="image-20211028202934914"></p><p>采用联合体的方式，所以thread_info在栈顶可理解。从用户态切换到内核态时，进程的内核栈总是空的，因此esp寄存器指向这个栈的顶端</p><p>系统的current指针指向了当前运行进程的thread_union</p><h4 id="current-thread-info">current_thread_info</h4><p>获取当前CPU上正运行的进程。通常保存在一个特别的寄存器中(esp)</p><p>current_thread_info</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 早期版本 return (struct thread_info *)(sp &amp; ~(THREAD_SIZE - 1));</span><span class="token comment">// 因为不需要对64位处理器支持，所以简单屏蔽掉esp的低13位有效字符就行(为啥？)->stack占8K两页 .二进制的表示为0000 0000 0000 0000 0010 0000 0000 0000。</span><span class="token operator">~</span><span class="token punctuation">(</span>THREAD_SIZE<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>的结果刚好为<span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1110</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">thread_info</span> <span class="token operator">*</span><span class="token function">current_thread_info</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">thread_info</span> <span class="token operator">*</span>ti<span class="token punctuation">;</span>ti <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">percpu_read_stable</span><span class="token punctuation">(</span>kernel_stack<span class="token punctuation">)</span> <span class="token operator">+</span>      KERNEL_STACK_OFFSET <span class="token operator">-</span> THREAD_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ti<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="get-current">get_current</h4><p>获取task_struct 实质上就是thread_info-&gt;task。current获取的当前线程对象其实是一个名为current_task的percpu变量。通过this_cpu_read_stable方法，<strong>获取属于当前cpu的current_task</strong>。</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel 2.6.32.20</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__ASSEMBLY__</span></span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span><span class="token punctuation">;</span><span class="token function">DECLARE_PER_CPU</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token punctuation">,</span> current_task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 为处理器创建一个type类型，名为name的变量</span><span class="token keyword">static</span> __always_inline <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token function">get_current</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token function">percpu_read_stable</span><span class="token punctuation">(</span>current_task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">percpu_read_stable</span><span class="token expression"><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token function">percpu_from_op</span><span class="token punctuation">(</span></span><span class="token string">"mov"</span><span class="token expression"><span class="token punctuation">,</span> per_cpu__</span><span class="token punctuation">##</span><span class="token expression">var<span class="token punctuation">,</span></span><span class="token punctuation">\</span>       <span class="token string">"p"</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">&amp;</span>per_cpu__</span><span class="token punctuation">##</span><span class="token expression">var<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/*#define percpu_from_op(op, var, constraint)\(&#123;\typeof(var) ret__;\switch (sizeof(var)) &#123;\case 1:\asm(op "b "__percpu_arg(1)",%0"\    : "=q" (ret__)\    : constraint);\break;\case 2:\asm(op "w "__percpu_arg(1)",%0"\    : "=r" (ret__)\    : constraint);\break;\case 4:\asm(op "l "__percpu_arg(1)",%0"\    : "=r" (ret__)\    : constraint);\break;\case 8:\asm(op "q "__percpu_arg(1)",%0"\    : "=r" (ret__)\    : constraint);\break;\default: __bad_percpu_size();\&#125;\ret__;\&#125;)*/</span> <span class="token comment">// x86-64下 = asm(movl "%%gs:%P1","%0" : "=r" (var) :"p" (&amp;(var)) </span></code></pre></div><p><strong>突发其想</strong></p><p>搞一个调试linux源代码的工具 ，查了下 remote ssh+vscode来搞，感觉不错</p><p>☝️ 以上已经完成，详见《Qemu+gdb+vscode调试内核》👍</p><h2 id="一些问题-v6">一些问题</h2><p><strong>疑问？ getpid在哪个文件？只有头文件的声明啊，没有找到具体代码？</strong></p><p><strong>ia64 x86等架构？</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深入C/C++</title>
    <link href="/2021/10/27/%E6%B7%B1%E5%85%A5C-C/"/>
    <url>/2021/10/27/%E6%B7%B1%E5%85%A5C-C/</url>
    
    <content type="html"><![CDATA[<h1>深入C / C++</h1><h2 id="一些问题-v5">一些问题</h2><h3 id="如何在C中使用汇编代码？">如何在C中使用汇编代码？</h3><h3 id="宏到底有什么好处？">宏到底有什么好处？</h3><p>预编译吗？</p><p>预处理命令（以#开头的都是预处理命令）</p><p>优点：</p><ol><li>方便程序修改，在编译期间会被替换（而全局变量需要在运行时才被）<ul><li>运行中没有宏这个概念，仅仅是内容</li><li>宏定义赋值后不能被修改</li></ul></li><li>高效。</li></ol><p>缺点：</p><ol><li>占用编译时间</li><li>源程序展开后很长</li></ol><p><a href="https://blog.csdn.net/imgosty/article/details/81901183">C语言中宏定义的使用</a></p><h3 id="EOF是什么">EOF是什么</h3><h2 id="指针">指针</h2><h3 id="数组与指针">数组与指针</h3><p><strong>为什么在函数中对数组使用sizeof得不到数组的容量，而在外部使用sizeof却能正确得到？</strong></p><p>理解数组在函数的参数中传递时的退化，即数组不再在内存中没有实际地址，而是有实际地址存储的指针，此时就转化为一级指针。也就是在这个过程中，其实函数的参数是由一个指针负责，这个指针在内存中存在，并且指针指向的是这个数组的首地址，所以在内层函数运行时，实质就是一个指针了，此时sizeof获得的也就只是指针所占字节的大小，也就是8个字节。</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">innerVoid</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">testArrPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">innerVoid</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*3620x16fdff11480x16fdff0d80x16fdff114*/</span></code></pre></div><h3 id="局部变量内存在外部函数访问">局部变量内存在外部函数访问</h3><p>内部函数开创局部变量空间后，执行完毕，返回局部变量的内存地址给外部函数，外部函数会出现不同的值。这是为什么？</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">getPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token function">getPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//3000     -2076835839</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux内核学习</title>
    <link href="/2021/10/25/Linux%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/10/25/Linux%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>Linux学习</h1><blockquote><p>“工欲善其事，必先利其器”</p><p>从大二以来一直在用manjaro ，从原来的极为不适应到现在用起来十分“舒心”，Linux确实给我一种更高效、更简洁的操作方式。在大二了解一定的操作系统组成原理时，也对Linux系统的内核构成产生了兴趣，对fork malloc等函数只知其义而不知其意。希望能够通过此篇博客系统的学习，从Linux内核层面去理解操作系统的组成原理。对Linux有一个全局的观念，更好地使用Linux系统</p></blockquote><h2 id="历史">历史</h2><h3 id="Unix">Unix</h3><p>从一个失败的多用户操作系统Multics衍生而来</p><p>BSD：加州大学伯克利分校的演化分支</p><p>优点：</p><ul><li>简洁。提供几百个系统调用</li><li>大部分文件被当做文件来对待，使得可用同一套相同的系统调用接口可对数据和设备进行操作</li><li>内核和相关的系统工具软件通过C语言编写，易移植</li><li>创建进程非常迅速，<strong>一次执行保质保量地完成一个任务</strong></li><li>简单而稳定的进程间通信元语，保证这些单一目的的简单程序可以方便的组合在一起</li></ul><h3 id="Linux">Linux</h3><p>1991年 by Linus Torvalds，不能随心所欲地使用Unix。</p><p>类Unix系统，但不是Unix。尽管Linux借鉴了Unix的许多设计并且实现了Unix的API，但Linux没有像其他Unix变种那样直接使用Unix的源代码。但没有抛弃Unix的设计目标并且保证了应用程序编程接口的一致性。</p><p><strong>Linux和Unix区别</strong></p><ul><li>Unix内核是一个不可分割的静态可执行库，必须以巨大、单独的可执行块的形式在一个单独的地址空间中运行。需要硬件提供页机制管理内存。</li></ul><p><strong>单内核和微内核</strong></p><p>单内核，内核从整体上作为一个单独的大过程来实现，运行在一个单独的地址空间上。（通常以单个二进制文件的形式存放在磁盘中）所有的内核服务都在这样的一个大内核地址空间允许。内核可以直接调用函数，简单且高性能。大多数Unix系统设计为单模块</p><p>微内核，功能被划分成多个独立的过程，每个过程叫做一个服务器。所有服务器都保持独立并运行在各自的地址空间上，不能直接进行系统调用，需要通过消息传递处理微内核通信（进程间通信IPC）。各个服务器之间通过IPC机制互通消息，互换服务。各自独立能有效避免一个服务器失效导致全盘都不能用的现象</p><p>Linux也是一个单内核，内核运行在单独的内核地址空间，不过采用了模块化设计、抢占式内核、内核线程以及动态装载内核模块。还能让所有功能运行在内核态，直接调用函数而无需消息传递。</p><ul><li><p>支持动态加载内核模块，能够在需要的时候动态卸载和加载部分内核代码（非耦合的部分吗？）</p></li><li><p>支持对称多处理(SMP)机制</p></li><li><p>内核可以抢占。允许在内核运行的任务优先执行的能力（而大多数Unix内核不支持）</p></li><li><p>内核并不区分线程和其他的一般进程。进程只是其中的一些共享资源罢了</p></li><li><p>提供设备类的面向对象的设备模型、热插事件、用户控件的设备文件系统sysfs</p></li><li><p>忽略了Unix中类似STREAMS的一些特性</p></li></ul><p><strong>Linux的内核版本</strong></p><p>主版本号 . 从版本号 . 修订版本号 (. 稳定版本号)<br>从版本号是偶数 -&gt; 内核是稳定版    奇数 -&gt; 开发版</p><h2 id="-v5"></h2><h2 id="开始">开始</h2><h3 id="源码-v2">源码</h3><p>内核源码一般在/usr/src/linux中</p><h4 id="结构-v2">结构</h4><p><img src="https://img-blog.csdn.net/20170302212637409?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDQ0NzIzNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><h4 id="编译-v2">编译</h4><h3 id="内核开发的特点">内核开发的特点</h3><ul><li>不能访问C库和标准的C头文件（包含C库效率太低下）</li><li>编程时需要用GNU C</li><li>内核编程难以执行浮点运算</li><li>时刻注意同步和并发</li><li>缺乏像用户空间一样的内存保护机制</li></ul><p><strong>头文件</strong></p><p>指内核的头文件</p><p>基本的头文件在include 目录中<br>体系结构相关的在arch/{spec_arch}/include/asm目录中</p><p><strong>GNU C</strong></p><p>Linux内核用C语言编写。</p><p><strong>gcc</strong>：由GUN开发的编译器（初衷是位GNU OS编写一款编译器），原名是GNU C Compiler，只能处理C语言，但扩展位可处理C++、Java、go等，改名为GNU编译器套件（GNU Compiler Collection），几乎所有的GCC都由C编写，其中C编译器既可以编译内核也可以编译Linux系统用C写的代码</p><div class="note note-success">            <p>什么是内联函数？</p>          </div><p>一种编程语言结构，用来建议编译器对一些特殊函数进行内联扩展。（在好吃呢个系的每个调用点上“内联地”展开）<br>例如</p><div class="code-wrapper"><pre class="language-c++" data-language="c++"><code class="language-c++">inline int max(int a, int b)&#123; return a &gt; b ? a : b;&#125;&#x2F;&#x2F; 则调用： cout&lt;&lt;max(a, b)&lt;&lt;endl;&#x2F;&#x2F; 在编译时展开为： cout&lt;&lt;(a &gt; b ? a : b)&lt;&lt;endl;inline void Foo(int x, int y);   &#x2F;&#x2F; inline 仅与函数声明放在一起 不起作用(对C++)</code></pre></div><p>优点： 函数体比较小时，内联函数让目标代码更加高效。<br>缺点： 滥用内联导致目标代码量或增或减</p><p>有些函数即使声明为inline但不一定会被编译器内联（递归函数和虚函数）</p><h2 id="进程管理">进程管理</h2><h3 id="进程">进程</h3><p>进程是处于执行器的程序：一段可执行的代码+打开的文件+挂起的信号+内核内部数据+多个执行线程+处理器状态+一个或多个具有内存映射的内存地址空间…<br>执行线程：进程中活动的对象，每个线程有独立的PC、进程栈和一组进程寄存器，<strong>内核调度的对象是线程</strong><br>程序本身不是进程，进程是处于执行器的程序以及相关资源的总称。（一个程序可能有多个进程，并且进程间可能进行数据共享）</p><p>进程提供两种虚拟机制：虚拟处理器和虚拟内存，给进程一种在独占处理器的假象(实际可能是多个进程使用同一个处理器)</p><h4 id="进程描述符与任务结构">进程描述符与任务结构</h4><p>内核把进程的列表存放在任务队列的双向循环链表中，链表中的每一项都是一个task_struct（这个结构体比较大） 包含了内核管理一个进程所需要的信息。Linux通过slab分配器分配task_struct结构（能达到对象复用和缓存着色的目的）</p><p>2.6以前的内核，task_struct放在进程内核栈的微端，（为了让像x86那样寄存器较少的硬件结构体系通过栈指针就能计算他的位置）；现在使用slab分配器动态生成task_struct，秩序在栈底或者栈顶创建新的结构thread_info（对进程的一个简介？）<br>访问任务通常要获得指向其task_struct的指针，但大部分处理进程的代码都是直接通过task_struct进行。通过current宏查找当前正在运行进程的struct。硬件体系不同，宏的实现不同。</p><ul><li>有的硬件体系结构能拿出专门的寄存器来存放当前进程的task_struct指针</li><li>有些x86的体系架构，寄存器少，只能在内核栈的微端创建thread_info，通过计算偏移间接的赵task_struct</li></ul><p>通过预分配和重复使用task_struct能避免动态分配和释放带来的资源消耗 —&gt; 进程的快速创建</p><p>PID：唯一的进程标识符 (/proc/sys/kernel/pid_max 可修改系统中存在进程的最大数目)</p><h4 id="进程的状态">进程的状态</h4><ul><li>TASK_RUNING：进程可执行。要么正在执行，要么在运行队列中等待执行（进程在用户空间中执行的唯一可能状态）</li><li>TASK_INTERRUPTIBLE：进程正在睡眠，被阻塞，等待某些条件达成。会因为接收到信号而而提前被唤醒</li><li>TASK_UNINTERRUPTIBLE：接收到信号也不会被唤醒。对信号不作出响应</li><li>__TASK_TRACED：被其他进程跟踪的进程（对调试进程进行跟踪）</li><li>__TASK_STOPPED：进程停止执行；进程没有投入运行也不能投入运行（接收到SIGSTOP、SIGTSTP、SITTIN、SIGTTOU信号时）。调试期间接收到任何信号都会进入这种状态</li></ul><p><strong>设置当前进程状态</strong><br>set_task_state(task, state) --&gt; task-&gt;state = newstate; 并可能会设置内存屏障来强制其他处理器进行重新排序</p><h4 id="进程家族树">进程家族树</h4><p>所有进程都是PID = 1的进程后代，内核在系统启动的最后阶段启动init进程。</p><p>每个task_struct有父进程的指针、children的子进程链表</p><p>通过pstree -p 可观察到这种现象</p><div class="note note-success">            <p>parent和realparent的区别？</p>          </div><h4 id="创建进程">创建进程</h4><p><strong>写时拷贝</strong></p><p>传统fork()直接把所有的资源复制给新创建的进程  – 效率地下，如果新进程要执行一个新的映像，那之前的拷贝都没用。<br>Linux fork采用写时拷贝进行，内核并不复制整个进程的地址空间，而是让父子进程共享同一个拷贝。只有在需要写入时，数据才会被复制，从而让各自进程有各自的拷贝。fork的实际开销就是复制父进程的页表以及给子进程创建唯一的进程描述符，避免拷贝大量根本就不会被使用的数据。</p><h5 id="fork">fork</h5><p>通过拷贝当前今晨创建一个子进程，父子进程的区别仅仅在PID PPID 和某些资源统计量</p><p>fork vfork __clone() 库函数根据各自参数调用 ——&gt; clone() —&gt;do_fork() —&gt;copy_process()</p><p>copy_process完成了创建中的大部分工作</p><p>流程：</p><h5 id="exec">exec</h5><p>负责读取可执行文件并将其载入地址空间开始运行</p><h5 id="vfork">vfork</h5><p>仅仅不拷贝父进程的页表项。子进程作为父进程的一个单独的线程在它的地址空间运行，父进程被阻塞，直到子进程退出或者执行exec()时</p><h4 id="对fork的一些深入探究">对fork的一些深入探究</h4><p>详见文章 《深入Linux fork()函数》</p><p><strong>为啥Manjaro没有include文件夹，并且/usr/include下的sched.h没有task_struct定义，但linux内核源文件就有？</strong></p><p>亲测，这个task_struct结构体相当的长，有很多的ifdef下的struct定义（适配不同的架构吗？）</p><h3 id="线程">线程</h3><h4 id="概述-v3">概述</h4><p>线程机制：提供了同一程序内共享内存地址空间运行的一组线程，在多处理器环境下，能保证真正的并行处理。父子俩共享地址空间、文件资源系统、文件描述符和信号处理程序。本质仍然是线程，</p><div class="note note-primary">            <p>Windows下，在啮合中专门提供了支持线程的机制，把线程叫做“轻量级进程”(而在Linux中，进程本身已经足够轻量)。线程被抽象成一种消耗资源较少、运行迅速的执行单元，通常有一个包含指向n个不同线程的指针的进程描述符，线程本身有独立的结构。<br>但Linux下就没有独立的结构，仅仅复用task_struct，建立四个进程时，指定他们共享某些资源</p>          </div><h4 id="一些操作方式">一些操作方式</h4><p>pthread_create，</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">thread_fun</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span>  id <span class="token operator">=</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cur thread %d  thread_self is %lu\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cur thread &amp;%d pid is %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_t</span>  id <span class="token operator">=</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cur thread_self is %lu\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cur oud is %d\n"</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> tid_1<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid_1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread_fun<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>可以验证，线程内部pid都是相同的，但pthread_self不同</p><p>有个问题，进程退出后线程会退出吗？（感觉不会，因为也是线程，会被分配到其他进程名下？）</p><p>还有为什么在clion中pthread_create 不能直接传void * 类型？g++单独编译就可以？</p><p><strong>可共享全局数据</strong></p><ul><li>pthread_exit，退出单个线程.不能使用exit，会使得整个进程退出（跟pid相关？）（仅在线程内部使用）</li><li>pthread_join(othread_t pthread,void ** retval)，等待一个线程的结束。当前进程就会stuck。成功则返回0<ul><li>retval:存储线程结束状态<ul><li>如果thread线程通过return返回，retval所指向的单元里存放的是thread线程函数的返回值。</li><li>如果thread线程被别的线程调用pthread_cancel异常终止掉，retval所指向的单元里存放的是常数PTHREAD_CANCELED。</li><li>如果thread线程是自己调用pthread_exit终止的，retval所指向的单元存放的是传给pthread_exit的参数。</li><li>如果对thread线程的终止状态不感兴趣，可以传NULL给retval参数。</li></ul></li></ul></li><li>pthread_cancel，杀死线程<ul><li>如果线程在sleep则会等到sleep后再cancel</li><li>如果一直是while的状态，则<ul><li>有pthread_testcancel(),则就在当前处cancel。会自行设置<strong>取消点</strong></li><li>如果没有，则系统自己判断什么时候会cancel，可能while会执行多次后cancel</li></ul></li></ul></li><li>pthread_detach：线程分离。<ul><li>线程主动与主控线程断开关系，线程结束后，退出状态不由其他线程获取，而是自己释放。不能使用pthread_join等待它的终止状态（线程一旦终止就立刻回收它占用的字眼，而不保留终止装填）</li><li>不会产生僵尸进程</li></ul></li></ul><p><strong>内核线程</strong></p><p>独立运行在内核空间的标准进程，区别在与内核线程没有独立的地址空间。只在内核空间运行，从不会切换到内核空间。可以被调度和抢占。内核线程只能由内核线程创建</p><h2 id="进程调度">进程调度</h2><h3 id="概述-v4">概述</h3><p><strong>实时进程和普通进程</strong></p><table><thead><tr><th>交互式进程(interactive process)</th><th>此类进程经常与用户进行交互, 因此需要花费很多时间等待键盘和鼠标操作. 当接受了用户的输入后, 进程必须很快被唤醒, 否则用户会感觉系统反应迟钝</th><th>shell, 文本编辑程序和图形应用程序</th></tr></thead><tbody><tr><td>批处理进程(batch process)</td><td>此类进程不必与用户交互, 因此经常在后台运行. 因为这样的进程不必很快相应, 因此常受到调度程序的怠慢</td><td>程序语言的编译程序, 数据库搜索引擎以及科学计算</td></tr><tr><td>实时进程(real-time process)</td><td>这些进程由很强的调度需要, 这样的进程绝不会被低优先级的进程阻塞. 并且他们的响应时间要尽可能的短</td><td>视频音频应用程序, 机器人控制程序以及从物理传感器上收集数据的程序</td></tr></tbody></table><p>不同分类采用不同的调度策略</p><ul><li>对于实时进程，采用FIFO或者Round Robin的调度策略.</li><li>对于普通进程，则<strong>需要区分交互式和批处理式的不同</strong>。传统Linux调度器提高交互式应用的优先级，使得它们能更快地被调度。而CFS和RSDL等新的调度器的核心思想是”完全公平”。这个设计理念不仅大大简化了调度器的代码复杂度，还对各种调度需求的提供了更完美的支持.</li></ul><h3 id="调度器">调度器</h3><p>最开始是On的调度算法（每次会遍历所有任务，所以是On） —&gt; Linux 2.5 : O(1) —&gt; Linux 2.6 - now CFS</p><p>调度器可以用一种或者多种调度策略</p><table><thead><tr><th>调度器类</th><th>描述</th><th>调度策略</th></tr></thead><tbody><tr><td>stop_sched_class</td><td>优先级最高的线程，会中断所有其他线程，且不会被其他任务打断<br/>作用<br/>1.发生在cpu_stop_cpu_callback 进行cpu之间任务migration<br/>2.HOTPLUG_CPU的情况下关闭任务</td><td>无, 不需要调度普通进程</td></tr><tr><td>dl_sched_class</td><td>采用EDF最早截至时间优先算法调度实时进程</td><td>SCHED_DEADLINE</td></tr><tr><td>rt_sched_class</td><td>采用提供 Roound-Robin算法或者FIFO算法调度实时进程<br/>具体调度策略由进程的task_struct-&gt;policy指定</td><td>SCHED_FIFO, SCHED_RR</td></tr><tr><td>fair_sched_clas</td><td>采用CFS算法调度普通的非实时进程</td><td>SCHED_NORMAL, SCHED_BATCH</td></tr><tr><td>idle_sched_class</td><td>采用CFS算法调度idle进程, 每个cup的第一个pid=0线程：swapper，是一个静态线程。调度类属于：idel_sched_class，所以在ps里面是看不到的。一般运行在开机过程和cpu异常的时候做dump</td><td>SCHED_IDLE</td></tr></tbody></table><p><strong>调度实体</strong></p><p>调度体不限于调度进程，还可以调度更大的实体（组调度）</p><table><thead><tr><th>调度实体</th><th><strong>名称</strong></th><th><strong>描述</strong></th><th>对应调度器类</th></tr></thead><tbody><tr><td>sched_dl_entity</td><td>DEADLINE调度实体</td><td>采用EDF算法调度的实时调度实体</td><td>dl_sched_class</td></tr><tr><td>sched_rt_entity</td><td>RT调度实体</td><td>采用Roound-Robin或者FIFO算法调度的实时调度实体</td><td>rt_sched_class</td></tr><tr><td>sched_entity</td><td>CFS调度实体</td><td>采用CFS算法调度的普通非实时进程的调度实体</td><td>fair_sched_class</td></tr></tbody></table><p>调度器有不同的运行队列</p><h2 id="一些问题-v2">一些问题</h2><h3 id="Unix和Linux到底啥关系？"><strong>Unix和Linux到底啥关系？</strong></h3><h3 id="GNU-GPL">GNU GPL</h3><h3 id="GCC不是用C编译的吗？用C编译的编译器去编译C">GCC不是用C编译的吗？用C编译的编译器去编译C???</h3><p><strong>为什么一些linux可以访问windows磁盘但反过来却不行？</strong></p><h3 id="fs是啥？文件系统？">fs是啥？文件系统？</h3><h4 id="文件系统-v2">文件系统</h4><p><strong>文件系统的基本组成</strong><br>文件系统是操作系统中负责管理持久数据的子系统，说简单点，就是负责把用户的文件存到磁盘硬件中，因为即使计算机断电了，磁盘里的数据并不会丢失，所以可以持久化的保存文件。<br>文件系统的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，那组织的方式不同，就会形成不同的文件系统。<br>Linux 最经典的一句话是：「一切皆文件」，不仅普通的文件和目录，就连块设备、管道、socket 等，也都是统一交给文件系统管理的。</p><p>Linux文件系统回味每个文件分配两个数据结构： 索引节点和目录项，记录文件的原信息和目录层次结构</p><ul><li>索引节点：记录文件的元信息</li></ul><h3 id="Linux有事务这个概念吗？">Linux有事务这个概念吗？</h3><h3 id="printk是什么">printk是什么</h3><p>比printf多了个日志级别，类似Android的Log.e Log.w…，当日志级别的数值小于控制台级别(<strong>越小越管用</strong>)，信息才会在控制台打印出来。也可以通过两种方式直接查看命令</p><ul><li>dmesg命令打印</li><li>cat /proc/kmsg打印</li></ul><p>使用时是printk(level “xxxxx”);</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> console_printk<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>DEFAULT_CONSOLE_LOGLEVEL<span class="token punctuation">,</span><span class="token comment">/* console_loglevel 7*/</span>DEFAULT_MESSAGE_LOGLEVEL<span class="token punctuation">,</span><span class="token comment">/* default_message_loglevel 4*/</span>MINIMUM_CONSOLE_LOGLEVEL<span class="token punctuation">,</span><span class="token comment">/* minimum_console_loglevel 1*/</span>DEFAULT_CONSOLE_LOGLEVEL<span class="token punctuation">,</span><span class="token comment">/* default_console_loglevel 7*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></div><p>四种不同的console级别☝️</p><p>八种不同的日志级别👇按照紧急和严重程度排序</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token macro-name">KERN_EMERG</span><span class="token string">"&lt;0>"</span><span class="token comment">/* system is unusable*/</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token macro-name">KERN_ALERT</span><span class="token string">"&lt;1>"</span><span class="token comment">/* action must be taken immediately*/</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token macro-name">KERN_CRIT</span><span class="token string">"&lt;2>"</span><span class="token comment">/* critical conditions*/</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token macro-name">KERN_ERR</span><span class="token string">"&lt;3>"</span><span class="token comment">/* error conditions*/</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token macro-name">KERN_WARNING</span><span class="token string">"&lt;4>"</span><span class="token comment">/* warning conditions*/</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token macro-name">KERN_NOTICE</span><span class="token string">"&lt;5>"</span><span class="token comment">/* normal but significant condition*/</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token macro-name">KERN_INFO</span><span class="token string">"&lt;6>"</span><span class="token comment">/* informational*/</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token macro-name">KERN_DEBUG</span><span class="token string">"&lt;7>"</span><span class="token comment">/* debug-level messages*/</span></span></code></pre></div><h3 id="asmlinkage前缀啥意思？">asmlinkage前缀啥意思？</h3><h2 id="参考书目">参考书目</h2><p>《Linux内核设计与实现》(第三版)</p><h2 id="方法文件索引">方法文件索引</h2><table><thead><tr><th>文件名</th><th>功能</th><th>函数\结构体举例</th></tr></thead><tbody><tr><td>kernel/fork.c</td><td>进程创建</td><td>copy_process</td></tr><tr><td>include/linux/sched.c</td><td>进程结构</td><td>task_struct</td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C</tag>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理</title>
    <link href="/2021/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <url>/2021/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1>计算机组成原理</h1><h2 id="运算方法与运算器">运算方法与运算器</h2><h3 id="基本运算">基本运算</h3><p><strong>位运算</strong></p><p>&amp; | ~ ^：可直接采用逻辑门实现，运算延迟为一级门电路延迟</p><p><strong>逻辑运算</strong></p><p>&amp;&amp; || ! ： 非数值运算，操作数只能是0或者1 --&gt; 逻辑运算翻译成汇编语言时不会对应具体的运算指令，而是变成相应的程序分支结构(cmp \ je)</p><p><strong>移位运算</strong></p><p>&lt;&lt; &gt;&gt; : 2x 4x x/16等都会转换成相应的移位运算 而非乘除法运算</p><ul><li>对固定位数的移位运算，不需要逻辑器件，只需要对原有数据进行重排即可</li><li>对可变参数的移位运算，可将可变移位运算按权值分解成k（位移数）个固定个数的移位运算 ----&gt; <strong>桶型移位器</strong><ul><li>纯组合逻辑电路，用k个二路选择器串联构成。k个二进制位分别连接到k个二路选择器的选择控制端</li><li>需要k个二路选择器的时间延迟，一个二路选择器需要2级基本门电路延迟</li></ul></li></ul><p><em>移位操作的原理</em></p><p><strong>算术运算</strong></p><p>±*/：</p><p>C语言中的变量 x 常量以及变量 / 常量通常会被编译器优化，常量乘法会被更快的移位指令和算数加减运算指令替代。除法被常量乘法和移位指令的组合替代</p><h3 id="定点加减法运算">定点加减法运算</h3><p>参考CSAPP，华科书中也有习题</p><h4 id="溢出检测">溢出检测</h4><h4 id="逻辑实现">逻辑实现</h4><h5 id="全加器">全加器</h5><p>3个输入： 要加的两个位数 X Y、是否有来自低位的进位 C_{i}<br>2个输出： 是否有高位的进位C_{i}、相加的结果S_{i}</p><p>$$S_{i}=  X_{i} \bigoplus Y_{i} \bigoplus C_{i}$$</p><p>高位进位输出的两种表达方式：</p><p>$$C_{i}=  X_{i}Y_{i} + (X_{i} + Y_{i})C_{i}$$</p><p>$$C_{i}=  X_{i}Y_{i} + (X_{i} \bigoplus Y_{i})C_{i} $$</p><p>开销不同：</p><ul><li>①式：3个两输入与门、1个三输入或门、2个两输入异或门</li><li>②式：2个两输入与门、1个两输入或门、2个两输入异或门，成本低，延迟高</li></ul><p>注意这里主要是$$C_{i+1}$$的运算区别</p><p><strong>半加器</strong></p><p>没有进位输入、内部逻辑只有一个异或门来产生合数，一个与门产生进位输出</p><p>$$S_i = X_i \bigoplus Y_i$$     $$C_{i+1} = X_iY_i$$</p><p>半加器通常用于没有进位输入的情况，以减少不必要的硬件开销，时间延迟为3T</p><h5 id="多行串行加法器">多行串行加法器</h5><p>n个全加器的进位链串联得到n位串行加法器 ----&gt; 行波进位加法器</p><p>高位的全加器必须等待低位进位后才能开始运算。但S和C的运算<s>是并行的</s>，<s>互不等待</s>的有符号、无符号运算均可</p><ul><li>无符号的加法：溢出检测信号 $$C_n$$</li><li>有符号 溢出检测：overflow,最高数值位进位和符号位进位异或得到</li></ul><h5 id="可控加减法电路">可控加减法电路</h5><p>$$[X]_补 - [Y]_补 = [X-Y]_补 = [X]_补 + [-Y]_补$$</p><p>Y的所有位与Sub信号进行异或后送入 Sub = 1时，则送入的是Y的反码，并且Sub也实现了末尾+1的取反操作</p><h5 id="先行进位加法器-CLA">先行进位加法器(CLA)</h5><p>n位串行加法电路高位的运算以来与低位进位输入，全加器并不能并行运行，位宽较大时性能差</p><p>替换： $$G_i = X_iY_i$$     $$P_i= X_i \bigoplus Y_i$$<br>Gi = 1时，Ci+1一定为1 ---- Gi：进位生成函数<br>Pi = 1，Ci才能传递到进位输出Ci+1—Pi：进位传递函数<br>最终有：</p><p>$$G_n = G_{n-1} + P_{n-1}G_{n-2} + … + P_{n-1}P_{n-2}…P_2P_1P_0C_0$$</p><p>根据公式利用欧冠额外的组合逻辑电路<strong>提前</strong>产生各位运算加法所需要的所有进位输入，再利用$$S_i = P_i \bigoplus C_i$$进行一级异或门运算可得到最终的和数，n越大，时间延迟也大，通常按照4位一组进行先行进位（先行进位电路位数越多、扇入系数越大、制造难度越大）</p><p><strong>并行加法器</strong></p><p>4位先行进位电路 + 生成GP的与门异或门电路 + 4个异或门 = 4位快速加法器（并行加法器）</p><div class="note note-primary">            <p><em>如何构建更大位宽的加法器电路？</em></p><p>多个快速加法器的进位链串联（但组间仍然是串行计算）。可以考虑将4个4位快速加法器输出的成组进位生成、传递函数和C0连接到先行进位电路的输入端，产生4个进位信号，再对对应信号连接到相应的快速加法器的进位输入端即可构成16位组内并行进位、组间并行进位的快速加法器</p>          </div><h4 id="补码加减法">补码加减法</h4><div class="note note-info">            <p>主要理解从原码到补码的优化过程</p>          </div><p>一种补码诞生的思路，设 a(known) + b(unknown) = 0，根据进位规则来求b，最终诞生了补码</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220405102442407.png" alt="image-20220405102442407"></p><p><strong>补码加减法的好处</strong></p><p>能够让计算机通过加法也能运算出有正负数和进位时的正确结果，方便计算。而不用通过原码运算后再复杂的判断大小。并且也可以只用加法器实现加减法</p><p>知识：</p><ul><li>~a = -a -1;</li><li>当我通过加法计算出一个负数的补码时，我如何确定它的原码的表示数值。按照补码的规则倒推，先减1再取反</li></ul><p>所有就有对signed int = (1 &gt;&gt; 31) - 1，其数值等于 -(1&gt;&gt;31)，其实理解应该从位的方式先理解，然后再转化到具体的表示形式有不同的取值，如果是unsigned int则为原值</p><h3 id="定点乘法运算">定点乘法运算</h3><ul><li>多位加法器循环累加，硬件开销小但需要时序电路控制，需要多个时钟周期才能得到运算结果</li><li>加法器阵列构成的纯组合逻辑电路，硬件开销大但只需要一个时钟周期</li></ul><h4 id="原码乘法">原码乘法</h4><p>基本累加核心公式： $$P_{i+1} = (P_i + y_{n-1}|x|)2^{-1}$$</p><p>两个n位数参加乘法运算需要 n次加法和n次移位操作，需要长度2n的积寄存器，<strong>符号位单独参加运算</strong></p><ul><li>需要多输入全加器 —&gt; 基于FA的循环累加0或被乘数</li><li>不同位部分左移次数不同 —&gt; 右移部分积  乘数寄存器</li><li>需要长度为2n的积寄存器 —&gt; 从部分积和乘数寄存器取结果</li></ul><p>**同步逻辑右移：**P y拼接在一起进行逻辑右移</p><p>核心是理解为什么会将y和P放在一起，进行同步逻辑右移：公式+便捷</p><h4 id="补码乘法">补码乘法</h4><p>$$[x*y]_补 = [x]_补 * (0.Y_1Y_2Y_3…Y_n) - Y_0 * [X]_补$$</p><p>展开后可得： $$[X * Y]<em>补 = [X]<em>补 * \sum</em>{i=0}^n (y</em>{i+1} - y_{i})2^{-i}$$</p><ul><li>i=n时，y_n+1 = 0</li><li>yn+1是哪个寄存器？ 在乘数寄存器Y后增加一位，为了乘法按照规则进行</li><li>算数右移的对象有哪些？   部分积和乘数寄存器</li></ul><p><strong>符号位参加运算</strong></p><ol><li><p><strong>Booth算法</strong></p></li><li><p><strong>补码一位乘法算法</strong></p><p>逻辑左移、逻辑右移</p></li></ol><h4 id="乘法运算器设计">乘法运算器设计</h4><p><strong>原码一位乘法</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211025135856404.png" alt="image-20211025135856404"></p><p><strong>补码一位乘法</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211025142032069.png" alt="image-20211025142032069"></p><ul><li>需要时序控制(A-&gt; ALU…)</li><li>需要多次循环累加</li></ul><p><strong>阵列乘法器</strong></p><p>与门阵列+FA阵列</p><p><strong>原码阵列乘法器</strong></p><p>原理：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211025141255448.png" alt="image-20211025141255448"></p><p>具体实现： （手工乘法）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211025140622036.png" alt="image-20211025140622036"></p><p>每一行都是串行进位加法器  ，改进后（打破串行进位链）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211025140828023.png" alt="image-20211025140828023"></p><p>速度更快，同级的FA不存在串行进位了，但需要 增加一行，处理最后一行FA的进位关系</p><p><strong>补码阵列乘法器设计</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211025142135047.png" alt="image-20211025142135047"></p><p>算前求补和算后求补</p><h3 id="定点数除法">定点数除法</h3><p>手工除法怎么算 ----&gt; 启示：除法运算可通过减法实现</p><p>存在问题：</p><ul><li>除数右移次数可能很多</li><li>需要长度为2n的寄存器保存余数</li><li>如何判断每步是否<strong>够减</strong><ul><li>余数为正时，商1，将余数左移1位，再与除数做比较</li><li>余数为负，不够减，商0。加除数来恢复成原来的值，将余数左移一位并做比较</li></ul></li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211025143233972.png" alt="image-20211025143233972"></p><p>注意：最终算出来的余数是经过左移改变的，所以需要进行相应位数右移来还原</p><p>缺点：运算步数不能在运算之前就确定（来源：恢复余数的次数无法确定）</p><p><strong>加减交替法（不恢复余数法）</strong></p><p>余数&lt; 0 时不需要恢复，仍然左移，只是再加上Y,结果是和恢复余数是一样的</p><p>过程简单、运算步数固定(???)</p><p><strong>电路图</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211025143922168.png" alt="image-20211025143922168"></p><h4 id="阵列除法">阵列除法</h4><p><strong>可控制加/减单元 CAS</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211025144253229.png" alt="image-20211025144253229"></p><p>逻辑功能：</p><p>$$ S_i = A_i \bigoplus (B_i \bigoplus P) \bigoplus C_i$$</p><p>$$ C_{i+1} = (A_i + C_i) (B_i \bigoplus P) + A_i C_i$$</p><p>P=0时实现加法功能，P=1时实现减法功能</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211025144819745.png" alt="image-20211025144819745"></p><ul><li>第一步一定是减法 P=1，后面则取决于每一步的商</li><li>最左边的CAS的进位输出是商，且本位商决定下一步是加操作还是减操作</li><li>每执行完一步除法，除数就右移一位（手工除法）（CAS电路都向右偏移一列，间接实现了余数的左移）</li></ul><h3 id="浮点运算">浮点运算</h3><p>规格化浮点数，将数据的表示范围和精确度统一</p><p>规格化的浮点数补码形式 尾数形式为：<br>00.1xxxx、11.0xxxxx(最高有效数据位与符号位不能相同)</p><ul><li>结果为00.0xxxxx或者11.1xxxx,需要<strong>左规格化</strong>，将尾数向左移动，每移动一次，阶码-1，知道满足要求</li><li>尾数结果为01.xxxx或者10.xxxxx，表明尾数求和结果&gt;1，仅需执行<strong>一次右移</strong>，阶码+1即可</li></ul><p>$$x = 2^{Ex}* Mx$$             $$ y = 2^{Ey} * My$$<br>$$x + y = (2^{Ex - Ey} * Mx + My )* 2^{Ey}$$</p><p>步骤：</p><ol><li>对阶<ol><li>求阶差Ex + (- Ey)</li><li>右移阶码小的浮点数的尾数并同步增加其阶码，直到两数阶码相等</li></ol></li><li>尾数加减</li><li>结果规格化</li><li>舍入：右移规格话的同时可能丢失一些低位的数值位，为提高精度，可采用<ol><li>0舍1入：若右移出的最高位是1，则在最低位加1</li><li>恒置1：只要数字位1被移走，就将最后1位恒置1</li></ol></li><li>溢出处理：<ol><li>阶码上溢：阶码的符号位为01</li><li>阶码下溢：阶码的符号位为10</li></ol></li></ol><p>浮点乘法和除法都大同小异</p><h2 id="存储器系统">存储器系统</h2><h3 id="存储器概述">存储器概述</h3><p>**存储单元：**存储器中的最小存储单位 – 存储元</p><p>**MOS：**场效应管。金属+氧化物+半导体场效应晶体管</p><h4 id="分类">分类</h4><p><strong>按照存储介质分类</strong></p><ul><li><p>磁存储器：磁性材料做介质，利用磁化单元剩磁的不同磁化方向来存储数据0 和 1.体积大、存储速度慢、单位容量成本低</p></li><li><p>半导体存储器：</p><ul><li><p>双极型存储器： TTL、ECL</p></li><li><p>金属氧化物半导体存储器：MOS存储器</p><ul><li>静态MOS存储器 SRAM</li><li>动态MOS存储器 DRAM</li></ul><p>存储体积小，存储速度快，单位容量成本高</p></li></ul></li><li><p>光存储器： 利用介质的光学特性（CD-ROM DVD-ROM）以刻痕形式将数据存在盘面，用激光束照射盘面，靠不同的反射率来读信息</p><ul><li>磁光盘：激光+热辅助磁化的方式，根据反射光的偏振方向不同读信息</li></ul></li></ul><p><strong>按照存取方式分类</strong></p><ul><li>随机存储器：RAM，按照地址随机读写数据存储单元，存取访问时间与存储单元的位置无关。现在大量的半导体存储器都是RAM</li><li>顺序存储器：SAM，存储单元的内容只能依地址顺序访问，<strong>访问速度与存储单元的位置有关</strong>的存储器（磁带存储）</li><li>直接存储器： DAM，不必经过顺序搜索就能在存储器中直接存取信息，具有RAM和SAM的特性（磁盘存储器）。由于磁盘存在机械寻道和旋转延迟，因此数据访问时间和磁头与目标扇区的距离有关</li></ul><p><strong>按照信息的可改写性</strong></p><ul><li>读写存储器：既能读出又能写入信息</li><li>只读存储器：ROM</li></ul><p><strong>按照功能和存取速度分类</strong></p><ul><li>寄存器存储器（CPU类）</li><li>高速缓冲存储器： 在寄存器和驻村之间的高速小容量存储器，存放CPU即将或者经常要使用的指令和数据。采用静态RAM构成</li><li>主存储器：CPU中除了寄存器之外唯一能直接访问的存储器，存放执行和数据。CPU通过主存地址直接、随机地读写存储器。主存一般由半导体构成，可能还包括硬件端口和BIOS</li><li>外存储器： 容量大、速度低。存放当前暂时不参与运行的程序与数据</li></ul><p>存储器带宽： 单位时间内存储器能传输的信息量 （位/秒 字节/秒）</p><h4 id="存储系统层次结构">存储系统层次结构</h4><h4 id="主存的基本结构">主存的基本结构</h4><p>主存是机器指令直接操作的存储器，采用主存地址进行随机访问</p><ul><li>地址译码器接收到来自CPU的n位地址信号，经过译码、驱动后产生2^n根地址译码信号，每一根地址译码信号连接一个存储单元</li><li>数据寄存器永远是存取将要送走或者送来的数据</li><li>读写控制相当于一个网关，产生读写的信号</li></ul><h4 id="主存中的数据存放">主存中的数据存放</h4><p><strong>存储字长：</strong> 主存的一个存储单元所存储的二进制位数<br><strong>数据字长（字长）：</strong> 计算机一次能处理的二进制数的位数<br><strong>存储字长和数据字长可以不同</strong></p><p>(网上说数据字长是计算机数据存储所占用的位数，机器字长是CPU一次能处理数据的位数)</p><p><strong>地址访问模式</strong></p><p>主存按照字节进行编址，可以通过字节地址、半字地址、字地址（字节地址的逻辑右移）来进行访问</p><p><strong>大端小端</strong></p><p>不同的访问顺序导致访问的数据完全不同</p><ul><li>小端： 存储器的低字节地址单元存放的数据的低字节<ul><li>主流处理器采用</li></ul></li><li>大端： 存储器的低字节地址单元存放的数据的高字节</li></ul><p><strong>数据的边界对齐</strong></p><p>一个多字节变量分布在不同的字存储单元中，访问改变量就需要多个存储周期</p><ul><li>dw数据起始地址的最末3位为000，地址是8的整数倍</li><li>w数据起始地址最末两位为00.地址是4的整数倍</li><li>半字树其实地址的最低一位是0，地址是2的整数倍</li><li>单字节数据不存在边界对齐问题</li></ul><p>以空间换时间，<a href="https://blog.csdn.net/lgouc/article/details/8235471">理解为什么需要内存对齐</a></p><h3 id="半导体存储器">半导体存储器</h3><p>存取速度快，体积小，性能好  分为RAM和ROM存储器</p><p>作为存储单元电路，需要具备：</p><ul><li>具有两种稳定状态</li><li>状态经外部信号控制可相互转换</li><li>经控制后能读出其中的信息</li><li>信息能长期保存</li></ul><p><strong>6管MOS存储单元</strong></p><p><strong>存储单元扩展</strong></p><h4 id="静态MOS存储器">静态MOS存储器</h4><p>一维行扩展： 单译码结构<br>二维行列扩展： 双译码结构，两个方向设置n/2路输入译码器。输出信号少很多（为啥？），译码电路成本降低</p><p>译码器（最小项发生器）：组合逻辑电路，将n位二进制信号输入翻译成2^n个输出信号，每个输出信号都是n位输入的最小项</p><p><strong>结构</strong></p><h4 id="动态MOS存储器">动态MOS存储器</h4><p>SRAM存储密度低，即使存储单元不写入，也会有电流，功耗大</p><ol><li><p><strong>单管DMOS存储单</strong></p><p>一个MOS管+ 一个电容</p><p>缺陷：</p><ol><li>DRAM利用存储电容的电荷表示数据，重发点过程慢，导致了读写速度比SRAM单元慢</li><li>存储电容的容量比寄生电容小一个容量级，二者进行电荷重分配产生的电流十分微弱，需要灵敏的差分放大器检测。读操作可能导致电荷减少，破坏原有数据，为避免数据丢失，读出后会将数据重新写入—数据恢复</li><li>数据恢复以及读出信号放大的逻辑由再生放大电路实现，每组列线上共享</li><li>电容的电荷会逐渐泄露，数据只能保存较短时间。需要类似读操作的方式对存储单元补充电荷—刷新----为什么叫DRAM</li></ol></li><li><p><strong>如何刷新</strong></p><p>最大刷新周期： 信息存储到数据丢失之前的时间间隔<br>刷新周期：存储器实际完成两次刷新的间隔（2ms 4ms 8ms/…）</p><p>动态存储器按行进行刷新，为减少刷新周期，可减少存储矩阵的行数、增加列数，只需要给出行地址即可</p><p>刷新时DRAM不能响应CPU的访问，三种解决方式</p><ul><li>集中刷新<ul><li>读写操作期间不受刷新操作的影响，存储器速度快</li><li>存在较长的时间死区，在集中刷新的n个读写周期内，CPU都不能访问存储器</li></ul></li><li>分散刷新<ul><li>划分存储周期，前段时间来读写 后端时间来刷新（类似微时隙再分），则过n个ts就可以完全刷新，在一个刷新间隔内能进行多次刷新</li><li>不存在死区</li><li>刷新过于频繁，影响系统速率</li></ul></li><li>异步刷新<ul><li>集中刷新+分散刷新</li><li>x行的刷新平均分散在刷新间隔内，每个一段时间刷新一行，将刷新间隔的最后0.5us来刷新</li><li>充分利用2ms时间，保持了系统的告诉特性</li></ul></li></ul></li></ol><h4 id="只读存储器">只读存储器</h4><ul><li>掩膜式ROM MROM：把0 1 信息存储在掩膜图形中，芯片完成后各存储位状态被固定，不能修改。灵活性差可靠性高</li><li>可编程ROM PROM ：用户可写一次，采用熔丝代替开关，存储器出厂时每个存储单元的熔丝都是连接状态，存储数据全为0.可利用编程器进行一次改写，可通过辅助电路有选择地将某些存储单元的熔丝高压熔断，再写入数据1<ul><li>除熔丝型，还有采用反向二极管的PROM,默认状态不导通，默认数据为1，改写时采用高压将其永久性击穿，导通数据为0.</li></ul></li><li>可擦除可编程ROM EPROM：可多次写入，可擦除进行重写<ul><li>浮置栅：MOS管的栅极埋入SiO2中且浮空与外界绝缘。</li><li>利用浮置栅MOS管的导通和截止状态存储数据，初始无电荷，MOS管截止；写入时在源级和漏级加上编程电压，MOS管在高压作用下被击穿。高压撤出后，浮置栅有绝缘层保卫，电荷无法泄露，浮置栅带电,MOS管导通，信息存入</li><li>擦除：紫外线照射，形成光导现象，浮置栅上电荷完全泄露。所有单元回到初始状态</li></ul></li><li>电可擦除可编程ROM EEPROM：在浮置栅上方增加了控制栅极，写入方式与EPROM相同。<ul><li>擦除时不需要紫外线照射石英玻璃，只需要将控制栅极加上高电平就可以将浮置栅的电荷泄露掉</li><li>可以精准地删除某一存储单元</li></ul></li><li>闪存 Flash Memory：快速擦写、非易失性存储器。与EEPROM结构相似。闪存的工作方式包括读工作方式、编程工作方式、擦除工作方式和功耗下降方式，编程和擦除方式采用写命令到命令寄存器的方法来进行。</li></ul><h3 id="主存的组织和与CPU的连接">主存的组织和与CPU的连接</h3><p>单片存储芯片的容量有限，通常需要将多篇存储芯片按照一定方式组织并与CPU连接。</p><h4 id="存储器的扩展">存储器的扩展</h4><ol><li><p><strong>位扩展</strong></p><p>字长扩展、数据总线扩展</p><p>当存储芯片的数据总线位宽 &lt; CPU数据总线位宽时采用</p><p>将所有存储芯片的<strong>地址线、读写控制线</strong>并联分别与<strong>CPU的地址线和读写控制线</strong>连接，存储芯片的<strong>数据线和CPU数据线</strong>连接；所有芯片的<strong>片选控制线</strong>并联后与**CPU的访存请求信号MERQ#**连接</p></li><li><p><strong>字扩展</strong></p><p>容量扩展、地址总线扩展</p><p>存储芯片的存储容量不能满足存储器对存储容量的要求时采用。</p><p>将所有<strong>存储芯片的数据线、读写控制线</strong>各自并联，分别与<strong>CPU的数据线和读写控制线</strong>连接</p></li><li><p><strong>字位同时扩展</strong></p><p>存储芯片的数据位宽和存储容量均不能满足存储器的数据位和存储总容量时采用</p><p>先位扩展 – 后字扩展</p></li></ol><h3 id="并行主存系统">并行主存系统</h3><p>如何通过发觉存储系统的并行性来提高存取速度</p><ol><li><p>双端口存储器</p><p>一个存储器有两组相互独立的端口，每个端口可以独立地进行读写操作</p><p>特点：</p><ol><li><p>并行读写</p><p>不同端口使用各自的地址线、数据线和控制线对存储器中的不同存储单元进行同时读写</p></li><li><p>冲突处理</p><p>两个端口地址相同时会发生读写冲突 ，解决 ----&gt; 每个端口设置标志 $$\overline {BUSY}$$,由判断逻辑决定哪个端口有限进行读写操作，另一个端口的标志设置为0（低电平）以延迟对存储器的访问。优先端口的操作完成后，被延迟端口的标志会复位</p><p>效率不能实际提高两倍 ----&gt; 冲突访问不能避免</p></li></ol></li><li><p>单体多字存储器</p><p>类似位扩展方式。多个存储模块共享地址总线，按同一地址并行访问不同存储模块的同意单元，一个存储周期内访问多个存储字。</p><p>常用： <strong>多通道内存技术</strong> （联动模式）：<br>两条完全相同的64位内存共享地址总线和片选信号线， 同一时刻两根内存并发工作，各自<strong>访问同一地址单元</strong>中的64位数据（总共128位）并送入内存控制器。（要求两根内存的容量、时序、频率必须完全一致（书中有图，非常帮助理解））</p><p><strong>非联动模式</strong>：内存控制器通过独立的片选信号、地址总线、读写控制线连接两根内存，数据总线页是独立的两条64位总想爱你。内存可以并发工作，但<strong>二者地址、读写命令不必同步</strong>。只需要频率相同</p></li><li><p>多体交叉存储器</p><p>多个容量和存取速度相同的存储模块构成</p><ol><li><p>高位多体交叉（顺序编址模式）</p><p>目的：扩充存储器容量，与存储器字扩展完全相同。用高位地址译码产生片选信号，选择不同的存储模块；低位地址直接选择存储模块内的不同存储单元</p><p>特点：</p><ul><li>相邻地址在同一存储体内</li><li>不同存储体中的地址不相邻</li><li>同一存储体的地址单元是连续的，程序执行过程基本是对同意存储提访问频繁，而其他存储提基本空闲，无法实现多个存储体的并行工作</li></ul><p>eg：计算机内存插槽可扩展性</p></li><li><p>低位交叉方式（交叉编址模式）</p><p>低位地址译码进行片选，高位地址选择存储模块内的不同存储单元</p><p>特点：</p><ul><li>相邻的地址处在不同的存储体内</li><li>同一存储体中的字体不相邻</li><li>适合突发的顺序访问模式</li><li>顺序访问时，各存储模块按照流水线的方式轮流存取</li></ul><p>为提高顺序访问时个存储模块的并行性，个存储模块均具有各自独立的地址寄存器、数据寄存器和读写控制电路。</p></li></ol></li></ol><p>计算不同条件下读取字所需要的时间和带宽 — 书中P.121</p><div class="note note-success">            <p>存储时间和存储周期的区别</p><p>存储时间：CPU读写内存内数据的过程时间（发出命令到接受数据）<br>存储周期：连续启动两次读或写操作锁需间隔的最小时间（两次存储时间+恢复时间）</p>          </div><h3 id="高速缓冲存储器">高速缓冲存储器</h3><h4 id="cache">cache</h4><p>SRAM速度快但容量有限，成本高功耗大。 为进一步提升CPU访问主存的性能 — 在CPU和主存间增加隐藏的小容量快速的SRAM<br>将主存中经常访问或者即将访问的数据副本调度到小容量的SRAM中，使得大部分数据访问都能在cache中进行（为什么？因为CPU执行的程序具有较强的程序局部性）</p><p><strong>程序局部性</strong></p><p>程序在执行时呈现局部规律性（一段时间内，程序的执行仅限于程序中的一部分，执行所需的执行和数据页局限于某个存储区域内）</p><ul><li>空间局部性：一旦程序访问了某个存储单元，其附近的存储单元页即将被访问（代码、数组、结构体、全局变量）</li><li>时间局部性：程序访问一个存储位置，该位置在未来可能被多次访问（循环结构）</li></ul><h5 id="概念-v10">概念</h5><p>与主存一样，被分为多个数据块，数据块又包含多个字。划分为块地址和块内偏移地址（主存块地址字段&gt;cache块地址字段，块内偏移是相同的）</p><p>CPU通过字节地址访问cache先判断数据是否在cache中，如果在，则<strong>数据命中</strong>；<br>数据不在，<strong>数据缺失</strong>，缺失时的访问时间叫<strong>缺失补偿</strong>（包括数据查找t、主存访问t、cache访问t），相邻数据也会随着数据块一起加载到cache中</p><h5 id="读写流程">读写流程</h5><p><strong>读</strong></p><p>CPU需要访问主存时，先以主存地址RA中的主存块地址为关键字在查找表中查找，能查到则命中</p><p><strong>写</strong></p><p>以主存字节地址WA中的主存块地址为关键字在查找表中进行数据查找，先写到cache再写到主存<br><strong>脏数据</strong>：cache中数据和主存中原始数据不一致现象</p><ul><li>写回策略：不再写入到主存，响应速度最快，但产生不一致性。每个cache行要配置一个修改位（<strong>脏位</strong>）。当某行要被替换时，检测是否脏位为1，是则会写入到内存中再替换</li><li>写穿策略：写回到主存中，慢速</li></ul><p>数据缺失时：</p><ul><li>写分配法：将WA对应的数据块载入到cache中，在进行和写命中一致的策略。</li><li>另外的：数据直接写入慢速的主存中</li></ul><p><strong>关键技术</strong></p><ol><li>数据查找</li><li>地址映射</li><li>替换策略</li><li>写入策略</li></ol><p><strong>相联存储器CAM</strong></p><p>按内容进行访问的存储器，用于存放查找表 KV形式。用于cache的快速查找</p><p>所有存储单元的key字段同时与CAM的输入检索关键字进行并发比较。每个存储单元都对应一个独立的比较器，硬件成本高，容量一般较小</p><h5 id="地址映射">地址映射</h5><p>主存地址空间映射到cache的地址空间,三种方式：</p><ol><li><p>全相联：各主存块可映射到cache的任意数据块</p><p>(主存)一对多(cache)，新的主存块可以在啊入道cache中的任意空位置。<br>利用率最高、查找成本高，需要CAM提供快速查找功能</p><p>需要记录相关标记：主存块地址标记、有效位、脏数据标志位…   —cache槽中（cache有多少个数据块就对应多少个cache槽）</p><p>数据查找时直接将主存块地址和所有cache行中的标记字段主存块地址进行并发比较</p><p>cache副本缓冲区容量 = n x 2^w字节  实际容量为 n * (1+s+8*2^w)位(s :tag, w: offset)</p><p>实现：</p><p>主存地址被划分位(tag,offset)，tag代表主存块地址。比较时tag与所有航的标记字段tag进行多路并发比较</p><p><strong>特点：</strong></p><ol><li>cache利用率高</li><li>cache冲突率低</li><li>查找时要并发比较查找表的所有项，硬件成本高，适合小容量cache</li><li>cache满载时替换算法复杂</li></ol></li><li><p>直接相联：主存块只能映射到cache中的固定块</p><p>每个主存地址只能映射到cache中的固定行</p><p>cache行号i = 主存块号 j mod (cache行数n)</p><p>主存地址可细分为：区地址tag、区内行索引index、块内偏移offset</p><p>cache实际容量n * （1 + s -r + 8 * 2^w）位（行数位r，区地址有s-r位）</p><p>通过index字段可快速访问对应cache行的标记与标志字段，如果<strong>标记字段有效</strong>且<strong>与主存地址中的区地址相同</strong>，就命中。查找表不需要存放在相联存储器中</p><p>实现：</p><p>主存地址被划分为 (tag index offset)</p><p><strong>特点：</strong></p><ol><li>cache利用率低，可能有冲突</li><li>cache未满也可能发生数据冲突</li><li>查找时只需要根据index访问对应cache行的tag比较，一个比较器即可，硬件成本低（因为不需要并发比较了），适合大容量cache使用</li><li>不需要使用复杂的替换算法</li></ol><p>相应例题 ： P.130(还挺多的，建议好好看一下)</p></li><li><p>组相联：主存快只能映射到cache固定组中的任意块</p><p>前两种方式的折中，既能提高命中率，又能降低硬件的开销（全相联在组内进行比较，需要K个比较器）</p><p>将cache分成固定大小的组，每组k行（k-路组相联）。主存数据块首先先采用直接相联映射的方式定位到固定的组，然后用全相联映射方式映射到组内的任何一个cache行。</p><p>cache组号 = 主存块号 mod(cache组数)</p><p>实现：</p><p>主存地址被划分位(tag 组索引index offset)</p><p>cache容量 = 2 n * (1+s-d+8* 2^w)位</p><p>数据淘汰在指定的组内选择cache行进行淘汰</p></li></ol><h5 id="应用-v3">应用</h5><p><strong>分离cache</strong></p><p>指令和数据不在同一个cache中统一cache：指令和数据都在cache中，，但执行部件存取数据时，指令预取部件又要从统一cache读指令，两者会发生冲突</p><p><strong>多级cache</strong></p><p>一级cache L1: cache和处理器集成在同一芯片内，减少对片外总线的访问。容量较小<br>二级cache L2: 主存和CPU之间（L1cache容量小 8 K, L2-- 256KB~1MB）</p><h4 id="替换算法">替换算法</h4><ol><li><p>FIFO：</p><p>需要记录每个cache行载入cache的时间戳，开销小</p></li><li><p>LFU：Last Frequently Used</p><p>每行必须设置淘汰计数器，可能因为时序问题而淘汰使用增长率较高的cache行</p></li><li><p>LRU：Last Recently Used</p><p>每行设置计数器，每命中一行，对应的计数器清零，其他行的计数器+1.使得cache有较高的命中率</p><p>难点：快速比较多行计数 — 二路级联cache,一个主存快只能在特定组的两行中存放（二选一）</p></li><li><p>随机替换</p></li></ol><h3 id="虚拟存储器">虚拟存储器</h3><h4 id="原理-v5">原理</h4><p>采用cache提高了CPU对主存的访问速度问题，但不能解决主存容量不足的问题<br>虚拟存储器处于“主存-缓存”层次，通过增加部分软件和硬件，使得赋存和主存构成一个整体，就像一个单一的主存可供CPU直接访问。程序员可用虚拟存储器提供的虚拟地址进行变成，不再受主存大小的限制。</p><p>利用程序的局部性，采用按需加载的方式加载代码和数据。加载程序时不直接加载入主存中，而仅在相应的虚拟地址转换表中登记虚拟地址对应的磁盘地址。程序执行病访问虚拟地址对应的程序和数据时，产生缺页异常，将真正的程序和代码载入</p><p><strong>地址映射</strong></p><p>虚拟存储器中三种空间地址</p><ol><li>虚拟地址空间：编写程序的地址空间</li><li>主存地址空间：物理地址空间（实地址空间）</li><li>辅存地址空间：磁盘存储器地址空间</li></ol><p>地址映射：将虚拟地址空间映射到主存空间，将访问的内容按照某种规则从辅存装入主存并在虚、实地址间建立联系<br>地址转换：程序被装入主存实际运行时，把虚地址转换成实地址或者磁盘地址，让CPU从主存或磁盘中读取信息</p><p>在虚存系统中运行程序时，CPU以虚拟地址访问主存，使用MMU（存储管理控制部件）找出虚地址和实地址之间的关系，并判断这个虚地址对应的内容是否在主存中，如果在则通过MMU将虚拟地址转化为物理地址；如果不在，则把包含这个字的一页或一个程序段调入主存</p><p>根据虚拟存储器对主存逻辑结构划分的粒度，虚存可分为页式、段式、段页式虚存</p><h4 id="页式虚拟存储器">页式虚拟存储器</h4><p>以页位逻辑结构划分你信息传送单位的虚拟存储器。<br>虚拟空间和主存空间 被划分成固定大小的页（常见4KB）</p><p><strong>虚拟地址划分</strong></p><p>虚拟地址 = 虚拟页号 VPN + 虚拟页偏移 VPO<br>物理地址 = 物理页号 PPN + 物理页偏移 PPO<br>(VPN &gt; PPN 取决于虚拟空间和主存空间的容量， VPO = PPO 决定页面大小)</p><p><strong>页表</strong></p><p>虚实地址的转换通过<strong>页表</strong>进行：一张保存虚拟页号VPN和物理页号PPN对应的关系的查找表，由若干个表项组成的数组。<br>以VPN作为索引，每个表项包括有效位和物理页号，还包括修改位、使用位、权限位等…</p><p>磁盘分为交换分区和数据分区，交换分区用于存放主存页面换出的动态修改数据，数据分区用于存储用户程序和数据，主存和磁盘两部分空间合并构成虚拟地址空间</p><p><strong>页表常驻内存</strong>，并将虚拟地址中的虚拟页号作为索引来访问。每个虚拟页对应一个页表项，</p><p>由于每个进程都有独立的虚拟地址空间，因此每个进程都有一张完整的页表（页表属于进程控制信息，存放在进程地址空间的内核区中）。页表在主存的首地址记录在<strong>页表基址寄存器PTB</strong>R中，进程切换时只需要切换PTBR的值就可以实现页表的快速切换。</p><blockquote><p>VA：虚拟地址<br>PA：物理地址<br>PTE：页表项<br>PTEA：页表项地址</p></blockquote><p>页表项的有效位 = 1 -&gt; 当前页的数据在主存中，直接利用PPN和VPO生成物理地址，访问主存数据<br>有效位 = 0 -&gt; 对应虚拟页可能暂未分配页；也可能对应页在磁盘中，访问页会触发缺页异常，由操作系统的缺页异常处理程序负责将磁盘的对应页载入到主存中，并更新页表项。（书中有图和例题 P.141）</p><p>VPN+PTBR -&gt; 页表主存中位置 – &gt; PPN  PPN + (VPO–&gt;PPO) = PA</p><h4 id="虚存的访问流程">虚存的访问流程</h4><p>书中详解 P.142</p><p><strong>结合cache的虚存器访问流程</strong></p><p>页表的部分数据块可能会作为常用的热数据调度到cache中</p><p>最佳情况：2次cache访问（数据和页表都在cache中命中）<br>最坏情况：2次主存访问+磁盘访问（页表数据均未命中且缺页）</p><p><strong>利用TLB加速续存器地址转换</strong></p><p>cache缓存部分常访问的页表块的数据粒度太大，并不能充分利用虚拟存储器访问的局部性。<br>为了进一步降低虚拟存储器地址转换的硬件开销，处理器都维护一个<strong>转换旁路缓冲区</strong>(TLB，一个较小的cache)，用于<strong>缓冲经常访问的PTE</strong>。采用全相联和组相联，随机替换算法。</p><p>采用组相联cache的地址划分方法，虚页号划分成TLB标记和TLB索引，便于快速判断访问的页面是否在主存中，标记字段是TLBT<br>VPN = TLBT + TLBI  + VPO<br>采用全相联的映射，则TLB表项中的标记字段就是VPN，</p><p>TLB离CPU更近，访问速度更快，将TLB称为快表，根据内容访问，主存的页表叫慢表，根据地址访问。</p><p>进行地址转换时，会同时查询块表和慢表</p><h4 id="CPU访存过程">CPU访存过程</h4><p>操作系统引导完成之前 — CPU只能以地址访问主存<br>引导完成后–进入保护模式，只能用虚地址访问主存</p><p>书中P.145有具体图</p><p><strong>书后习题非常重要，注意这章的概念解释</strong></p><h2 id="指令系统">指令系统</h2><h3 id="概述-v6">概述</h3><p>指令：用户使用计算机与计算机本身运行的基本功能单位<br>机器指令：计算机硬件与软件的界面，用户操作和使用计算机硬件的接口</p><p>一条高级语言 —&gt; 多条机器指令<br>一条汇编语言 —&gt;(一般)一条机器指令<br>一条机器指令 —&gt; 多条微指令</p><p>指令系统应该满足的条件：</p><ul><li>完备性</li><li>规整性：对称性+均齐性。寄存器和存储单元可以被同等对待，所有志林可以使用各种寻址方式；指令系统提供不同数据类型的支持</li><li>有效性</li><li>兼容性</li><li>可扩展性：指令格式的操作码预留一定的编码空间 ，方便扩展指令</li></ul><h3 id="指令格式">指令格式</h3><p><strong>指令字长</strong>：一条指令中的二进制位数</p><ul><li>定长指令系统：<ul><li>结构简单，方便硬件实现，有利于CPU取指令、译码和指令顺序寻址</li><li>平均长度偏长，冗余状态多，不方便扩展</li></ul></li><li>变长指令系统：<ul><li>结构灵活、长度可变，冗余状态少，可扩展性好</li><li>取指令可能涉及多次访存操作，下一条指令的地址必须在指令译码完成后才能确定，增加硬件设计难度(Intel x86)</li></ul></li></ul><p>指令可分为：半字长(CPU访问1次可读取2条)、单字长(CPU1次访问1条)、多字长。<br>长度越大，占用主存空间大，访问时间长</p><h4 id="指令地址码">指令地址码</h4><p>指令可分为：</p><ol><li><p>三地址指令</p><p>**双目运算：**具有两个操作对象的运算。两个源操作数+一个目的操作数<br>$$A_3 \leftarrow (A_1)OP(A_2)$$</p><p>3地址码很少用存储单元的地址码，一般3个操作数都是寄存器</p></li><li><p>双地址指令</p><p>$$ A_1 \leftarrow (A_1)OP(A_2)$$</p><p>可分为：</p><ul><li>RR(寄存器-寄存器)型</li><li>RS(寄存器-存储器)型</li><li>SS(存储器-存储器)型</li></ul></li><li><p>单地址指令</p><ol><li><p>单目运算类指令<br>$$ A_1 \leftarrow OP(A_1)$$</p></li><li><p>隐含操作数是双目运算类指令</p><p>$$ A_1 \leftarrow (AC)OP(A_1)$$</p><p>一个操作数隐含于CPU的某个寄存器</p></li></ol></li><li><p>零地址指令</p><p>只有操作码字段没有地址字段。类似单地址指令，也有两种方式</p><ol><li>wait ret halt nop不需要任何操作数</li><li>隐含操作数指令</li></ol></li></ol><h4 id="指令操作码">指令操作码</h4><ol><li><p>定长操作码，定长优点同上。</p></li><li><p>变长操作码，优点同上。</p><p>可采用扩展操作码技术来实现变长曹组好吗，操作码的长度随地址码数目减少而增加。书中有图题P.157</p></li></ol><h3 id="寻址方式">寻址方式</h3><p>指令存放在主存中</p><p><strong>指令数寻址方式</strong></p><ol><li><p>顺序寻址</p><p>指令在主存中 往往按序排放</p></li><li><p>跳跃寻址</p><p>程序出现分支或转移时，要改变执行顺序。即下一条的指令不一定能通过PC+1来取到</p><p>例如：无条件跳转指令和条件跳转至零</p></li></ol><p><strong>操作数寻址方式</strong></p><p>操作数来源：</p><ol><li>直接来自指令地址字段？</li><li>存放在寄存器中</li><li>存放在存储器中</li></ol><p>将地址码字段细分为寻址方式字段I 和地址字段D , 例如单地址指令可划分为</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027093000063.png" alt="image-20211027093000063"></p><ol><li><p>立即寻址</p><p>I表示立即寻址的编码，D字段是操作数本身。操作数和指令同进退，取指令时操作数随着指令一起被送到CPU的指令寄存器中，执行指令时直接从执行寄存器获取操作数</p><p>取操作数快，但形式地址字段D位宽有限，操作数能表示的范围有限，一般用于变量赋初值</p><p>MOV EAX, 2008H</p></li><li><p>直接寻址</p><p>操作数在主存中，操作数地址由D直接给出</p><p>直观，不需要计算就可直接从指令中获得操作数有效地址</p><p>但寻址范围受限于指令中直接地址的二进制位数，数据地址存在指令中、程序和数据在内存中的存放位置受到限制</p><p>MOV EAX , [2008H]</p></li><li><p>寄存器寻址</p><p>D表示寄存器的编号</p><p>MOV EAX,ECX</p></li><li><p>间接寻址</p><p>D给出的是操作数的间接地址。地址指向的主存单元中的内容才是操作数的有效地址</p><p>MOV EAX , @2008H;</p><ul><li>解决了直接寻址方式寻址范围受限的问题，能用较短的地址码访问较大的主存空间</li><li>灵活，操作数地址改变不需要改变指令中的形式地址，只需要改变其指向的主存单元内容即可</li></ul><p>但取操作数时需要两次访问主存，降低了指令的执行速度</p></li><li><p>寄存器间接寻址</p><p>操作数地址存放在寄存器中，实际操作数在主存中（寄存器指向主存的地址）<br>只需要一次访问主存，还可以扩充寻址范围<br>MOV AL,[EBX]</p></li><li><p>相对寻址</p><p>把PC的内容(下一条指令地址)加上指令的形式地址D,形成操作数的有效地址</p><p>数据有效地址 EA = PC + D ，取指令时PC的值会修改，而计算操作数的有效地址在指令译码分析或执行阶段完成，所以有EA = PC + 1 + D？？？</p><ul><li>只需要确定程序内部操作数与指令之间的相对距离，无需知道操作数在主存的绝对地址</li><li>分支转移类指令，实现相对跳转转移，有利于程序在主存中灵活定位</li></ul></li><li><p>变址寻址</p><p>指定一个寄存器用来存放变化的地址 ，叫变址寄存器。形式字段D增加变址寄存器字段X 。X +D 就为操作数的有效地址<br>变址寄存器提供修改量，指令提供基准量（指令执行过中，X寄存器内容可变，D内容不可变）</p><p>用于对线性表类的数组元素进行重复访问</p><p>面向用户，解决程序循环问题</p><p>MOV EAX ， 32[ESI]</p></li><li><p>基址寻址</p><p>指定一个寄存器来存放基地址，成为基址寄存器B.指令D存放变化的地址值。程序执行过程中B不可改变，D可改变</p><p>CPU内有专门的基址寄存器(EBX EBP)。若基址是EBX,则操作数在数据段，是EBP，则操作数在堆栈段</p><ul><li>面向系统，用于程序的重定位（每个用户程序不冲突（编程环境和实际环境））</li><li>扩展寻址空间（基址寄存器位数大）</li></ul><p><strong>偏移寻址</strong>：相对寻址、变址寻址、基址寻址（以某寄存器的内容与指令中的形式地址字段之和作为有效地址）</p></li><li><p>堆栈寻址</p><ol><li><p>存储器堆栈</p><p><strong>在内存空间中开辟堆栈区</strong></p><p>计算机普遍采用，设置堆栈指针寄存器SP指向栈顶单元，</p></li><li><p>寄存器堆栈</p><p><strong>将寄存器作为堆栈</strong></p><ul><li>寄存器堆栈栈顶规定，存储器堆栈栈顶随着栈操作而移动</li><li>进行堆栈操作，寄存器堆栈数据移动，存储器堆栈数据不移动（堆栈是固定的，数据是活的）</li><li>寄存器堆栈速度块，容量有限</li><li>寄存器堆栈必须采用专用堆栈指令进行控制</li></ul></li></ol></li><li><p>其他寻址</p><ol><li>变址+间接寻址</li><li>间接+变址寻址</li><li>相对+间接寻址</li></ol></li></ol><h3 id="指令类型">指令类型</h3><ol><li>算数逻辑运算指令</li><li>移位操作指令</li><li>数据传送指令</li><li>堆栈操作指令</li><li>字符串处理指令</li><li>程序控制指令<ol><li>转移指令 （有无条件）</li><li>循环控制指令</li><li>子程序调用与返回指令</li></ol></li><li>输入输出指令</li><li>其他</li></ol><h3 id="指令格式设计">指令格式设计</h3><h3 id="CISC-RISC">CISC RISC</h3><p>CISC：复杂指令集计算机<br>RISC：精简指令集计算机（80 -20 ）</p><p>目的和特点 看书 P.168</p><p><strong>不同操作系统中的指令格式</strong>，书中有</p><h2 id="中央处理器">中央处理器</h2><p>CPU上电复位后周而复始地取指令、执行指令工作。<br>具备功能：</p><ol><li>程序控制</li><li>操作控制。产生指令执行过程中需要的操作控制信号，以控制执行部件按指令规定的操作正常运行（执行加法指令运算，CPU必须生成运算器的运算选择控制信号）</li><li>时序控制。严格控制每个操作控制信号的开始时间和持续时间</li><li>数据加工。对数据进行算数、逻辑运算</li><li>中断处理。响应内部异常和外部中断请求(运算异常、缺页、外部设备中断)</li></ol><h3 id="组成-v2">组成</h3><p><strong>主要寄存器</strong></p><ol><li><p>程序计数器 PC：</p><p>保存<strong>将要执行的指令的字节地址</strong>，Intelx86叫指令指针寄存器IP.</p><p><strong>PC位宽与主存地址总线位宽相同</strong></p><p>CPU取指令，利用PC的内容作为地址访问主存，并将主存取出的指令字送入指令寄存器中，病修改PC的值以形成下一条指令的地址。</p></li><li><p>(存储器)地址寄存器 AR：</p><p>保存CPU访问主存的单元地址，无论CPU是取操作还是存数据，都要将访问地址送入AR中。<br><strong>位宽和主存地址总线位宽相同</strong>，AR并非必须，可将访存地址加载到地址总线上实现</p></li><li><p>(存储器)数据寄存器 DR：</p><p>存放从主存中读出的数据或者准备写入主存的数据（cache？）</p><p><strong>数据位宽与机器字长相同</strong>，并非必须</p></li><li><p>指令寄存器 IR：</p><p><strong>保存当前正在执行的指令</strong>（而非地址）</p><p>位宽和指令字相同，指令字由指令译码器ID翻译成若干个指令译码信号（每个信号表示一条不同指令，同一时刻只有一个信号有效）<br>指令字中的地址码部分由地址生成逻辑对寻址方式进行译码并生成目标地址或数据，根据寻址方式的不同将目标地址送入程序计数器PC、AR和运算部件中 （？？？）</p><p>并非必须</p></li><li><p>通用寄存器组 GR</p><p>运算器内部的若干寄存器 — 寄存器堆。</p></li><li><p>程序状态字寄出去你 PSW/PSR</p><p>保存由算数运算指令、逻辑运算指令、测试指令等建立的各种条件标志。(进位标志、溢出标志、结果为负数、零标志)。还可保存中断和系统工作的状态信息，方便CPU及时了解计算机运行状态</p></li></ol><p><strong>操作控制器</strong></p><p>接受指令译码器ID送来的指令译码信息，与时序信号、条件以及状态信息进行组合，形成各种具有严格时间先后顺序的操作控制信号（微操作控制信号序列  — 控制流），连接到计算机各功能部件的控制端。</p><p>按照时间先后打开或关闭某些特定的线路</p><p><strong>时序产生器</strong></p><p>对完成指令而执行的微操作控制信号进行时间调制，严格规定各信号的产生时间和持续时间</p><p>根据时序调制方法不同，操作控制器分为：</p><ul><li>硬布线控制器。采用时序逻辑实现，按照同步时序电路设计方法设计，硬时序</li><li>微程序控制器。采用程序存储逻辑实现，软时序</li></ul><h3 id="指令周期">指令周期</h3><p>指令周期：将一条指令从取出到执行完成所需要的时间</p><p>阶段：</p><ol><li><p>取指周期</p><p>CPU以PC的内容位地址从主存中取出指令，并计算后续指令的地址<br>（对于变长指令，需要经过指令译码得到实际字节长度后才能计算并修改PC的值）</p></li><li><p>译码、取操作数周期</p><p>对指令寄存器的指令字进行指令译码，识别指令类型。（部分实现将译码阶段划分到取指周期中）</p><p>根据指令地址码生成的操作数有效地址（由寻址方式决定），访问相应的寄存器和主存单元。</p><p>对于间接寻址，还需要加入访存周期（间址地址）才能得到操作数的地址</p></li><li><p>执行周期</p><p>控制器向ALU及数据通路中的其他相关部件发送操作控制指令，对已经取出的操作数进行加工处理，并将处理的状态信息记录到PSW中</p></li><li><p>写回周期</p><p>将运算结果写回到目的寄存器或存储器中，可能需要多个时钟周期</p></li></ol><p>还可能有中断周期、总线周期、IO周期等</p><p>便于同步，将<strong>指令周期划分成若干个机器周期</strong>（CPU周期）<br><strong>机器周期</strong>：从主存中取出一个存储字所需要的最短时间<br><strong>时钟周期</strong>：也称为振荡周期，定义为时钟脉冲的倒数，<strong>是计算机中最基本的、最小的时间单位</strong>。</p><p>每个机器周期又包含若干个时钟周期</p><p>指令周期的机器周期数和每个机器周期包含的时钟周期数不一定固定</p><p><strong>寄存器传送语言 RTL</strong></p><p>每条指令的执行过程都可分解为一组操作序列，进而分解为一组微操作序列。<br><strong>操作</strong>：功能部件级的动作<br><strong>微操作</strong>：指令序列中最基本、不可再分的动作</p><h1>一些问题</h1><h3 id="CPU多少位指什么？地址总线、数据总线能带来哪些影响"><strong>CPU多少位指什么？地址总线、数据总线能带来哪些影响</strong></h3><p>多少位CPU代表的是一次能够从处理多少位的数据，地址总线 ！= 位数</p><ul><li>地址总线：CPU的寻址能力，决定了可直接寻址的内存空间大小</li><li>控制总线：传送控制信号和时序信号（读写信号、片选信号、中断响应信号）</li><li>数据总线：数据传送能力。CPU-&gt;内存/IO 内存/IO -&gt;CPU均可，双向三态形</li></ul><h3 id="64位和32位CPU的实质区别？"><strong>64位和32位CPU的实质区别？</strong></h3><p>64 位 CPU 是指 CPU 内部的<strong>通用寄存器</strong>的宽度为 64 比特，支持整数的 64 比特宽度的算术与逻辑运算</p><ul><li>数据处理能力增强：64 位 CPU 通用寄存器的位宽增加一倍，这也就意味着 64 位 CPU 可以一次性处理 64bit 的整形数据；</li><li>内存寻址能力增强：如果是 32 位 CPU 的话，它的地址总线最多不会超过 32，那么它所能达到的寻址范围也就不会超过 2 的 32 次方字节（存储单元以字节为单位），也就是 4GB，而如果是 64 位处理器的话，它所能达到的寻址范围<strong>理论上</strong>就会是 2 的 64 次方字节（上亿 GB）。</li></ul><div class="note note-success">            <p>一般处理器多少位是指通用寄存器的长度，当然数据线需要与之相同；地址线则不需要与之相等，好比 intel 64 位处理器则是 40 位地址总线，最大支持 1TB 的内存寻址。</p>          </div><p>注意了，64位操作系统只能运行在64位CPU上</p><p><strong>64位CPU装了32位操作系统后寻址能力为什么是4GB</strong></p><p>32位操作系统没有对应的64位的寻址指令，不能提供4GB以上的逻辑地址</p><h3 id="GPU和CPU的区别"><strong>GPU和CPU的区别</strong></h3><p>CPU需要很强的<strong>通用性</strong>来处理各种不同的数据类型，同时又要逻辑判断又会引入大量的分支跳转和中断的处理。这些都使得CPU的内部结构异常复杂。</p><p>而GPU面对的则是<strong>类型高度统一的</strong>、<strong>相互无依赖</strong>的大规模数据和不需要被打断的<strong>纯净的计算环境</strong>。</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026212402274.png" alt="image-20211026212402274"></p><p>GPU采用了数量众多的计算单元和超长的流水线，但只有非常简单的控制逻辑并省去了Cache。<br>CPU不仅被Cache占据了大量空间，而且还有有复杂的控制逻辑和诸多优化电路，相比之下计算能力只是CPU很小的一部分</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026212600405.png" alt="image-20211026212600405"></p><p>**Cache, local memory： CPU &gt; GPU **<br><strong>Threads(线程数): GPU &gt; CPU</strong><br>Registers: GPU &gt; CPU  多寄存器可以支持非常多的Thread,thread需要用到register,thread数目大，register也必须得跟着很大才行。<br>SIMD Unit(单指令多数据流,以同步方式，在同一时间内执行同一条指令): GPU &gt; CPU。</p><ul><li>CPU时延低：有强大的ALU（算术运算单元）,它可以在很少的时钟周期内完成算术计算。时钟周期的频率非常高。复杂的逻辑控制单元可以确保当程序含有多个分支的时候，它通过提供分支预测的能力来降低延时。</li><li>GPU基于大的吞吐量设计：GPU的特点是有<strong>很多的ALU</strong>和很少的cache. 缓存的目的不是保存后面需要访问的数据的，这点和CPU不同，而是为thread提高服务的。如果有很多线程需要访问同一个相同的数据，缓存会合并这些访问，然后再去访问dram（因为需要访问的数据保存在dram中而不是cache里面），获取数据后cache会转发这个数据给对应的线程，这个时候是数据转发的角色。但是由于需要访问dram，自然会带来延时的问题。</li></ul><p>CPU擅长逻辑控制，串行的运算。和通用类型数据运算不同，GPU擅长的是大规模并发计算</p><p>GPU大部分工作计算量大，没啥技术含量，重复很多次。并行计算（流水线，无法单独工作，必须由cpu控制）</p><p>参考 <a href="https://www.zhihu.com/question/19903344">知乎</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
      <tag>计算机原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些点子</title>
    <link href="/2021/10/16/%E4%B8%80%E4%BA%9B%E7%82%B9%E5%AD%90/"/>
    <url>/2021/10/16/%E4%B8%80%E4%BA%9B%E7%82%B9%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h1>一些点子</h1><h2 id="电影台词后台">电影台词后台</h2><div class="note note-info">            <p>123ss3dsdaaaaa</p>          </div><p class="note note-primary">标签</p><p>为hexo fluid的首页text整个后台，能够随机提供电影台词。提上日程！<br>类似参考： 一言<br>123123<br>123123<br>123123123</p>]]></content>
    
    
    
    <tags>
      
      <tag>想法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>opencv学习</title>
    <link href="/2021/10/15/opencv%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/10/15/opencv%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>Opencv学习</h1><span id="more"></span><h2 id="安装环境">安装环境</h2><ol><li><p>pip</p></li><li><p>anaconda</p></li><li><p>numpy</p></li><li><p>pycharm或者vscode</p><p>这里我使用vscode和anaconda自带的IDE spyder都有一定问题，原因要么是没有选择好适当的Interpreter要么是没有在当前终端下pip install opencv-python。</p><p>使用</p><p>使用pycharm后，直接在terminal中install opencv-python，然后再去settings中更改intepreter的编译器，换成opencv-python就解决问题</p></li></ol><h2 id="指令-v2">指令</h2><h3 id="画图">画图</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">canvas <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span> <span class="token comment"># 是什么意思？</span></code></pre></div><p>dtype为什么是uint8？</p><p>np.random.randint size指定为3，为什么不能生成三个数组</p><p><strong>小例子：点击随机产生圆</strong></p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 当鼠标按下时变为True</span>drawing<span class="token operator">=</span><span class="token boolean">False</span><span class="token comment"># 如果mode 为true 绘制矩形。按下'm' 变成绘制曲线。</span>mode<span class="token operator">=</span><span class="token boolean">True</span>ix<span class="token punctuation">,</span>iy<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token comment"># 创建回调函数</span><span class="token keyword">def</span> <span class="token function">draw_circle</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>flags<span class="token punctuation">,</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> ix<span class="token punctuation">,</span>iy<span class="token punctuation">,</span>drawing<span class="token punctuation">,</span>mode    <span class="token comment"># 当按下左键是返回起始位置坐标</span>    <span class="token keyword">if</span> event<span class="token operator">==</span>cv2<span class="token punctuation">.</span>EVENT_LBUTTONDOWN<span class="token punctuation">:</span>        drawing<span class="token operator">=</span><span class="token boolean">True</span>        ix<span class="token punctuation">,</span>iy<span class="token operator">=</span>x<span class="token punctuation">,</span>y    <span class="token comment"># 当鼠标左键按下并移动是绘制图形。event 可以查看移动，flag 查看是否按下</span>    <span class="token keyword">elif</span> event<span class="token operator">==</span>cv2<span class="token punctuation">.</span>EVENT_MOUSEMOVE <span class="token keyword">and</span> flags<span class="token operator">==</span>cv2<span class="token punctuation">.</span>EVENT_FLAG_LBUTTON<span class="token punctuation">:</span>        <span class="token keyword">if</span> drawing<span class="token operator">==</span><span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> mode<span class="token operator">==</span><span class="token boolean">True</span><span class="token punctuation">:</span>                cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span>ix<span class="token punctuation">,</span>iy<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                r<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">-</span>ix<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">-</span>iy<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 当鼠标松开停止绘画。</span>    <span class="token keyword">elif</span> event<span class="token operator">==</span>cv2<span class="token punctuation">.</span>EVENT_LBUTTONUP<span class="token punctuation">:</span>        <span class="token keyword">if</span> mode<span class="token operator">==</span><span class="token boolean">True</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span>ix<span class="token punctuation">,</span>iy<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>img<span class="token operator">=</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>setMouseCallback<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span>draw_circle<span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>    k<span class="token operator">=</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFF</span>    <span class="token keyword">if</span> k<span class="token operator">==</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mode<span class="token operator">=</span><span class="token keyword">not</span> mode    <span class="token keyword">elif</span> k<span class="token operator">==</span><span class="token number">27</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><h3 id="图像处理">图像处理</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 图像alpha叠加</span>dst<span class="token operator">=</span>cv2<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>img1<span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span>img2<span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># resize图片</span>img1<span class="token operator">=</span>cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img1<span class="token punctuation">,</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 加亮、减暗图片</span>cv2<span class="token punctuation">.</span>add<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span>cv2<span class="token punctuation">,</span>substract<span class="token punctuation">(</span>img<span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">-</span><span class="token punctuation">)</span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Visual</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习</title>
    <link href="/2021/10/15/Python%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/10/15/Python%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>Python学习</h1><blockquote><p>内心很单纯：80%想学爬虫 + 10%想学数据处理 + 10%后端搭建</p></blockquote><h2 id="入门">入门</h2><h3 id="语法基础">语法基础</h3><p><strong>标识符</strong></p><p>以下划线开头的标识符是有特殊意义的。以单下划线开头 <strong>_foo</strong> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 <strong>from xxx import *</strong> 而导入。</p><span id="more"></span><p>以双下划线开头的 <strong>__foo</strong> 代表类的私有成员，以双下划线开头和结尾的 <strong>__ foo __</strong> 代表 Python 里特殊方法专用的标识，如 <strong>__ init __()</strong> 代表类的构造函数。</p><p><strong>最大区别: {}</strong></p><p>Python代码块不用{}来控制逻辑判断，使用缩进行来写模块</p><p>python对格式的要求十分严格,空白也是程序代码的一部分</p><p>缩进行的空格可变，但所有代码块的语句必须包含相同的缩进空白数量（没有严格缩进时，执行时会报错）</p><p>如果要使用多行来表示一行的话，需要以 \ 来表示</p><p><strong>引号</strong></p><p>Python也可以用’ ’  , &quot; &quot; ,“”&quot; “”&quot;来表示字符串。期期中三引号可以由多行组成</p><p><strong>注释</strong></p><p>python用# 来表示单行注释。</p><p>用’‘’ xxx ‘’’  或者 “”&quot; xxx “”&quot;来表示多行注释</p><p><strong>输出</strong></p><p>print的输出默认是换行的，如果需要不换行需要在变量的末尾加 ,</p><p><strong>赋值</strong></p><p>python可以为多个变量同时赋值</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span>b<span class="token operator">=</span>c<span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 这种赋值方式就离谱</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'john'</span><span class="token comment"># 比较有趣的现象 ，这种情况下，会打印出a的结果</span><span class="token comment"># 可能跟python对象创建有关系</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token keyword">del</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre></div><h3 id="数据类型">数据类型</h3><p>Python中同一个变量可以反复赋值，并且可以是<strong>不同类型的</strong></p><ul><li><p>numbers 数字</p><ul><li><p>不可变，如果改变一个数字，则会创建一个新的对象</p></li><li><p>指定一个值时，一个number对象就被创建</p></li><li><p>可通过del语句删除一些对象的引用</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">del</span> x<span class="token punctuation">,</span>b</code></pre></div></li><li><p>python支持四种类型的数字类型int long float <strong>complex(复数)</strong></p></li></ul></li><li><p>string</p><ul><li><p>字符串列表有两种取值顺序，左到右和右到左</p><ul><li>左到右  0开始</li><li>右到左  最左边是-1，最右边是 -str.length</li></ul></li><li><p>从字符串中获取一段子字符。s[startIndex:endIndex] 一样是左闭右开形式，不写endIndex相当于一直到末尾。还可以有一个参数代表步长[startIndex:endIndex:interval]。<strong>步长为1就是正常选取</strong></p></li><li><p>字符串重复 可以用* 表示，类似乘法; 字符串加法用 +</p></li><li><p>python<strong>不支持单字符类型</strong>！</p></li><li><p>使用unicode字符串  a = u’Hello\u0020World’</p></li><li><p><a href="https://www.runoob.com/python/python-strings.html">对字符串的操作函数</a></p></li><li><p>字符串格式化</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">"My name is %s  age is %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'zara'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span></code></pre></div><p>格式化符号</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211015195043962.png" alt="image-20211015195043962"></p></li></ul></li><li><p>list</p><ul><li>用[ ]标识 列表，列表中也可以用[]来进行切割</li><li>列表的元素可以多种多样</li><li>list = [] list.append ;  del list[2]来删除</li><li>截取： name[0:i]，左闭又开</li><li><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220419214955397.png" alt="image-20220419214955397"></li></ul></li><li><p>tuple（元组）</p><ul><li><p>类似List，元组内用**( )**标识（也可以直接用逗号创建，不用()）。<strong>不能二次赋值</strong>，相当于只读列表-&gt;代码更安全</p></li><li><p>一样可以用[]去进行取值操作</p></li><li><p>元组的值不能修改，但可以对元组进行组合 即 a = b+c（产生新的元组），可以是不同类型的元组组合；还可以tuple中包含list，因为只是一个指针，所以list就可以修改了</p></li><li><p>一些比较骚的操作符<img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220419215449198.png" alt="image-20220419215449198"></p></li><li><p>元组中的元素不能被del掉，否则会引用类型找不到的错误</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token string">'a'</span>a <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">del</span> a<span class="token comment"># 报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre></div></li><li><p>如何理解元组？</p></li><li><p>元组中只包含一个元素时，需要在元素后面添加逗号，否则会认为就是一个元素（这是因为括号 () 既可以表示元组（tuple），又可以表示数学公式中的小括号，这就产生了歧义）</p></li><li><p>opencv中np.random.randint怎么不能使用这个？</p></li></ul></li><li><p>dictionary 字典</p><ul><li><p>无序，类似Map</p></li><li><p>类型可以不同；同一个键不能被赋值两次（只有后面的值会被记住）</p></li><li><p>Key值必须不可变，可以是数字、字符串、元组，但就是不能是列表</p></li><li><table><thead><tr><th>方法和函数</th><th>描述</th></tr></thead><tbody><tr><td>len(dict)</td><td>计算字典元素个数</td></tr><tr><td>str(dict)</td><td>输出字典可打印的字符串表示</td></tr><tr><td>type(variable)</td><td>返回输入的变量类型，如果变量是字典就返回字典类型</td></tr><tr><td>dict.clear()</td><td>删除字典内所有元素</td></tr><tr><td>dict.copy()</td><td>返回一个字典的浅复制</td></tr><tr><td>dict.values()</td><td>以列表返回字典中的所有值</td></tr><tr><td>popitem()</td><td>随机返回并删除字典中的一对键和值</td></tr><tr><td>dict.items()</td><td>以列表返回可遍历的(键, 值) 元组数组</td></tr></tbody></table></li><li></li></ul>  <div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token string">'a'</span>a <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token builtin">map</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span><span class="token string">'name'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 不会报错</span>x <span class="token operator">=</span> <span class="token string">'b'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 报错，x必须不可变</span></code></pre></div>  <div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">tinydict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'runoob'</span> <span class="token punctuation">,</span> <span class="token string">'code'</span> <span class="token punctuation">:</span> <span class="token number">3123</span><span class="token punctuation">,</span> <span class="token string">'dept'</span> <span class="token punctuation">:</span> <span class="token string">'sisds'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>tinydict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tinydict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div></li><li><p>set:</p><ul><li>创建set，以数组的形式，set([1,2,3])</li><li>两个set可以做数学意义上的交、并、差集 &amp; |  -</li></ul></li></ul><p><strong>时间和日期</strong></p><p>time模块</p><ul><li>time.time() : 当前时间戳。1970到2038</li><li>时间元组 。详细的数据结构。time.localtime(time.time())<img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211015203004563.png" alt="image-20211015203004563"></li><li>格式化时间  time.asctime(time.localtime(time.time())).;<br>或者time.strftime(format[, t ])  例如print time.strftime(“%Y-%m-%d %H:%M:%S”, time.localtime())<ul><li>%y 两位数的年份表示（00-99）</li><li>%Y 四位数的年份表示（000-9999）</li><li>%m 月份（01-12）</li><li>%d 月内中的一天（0-31）</li><li>%H 24小时制小时数（0-23）</li><li>%I 12小时制小时数（01-12）</li><li>%M 分钟数（00-59）</li><li>%S 秒（00-59）</li><li>%a 本地简化星期名称</li><li>%A 本地完整星期名称</li><li>%b 本地简化的月份名称</li><li>%B 本地完整的月份名称</li><li>%c 本地相应的日期表示和时间表示</li><li>%j 年内的一天（001-366）</li><li>%p 本地A.M.或P.M.的等价符</li><li>%U 一年中的星期数（00-53）星期天为星期的开始</li><li>%w 星期（0-6），星期天为星期的开始</li><li>%W 一年中的星期数（00-53）星期一为星期的开始</li><li>%x 本地相应的日期表示</li><li>%X 本地相应的时间表示</li><li>%Z 当前时区的名称</li><li>%% %号本身</li></ul></li><li>获取某月日历  calendar模块  calendar.month(year,month)</li></ul><p><strong>数据类型转换</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220419214323823.png" alt="image-20220419214323823"></p><h3 id="控制函数">控制函数</h3><ul><li><p>if:  elif:  else:</p><ul><li>可以有括号。必须有引号  <strong>:</strong></li><li>0 和 None 和 空（数组 元祖 字符串（“”））为 false  非0 和NotNone为True</li><li><strong>if的条件判断为and or 而不是&amp;&amp; ||</strong></li></ul></li><li><p>循环语句</p><ul><li><p>for:</p><ul><li>py中没有for(int i = 0; i &lt; x; i++)的语法！可以搭配for i in range(number)来使用，range也可以实现步长递增</li><li>当然continue 和 break语句都可以用</li><li><strong>pass语句</strong>: 不做任何事情，做占位语句（定位一个空函数时程序会报错，当没有想好内容就可以填这个）</li></ul></li><li><p>while:</p></li><li><p>for else / while else：else中的语句会在<strong>循环正常完成后执行</strong>，而不是通过break中断的</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token comment"># print nothing!</span></code></pre></div></li></ul></li></ul><h3 id="运算符-v2">运算符</h3><p>a**b :  返回x的y次幂</p><p>a//b ：取整数-返回商的整数部分.</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">9</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">9</span> <span class="token operator">//</span>  <span class="token number">2</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment"># 注意，是向下取整</span></code></pre></div><p><strong>逻辑运算符</strong></p><p>还可以用and or   not(not返回布尔值)</p><p><strong>成员运算符</strong></p><p>in     not in， 是否在一个序列中</p><p><strong>身份运算符</strong></p><p>is  is not：判断两个标识符是否引用自一个对象。<br>x is y , 如果引用的是同一对象则返回true</p><hr><p><strong>is 和 == 的区别</strong></p><ul><li>is 判断两个变量引用对象</li><li>== 用于判断引用变量的值是否相等</li></ul><p><strong>优先级</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211015192639987.png" alt="image-20211015192639987"></p><h3 id="函数-v2">函数</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Defint Sum"</span> <span class="token comment"># 第一行字符串用于对方法进行解释</span>    <span class="token keyword">return</span> a <span class="token operator">+</span>b</code></pre></div><p>独特的传参方式(方法作为参数)</p><p><strong>为什么传参不能1920/4 ，只能480?</strong></p><p><strong>函数可以返回多个结果！这对我来说是不可接受的</strong>，此时返回的为元组！（因为元组可以直接由逗号创建）</p><h4 id="参数">参数</h4><p><strong>过滤函数传参类型</strong></p><p>isinstance(param_name, (tuple)(param_type))，tuple代表的是一系列符号要求的数据类型的元组</p><p><strong>python中变量没有类型，python中一切都是对象</strong></p><p>a=[1,2,3]  a=“Runoob” a仅仅是一个对象的引用（指针），可以是List对象，也可以是String对象</p><p><strong>关键词参数和默认值参数</strong></p><p>voidA(str, age = 15)    调用—&gt; voidA(str=‘asdc’)（age默认是15），但只能在末尾声明默认参数而不能在开头声明。<br>关键值参数就直接声明x=…就行了</p><ul><li><p>一个坑点：默认值的设置必须是不可变的类型，例如如下的代码就会残生错误的结果，让二次调用后的b的值在刚调用时就不一致</p></li><li><div class="code-wrapper"><pre><code class="language-python">def a(a, b=[]):    print(b)    return bb = a(1)b.append(&quot;123&quot;)print(a(1))# []  ['123']   ['123']<pre class="language-none"><code class="language-none">  * 如何只接受关键字参数？在想要接受的后面参数前加上*，例如functionA(a, * ,b,c)，则b,c都只能以关键字参数传参**不定长参数**def functionA(a,b,c , *vartuple) 加星号的变量名会存放所有未命名的变量参数，调用时可以这样functionA(a,b,c,d,e,f,g)也可以采用关键字参数的方法，此时为 **vartuple，可以这样调用functionA(a,b,c,hobby&#x3D;(d,e,f))#### 传值问题&#96;&#96;&#96;pythondef sum2(a):    a &#x3D; 100    return aa &#x3D; 10d &#x3D; sum2(a)print(a)# print 10  not 100</code></pre></div></code></pre></li></ul><p><strong>可更改(mutable)与不可更改(immutable)对象</strong></p><p>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p><ul><li>**不可变类型：**变量赋值 <strong>a=5</strong> 后再赋值 <strong>a=10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。</li><li>**可变类型：**变量赋值 <strong>la=[1,2,3,4]</strong> 后再赋值 <strong>la[2]=5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li></ul><p>python 函数的参数传递：</p><ul><li>**不可变类型：**类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 <strong>fun（a）内部修改 a 的值，只是修改另一个复制的对象</strong>，不会影响 a 本身。</li><li>**可变类型：**类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</li></ul><p>**在 Python 中，字符串，整形，浮点型，tuple 是不可更改的对象，而 list ， dict 等是可以更改的对象。**a =  10就是先生成整型对象10 ，然后 <strong>a 指向 这个整型对象</strong>；而list = [1,2,3,4], 则list指向的是list地址，而a[2] = 5并不是将a重新指向，而是直接改变list中的元素值</p><p><strong>匿名函数</strong></p><p>lamda p1,p2… :  express</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">sum &#x3D; lambda arg1, arg2,.. : arg1;</code></pre></div><h4 id="一些函数"><strong>一些函数</strong></h4><ul><li>如果在函数内部调用 locals()，返回的是所有能在该函数里访问的命名。</li><li>如果在函数内部调用 globals()，返回的是所有在该函数里能访问的全局名字。</li><li>dir函数</li><li>reload 重新加载某个模块</li></ul><h3 id="迭代器">迭代器</h3><p>只要是可迭代的对象，不管有没有下标，都可以迭代。如果是嵌套的可迭代，则<strong>还可以进行多元的迭代</strong>，根据元素个数判断是外层还是内层！</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">'abc'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">for</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment"># 同时迭代多个序列 zip()</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' $'</span><span class="token punctuation">)</span><span class="token comment"># zip函数还可以生成dict</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div><p>可用iter(x)创建迭代器，next(iter)表示下一个元素</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin">iter</span> <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">iter</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre></div><p><strong>List生成式</strong></p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 快速创建List</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 或使用表达式： [expr for i in arr if condition]</span><span class="token comment"># condition == True时才加入</span>list1<span class="token operator">=</span><span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 嵌套for循环，左(外循环) -> 右(内循环)</span>list1<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5)]</span></code></pre></div><h4 id="生成器"><strong>生成器</strong></h4><p>需求：如果创建一个10000万个元素的列表，但我只访问几个值，那元素值就被浪费了，怎样能节省空间？</p><p><strong>生成器：一边循环一边计算的机制</strong>。列表中的元素可以根据算法推出，在 循环的过程中不断推算后续的元素，节省大量空间。</p><p>Python中使用yield函数的都叫生成器generator，生成器是返回迭代器的函数</p><p>创建生成器：列表生成时的[]改为().生成器并不真正创建数字列表， 而是返回一个生成器，这个生成器在每次计算出一个条目后，把这个条目“产生” ( yield ) 出来。生成器表达式使用延时赋值，只有在检索时才赋值。生成器返回的迭代器只能使用一次，并没有把所有的值存在内存中，而是<strong>在运行时生成值</strong>。你通过遍历来使用它们，要么用一个“for”循环，要么将它们传递给任意可以进行迭代的函数和结构</p><p>生成器的最好的应用应该是：你不想同一时间将所有计算出来的大量结果集分配到内存当中，特别是结果集里还包含循环。因为这样会耗很大的资源</p><p><strong>函数中使用</strong>：Yield().执行过程中，遇到yield就中断（并返回其中值？），下次调用时，从中断的yield函数中继续执行。注意对错误进行捕获</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">odd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">'step 1'</span> <span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">'step 2'</span> <span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">'step 3'</span> <span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span>o <span class="token operator">=</span> odd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token builtin">next</span><span class="token punctuation">(</span> o <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token builtin">next</span><span class="token punctuation">(</span> o <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token builtin">next</span><span class="token punctuation">(</span> o <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment"># step 1 1 step 2 3 step 3 5</span><span class="token comment"># 但如果继续print( next( o ) )就会报错，所以通常在 generator 函数中都要对错误进行捕获</span></code></pre></div><h3 id="面向对象">面向对象</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    var1 <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>Obj<span class="token punctuation">.</span>funA<span class="token punctuation">(</span><span class="token punctuation">)</span> Obj<span class="token punctuation">.</span>var1</code></pre></div><p><strong>均可直接通过类名直接调用方法和属性</strong>（似乎不能在类中用lambda定义函数？）</p><p><strong>类方法中如何使用类的属性</strong></p><p>不能直接在方法中调用类的属性，比如要添加注释@classmethod 并且传入cls变量（名字可以自己取），才能通过cls去使用属性。<br>并且可以通过cls动态地<strong>在内部</strong>为类添加属性或修改属性，通过ClassA.varX = …可以<strong>在外部</strong>动态添加属性</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    var1 <span class="token operator">=</span> <span class="token number">1</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">funA</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>var1<span class="token punctuation">)</span>        cls<span class="token punctuation">.</span>var2 <span class="token operator">=</span> <span class="token string">'123'</span>Obj<span class="token punctuation">.</span>funA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>var2<span class="token punctuation">)</span>Obj<span class="token punctuation">.</span>var3 <span class="token operator">=</span> <span class="token number">123</span><span class="token comment"># print 1 123</span></code></pre></div><h4 id="类的实例化"><strong>类的实例化</strong></h4><p>a = ClassA()，如果只使用实例化的对象，则不用加@classmethod注解，但方法中使用属性需要通过传入self来使用</p><p>类的方法的重写</p><p>如下：类的方法、属性改变会影响对象的方法、属性，但对象的属性改变，不会影响类的属性，且<strong>对象的方法不能重写</strong>，这里比较有趣的一点是，我想在重写类的方法中使用其属性（通过外部或者内部），都不行，因为没有注解的原故，不能在没有注解的情况下直接在方法中访问类变量</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    var1 <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">funA</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>var1<span class="token punctuation">)</span>a <span class="token operator">=</span> Obj<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>funA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">funAB</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">"123"</span><span class="token punctuation">)</span>    <span class="token comment"># print(self.var1 + "123")</span>    <span class="token comment"># print(Obj.var1 + "123")</span>    <span class="token comment"># print(a.var1 + "123")</span>Obj<span class="token punctuation">.</span>funA <span class="token operator">=</span> funABa<span class="token punctuation">.</span>funA<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><h4 id="初始化与销毁">初始化与销毁</h4><p><code>__init__(self)</code>就是初始化的函数</p><p><code>__def__(self)</code>表示类在销毁时所做的操作</p><h4 id="访问控制">访问控制</h4><p>以下划线开头的标识符是有特殊意义的。以单下划线开头 <strong>_foo</strong> 的<strong>代表</strong>不能直接访问的类属性（这只是一种规定，实际上是可访问到的），需通过类提供的接口进行访问，不能用 <strong>from xxx import *</strong> 而导入。</p><p>以双下划线开头的 <strong>__foo</strong> 代表类的私有成员，以双下划线开头和结尾的 <strong>__ foo __</strong> 代表 Python 里特殊方法专用的标识，如 <strong>__ init __()</strong> 代表类的构造函数。</p><p><strong>dir(class)</strong>：获取相应对象的所有属性和方法名的列表：</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>Father<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Father<span class="token punctuation">.</span>_Father__var1<span class="token punctuation">)</span><span class="token comment"># ['_Father__var1', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']</span></code></pre></div><p>起始私有属性理论上也是可以访问的，因为python构造时，只是将其转化了名字为：<code>_Class__varX</code>，一样可以直接通过调用这个属性来访问。方法的私有类别与其相同。强调一点：<strong>没有实质上的私有方法。一切都是靠程序员自觉遵守 Python 的编程规范</strong></p><p>同时一个类创建时，会有附带的方法，如上图所示</p><h4 id="继承">继承</h4><p>声明类时在括号中写，可以继承多个类，父类中方法相同时且在子类中未指定时，从左至右搜索</p><p>一点比较有意思的地方：如果重写了子类的初始化方法如下，那么在初始化子类时，<strong>不会调用父类的初始化方法</strong>，这与在Java中是不同的，Java中会层次地调用初始化方法（可能和类加载机制有关系）。需要显示的通过super来调用父类的初始化方法。同样，通过访问类的参数也不会触发类的init方法</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Father init"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Son</span><span class="token punctuation">(</span>Father<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Son<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Son init"</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>son <span class="token operator">=</span> Son<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># super(type, obj) -> bound super object; requires isinstance(obj, type)</span></code></pre></div><p>isinstance(obj, class)判断对象是否属于某个类（包括父类）</p><h3 id="模块">模块</h3><p>一个py文件</p><ul><li>同目录下直接import xxx 就行，使用时通过xxx.function去调用</li><li>不同目录 import <a href="http://dir1.dir2.xxx">dir1.dir2.xxx</a> 调用方式也可以通过这种方式调用<ul><li>可以用as来alias</li></ul></li></ul><p>from xxx import method 来导入某模块的指定function</p><p>一个Py模块的包含关系：变量、函数、类（变量、函数）</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 不同的引用方式有不同的写法，导入指定的包</span><span class="token keyword">from</span> utils <span class="token keyword">import</span> UtilssUtilss<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> utilsutils<span class="token punctuation">.</span>Utilss<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> sys <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">print</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span></code></pre></div><p><strong>主模块、非主模块</strong>：</p><p>如果一个模块被直接使用，而没有被别人调用，我们称这个模块为主模块，如果一个模块被别人调用，则这个模块为非主模块。-&gt; <code>__name__</code>判断当前模块是否是主模块，这点很重要（感觉说明代码不是拼接在一起的？或者是主模块代码是有界限的）</p><p><strong>包</strong></p><p>来避免模块名相同的情况，每个层次的包必须有个<code>__init__</code>模块来辨识他是一个包，<strong>在模块中导入包时会执行其下的<code>__init__</code>文件的代码</strong></p><p>特殊变量<code>__xxx__</code>来标注特殊信息</p><p><strong>路径</strong></p><p>当你导入一个模块，Python 解析器对模块位置的搜索顺序是：</p><ul><li>1、当前目录</li><li>2、如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。</li><li>3、如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/</li></ul><h3 id="MagicMethod">MagicMethod</h3><p><code>__xx__</code>的方法都称为magic method</p><ul><li><code>__new__</code>：创建类并返回这个类的实例</li><li><code>__init__</code>：将传入的参数来初始化该实例，创建实例时new一定会被调用但init却不一定</li><li><code>__getattr__</code>： 试图访问一个不存在属性时，可以对其重定向或警告</li><li><code>__setattr__</code>：类似</li><li><code>__delattr_</code></li><li><code>__getattribute__</code>：与getattr不同点在于，不管方法是否存在，只要调用就会触发这个函数，。以上几个函数都要避免<strong>无限递归的情况</strong></li><li><code>__get__</code></li><li><code>__set__</code></li></ul><p>Python还能通过重写比较运算符的魔术方法来实现从操作符号上的方法重写</p><h3 id="IO-v2">IO</h3><ul><li>raw_input</li><li>input 。可以是一个表达式！！</li><li>print()可以通过seq 和 end来添加输出的前、后附加字符串(end默认为换行)</li></ul><h4 id="文件">文件</h4><ul><li><p>close : File 对象的 close（）方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。</p><p>当一个文件对象的引用被重新指定给另一个文件时，Python 会关闭之前的文件。用 close（）方法关闭文件是一个很好的习惯。</p></li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211017145546394.png" alt="image-20211017145546394"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211017160648689.png" alt="image-20211017160648689"></p><p>当然，如果linux的文件权限与之不兼容，则open时会报错</p><div class="note note-primary">            <p><strong>open 的 buffering 怎么失效？没有flush也能够写进去？</strong></p><p>有可能是在write的过程中程序中断</p>          </div><div class="note note-light">            <p><strong>del file 和 file.close有什么区别？</strong></p>          </div><div class="note note-success">            <p><strong>如果修改一个import的文件，会发生什么？</strong></p>          </div><h3 id="异常-v3">异常</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>xxx<span class="token keyword">except</span> <span class="token punctuation">:</span> <span class="token comment"># 任何异常都可</span><span class="token keyword">except</span> name<span class="token punctuation">:</span><span class="token keyword">except</span> name<span class="token punctuation">,</span>data<span class="token punctuation">:</span><span class="token keyword">except</span> name<span class="token punctuation">,</span>name2<span class="token punctuation">,</span>name3<span class="token punctuation">:</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    xxx<span class="token keyword">finally</span><span class="token punctuation">:</span>    xxx</code></pre></div><p>手动触发异常<br>raise exception,args,traceback</p><p>自定义异常</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Networkerror</span><span class="token punctuation">(</span>RuntimeError<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>args <span class="token operator">=</span> arg</code></pre></div><h2 id="进阶-v2">进阶</h2><h3 id="线程-v2">线程</h3><p>thread：用于低级模块、底层操作。threading：应用级别开发</p><p>调用方式，新创建类并继承threading.Thread这个类，重写fun方法，通过threadx.start调用，也可以直接在创建时target=来指定run函数</p><p><strong>join</strong>让当前线程等待调用线程执行完毕后，再执行当前线程的下一段代码</p><h4 id="锁-v2">锁</h4><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>lock<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取锁</span>lock<span class="token punctuation">.</span>aquire<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 线程中获取锁</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 线程中释放锁</span><span class="token comment"># 获取重入锁 lock = threading.RLock()</span></code></pre></div><h4 id="Condition-v2">Condition</h4><h4 id="线程通信-v2">线程通信</h4><h4 id="线程池">线程池</h4><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>fn<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'线程</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'done in main'</span><span class="token punctuation">)</span></code></pre></div><p>with后的语句会等到with内部，即线程池所有线程执行完毕再执行</p><h4 id="脏数据">脏数据</h4><p>似乎不存在脏数据的问题？</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">global</span> ii <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> i    <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        funcA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span>MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> threads<span class="token punctuation">:</span>        a<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment"># print(1000000)</span></code></pre></div><h4 id="协程">协程</h4><p>原因：程序阻塞(eg: IO sleep() )浪费了大量时间。如何能让IO操作时能把CPU拿来去做其他的一些任务？</p><p>微观上：一个任务一个任务的切换，切换条件（IO操作）</p><p><strong>关键词 async</strong></p><p>程序中出现同步操作，则异步操作便终止<br>time.sleep --&gt; asynio.sleep --&gt;<strong>await关键词表示 挂起</strong></p><p><strong>注意点：d = async_func()并不是去执行一个异步函数，而是得到这个函数的协程对象。然后通过run或者wait跑起来</strong></p><p><strong>await要跟在异步函数内，而不能在主函数中，且一般是挂起协程对象</strong></p><div class="note note-primary">            <p>Python3.11后将remove掉通过asyncio.wait()去执行一组协程对象的行为，需要将每个协程对象包装为Task对象：asyncio.create_task(func())</p>          </div><h2 id="一些问题-v3">一些问题</h2><p><strong>为什么会有virtual env?</strong></p><p>yesp</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习</title>
    <link href="/2021/10/14/Docker%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/10/14/Docker%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>Docker学习日记</h1><h2 id="基础">基础</h2><span id="more"></span><!--toc--><h3 id="命令">命令</h3><ul><li>docker attach [id]  进入到正在运行的容器.本机的输入直接输到容器中，容器的输出会直接显示在本机的屏幕上</li><li>docker run<ul><li>-i 以交互模式运行</li><li>-d 后台运行容器</li><li>-t 为容器重新分配一个伪输入终端</li><li>-p    主机端口:容器端口          -P 随机制定端口</li><li>–name</li><li>-v</li><li>–volumes-from</li></ul></li><li>docker rm id 删除容器<ul><li>-f force delete</li></ul></li><li>docker images</li><li>docker exec 在运行的容器中执行命令</li><li>docker volumn 查看卷信息<ul><li>ls   查看所有卷情况</li><li>create</li><li>inspect 查看特定volume的信息</li><li>rm</li></ul></li><li>docker build 通过dockerfile方式创建容器<ul><li>-f dockerfile文件路径（如果是Dockerfile的话就不用加这个了）</li><li>-t 镜像名</li></ul></li><li>docker push 发布镜像</li><li>docker history</li><li>docker save</li><li>docker load</li><li>docker inspect<ul><li>id</li></ul></li><li>docker network<ul><li>ls</li><li>rm</li><li>inspect</li><li>connect [network] [container(can be name)] 把一个容器连接到一个网络</li><li>create</li></ul></li></ul><h3 id="comit镜像">comit镜像</h3><p>docker commit -m=“xxxx”</p><p>提交容器称为一个新的副本，我自己做的，我觉得好用想要保存下来</p><p>docker commit -a=“xxx” [id] [name]:[tag]</p><p><strong>Tomcat拷贝欢迎页面到webapps</strong></p><p>cp -r webapps.dist/* webapps</p><p>这里拷贝进去后不用重启都可以在页面访问</p><h2 id="卷">卷</h2><h3 id="容器数据卷">容器数据卷</h3><p>一种数据共享技术。</p><p>容器删除，数据如果在容器中，那数据 也会消失，则真实数据不应在相同容器中，两者应该有一种映射关系。</p><h4 id="挂载方式">挂载方式</h4><h5 id="命令方式挂载">命令方式挂载</h5><ol><li><p><strong>指定路径挂载</strong></p><p>docker run -v 主机目录:容器目录</p><p>docker inspect id查看容器情况</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">&quot;Mounts&quot;: [            &#123;                &quot;Type&quot;: &quot;bind&quot;,                # 主机内                &quot;Source&quot;: &quot;&#x2F;home&#x2F;tempFile&quot;,                # docker容器内地址                &quot;Destination&quot;: &quot;&#x2F;home&quot;,                &quot;Mode&quot;: &quot;&quot;,                &quot;RW&quot;: true,                &quot;Propagation&quot;: &quot;rprivate&quot;            &#125;        ],</code></pre></div><p>此时在容器内该目录下的操作，都相当于在主机内的该目录下进行的操作。删除容器，但主机内的文件不会消失</p><p><strong>同步Mysql</strong></p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell"># 创建容器docker run -d -p 3310:3306 -v &#x2F;home&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d -v &#x2F;home&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;Zyl2000215 --name pipi-mysql-01 mysql:8.0# 可以直接从远程访问</code></pre></div></li><li><p><strong>匿名挂载</strong></p><p>DRIVER    VOLUME NAME<br>local     d7e224fbb90a257812018ad044398007014d08293674b8fc9266fe22b1773c8b(匿名挂载的名称)</p><p>-v 时只写了容器内部的路径，没有写容器外部的路径（随便找个地方挂了）</p></li><li><p><strong>具名挂载</strong></p><p>-v [volumnj_name]:/xxx/xxx</p><p>DRIVER    VOLUME NAME<br>local     specific-name(匿名挂载的名称)</p><p>通过docker volume inspect xxxx查看</p><p>放在docker/volumes中</p></li></ol><p><strong>在容器路径后加:rw 和 :ro 改变读写的权限</strong></p><ul><li>ro：只能从外部（主机）改变，容器内部不得更改</li><li>rw：默认</li></ul><h5 id="DockerFile挂载">DockerFile挂载</h5><p><strong>DockerFile</strong></p><p>一段命令脚步</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell"># 示例脚本FROM centos# 生成数据卷目录，匿名挂载VOLUME [&quot;volume01&quot;,&quot;volumn02&quot;]CMD echo &quot;---end---&quot;CMD &#x2F;bin&#x2F;bash</code></pre></div><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">docker build -f dockerfile1 -t zyl&#x2F;centos .# 注意这个 . # 运行结果Sending build context to Docker daemon  2.048kBStep 1&#x2F;4 : FROM centos ---&gt; 5d0da3dc9764Step 2&#x2F;4 : VOLUME [&quot;volume01&quot;,&quot;volumn02&quot;] ---&gt; Running in 8c219faef7d6Removing intermediate container 8c219faef7d6 ---&gt; 905dfeb79eb6Step 3&#x2F;4 : CMD echo &quot;---end---&quot; ---&gt; Running in 4996222c5daeRemoving intermediate container 4996222c5dae ---&gt; 0876105c0d1bStep 4&#x2F;4 : CMD &#x2F;bin&#x2F;bash ---&gt; Running in 719ba2d3806aRemoving intermediate container 719ba2d3806a ---&gt; ffa50b1fdb37Successfully built ffa50b1fdb37Successfully tagged zyl&#x2F;centos:latest</code></pre></div><h3 id="数据卷容器">数据卷容器</h3><p>多个mysql同步数据（子、父容器间的挂载）</p><p>–volumes-from [main_instance]。可以嵌套的挂载</p><p>此时主机main和主机this的volume就会同步了</p><p>删除main，docker02和docker03还是可以访问volume下的文件(但这里的前提是，映射的是真实主机下的目录，主机下的目录还没删除)[这里还不是很清楚]</p><p>数据卷容器的生命周期一直持续到没有容器使用为止</p><p><strong>多个mysql实现数据共享</strong></p><h3 id="DockerFile">DockerFile</h3><p>一段命令脚本</p><p>比如你想要一个centos + jdk + mysql…</p><h4 id="指令">指令</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211015110209785.png" alt="image-20211015110209785"></p><ul><li>每个关键字都<strong>必须</strong>是大写字母</li><li>指令是顺序执行的</li><li>#表示注释</li><li><strong>每个指令都会创建提交一个新的镜像层</strong></li></ul><p><strong>CMD 和 ENTRYPOINT的区别</strong></p><ul><li>CMD [“ls”,“-a”] ，dockerfile在这种方式后，通过docker run  id 再去<strong>追加</strong> -l 操作就会报错，因为它会替换掉CMD的命令</li><li>如果用ENTRYPOINT[“ls”,“-a”] 则不会出现上述问题</li></ul><h4 id="构建过程">构建过程</h4><p>99%镜像是从基础镜像来的 scratch</p><div class="code-wrapper"><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM centosMAINTAINER zyl&lt;401177923@qq.com&gt;ENV MYPATH &#x2F;usr&#x2F;localWORKDIR $MYPATH# 带vim和net-toolsRUN yum -y install vimRUN yum -y install net-tools# 暴露80端口EXPOSE 80CMD echo$MYPATHCMD echo &quot;build finished&quot;CMD &#x2F;bin&#x2F;bash</code></pre></div><p>返回内容</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell"># 注意命令最后还有个 .# docker build -f tarDockerFile -t imagename .Sending build context to Docker daemon  2.048kBStep 1&#x2F;10 : FROM centos ---&gt; 5d0da3dc9764Step 2&#x2F;10 : MAINTAINER zyl&lt;401177923@qq.com&gt; ---&gt; Running in 4d6110c861e7Removing intermediate container 4d6110c861e7 ---&gt; 0ac892083934Step 3&#x2F;10 : ENV MYPATH &#x2F;usr&#x2F;local ---&gt; Running in 8c0c8833003dRemoving intermediate container 8c0c8833003d ---&gt; 75e64bad3a9eStep 4&#x2F;10 : WORKDIR $MYPATH ---&gt; Running in 2e111cca4927Removing intermediate container 2e111cca4927 ---&gt; 03809e35e5a5Step 5&#x2F;10 : RUN yum -y install vim ---&gt; Running in 444473f309e6CentOS Linux 8 - AppStream                       14 MB&#x2F;s | 9.3 MB     00:00    CentOS Linux 8 - BaseOS                         3.2 MB&#x2F;s | 7.5 MB     00:02    CentOS Linux 8 - Extras                          19 kB&#x2F;s |  10 kB     00:00    Dependencies resolved.&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Package             Arch        Version                   Repository      Size&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Installing: vim-enhanced        x86_64      2:8.0.1763-15.el8         appstream      1.4 MInstalling dependencies: gpm-libs            x86_64      1.20.7-17.el8             appstream       39 k vim-common          x86_64      2:8.0.1763-15.el8         appstream      6.3 M vim-filesystem      noarch      2:8.0.1763-15.el8         appstream       48 k which               x86_64      2.21-12.el8               baseos          49 kTransaction Summary&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Install  5 PackagesTotal download size: 7.8 MInstalled size: 30 MDownloading Packages:(1&#x2F;5): gpm-libs-1.20.7-17.el8.x86_64.rpm        1.3 MB&#x2F;s |  39 kB     00:00    (2&#x2F;5): vim-filesystem-8.0.1763-15.el8.noarch.rp 3.2 MB&#x2F;s |  48 kB     00:00    (3&#x2F;5): vim-enhanced-8.0.1763-15.el8.x86_64.rpm   20 MB&#x2F;s | 1.4 MB     00:00    (4&#x2F;5): which-2.21-12.el8.x86_64.rpm             931 kB&#x2F;s |  49 kB     00:00    (5&#x2F;5): vim-common-8.0.1763-15.el8.x86_64.rpm     45 MB&#x2F;s | 6.3 MB     00:00    --------------------------------------------------------------------------------Total                                           8.8 MB&#x2F;s | 7.8 MB     00:00     warning: &#x2F;var&#x2F;cache&#x2F;dnf&#x2F;appstream-02e86d1c976ab532&#x2F;packages&#x2F;gpm-libs-1.20.7-17.el8.x86_64.rpm: Header V3 RSA&#x2F;SHA256 Signature, key ID 8483c65d: NOKEY                                                                                 CentOS Linux 8 - AppStream                      257 kB&#x2F;s | 1.6 kB     00:00    Importing GPG key 0x8483C65D: Userid     : &quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot;                                          Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D                                                     From       : &#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-centosofficial                                                          Key imported successfullyRunning transaction checkTransaction check succeeded.Running transaction testTransaction test succeeded.Running transaction  Preparing        :                                                        1&#x2F;1   Installing       : which-2.21-12.el8.x86_64                               1&#x2F;5   Installing       : vim-filesystem-2:8.0.1763-15.el8.noarch                2&#x2F;5   Installing       : vim-common-2:8.0.1763-15.el8.x86_64                    3&#x2F;5   Installing       : gpm-libs-1.20.7-17.el8.x86_64                          4&#x2F;5   Running scriptlet: gpm-libs-1.20.7-17.el8.x86_64                          4&#x2F;5   Installing       : vim-enhanced-2:8.0.1763-15.el8.x86_64                  5&#x2F;5   Running scriptlet: vim-enhanced-2:8.0.1763-15.el8.x86_64                  5&#x2F;5   Running scriptlet: vim-common-2:8.0.1763-15.el8.x86_64                    5&#x2F;5   Verifying        : gpm-libs-1.20.7-17.el8.x86_64                          1&#x2F;5   Verifying        : vim-common-2:8.0.1763-15.el8.x86_64                    2&#x2F;5   Verifying        : vim-enhanced-2:8.0.1763-15.el8.x86_64                  3&#x2F;5   Verifying        : vim-filesystem-2:8.0.1763-15.el8.noarch                4&#x2F;5   Verifying        : which-2.21-12.el8.x86_64                               5&#x2F;5 Installed:  gpm-libs-1.20.7-17.el8.x86_64         vim-common-2:8.0.1763-15.el8.x86_64      vim-enhanced-2:8.0.1763-15.el8.x86_64 vim-filesystem-2:8.0.1763-15.el8.noarch  which-2.21-12.el8.x86_64             Complete!Removing intermediate container 444473f309e6 ---&gt; 78cb874e438dStep 6&#x2F;10 : RUN yum -y install net-tools ---&gt; Running in 7311bbbb2557Last metadata expiration check: 0:00:08 ago on Fri Oct 15 03:20:15 2021.Dependencies resolved.&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Package         Architecture Version                        Repository    Size&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Installing: net-tools       x86_64       2.0-0.52.20160912git.el8       baseos       322 kTransaction Summary&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Install  1 PackageTotal download size: 322 kInstalled size: 942 kDownloading Packages:net-tools-2.0-0.52.20160912git.el8.x86_64.rpm   2.1 MB&#x2F;s | 322 kB     00:00    --------------------------------------------------------------------------------Total                                           554 kB&#x2F;s | 322 kB     00:00     Running transaction checkTransaction check succeeded.Running transaction testTransaction test succeeded.Running transaction  Preparing        :                                                        1&#x2F;1   Installing       : net-tools-2.0-0.52.20160912git.el8.x86_64              1&#x2F;1   Running scriptlet: net-tools-2.0-0.52.20160912git.el8.x86_64              1&#x2F;1   Verifying        : net-tools-2.0-0.52.20160912git.el8.x86_64              1&#x2F;1 Installed:  net-tools-2.0-0.52.20160912git.el8.x86_64                                     Complete!Removing intermediate container 7311bbbb2557 ---&gt; d853a514f23dStep 7&#x2F;10 : EXPOSE 80 ---&gt; Running in 4c11e9c9381bRemoving intermediate container 4c11e9c9381b ---&gt; 4e1f8eeab200Step 8&#x2F;10 : CMD echo$MYPATH ---&gt; Running in 4e657781cf01Removing intermediate container 4e657781cf01 ---&gt; f59d25947e4cStep 9&#x2F;10 : CMD echo &quot;build finished&quot; ---&gt; Running in c91b3f839631Removing intermediate container c91b3f839631 ---&gt; b0dc3c46d320Step 10&#x2F;10 : CMD &#x2F;bin&#x2F;bash ---&gt; Running in 8633f3644184Removing intermediate container 8633f3644184 ---&gt; ea1d45e0166bSuccessfully built ea1d45e0166bSuccessfully tagged zylcentos:1.0</code></pre></div><p><strong>实例：Tomcat镜像</strong></p><ol><li><p>准备：tomcat + jdk压缩包</p></li><li><p>编写dockerfile</p><div class="code-wrapper"><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM centosMAINTAINER zyl&lt;401177923@qq.com&gt;# ADD可以自动解压  后面跟指定路径ADD jdk-8u202-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F;ADD apache-tomcat-8.5.72.tar.gz &#x2F;usr&#x2F;local&#x2F;RUN yum -y install vimENV MYPATH &#x2F;usr&#x2F;localWORKDIR $MYPATHENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_202ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jarENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.72ENV CATALINA_BASE &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.72ENV PATH $PATH:$JAVA_HOME&#x2F;bin:$CATALINA_HOME&#x2F;lib:$CATALINA_HOME&#x2F;binEXPOSE 8080CMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.72&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.72&#x2F;bin&#x2F;logs&#x2F;catalina.out# docker run -d -p 9090:8080 --name zylstomcat -v &#x2F;home&#x2F;zyl&#x2F;zyltomcat&#x2F;test:&#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.72&#x2F;webapps&#x2F;test -v &#x2F;home&#x2F;zyl&#x2F;zyltomcat&#x2F;tomcatlogs&#x2F;:&#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.72&#x2F;logs zyltomcat# 当然 主机服务器需要对外暴露9090端口</code></pre></div></li></ol><h2 id="发布">发布</h2><p>服务器上提交</p><p>docker 登录</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">docker login -u ssss -password xxx# 当然，这里存的是MD5或者是其他散列后的密码docker push imagename zyltomcat:1.0 # 最好附带版本号# push镜像问题 ： 没有tagThe push refers to repository [docker.io&#x2F;library&#x2F;zyltomcat]tag does not existdocker tag 7235ec815853 zyltomcat:1.0</code></pre></div><p><strong>发布到阿里云</strong></p><p>官网都有</p><p><strong>镜像打包成tar 和 加载</strong></p><p>docker save   docker load</p><h2 id="Docker网络">Docker网络</h2><p>核心：Linux虚拟化网络技术</p><h3 id="Docker0">Docker0</h3><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">ip a 查看网络信息[root@VM-4-4-centos ~]# ip a# 本机地址1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1&#x2F;8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1&#x2F;128 scope host        valid_lft forever preferred_lft forever# 阿里云内网地址2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000    link&#x2F;ether 52:54:00:c3:15:52 brd ff:ff:ff:ff:ff:ff    inet 10.0.4.4&#x2F;22 brd 10.0.7.255 scope global noprefixroute eth0       valid_lft forever preferred_lft forever    inet6 fe80::5054:ff:fec3:1552&#x2F;64 scope link noprefixroute        valid_lft forever preferred_lft forever# docker地址# B类网络，容纳6万多个子网3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default     link&#x2F;ether 02:42:ad:16:e9:c5 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1&#x2F;16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:adff:fe16:e9c5&#x2F;64 scope link        valid_lft forever preferred_lft forever</code></pre></div><p>启动一个tomcat容器后，主机ip a,增加了一个网卡</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell"># 主机内的。并且注意这里的inet和docker0的inet网段是相同的！68: eth0@if69: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link&#x2F;ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.17.0.2&#x2F;16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever# 容器内的69: vethfcd0557@if68: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default     link&#x2F;ether b2:7e:eb:e8:24:aa brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet6 fe80::b07e:ebff:fee8:24aa&#x2F;64 scope link        valid_lft forever preferred_lft forever# 两者是对称的</code></pre></div><p>通过容器增加的网卡，都是一对的。<br>evth-pair，就是一堆虚拟设备接口，成对出现，一端接协议，一段彼此相连。充当桥梁，连接各种虚拟网络设备</p><p>docker 如何处理容器访问网络？主机能否pin到容器内的ip地址</p><p>此过程中如果容器内没有ip a 指令，需要通过apt安装iproute2<br>没有ping，需要安装iputils-ping</p><p>veth-pair</p><ul><li>ip主机能否pin到容器内的ip地址？能</li><li>容器能否ping到主机(这里用的内网地址)？能</li><li>容器pin容器能否pin通？</li></ul><h4 id="原理"><strong>原理</strong></h4><ol><li>每启动给一个docker容器，docker就会给容器分配一个ip</li><li>只要安装了docker，就会有一个网卡docker0 — 桥接模式 ----<strong>veth-pair</strong>技术</li><li>docker中所有的网络接口都是<strong>虚拟</strong>的，虚拟的转发效率高</li></ol><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211021165235597.png" alt="image-20211021165235597"></p><p>tomcat01 与 02 并不是直接通信，而是通过docker0去路由。通过表结构记录或者广播的方式</p><h3 id="Veth-Pair技术">Veth-Pair技术</h3><h3 id="Link">Link</h3><p>通过name去ping对应的容器</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">docker run -d -P --name tomcat03 --link tomcat01 tomcat</code></pre></div><p>这样tomcat03能够ping通02，但02ping不通03</p><p>docker network inspect bridgeid</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">[root@VM-4-4-centos ~]# docker network inspect 9be3892efc4c\[    &#123;        &quot;Name&quot;: &quot;bridge&quot;,        &quot;Id&quot;: &quot;9be3892efc4c9f1c47f9340dd9a10326e11d913a1a955176009bd3819912636c&quot;,        &quot;Created&quot;: &quot;2021-09-23T19:22:22.607525017+08:00&quot;,        &quot;Scope&quot;: &quot;local&quot;,        &quot;Driver&quot;: &quot;bridge&quot;,        &quot;EnableIPv6&quot;: false,        &quot;IPAM&quot;: &#123;            &quot;Driver&quot;: &quot;default&quot;,            &quot;Options&quot;: null,            &quot;Config&quot;: [                &#123;                    &quot;Subnet&quot;: &quot;172.17.0.0&#x2F;16&quot;,                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;                &#125;            ]        &#125;,        &quot;Internal&quot;: false,        &quot;Attachable&quot;: false,        &quot;Ingress&quot;: false,        &quot;ConfigFrom&quot;: &#123;            &quot;Network&quot;: &quot;&quot;        &#125;,        &quot;ConfigOnly&quot;: false,        &quot;Containers&quot;: &#123;            &quot;a65b9eb65fd41e0321e26b7f0b73a55a45edf40016714d1108a39bea1388482a&quot;: &#123;                &quot;Name&quot;: &quot;tomcat02&quot;,                &quot;EndpointID&quot;: &quot;58a1eda21ee378bfd8c325d685ea44bc924cdca8c6a32f700d1020ffec6bfe3b&quot;,                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,                &quot;IPv4Address&quot;: &quot;172.17.0.3&#x2F;16&quot;,                &quot;IPv6Address&quot;: &quot;&quot;            &#125;,            &quot;d7679b70e668b7403f0da46845b967ad5135a35a4b6fbfa4549da49462ed3b4c&quot;: &#123;                &quot;Name&quot;: &quot;tomcat01&quot;,                &quot;EndpointID&quot;: &quot;5f9452a5850efcc7abf8f3bdf2c9300c5fab48f410d8b32357e2cfe84433b33f&quot;,                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,                &quot;IPv4Address&quot;: &quot;172.17.0.2&#x2F;16&quot;,                &quot;IPv6Address&quot;: &quot;&quot;            &#125;        &#125;,        &quot;Options&quot;: &#123;            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;        &#125;,        &quot;Labels&quot;: &#123;&#125;    &#125;]</code></pre></div><p>在创建tomcat03后，可以在docker Inspect中看到</p><p>“Links”: [“/tomcat02:/tomcat03/tomcat02”]</p><p>同时，也在tomcat03的hosts中发现</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">root@779098da59a7:&#x2F;usr&#x2F;local&#x2F;tomcat# cat &#x2F;etc&#x2F;hosts127.0.0.1       localhost::1     localhost ip6-localhost ip6-loopbackfe00::0 ip6-localnetff00::0 ip6-mcastprefixff02::1 ip6-allnodesff02::2 ip6-allrouters# 这里，直接把tomcat02写死在这里，甚至包括了id和name172.17.0.3      tomcat02 a65b9eb65fd4# 这里就是03的id172.17.0.4      779098da59a7</code></pre></div><h3 id="自定义网路">自定义网路</h3><p><strong>桥接模式</strong>：bridge（默认），转发</p><p><strong>none</strong>：不配置网络</p><p><strong>host</strong>：和宿主机共享网络</p><p>直接启动的命令，其实有默认的指令（–net bridge）</p><ol><li>创建<br>docker network create --driver bridge --subnet 192.168.0.0/24 --gateway 192.168.0.1 zylnet,就创建到network中去了。当然，也会在主机内创建这个网卡（类似docker0）</li><li>这时候创建的容器，如果指定这个网络，那其ip都采用上述的地址</li><li><strong>可以不用使用link直接来ping名字</strong>（自定义的网络能够帮我们维护好对应关系）<ul><li>为啥啊？</li></ul></li></ol><h3 id="网络连通">网络连通</h3><p>同一主机下的不同网络，比如docker0 的tomcat和另外一个网卡的tomcat（在不同的网段了）</p><div class="note note-info">            <p>能够访问不同网段的ip吗？</p><p><strong>不能</strong></p>          </div><p>解决方法：</p><p><strong>一个容器两个IP</strong></p><p>docker network connect 把一个容器连接到一个网络<br>就是把tomcat01 放到了另一个网络下</p><p><strong>证实</strong></p><p>通过docker network inspect zylnet，可以看到，</p><p>对tomcat-01,（被连接的container）</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">root@005986ed8954:&#x2F;usr&#x2F;local&#x2F;tomcat# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1&#x2F;8 scope host lo       valid_lft forever preferred_lft forever79: eth0@if80: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link&#x2F;ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.17.0.2&#x2F;16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever# 这里把zylnet的配置也加上了81: eth1@if82: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link&#x2F;ether 02:42:c0:a8:00:04 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 192.168.0.4&#x2F;24 brd 192.168.0.255 scope global eth1       valid_lft forever preferred_lft forever</code></pre></div><p>也可以在tomcat-01的hosts文件中发现，添加了 新网段下分配的新的ip地址，也赋给了这个容器id</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">172.17.0.2      005986ed8954192.168.0.4     005986ed8954</code></pre></div><p>这时候，两台容器都可以通过本网段中的ip、名字去互ping，但是<br>通过ping外来主机的原网段172.xxx.xx.xx，是ping不到的（可以理解）</p><h2 id="原理-v2">原理</h2><h3 id="概念">概念</h3><p>虚拟机：模拟系统，在软件层面上通过模拟硬件的输入和输出，让虚拟机的操作系统得以运行在没有物理硬件的环境中，能够模拟硬件的输入输出（比如AS的emulator就是这样）</p><ul><li>一般来说虚拟机会有自己的kernel、自己的硬件，虚拟机开机时需要开机自检、启动kernel、用户进程等，十分慢</li><li>如果<strong>虚拟机和宿主机的kernel是一致</strong>的，就不需要做硬件输入输出的搬运工  ---- 操作系统层虚拟化 ---- 容器</li></ul><div class="note note-primary">            <p>Docker容器有自己的内核吗？</p><p>没有，docker和宿主机共享kernel</p>          </div><h3 id="带入">带入</h3><p>Linux启动流程中的步骤</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211024230125804.png" alt="image-20211024230125804"></p><h2 id="一些问题">一些问题</h2><p><strong>docker run  attach  exec的区别</strong></p><p><strong>docker push 相同层的时候会怎么做？</strong></p><p>盲猜：不会对比相同的，因为如果要对比是否id相同时，则要花费很多时间？</p><p><strong>能在Mac和Windows平台下跑docker的原因</strong></p><h2 id="实践">实践</h2><h3 id="创建允许SSH的CentOS容器">创建允许SSH的CentOS容器</h3><p>Dockerfile</p><div class="code-wrapper"><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM centos:7ENV container dockerRUN (cd &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;sysinit.target.wants&#x2F;; for i in *; do [ $i &#x3D;&#x3D; \systemd-tmpfiles-setup.service ] || rm -f $i; done); \rm -f &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;*;\rm -f &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;*.wants&#x2F;*;\rm -f &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;local-fs.target.wants&#x2F;*; \rm -f &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;sockets.target.wants&#x2F;*udev*; \rm -f &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;sockets.target.wants&#x2F;*initctl*; \rm -f &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;basic.target.wants&#x2F;*;\rm -f &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;anaconda.target.wants&#x2F;*;# Official Resolution AboveENV MYPATH &#x2F;usr&#x2F;localWORKDIR $MYPATH# 带vim和net-toolsRUN yum -y install vimRUN yum -y install net-toolsRUN yum -y install httpdRUN yum -y sudosystemctl enable httpd.service# 暴露80端口EXPOSE 80EXPOSE 22VOLUME [ &quot;&#x2F;sys&#x2F;fs&#x2F;cgroup&quot; ]CMD [&quot;&#x2F;usr&#x2F;sbin&#x2F;init&quot;]# docker build --rm -t dockerfile# docker run -d --name centos7-net-test01 -p 50044:22 -p 50043:80 -p 50042:8080 --privileged&#x3D;true centos:centos7 &#x2F;usr&#x2F;sbin&#x2F;init# docker exec -it centos7-net-test01 &#x2F;bin&#x2F;bash# yum install -y openssh-clients openssh-server# passwd 添加密码</code></pre></div><p><strong>–privileged=true 避免无法Systemctl去启动服务</strong></p><p>开特权。因为Docker的理念是在容器里面不进行后台服务，容器本身就是一个独立的主进程。而Systemctl需要特权去访问linux内核，而容器并非一个完整的操作系统，只是一个文件系统。因此容器的设计原则：<strong>一个容器里运行一个前台服务</strong></p><p><strong>需要映射端口把容器内端口映射到主机下，才能通过主机的ip，预分配的端口号来访问</strong></p><p><strong>centos安装openssh-server</strong></p><p>yum install openssh-server，/etc/ssh/sshd 开启Port 22 Address等，开启PermitRootLogin…开启PermitPasswordAuthenticate.，开启sshd服务 systemctl start sshd.</p><p><strong>动态映射端口到容器</strong></p><p>先暂停docker服务systemctl stop docker</p><p>找到/var/lib/docker/containers/idxxxxx/config.v2.json 添加</p><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"ExposedPorts"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"22/tcp"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"80/tcp"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"8080/tcp"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"Ports"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"22/tcp"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"HostIp"</span><span class="token operator">:</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span><span class="token property">"HostPort"</span><span class="token operator">:</span><span class="token string">"50044"</span><span class="token punctuation">&#125;</span></code></pre></div><p>找到同目录下/hostjson  添加</p><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"PortBindings"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"22/tcp"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"HostIp"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"HostPort"</span><span class="token operator">:</span><span class="token string">"50044"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"80/tcp"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"HostIp"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"HostPort"</span><span class="token operator">:</span><span class="token string">"50043"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"8080/tcp"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"HostIp"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"HostPort"</span><span class="token operator">:</span><span class="token string">"50042"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre></div><p>再开启服务，按理说就可以动态映射（未验证）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Tool</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>问题盒子</title>
    <link href="/2021/10/09/%E9%97%AE%E9%A2%98%E7%9B%92%E5%AD%90/"/>
    <url>/2021/10/09/%E9%97%AE%E9%A2%98%E7%9B%92%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h1>学习疑惑</h1><blockquote><p>避免自己忘记，建个合集。学习时所有的疑惑和原理探究都在这儿啦</p></blockquote><!--toc--><h2 id="网络">网络</h2><h3 id="SSH-SFTP原理">SSH SFTP原理</h3><h3 id="SHA-RSA过程">SHA \ RSA过程</h3><h3 id="SCP基于SFTP吗">SCP基于SFTP吗</h3><h2 id="格式">格式</h2><h3 id="JPEG分析">JPEG分析</h3><h2 id="数据结构-v2">数据结构</h2><p><strong>浮点型到底是什么</strong>？</p><p><strong>Random的seed究竟是啥？</strong></p><span id="more"></span><h2 id="常识">常识</h2><h3 id="时区-9-00是啥意思？"><strong>时区+9:00是啥意思？</strong></h3><blockquote><p>正式的时区包括24个时区，每个时区由一个英文字母表示，每个经度15°为一个时区，每个时区有一条中央子午线。规定相邻的时区相差1小时。</p><p>但一个国家可能同时跨越多个时区，比如中国跨越了5个时区，但为了方便，还是按照东八时区的标准（以北京时间为准）</p></blockquote><div class="note note-info">            <p><strong>历史</strong></p><p>1884年 华盛顿召开国际经度会议，规定全球划分24个时区。英国（格林尼治天文台）为中时区（零时区），东1-12区，西1-12区（东西12区为一个区）。东西12区在两边之间各跨度7.5度而连接。每个时区的中央经线上的时间就是这个时区统一采用的时间，叫区时</p>          </div><div class="note note-primary">            <p><strong>常识</strong></p><p>UTC+8：中国、新加坡；<br>UTC+9：日本、韩国<br>UTC-5、UTC-6：美国、加拿大</p>          </div><h3 id="字符和字节到底怎么区分的呢？"><strong>字符和字节到底怎么区分的呢？</strong></h3><p>字节，基本的数据量单位，一字节 = 8 位<br>字符是计算机中使用的字母、数字、字和符号</p><ul><li>ASCII 码中，一个英文字母（不分大小写）为一个字节，一个中文汉字为两个字节。</li><li>UTF-8 编码中，一个英文字为一个字节，一个中文为三个字节。</li><li>Unicode 编码中，一个英文为一个字节，一个中文为两个字节。</li><li>符号：英文标点为一个字节，中文标点为两个字节。例如：英文句号 <strong>.</strong> 占1个字节的大小，中文句号 **。**占2个字节的大小。</li><li>UTF-16 编码中，一个英文字母字符或一个汉字字符存储都需要 2 个字节（Unicode 扩展区的一些汉字存储需要 4 个字节）。</li><li>UTF-32 编码中，世界上任何字符的存储都需要 4 个字节。</li></ul><p>对各种编码格式的解释</p><ul><li><p>ASCII，美国信息交换标准代码</p><ul><li>标准ASCII码，低128位</li><li>扩展ASCII码，高128位，允许将每个字符的第8位用于确定附加的128个特殊符号字符、图形符号</li></ul></li><li><p>Unicode 万国码、单一码。各国合作开发，为每种语言的每一个字符设置了唯一的编码 。Unicode用数字0-0x10FFFF(1114112个位置)来映射这些字符</p><ul><li>Unicode的学名是&quot;Universal Multiple-Octet Coded Character Set&quot;，简称为UCS。</li><li>现在用的是UCS-2，即2个字节编码，而UCS-4是为了防止将来2个字节不够用才开发的。</li></ul></li><li><p>UTF ： UCS Transformation Format的缩写，可以翻译成Unicode字符集转换格式，，即怎样将Unicode定义的数字转换成程序数据</p><ul><li><p>例如，“汉字”对应的数字是0x6c49和0x5b57，而编码的程序数据是：</p><p>BYTE data_utf8[] = {0xE6, 0xB1, 0x89, 0xE5, 0xAD, 0x97}; // UTF-8编码，以八字节对Unicode进行编码,可以多达4个字节，有对应的编码规则</p><p>WORD data_utf16[] = {0x6c49, 0x5b57}; // <a href="https://baike.baidu.com/item/UTF-16/9032026">UTF-16</a>编码</p><p>DWORD data_utf32[] = {0x6c49, 0x5b57}; // <a href="https://baike.baidu.com/item/UTF-32/734460">UTF-32</a>编码</p></li></ul></li></ul><h3 id="敲回车后到底增加了是两个字符还是一个字符？"><strong>敲回车后到底增加了是两个字符还是一个字符？</strong></h3><p>先附一张ASCII表</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211021150922618.png" alt="image-20211021150922618"></p><p>UTF-8中敲回车换行是 0a 而不是回车0d</p><h4 id="回车和换行">回车和换行</h4><ul><li>回车（CR–Carriage Return,\r）：将光标移动到当前行的开头</li><li>换行（LR–Line Feed,\n）：将光标垂直移动到下一行</li></ul><p>不同操作系统下的含义：<br>\n:  UNIX 系统行末结束符<br>\r\n: window 系统行末结束符(感觉这个从原理上来说更加合理)<br>\r:  MAC OS 系统行末结束符</p><div class="note note-primary">            <p>经常遇到的一个问题就是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</p>          </div><h4 id="软回车和硬回车">软回车和硬回车</h4><ul><li>软回车：按回车产生的，换行的同时进行段落分割</li><li>软回车，shift+enter，换行不换段(类似Markdown中的)</li></ul><h2 id="操作系统">操作系统</h2><h3 id="Linux-v2">Linux</h3><p><strong>ifconfig是啥？net-tools包含了啥？</strong></p><p><strong>为什么manjaro可以访问windows的文件但windows却不行？</strong></p><p><strong>Linux shell上突然中断操作是事务类型吗？</strong></p><p><strong>ssh远程两个端口安装软件，会先等一个安装好了，再进行另一个端口上软件的安装</strong></p><h3 id="其他-v3">其他</h3><h4 id="64位、32位操作到底有啥区别？"><strong>64位、32位操作到底有啥区别？</strong></h4><p>见计算机组成原理 “一些问题处”</p><p><strong>GPU、CPU的区别？</strong></p><p>见计算机组成原理</p><h4 id="文件是如何被压缩的？">文件是如何被压缩的？</h4><h2 id="语言">语言</h2><h3 id="C">C</h3><h4 id="EOF指的是啥？">EOF指的是啥？</h4><h2 id="杂七杂八">杂七杂八</h2><p><strong>GIthub的东西都存在哪儿了 ，这么多人都可以免费上传且不限制大小那存储硬盘得有多少？</strong></p><p>Github2018年居然被微软收购了。  微软的互补品策略</p><p>任何在市场中的产品、服务或者软件其实都存在相对应的替代品（Substitutes）和互补品（Complement）</p><ol><li>**替代品（Substitutes）**指的是当用户觉得你的产品价格太贵而考虑其他的其他产品，比如猪肉就是牛肉的替代品，如果你是卖猪肉的，当牛肉价格上涨的时候，很多用户就会来买猪肉代替，你的销量就会上升。</li><li>**互补品（Complement）**指的是跟你的产品一起购买的相互补充的产品，比如汽油就是汽车的互补品，典型的例子比如操作系统和电脑硬件也是互补品，当电脑的价格下降的时候，操作系统的销量就会上升。</li></ol><p>对于公司而言，主要的战略方向就是尽可能地让自身核心产品相对应的<strong>互补品的价格降低</strong>，如果你有能力让互补品的价格降低，你将能获得更多销量和收入并享受由于互补品受众扩大带来的曝光和热度。</p><p>微软改名部今年又将 TSVS 更名为“Azure DevOps” 进行包装与推出。GitHub - Azure Devops - Microsoft Azure 的路径逐渐明了。GitHub 与我们预想的一般，在微软的体系里成为其下游产品的互补品（Complement）。</p><p><strong>DevOps是啥？</strong></p><p>DevOps 是开发 (Dev) 和运营 (Ops) 的复合词，它将人、流程和技术结合起来，不断地为客户提供价值。DevOps 对团队意味着什么？DevOps 使以前孤立的角色（开发、IT 运营、质量工程和安全）可以协调和协作，以生产更好、更可靠的产品。通过采用 DevOps 文化、做法和工具，团队能够更好地响应客户需求，增强对所构建应用程序的信心，更快地实现业务目标。</p><p>个人感觉是大规模的集中运维+开发+测试一站式平台</p><h1>生活常识</h1><h2 id="政治">政治</h2><h3 id="贸易逆差"><strong>贸易逆差</strong></h3><p>国家或者地区在一定时期内进口额 &gt; 出口额的现象，表明已过对外贸易处于不利的地位（资本外流、外债增加）</p><ul><li>贸易黑字、贸易顺差：净出口为正值</li><li>贸易赤字、贸易逆差：净出口为负值</li></ul><p><strong>解析</strong></p><p>如果一个国家经常出现<a href="https://baike.baidu.com/item/%E8%B4%B8%E6%98%93%E8%B5%A4%E5%AD%97">贸易赤字</a>现象，为了要支付<a href="https://baike.baidu.com/item/%E8%BF%9B%E5%8F%A3">进口</a>的债务，必须要在市场上卖出<a href="https://baike.baidu.com/item/%E6%9C%AC%E5%B8%81">本币</a>以购买他国的货币来支付<a href="https://baike.baidu.com/item/%E5%87%BA%E5%8F%A3">出口</a>国的债务，这样，<a href="https://baike.baidu.com/item/%E5%9B%BD%E6%B0%91%E6%94%B6%E5%85%A5">国民收入</a>便会流出国外，使国家经济表现转弱。政府若要改善这种状况，就必须要把国家的<a href="https://baike.baidu.com/item/%E8%B4%A7%E5%B8%81%E8%B4%AC%E5%80%BC">货币贬值</a>，因为币值下降，即变相把出口商品价格降低，可以提高出口产品的竞争能力。因此，当该国外贸<a href="https://baike.baidu.com/item/%E8%B5%A4%E5%AD%97">赤字</a>扩大时，就会利淡该国货币，令该国货币下跌；反之，当出现外贸盈余时，则是利好该种货币的。因此，国际贸易状况是影响<a href="https://baike.baidu.com/item/%E5%A4%96%E6%B1%87%E6%B1%87%E7%8E%87">外汇汇率</a>十分重要的因素。</p><p><strong>观点：</strong></p><p><strong>贸易顺差未必都是好结果</strong></p><ul><li>带来贸易争端</li><li>增加外汇储备，但其实是资源未被充分利用</li><li>持续的顺差将导致人民币升值，进而导致资本净流入增加，进一步导致人民币升值的压力（利于进口，不利于出口，恶性循环）</li><li>转化为货币大量投入的压力，成为通货膨胀率上升的因素</li></ul><p><strong>贸易逆差不一定是坏的</strong></p><ul><li>适当逆差利于环节短期贸易纠纷</li><li>逆差 = 投资购买生产性设备，如果投资得当，能够提高生产能力</li><li>减少人民币升值的预期，减缓资本净流入的速度</li><li>短期的逆差利于缓解通货膨胀的压力</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2021/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2021/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1>计算机网络学习</h1><hr><h2 id="计算机网络和因特网">计算机网络和因特网</h2><span id="more"></span><!--toc--><h2 id="应用层">应用层</h2><h3 id="应用层协议原理">应用层协议原理</h3><h4 id="应用研发主要使用的两种主流体系结构："><strong>应用研发主要使用的两种主流体系结构：</strong></h4><ul><li>客户-服务器体系结构<ul><li>客户之间不直接通信</li><li>服务器具有固定的、周知的地址（IP地址）</li><li>大型应用需配备数据中心来处理请求</li><li>(Web、FTP、电子邮件)</li></ul></li><li>对等(P2P)体系结构<ul><li>对位于数据中心的专用服务器有最小的依赖</li><li>应用程序在间断连接的主机对（对等方）之间<strong>直接通信</strong></li><li>自扩展性，在P2P文件共享应用中，尽管每个对等方都由于请求文件产生了工作负载，但每个对等方通过向其他对等方分发文件也为系统增加了服务能力。</li><li>不需要庞大的服务器基础设置和服务带宽</li><li>（BitTorrent、迅雷…）</li></ul></li></ul><h4 id="进程通信">进程通信</h4><p>进行通信的实际上是进程而不是程序</p><p>两个不同端系统上的进程，通过跨越计算机网络交换<strong>报文</strong>而相互通信</p><h5 id="客户和服务器进程">客户和服务器进程</h5><p>两个进程一个为客户 ，另一个为服务器。</p><p>定义：在一对进城之间的通信会话场景中，发起通话的进程被标识为<strong>客户</strong>，再回话开始时等待联系的进程是<strong>服务器</strong></p><h5 id="进程与计算机网络之间的接口">进程与计算机网络之间的接口</h5><p>进程通过一个叫<strong>套接字</strong>的软件接口向网络发送报文和从网络接受报文</p><p>套接字是同一台 主机内应用层与传输层之间的接口，也称为<strong>应用程序编程接口</strong></p><h5 id="进程寻址">进程寻址</h5><p>发邮件需要知道目的地址</p><ol><li>主机的地址</li><li>在目的主机中指定接收进程的标识符</li></ol><p>因特网中，主机由IP地址标识，还必须制定运行在接受主机上的接收进程：目的地端口号(port number)</p><h5 id="可供应用程序使用的传输服务">可供应用程序使用的传输服务</h5><ol><li><strong>可靠数据传输</strong></li></ol><p>确保由应用程序一段发送的数据正确完全地交付给该应用程序的另一端</p><ol start="2"><li><strong>吞吐量</strong></li></ol><p>吞吐量：发送进程能够向接受进程交付比特的速率</p><p>运输协议确保可用吞吐量总是为至少  r 比特 / s</p><p>应用于带宽敏感应用</p><ol start="3"><li><strong>定时</strong></li></ol><p>要求数据交付有严格的时间限制</p><ol start="4"><li><strong>安全性</strong></li></ol><h4 id="因特网提供的运输服务">因特网提供的运输服务</h4><ol><li><p>TCP服务</p><ul><li><p>面向连接服务</p><ul><li><p>三挥四握，建立TCP连接，全双工、拥塞控制</p></li><li><p>TCP加强版；安全套接字层 SSL (Secure Sockets Layer)，提供了关键的进程到进程的安全性服务</p><p>SSL在这个过程中相当于中间人  发送方数据从： 进程–&gt;SSL–&gt;TCP</p></li></ul></li><li><p>可靠数据传输服务</p></li></ul><p>TCP和UDP都没有任何加密机制，发送进程传进套接字的数据与经网络传送到目的进程的数据相同</p></li><li><p>UDP服务</p><p>不可靠传输，数据可能乱序到达，不保证速率</p></li><li><p>因特网运输协议所不提供的服务</p><p>不提供任何定时和带宽保证</p></li></ol><h4 id="应用层协议">应用层协议</h4><p>如何构造报文？报文何时发送？</p><h3 id="Web和HTTP">Web和HTTP</h3><p>Web的应用层协议是超文本传输协议 ，HTTP</p><p>Web页面是由对象组成的，一个对象只是一个文件，多数Web文件包含一个HTML基本文件和几个引用对象</p><h4 id="持续连接和非持续连接"><strong>持续连接和非持续连接</strong></h4><p>所有的请求和相应是否经过相同的TCP连接发送</p><p>Http两种连接方式都能使用，默认使用持续连接</p><ol><li><p>非持续连接</p><p>P.66 例子</p><p>往返时间 RTT：一个短分组从客户到服务器然后再返回客户所花费的时间</p><p>缺点：</p></li><li><p>必须为每个请求的对象建立和维护一个全新的连接（客户和服务器中都要分配TCP的缓冲区，给服务器带来负担）</p></li><li><p>每个对象要经受两倍RTT的交付时延（一个用于创建TCP，另一个用于请求和接受对象）</p></li><li><p>持续连接</p><p>TCP连接打开后，后续的请求和响应报文能够通过相同的连接进行传送</p></li></ol><h4 id="HTTP报文格式">HTTP报文格式</h4><p><strong>请求报文</strong></p><p><img src="/opt/Hexo/source/_posts/C:%5CUsers%5C40117%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210909161630008.png" alt="image-20210909161630008"></p><p>首部行、请求行、实体体</p><p>实体体（emtity body） POST报文中用户在表单字段输入的值</p><p><strong>响应报文</strong></p><p>初始状态行 ：协议/版本字段  状态码 状态信息</p><p>首部行</p><p>实体体（报文的主要成分）</p><p><a href="https://blog.csdn.net/banana960531/article/details/85621865?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163117576216780271516167%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163117576216780271516167&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-85621865.first_rank_v2_pc_rank_v29&amp;utm_term=%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81&amp;spm=1018.2226.3001.4187">常见状态码</a></p><h4 id="用户和服务器的交互cookie">用户和服务器的交互cookie</h4><p>4个部署：</p><ol><li>HTTP相应报文有cookie首部行</li><li>HTTP请求报文中有cookie首部行</li><li>用户端系统保留cookie文件（浏览器）</li><li>Web站点侯丹数据库保存</li></ol><p>Web站点希望识别用户，把内容与用户身份联系起来 p70例子：购物网站记录加入购物车的物品（甚至在未登录的情况下）</p><h4 id="Web缓存">Web缓存</h4><p>Web缓存也叫代理服务器，保存最近请求过的对象的副本</p><p>通过Web缓存请求网页：</p><ol><li>创建一个到Web缓存器的TCP，向缓存器中的对象发送一个HTTP请求</li><li>缓存器进行检查，是否本地有相应对象的副本，若有则用HTTP响应报文返回该对象。如果没有，就打开一个与这个对象的初始服务器（原始地址）的TCP连接，并在这个缓存器到服务器的TCP连接上发送一个对该对象的HTTP请求，收到请求后，初始服务器向该Web缓存器发送具有该对象的HTTP响应</li><li>缓存器收到该对象时，在本地存储一份副本，并向客户的浏览器用HTTP响应报文发送该副本</li></ol><p>此过程中Web服务器既是服务器又是客户</p><p>eg: 与校园网连接有关，涉及到<strong>内容分发网络CDN</strong></p><p>优点：</p><ol><li>减少对客户请求的响应时间，Web服务器迅速将该对象交付给用户</li><li>减少一个机构的接入链路到因特网的通信，减少了通信量就不必急于增加带宽，因此降低了费用</li></ol><p>思考: 缓存器存储的HTTP响应对象是否过时怎么判断？</p><p>HTTP允许缓存器证实他的对象是最新的： 条件GET方法。</p><ol><li>如果请求报文使用GET方法</li><li>请求报文中包含&quot;If-Modified-Since&quot;首部行</li></ol><p>则这个报文就是一个条件GET请求报文</p><p>过了很久去请求缓存器中的对象时，会再发一条条件GET请求报文执行最新检查</p><p>If-Modified-Since：其值表示之前最近一次服务器响应时间（仅当在指定日期之后该对象被修改才发送新的）</p><p>如果没有被修改： 服务器发送响应报文，状态行为 304，状态信息：Not Modified，以此告知缓存器</p><h4 id="因特网中的电子邮件">因特网中的电子邮件</h4><p>三个组成部分：用户代理、邮件服务器、简单邮件传输协议SMTP</p><p>SMTP：：因特网电子邮件的核心</p><p>采用7比特ASCII码格式</p><p>SMTP一般不适用中间邮件服务器发送邮件，一般是两个服务器直连，连接方式：TCP</p><p><strong>HTTP和SMTP</strong></p><ul><li>都是从一台主机向另外一台主机发送文件</li><li>都使用持续连接</li></ul><p>HTTP：Web服务器向Web客户传送文件，是使用<strong>拉协议</strong>，由向接收文件的机器发起的。处理（文本和图像时，将每个对象封装到自己的HTTP响应报文中）</p><p>SMTP：一个邮件服务器向另一个邮件服务器传送文件，使用<strong>推协议</strong>，由想发送文件的机器发起的。处理（文本和图像时，将所有报文对象放在一个报文中）</p><h5 id="邮件报文格式">邮件报文格式</h5><p>RFC 5322定义</p><p>每个首部必须包含一个From和一个To首部行然后是可选首部行 + 一个空白行+报文体</p><h5 id="邮件访问协议">邮件访问协议</h5><p>Alice代理 —(SMTP) &gt; Alice邮件服务器  —(SMTP)&gt; Bob邮件服务器 —(pop3\imap\http)&gt; Bob代理</p><p>避免了我给你发邮件时你不在，接受不到的问题</p><p>最后一步不是SMTP是因为SMTP是推协议而不是拉协议</p><blockquote><p>POP3: Post Offical Prootocol --Version 3 第三版的邮局协议</p><p>IMAP : Internet Mail Access Protocol 因特网邮件访问协议</p></blockquote><p><strong>POP3</strong></p><p>当客户打开一个到邮件服务器端口110上的TCP连接时，POP3就开始哦工作了</p><p>三个阶段：特许、事务处理和更新</p><ul><li>特许：明文形式用户名和口令鉴别用户</li><li>事务处理：用户代理取回报文，并且还可以对报文做删除标记、取消报文删除标记、获取邮件的统计信息等</li><li>更新：结束POP3会话</li></ul><p>正常 +OK 错误-ERR</p><p>可配置的两种方式：下载并删除、下载并保存</p><p><strong>IMAP</strong></p><p>POP3协议没有给用户提供任何创建远程文件夹并为报文指派文件夹的方法</p><p>把每个报文于一个文件夹联系起来报文第一次到达服务器时，他与收件人的INBOX文件夹相关联，且还具有允许用户代理获取报文某些部分的命令</p><p><strong>基于Web的电子代理邮件</strong></p><p>目前主流。用户代理是普通的浏览器，与远程邮箱的通信通过HTTP进行。</p><p>代理到邮件服务器是HTTP，但邮件服务器和邮件服务器之间的接发邮件还是SMTP</p><p><strong>思考： 如今的mail邮箱如何进行list的？</strong></p><h4 id="DNS：因特网的目录服务">DNS：因特网的目录服务</h4><p>核心： Unique ID  —&gt; Unique Name       IP地址----&gt;主机名</p><p>DNS是：</p><ul><li>一个由分层的 DNS服务器实现的分布式数据库</li><li>一个使得主机能够查询分布式数据库的应用层协议</li></ul><p>DNS服务器通常是运行BIND软件的UNIX机器，DNS协议运行在UDP之上，使用53端口</p><p>DNS协议：应用层协议</p><p>除了进行主机名到IP地址的转换外，DNS还提供：</p><ol><li>获得主机别名对应的规范主机名以及主机IP地址</li><li>电子邮件应用程序可以调用DNS，对提供主机别名进行解析，获得该主机的规范主机名及其IP地址</li><li>负载分配DNS在所有冗余的Web服务器之间循环分配负载(IP地址集)</li></ol><h5 id="工作原理">工作原理</h5><p>应用程序----&gt;DNS客户端----&gt;向网络发送DNS查询报文（UDP 53端口）—&gt;用户主机收到DNS回答报文—&gt;映射到对应的应用程序</p><p>可以理解为DNS是一个提供简单直接转换的黑盒子，但内部逻辑十分复杂</p><p><strong>为什么不设置单一、集中的DNS服务器？</strong></p><p>单点故障、通信容量、远距离集中式数据库、维护</p><p>所以，DNS不采用这种方式，DNS实则是一个<strong>因特网实现分布式数据库</strong>的精彩案例</p><ol><li><p>分层式、层次数据库</p><p>DNS使用大量的DNS服务器，以层次方式组织，分布在全世界范围内，没有一台服务器拥有因特网上所有主机的映射。三种类型，客户自顶到底的找</p><ul><li><p><strong>根DNS服务器</strong></p><p>提供TLD服务器的IP地址，400多个根域名服务器</p></li><li><p><strong>顶级域DNS服务器  TLD</strong></p><p>每个顶级域（com\org\edu\net…）、国家顶级域（uk、fr…）都有TLD服务器</p><p>提供权威DNS服务器的IP地址</p></li><li><p><strong>权威DNS服务器</strong></p><p>因特网上具有公共可访问主机（Web服务器额邮件服务器）的组织机构必须提供公共可访问的DNS记录，将主机名映射为IP地址，被权威DNS服务器收藏</p></li></ul><p>除此之外，还有<strong>本地DNS服务器</strong>：</p><p>每个ISP都有一台本地DNS服务器，主机与某个ISP连接时，ISP提供一台主机的IP地址，该主机具有一台或多台其本地DNS服务器的IP地址（通过DHCP）。本地DNS服务器一般邻近本主机。在主机发出DNS请求时，先发送到DNS本地服务器（代理作用），然后再下发到DNS服务器层次结构（单独接收三类服务器响应）。</p><p>但这种方式很复杂，查询一个主机IP地址，需要发送4分查询报文和接收4份回应报文。（解决：DNS缓存）</p><p>查询分为<strong>递归查询</strong>和<strong>迭代查询</strong></p><p>递归查询：以自己的名义请求 来获得映射（通常： 从请求主机到本地DNS服务器的查询）</p><p>迭代查询：回答直接返回给自己</p></li><li><p>DNS缓存</p><p>目的：改善时延性能并减少在因特网到处传输的DNS报文数量</p><p>当某DNS服务器接收到DNS回答时，会将映射缓存在本地存储器中。但由于主机和主机名于IP地址间的映射不是永久的，DNS服务器在一段时间后（通常2天）将丢弃缓存</p></li><li><p><strong>DNS记录和报文</strong></p><p>资源记录(Resource Record , RR),提供了主机名到IP地址的映射，每个DNS回答报文包含了一个或多个RR。</p><p>内容： (name,value,type,ttl)</p><p>TTL: 该记录的生存时间，决定了RR应当从缓存中删除的时间。</p><p>例如：</p><ul><li>Type = A, Name是个主机名， Value是主机名对应的IP地址。</li><li>Type = NS， Name是个域，Value是个知道如何获得该域中主机IP地址的权威DNS服务器的主机名，用于沿着查询链来路由DNS查询</li><li>Type = CNAME，Value是别名为Name的主机对应的规范主机名，能够向查询的主机提供一个主机名对应的规范主机名</li><li>Type = MX，Value是个别名为Name的邮件服务器的规范主机名，MX记录允许邮件服务器主机名具有简单的别名，一个公司的邮件服务器和其他服务器（Web）可以使用相同的别名，但请求的记录不应相同。</li></ul><ol><li><p>DNS报文</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210911111330446.png" alt="image-20210911111330446"></p><p>前12字节：首部区域</p><p>标识符：16bit 标识查询/回答报文、权威标志、是否递归查询、递归可用</p><p>查询问题区域  ：包含正在进行的查询信息。包括：正在被查询的主机名、正被询问的问题类型(A\NS\MS…)</p><p>回答区域 ：对最初请求的名字的RR。可以包含多个RR，因此<strong>一个主机名能够有多条IP地址</strong></p><p>权威区域：包含其他权威服务器的记录</p><p>附加区域：包含其他记录。例如一个MX请求的回答报文的回答区域包含一条RR，提供邮件服务器的规范主机名。则附加区域则包含一个类型A的记录，提供用于该邮件服务器的规范主机名的IP地址</p></li><li><p>在DNS数据库中插入记录</p><p>注册登记机构：商业实体，验证域名的唯一性，将域名输入DNS数据库</p><p>当你注册登记机构注册域名时，需要提供基本和辅助权威DNS服务器的名字和IP地址没注册登记机构将确保将一个NS类型和一个类型A的记录输入TLD服务器</p></li></ol></li></ol><h5 id="DNS的脆弱性">DNS的脆弱性</h5><ol><li><p>分布式拒绝服务(DDoS) 带宽洪泛攻击</p><p>攻击者向每个DNS根服务器发送大量分组，使得大多数合法DNS氢气球得不到回答。（但许多根服务器有分组过滤器的保护，配置的分组过滤器阻挡了所有指向跟服务器的ICMP ping报文）并且大多数本地DNS服务器也缓存了TLD服务器的地址，使得这些请求通常绕过了DNS根服务器</p><p>更有效的攻击：向TLD服务器发送大量的DNS请求，过滤指向DNS服务器的DNS请求将更为困难，并且TLD服务器不容易绕过（可通过DNS服务器 缓存技术 部分缓解）</p></li><li><p>中间人攻击</p><p>截获请求- 伪造</p></li><li><p>毒害攻击</p><p>向DNS服务器发送伪造的回答，使服务器缓存中接收伪造的记录。</p></li></ol><h4 id="P2P文件分发">P2P文件分发</h4><p>C-S体系：分发一个大文件： 服务器要单独向每个对等方发送该文件的副本，负载大，消耗大量服务器带宽</p><p>P2P：每个对等方能够向其他任何对等方重新分发他已经收到的该文件的任何部分，在分发过程中协助到服务器</p><p>流行的P2P文件分发协议： BitTorrent</p><ol><li><p>扩展性</p><p>P94，实际运算比较两种体系的传输文件速率。</p><p>C-S，随着分发数量N增大，呈现线性，P2P非线性且增长趋势越来越小（有趋近值）</p><p>扩展性的直接成因： 对等方除了是Bit的消费者还是他们的重新分发者</p></li><li><p>BitTorrent</p><p>参与一个特定文件分发的所有对等方的集合称为一个洪流torrent.在一个洪流中的对等方彼此下载等长度的文件块(chunk)</p><p>每个洪流具有一个<strong>追踪器</strong>，每个对等方加入某洪流时，它向追踪器注册自己。周期性通知追踪器它仍然在洪流中。追踪器有一张表，有所有对等方的IP地址，其中对等方想要下载时，则追踪器随机的从这张表中选择一个子集，发给它。主机则试图与这张列表上的对等方创建并行的TCP连接。主机已经请求了L个块列表，此后，将对没有的块进行请求。</p><p>如何知道它的邻居有哪些块？</p><ol><li>它该从令居请求哪些块？</li><li>应当向哪些向它请求块的邻居发送块？</li></ol><p>解决以上问题，使用<strong>最稀缺优先技术</strong>。针对它没有的块在邻居中决定最稀缺的块（哪些在邻居中副本数量最少的块），并首先请求最稀缺的块。（目的：均衡分配洪流中的每个块）</p><p>选择交换数据的伴侣：最高速率前四个、随机选择其中一个，每30s重新选择</p><p>关于P2P还有很多有趣的机制：</p><p><em>随机优先选择、残局模型、反怠慢，后期可慢慢了解</em></p></li></ol><h4 id="视频流和内容分发网">视频流和内容分发网</h4><ol><li><p>因特网视频</p><p>基础：先录好上传到服务器中</p></li><li><p>HTTP流和DASH</p><p>经HTTP的动态适应性流（Dynamic Adaptive Streamming over HTTP）：根据用户可用带宽大小变化，选择不同的比特率，对应于不同的视频质量</p></li><li><p><strong>内容分发网</strong></p><p>为了应对全世界用户分发巨量视频数据的困难，大部分公司使用内容分发网（Content Distribution Network , CDN）</p><p>CDN管理分布在多个地方的服务器，在服务器中存储音视频 的副本，试图将每个用户请求定向到一个将提供最好的用户体验CDN位置。</p><p>专用CDN或第三方CDN</p></li></ol><h5 id="CDN">CDN</h5><p>常采用两种不同的服务器安置原则：</p><ul><li><p>深入： 通过在遍及全球的接入ISP中部署服务器集群，来深入到ISP的接入网中(Akamai)。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">  目的是靠近端用户，减少端用户和CDN集群之间的链路和路由器数量，改善时延和吞吐量。高度分布。</code></pre></div></li><li><p>邀请做客：在少量关键位置建造大集群来“邀请ISP做客”，这些CDN通常将他们的集群放在因特网交换点（IXP）。较低开销、维护，较高时延且较低吞吐量。</p></li></ul><h6 id="CDN操作">CDN操作</h6><p>如何触发？</p><p>浏览器检索到一个特定的视频（URL），CDN截获该请求来确定适合用于该客户CDN的服务器集群，将客户请求重新定向到该服务器的某台机器。</p><p>截获方法？</p><p>大多数CDN利用DNS截获和重定向请求。通过视频的链接发送DNS请求后，请求到视频网站的权威DNS服务器，此时并不返回IP地址，而是CDN域的主机名，此时再发送的是cdn的dns请求，最终返回cdn服务器的IP地址。</p><h6 id="集群选择策略">集群选择策略</h6><p><strong>~ ：任何CDN部署的核心，动态地将客户定向到CDN中的某个服务器集群或数据中心的机制（得知用户IP地址后，选择适当的集群）</strong></p><ul><li><p>地理上最为邻近策略。将IP地址映射到一个地理位置。</p><p>对大多数用户有效，但配置了远程DNS的和一些特殊情况（地理最邻近不代表是最近的集群）就不理想</p></li><li><p>CDN通过集群和客户之间的时延和丢包性能执行周期性的实时测量。（周期性地向所有LDNS发送探测分组（ping报文或DNS请求），缺点：许多LDNS被配置为不会响应这些探测）。</p></li></ul><p>一些大型视频网站CDN处理方式：</p><p>Netflex Youtube 看看（CDN+P2P）</p><h4 id="套接字编程">套接字编程</h4><p>每个进程好比是一座房子，进程的套接字好比是一扇门，应用程序位于一侧，运输层位于另一侧。应用程序开发者在套接字的应用层一侧可以控制所有东西，但无法控制运输层一侧。</p><p>一个进程具有一个或多个套接字，一个套接字对应一个端口号</p><h2 id="传输层">传输层</h2><h3 id="概述：">概述：</h3><p>运输层协议为运行在不同主机上的应用程序之间提供了<strong>逻辑通信</strong>功能。运输层协议在端系统中而不是在路由器中实现。</p><h4 id="运输层和网络层的关系">运输层和网络层的关系</h4><p>网络层提供了主机之间的逻辑通信，运输层为运行在不同主机上的<strong>进程</strong>之间提供了逻辑通信。</p><p>（书中有个特别好的例子，P. 123（快递公司：网络层协议  快递点：运输层协议））</p><p>运输层协议受限于网络层协议的服务模型，即使<strong>网络层不能保证协议是否可靠，运输层也能提供可靠的数据传输服务</strong></p><h4 id="因特网运输层概述">因特网运输层概述</h4><p>因特网两种运输层：</p><ul><li>UDP  （用户数据协议） 不可靠、无连接</li><li>TCP （传输控制协议） 可靠、面向连接</li></ul><p>一般 ： 运输层分组 / TCP的运输层分组 / UDP分组：报文段   UDP的运输层分组：数据报</p><p>因特网的网络层协议 ： IP，网际协议，为主机之间提供逻辑通信。“尽力而为交付服务”，不确保报文段的交付，保证按序交付，不保证报文段中数据的完整性。IP也被称为<strong>不可靠服务</strong></p><p><strong>TCP和UDP的基本责任</strong>：将两个端系统间IP的交付服务扩展为运行在端系统上的两个进程之间的交付服务。</p><p>这个过程也成为运输层的<strong>多路复用</strong>与<strong>多路分解</strong></p><h3 id="多路复用-v2">多路复用</h3><h3 id="无连接运输：UDP">无连接运输：UDP</h3><p>典型的UDP应用层协议的例子：DNS。因为UDP不会引入建立连接的时延。8字节开头</p><p><strong>UDP的缺陷</strong></p><p>运行在UDP上的多媒体应用是有争议的。如果每个人都启动流式提高比特率视频而不是用任何拥塞控制的技术，就会使得路由器有大量的分组溢出。以至于非常少的UDP分组能成功地传输。况且，引发的高丢包率将引起TCP发送方因拥塞控制而大大减小发送速率。</p><p>UDP中缺乏拥塞控制能够导致UDP发送方和接收方之间的高丢包率，并且挤垮TCP会话。</p><p>当然，一些UDP的应用是可能实现可靠性传输的：在应用程序自身中建立可靠性机制完成。</p><h4 id="UDP报文段">UDP报文段</h4><p><img src="/opt/Hexo/source/_posts/C:%5CUsers%5C40117%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210913191503252.png" alt="image-20210913191503252"></p><h4 id="UDP检验和">UDP检验和</h4><p>目的：提供差错检验功能，检验和确定党UDP报文段从源到达目的地移动时，其中的比特是否发送变化</p><p>如何产生：发送方的UDP对报文段中所有16比特字的和进行<strong>反码</strong>运算，求和时遇到任何溢出问题都被回卷。</p><p>只是检测，不能修复</p><h3 id="可靠数据传输原理">可靠数据传输原理</h3><p>可靠数据传输协议下层息协议也许是不可靠的 — &gt; 带来困难。</p><h4 id="构造可靠数据传输协议">构造可靠数据传输协议</h4><ol><li><p>经完全可靠信道的可靠数据传输：rdt1.0</p><p>最简单情况：底层信道是完全可靠的，接收端不需要提供任何反馈信息给发送方</p><p>有限状态机（FSM Finite-State Machine）</p></li><li><p>经具有比特差错信道的可靠传输</p><p>肯定确认（ACK）、否定确认（NAK）</p><p>自动重传请求（Automatic Repeat reQuest，ARQ）</p><p>ARQ需要的另外三种协议处理存在比特差错的问题：</p><ul><li>差错检测</li><li>接收方反馈 ACK、NAK</li><li>重传</li></ul><p>停等（stop-and-wait）协议，仅当接收到ACK并且离开改状态时才能发生其他事件。</p><p>但是如果ACK、NAK分组受损该怎么办？</p><p>解决问题：在数据分组中添加新字段，让发送方对数据分组进行编号，即将发送数据分组的序号放在该字段。</p></li><li><p>经具有比特差错哦的丢包信道的可靠数据传输：rdt3.0</p><p>除原本问题外还需关注：怎样检测丢包以及发生丢包时该做什么？</p><p>发送方需要等待多久才能确定已丢失了哪些？（耐心是有限度的）</p><p>至少需要等待：发送方与接受方的往返时延+接收方处理一个分组的所需时间。</p><p>为了实现基于时间的重传机制，引入了<strong>倒计数定时器</strong>，在一个给定的时间过期后，可中断发送方。</p><p>rdt3.0 — 比特交替协议（分组序号在0和1之间替换）</p><p>性能低</p></li><li><p>改进的rdt3.0  流水线协议</p><p>rdt3.0性能问题的核心在于其是一个停等协议，发这个一个报文段的后我只能等待接收方发来的ACK，等待的时间大量被浪费掉。</p><p>为什么叫流水线？ 许多从发送方向接收方输送的分组可以看成是填充到一条流水线中</p><p>要求：</p><ul><li>必须增加序号范围。传输的分组必须有唯一的序号</li><li>发送方接收方可能会缓存多个分组，在最底下新都你应当缓冲那些已发送但没有确认的分组</li><li>数据传输协议如何处理丢失、损坏、延时大的分组。解决流水线的差错恢复的两种基本方法：<ul><li>回退N步（Go-Back-N，GBN）</li><li>选择重传（Selective Repeat，SR）</li></ul></li></ul></li></ol><h4 id="回退N步">回退N步</h4><p>允许发送方发送多个分组而不需等待确认，受限于  在流水线中未确认的分组数不能超过某个最大值。</p><p>已被发送但还未被确认的分组的许可序号范围可以被看成是一个在序号范围内长度为N的<strong>窗口</strong></p><p>因此GBN也常被成为<strong>滑动窗口协议</strong></p><p>三种情况：发送、收到ACK、超时</p><p>GBN中，接收方丢弃所有失序分组。因为数据必须按序交付，但接收方可以缓存提前到来的分组。发送方需要维护窗口的上下便捷 和nextseqnum在窗口的位置，接收方需要维护下一个按序接收的分组的序号。</p><p>缺点：当窗口长度和带宽时延积都很大时，单个分组的差错能够引起GBN重传大量分组，许多分组根本没必要重传。</p><h4 id="选择重传">选择重传</h4><p>SR协议通过让发送方仅重传那些它怀疑在接收方出错的分组而避免了不必要的重传。</p><p>三者具体差别，<a href="https://blog.csdn.net/hjl_heart/article/details/88218012?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.no_search_link&amp;spm=1001.2101.3001.4242">CSDN戳这里</a>，<a href="https://www.bilibili.com/video/BV1Wz4y1S7L3?from=search&amp;seid=5367526131040405021&amp;spm_id_from=333.337.0.0">B站讲解</a>，<a href="https://www.bilibili.com/video/BV1HJ411w77K?from=search&amp;seid=10888591370497029891&amp;spm_id_from=333.337.0.0">湖科大版本-回退N帧</a>，<a href="https://www.bilibili.com/video/BV1nJ411u74k?from=search&amp;seid=8259728890129923825&amp;spm_id_from=333.337.0.0">湖科大版本选择重传</a></p><h3 id="面向连接的运输：TCP">面向连接的运输：TCP</h3><h4 id="TCP连接">TCP连接</h4><p>为什么是面向连接的： 发送数据前，两个进程必须“握手”，发送预备报文段，建立确保数据传输的参数</p><p>Vinton Cerf 和Robert Kahn发明了TCP/IP协议（Transmission Control Protocol / Internet Protocol，传输控制协议/网际协议） 获得“ACM图灵奖”</p><p>建立TCP连接后，客户进程通过套接字传递数据，一旦数据通过了这扇门，则就由客户中的TCP控制了，TCP将数据引导进发送缓存中。不断地从缓存中拿去数据，并将其投递到网络层</p><ul><li><p>提供全双工服务  full-duplex service</p></li><li><p>TCP连接是点对点：单个发送放和单个接收方之间建立连接</p></li><li><p>TCP可从发送缓存中取出并放入报文段的数据数量受限于最大报文长度（Maximum segment Size ，MSS）</p><p>MSS通常根据最初确定的由本地发送主机发送的最大链路层帧长度（最大传输单元 MTU）来设置</p><p>MSS指的是 <strong>报文段里应用层数据的最大长度，而不是包括首部的TCP报文段的最大长度</strong></p></li></ul><h4 id="报文结构">报文结构</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210914163318606.png" alt="image-20210914163318606"></p><p>首部一般20字节（不包括选项）</p><ol><li><p>序号和确认号</p><p>该序号非彼序号，序号建立在传送的字节流之上，而不是在传送的报文段序列之上</p><p>一个报文段的序号是该报文段首字节的字节流编号</p><p>确认号： A—&gt;B，when B----&gt;A时，B要给A说我希望下一次你给我发消息时从哪里开始发（起始字节号）</p><p>TCP只确认该流中至第一个丢失字节为止的字节，所以TCP被称为<strong>累计确认</strong></p><p>注意：<strong>序号和确认号针对的都是字节</strong></p><p>对客户到服务器的数据的确认被装在在一个承载服务器到客户数据的报文段中，这种确认被称为是<strong>捎带</strong>在服务器到客户的数据段报文中</p></li><li><p>TCP检验和</p><ul><li>TCP整体检验（包括载荷）[12字节伪首部]  TCP首部校验和计算三部分：TCP首部+TCP数据+TCP伪首部。</li><li>首先，把伪首部、TCP报头、TCP数据分为16位的字，如果总长度为奇数个字节，则在最后增添一个位都为0的字节。 把TCP报头中的校验和字段置为0。。其次，用反码相加法（对每16bit进行二进制反码求和）<strong>累加</strong>所有的16位字（进位也要累加，进位则将高位叠加到低位）。最后，将上述结果作为TCP的校验和，存在检验和字段中</li></ul></li><li><p><strong>选项</strong>：</p><ol><li>Selective Acknowledgements —SACK。数据包未按序到达，能否不重传已接受到的数据，只传没得到的数据</li><li>TimeStamp方便计算TTL</li><li>NOP 填充</li><li>Window Scale 方便2^n指数扩大窗口大小</li></ol></li></ol><h4 id="往返时间的估计和超时">往返时间的估计和超时</h4><ol><li><p>估计往返时间</p><p>通过样本进行测量  。 仅在某个时刻做一次SampleRTT测量。任意时刻，仅为一个已发送的但目前尚未被确认过的报文段估计SampleRTT，从而产生一个接近每个RTT的新的SampleRTT值</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c">EliminatedRTT  <span class="token operator">-</span> <span class="token number">8.875</span> <span class="token operator">*</span> EstimatedRTT <span class="token operator">+</span> <span class="token number">0.125</span> <span class="token operator">*</span> SampleRTT   <span class="token comment">//指数加权平均</span>   DevRTT <span class="token operator">=</span> <span class="token number">0.75</span> <span class="token operator">*</span> DevRTT <span class="token operator">+</span> <span class="token number">0.25</span> <span class="token operator">*</span> <span class="token operator">|</span>SampleRTT <span class="token operator">-</span> EstimatedRTT<span class="token operator">|</span></code></pre></div></li><li><p>设置和管理重传超时间隔</p><p>超时间隔不能太短也不能太长</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c">TimeoutInterval <span class="token operator">=</span> EstimatedRTT <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> DevRTT</code></pre></div><p>SampleRTT波动大 ，则余量大，波动小则余量小。</p></li></ol><h4 id="可靠数据传输">可靠数据传输</h4><p>IP服务不保证数据包的交付、按序、完整等问题。</p><p>TCP的rdt确保一个进程从其接收缓存中独处的数据流是无损坏，无间隙、非冗杂和按序的数据流。</p><p><strong>超时间隔加倍</strong></p><p>每次TCP重传会将下一次的超市间隔设置为先前值的两倍，而不是通过Estimated和DevRTT的推算值</p><p><strong>快速重传</strong></p><p>发送方通常可在超时时间发生之前通过注意冗余ACK来检测丢包情况。</p><p>冗余ACK是再次确认某个报文段的ACK，指示下一个期待的字节的序号</p><p>因为发送方经常发送大量的报文段，如果一个报文段丢失，会引起许多一个接一个的冗余ACK，如果TCP发送方接收到相同的3个冗余ACK，就执行快速重传（在该报文段的定时器过期之前重传）</p><p><strong>回退N步还是选择重传</strong></p><p>选择确认：允许TCP接收方有选择地确认失序报文段，而不是累计地确认最火一个正确接收的报文段</p><h4 id="流量控制-v2">流量控制</h4><p>接收方应用可能很忙，数据到达TCP缓存后，暂时没时间读取，如果发送方发的太多，可能使得接收缓存溢出。</p><p>为应用程序提供，使得 发送方发送速率和接收方接受速率大致相同。以消除发送方使得接收方缓存溢出的可能性，与拥塞控制十分相似。</p><p>发送方维护一个<strong>接收窗口</strong>(rwnd)，提示发送方接收方还有多少可用的缓存空间。（由于TCP全双工，所以接收、发送方都维护一个接收窗口）</p><p>如何确保接受缓存不溢出：发送到连接中但未被确认的值 &lt;= rwnd</p><p>如果rwnd == 0，发送方主机继续发送只有一个字节数据的报文段，报文段会被接收方确认，最终缓存开始清空，并且确认报文将包含一个非0的rwnd值</p><p><a href="https://www.bilibili.com/video/BV1EJ411n7qb?spm_id_from=333.999.0.0">TCP的流量控制（湖科大）</a></p><h4 id="TCP的连接管理">TCP的连接管理</h4><p>如何建立和拆除一条TCP？三握四挥</p><ol><li><p>三次握手</p><ul><li>客户端发送特殊报文段，不包含应用层数据  标志位SYN =  1，客户端还会随机选择一个初始序号(client_isn)，放在该报文段的序号字段中。</li><li>服务器TCP接收，分配缓存。向客户TCP发送允许连接的报文段， SYN = 1 ，确认号= client_isn +1，服务器再选择自己的初始序号(server_isn)放入序号字段中。该报文段称为SYNACK报文段</li><li>客户端收到该报文段后，也要分配缓存。发送报文段，确认号=server_isn + 1 ,SYN = 0 ACK=1（因为连接已经建立）。<strong>这个阶段可以在报文段中负载发送给服务器的数据了</strong>（应用段）</li></ul></li><li><p>四次挥手</p></li><li><p>SYN洪泛攻击(SYN flood attack)</p><p>如果握手最后一次客户端不发送ACK，则服务器会在一分钟后终止该半开连接并回收资源。</p><p>攻击者发送大量TCP SYN报文段，而不完成第三次过程，则服务器会不断为半开连接分配资源，导致链接资源被消耗。</p><p>防范方法：SYN cookie</p><ul><li>服务器最开始接收到数据时，并不知道该报文段是来自合法的用户还是SYN洪泛攻击。因此不会生成一个半开连接。服务器会生成一个初始TCP序列号，与SYN报文段的源和目的IP地址、端口号和服务器知道的秘密数有关，这种精心制作的序列号叫cookie。而服务器自身不记忆该cookie。</li><li>如果客户合法，会给ACK，则验证是对的，则服务器生成一个具有套接字的全开连接。如果不合法，没有返回ACK报文段，则也没有关系，因为服务器没有为它分配任何资源。</li></ul></li></ol><h3 id="拥塞控制原理">拥塞控制原理</h3><p>太多的源向以过高的速率发送数据，造成路由器溢出。需要一些手段来遏制发送方。非常的重要</p><h4 id="拥塞代价和原因">拥塞代价和原因</h4><p>代价(书中的例子比较具体     P172)</p><ol><li><p>两个发送方和一台无穷大缓存的路由器</p><p>每连接的吞吐量 ： 接收方每秒接收的字节数</p><ul><li>分组的到达速率接近链路容量时，分组会经历巨大的排队时延（路由器缓存无线大）</li></ul></li><li><p>两个发送方和一台具有有限缓存的路由器</p><p>运输层向网络中发送报文段的速率 b byte/s ： 供给载荷(offered load)</p><p>两种情况</p><ul><li>发送方执行重传以补偿因为缓存溢出而丢弃的分组</li><li>在时延较大时发送方进行不必要的重传引起路由器利用其链路带宽来转发不必要的分组副本</li></ul></li><li><p>4个发送放和具有有限缓存的多台路由器和多跳路径</p><ul><li>当一个分组沿一条路径被丢弃，每个上游路由器用户转发该分组到丢弃该分组而使用的传输容量就被浪费掉了</li></ul></li></ol><h4 id="拥塞控制方法">拥塞控制方法</h4><ul><li>端到端拥塞控制（IP不会向端系统提供有关网络拥塞的反馈信息）</li><li>网络辅助的拥塞控制。ATM 可用比特率，路由器显示地Ton告知发送它能在输出链路上支持的最大端系统发送速率。<ul><li>直接反馈：路由器发送给发送方（“我拥塞了，你别传了 ”）</li><li>中间商修改：路由器标记或更新从发送方流向接收方的分组中的某个字段来指示拥塞的产生，一旦收到这个标记的分组，接收方就向发送方通知网络拥塞指示。</li></ul></li></ul><h3 id="TCP拥塞控制">TCP拥塞控制</h3><p>TCP必须使用端到端的拥塞控制而不是使用网络辅助的拥塞控制，因为IP层不向端系统提供显示的网络拥塞反馈。</p><ul><li>如何限制它的发送速率？</li><li>如何感知网络拥塞</li><li>感知到拥塞时，怎样变化发送速率？</li></ul><p>发送方的TCP跟踪一个额外变量（拥塞窗口 cwnd），在发送方中未被确认的数据量 &lt;= min {rwnd, cwnd};</p><h4 id="TCP拥塞控制算法"><strong>TCP拥塞控制算法</strong></h4><ol><li><p>慢启动</p><p>连接刚开始时，cwnd = MSS较小值  ≈ MSS/RTT。可用的带宽可能还有很多，TCP希望尽快地找到这个值。</p><p>cwnd以1个MSS开始，并且报文段首次被确认时，cwnd就增加一个MSS。此后一样，x2速率进行。</p><p>何时停止？</p><p>如果发生丢包，TCP将cwnd设置为1并重启慢启动过程。并且，将ssthresh(慢启动阈值)设置为cwnd/2.当cwnd超过ssthresh值时，继续时cwnd翻倍就没什么效果了，这时结束慢启动，并且TCP转移到拥塞避免模式，更加谨慎的增加cwnd。</p><ul><li>如果丢包是因为简单超时，则cwnd = 1MSS ssthresh = 1cwnd(old) 进入拥塞避免</li><li>如果丢包是因为收到了冗余ACK，快速重传并且迅速恢复</li></ul><p>额外：TCP分岔，优化云服务性能</p></li><li><p>拥塞避免</p><p>每个RTT（注意，不是ACK）后将cwnd的值增加一个MSS</p><ul><li>如果丢包是因为简单超时，则cwnd = 1MSS ssthresh = 1cwnd(old) 继续进入慢启动</li><li>如果丢包是因为收到了冗余ACK，则 ssthresh = cwnd/2;  cwnd /=2，进入快恢复</li></ul></li><li><p>快速恢复</p><p>对每个ACK，cwnd值增加一个MSS</p><ul><li><p>早期 ，Tahoe：不管是超时还是3个冗余，都将cwnd 置为1MSS，进入慢启动</p></li><li><p>新版本， Reno：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210915200815873.png" alt="image-20210915200815873"></p></li></ul></li><li><p>回顾</p><p>TCP拥塞控制又被称为：加性增、乘性减（AIMD）  ，锯齿形位</p></li></ol><p>一条连接的平均吞吐量 = 1.22 * MSS / (RTT * 根号L)  L：丢包率</p><h6 id="1-公平性">1. 公平性</h6><p>多条TCP连接，有不同的端到端路径，但都要经过一条瓶颈链路，如果每条连接都得到相同份额的链路带宽，则认为该拥塞控制机制是公平的。</p><h2 id="网络层：数据平面">网络层：数据平面</h2><p>网络中的每一台主机和路由器都有网络层</p><h3 id="概述-v7">概述</h3><p>数据平面作用：此输入链路向输出链路转发数据包</p><p>控制平面作用：协调本地的每路由器转发动作，使得数据报沿着和目的地主机之间的路由器路径最终进行端到端的传送</p><p>路由器不运行在应用层和运输层协议，故没有上两层</p><p>主要的两种网络层功能：</p><ul><li><p><strong>转发</strong>：将分组从一个输入链路接口转移到适当的输出链路接口的路由器本地动作。</p><p>是数据平面中实现的唯一功能，路由器将分组移动到适当的输出链路。</p></li><li><p><strong>路由选择</strong>： 确定分组从源到目的地所采取的端到端路径的网络范围处理过程。网络层决定分组采用的路径（路由选择算法）</p></li></ul><p><strong>转发表</strong>： 每台路由器中的关键元素。路由器检查到达分组首部的一个或多个字段值，使用这些首部值在转发表中索引，以此来转发分组。</p><ol><li><p>控制平面：传统的方法</p><p>转发表如何配置？</p><p>路由选择算法决定了插入该转发表中的内容。</p></li><li><p>控制平面：SDN方法</p><p>路由选择仅执行转发， 远程控制器计算并分发转发表，以此做到分离。</p><p>本质：软件定义网络(Software-Defined Networking ，SDN)</p></li></ol><p><strong>网络服务模型</strong></p><p>因特网的网络层提供单一的服务，<strong>尽力而为服务</strong></p><h3 id="路由器工作原理">路由器工作原理</h3><p>4个组件：</p><ul><li>输入端口：在路由器中执行终结入物理链路的物理层功能。与位于入链路远端的数据链路层交互来执行数据链路层功能。</li><li>交换结构，将路怄气的输入端口连接到输出端口</li><li>输出端口：存储从交换结构接收的分组。通过执行必要的连链路层和物理层功能在输出链路上传输这些分组。</li><li>路由选择处理器：执行平面功能，传统路由器中，执行路由选择协议，在SDN路由器中，负责与远程控制器通信。</li></ul><h4 id="输入端口处理和基于目的地转发">输入端口处理和基于目的地转发</h4><ol><li><p>前缀匹配（路由器转发表中不必要有所有的目的地址的对应），最长前缀匹配规则</p><p>一旦确定了某分组的输出端口，该分组就能够发送进入交换结构。但该输入端口可能被其他分组占用，这时候刚进入的就要被暂时阻塞，需要在输入端口处排队</p></li><li><p>交换：分组从一个输入端口交换（转发）一个输出端口中</p><p>三种交换技术：内存、总线、纵横 P207</p><ul><li><p>内存交换：</p><p>最简单，交换过程在CPU（路由选择处理器）的控制下完成，通过中断方式，分组被复制到内存中，然后再被复制到输出端口的缓存中。</p><p>缺点：不能同时转发两个分组(经过共享系统总线一次仅能执行一个内存读/写)</p></li><li><p>经总线交换：</p><p>输入端口经过一根共享总线将分组直接传送到输出端口，不需要路由选择处理器的干预。输入端口为分组预先计划一个交换机内部标签，指示本地输出端口，分组在总线上传送到输出端口哦，所有输出端口都能收到，但只有与该标签匹配的端口才能保存该分组，然后标签在输出端口被去除。</p><p>一次只有一个分组能跨越总线，其余的需要等待。</p></li><li><p>经互联网络交换</p><p>通过开启和闭合交叉点，能够并行转发多个分组。纵横式交换机是非阻塞的。但如果由两个不同输入端口的分组 其目的地为相同的输出端口，则一个分组需要等待。因为某个时刻经给定总线仅能够发送一个分组。</p></li></ul><ol start="3"><li><p>输出端口处理</p><p>交换结构  ----&gt; 排队（缓存管理） ----&gt; 数据链路处理（协议、封装） —&gt; 线路端接</p></li><li><p>何时出现排队</p><p>排队队列增长，路由器的缓存空间最终将会被耗尽----&gt; 丢包</p><ol><li><p>输入排队</p><p>交换结构无法快得让所有到达分组无时延地通过它传送（接线员忙），则到达的分组必须加入输入端口队列中，等待通过交换结构传送。</p><p>多个不同分组被分配到了相同输出端口，则其中多个需要等待，且排在每个分组后的分组也要等待   线路前部(Head-Of the Line,HOL)阻塞，即在一个输入队列中排队的分组必须等待通过交换结构发送，因为它被位于线路前部的另一个分组所阻塞。</p></li><li><p>输出排队</p><p>交换机速度较快</p><p>弃尾</p><p>主动队列管理（Active Queue Management ，AQM），随机早期检测（Random Early Detection，RED）是AQM之一</p><p>如何决定路由器缓存容量：</p><p>RTT * 链路容量C</p></li></ol></li><li><p>分组调度</p><ol><li><p>先进先出 FIFO</p></li><li><p>优先权排队</p><p>每个优先权类有自己的队列基于IP的实时话音分组可能获得较高优先权</p><p>优先权类分组之间的选择还是FIFO</p></li><li><p>循环和加权公平排队</p><p>加权公平排队（Weighted Fair Queuing），不停循环不同加权类</p></li></ol></li></ol></li></ol><h3 id="网际协议">网际协议</h3><h4 id="IPV4数据报格式">IPV4数据报格式</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210918102733176.png" alt="image-20210918102733176"></p><ul><li><p>版本号：规定数据报的IP协议版本，查看版本号—&gt; 路由器确定如何解释数据报剩余部分。</p></li><li><p>首部长度。IPv4数据报可能包含可变数量的选项，以此来确定数据报载荷实际开始的地方</p></li><li><p>服务类型 TOS，使不同类型等待IP数据报相互区别开（低延迟、高吞吐…）。例如区分非实时流量(FTP)和实时数据报(IP电话应用)</p></li><li><p>数据报长度，标识IP数据报总长度  最大65535字节</p></li><li><p>标识、标志、片偏移。用于分片</p></li><li><p>寿命TTL，（Time To Live） 确保数据不会永远在网络中循环。每当一台路由器处理该数据报时，TTL–： 若TTL== 0 ，则字段会被丢弃</p></li><li><p>协议，通常仅当一个IP数据报到达最终目的地时才会有用。指示IP数据报的数据部分应该交给哪个特定的运输层协议。</p><ul><li><p>协议号将网络层和运输层绑定</p></li><li><p>端口号将运输层和应用层绑定</p></li></ul></li><li><p>首部检验和，帮助路由器检测IP数据报中的比特错误。</p><p>仅检验首部！！如何检测？</p><p>为什么TCP/IP在运输层和网络层都执行差错检测？</p><ol><li>IP层只对IP首部计算了检验和,TCP/UDP对整个报文段进行检测</li><li>TCP/UDP 与 IP不一定属于同一个协议栈。（例如，TCP能够运行在ATM上，而IP能传给其他运输层）</li></ol></li><li><p>源和目的IP地址</p></li><li><p>选项，允许IP首部被扩展，ipv6中去掉了这个选项（可变长度导致路由器处理IP数据报所需的时间变化大）</p></li><li><p>数据（有效载荷）</p></li></ul><h4 id="IPv4数据报分片">IPv4数据报分片</h4><p>问题：并不是所有的链路层协议都能承载相同长度的网络层分组。</p><p>最大传送单元(MTU) ：一个链路层帧能承载的最大数据量，严格限制IP数据报长度（问题是发送方与目的地路径上的每段链路可能使用不同的链路层协议，每种协议可能具有不同的MTU）</p><p>比如一条链路上MTU很大，发的IP数据报很大，接着的链路上MTU小，发的IP数据报小，这时候一个分组该怎么办？</p><p><strong>分片</strong>：数据分片成两个或者更多个较小的IP数据报，用单独的链路层封装这些较小的IP数据报，通过输出链路发送这些帧。这些较小的数据报称为<strong>片</strong></p><p>片在到达目的地后需要重新组装，组装的工作在端系统中。</p><p>如何判断收到？如何确定丢失？</p><p>发送主机通常将发送每个数据报的标识号+1，由于IP的不可靠性，为了让目的主机绝对相信它收到了初始数据报的最后一个片，最后一个片的标志比特= 0 ，而其他所有片的标志比特= 1。并且，为了让目的主机确定是否丢失了一个片，使用偏移字段来制定该片应该放在初始数据报的哪个位置。</p><h4 id="IPv4编址">IPv4编址</h4><p>一台主机一般只有一条链路连接到网络。如果向发送数据报，则在该链路上发送</p><p>路由器有两条或多条链路与它连接（接收、转发），路由器与它任意一条链路之间的边界叫接口</p><p>主机与物理链路之间的边界叫接口。</p><p>IP要求每台主机和路由器接口拥有自己的IP地址（一个IP地址与一个接口相关联，而不是包括该接口的主机或路由器）</p><p>IP地址长度：4字节 32bit 总共有 2<sup>32</sup> (40亿个)，点分十进制法书写</p><p>子网：多个主机接口与路由器接口的网络</p><p>IP地址为子网分配地址（223.1.1.0/24，这样的记法被称为子网掩码），左侧的24bit定义了 子网地址，其余的是可分配的。</p><p>因特网的地址分配策略：<strong>无类别域间路由选择</strong>  CIDR（Classless InterDomain Routing）</p><p>a.b.c.d/x的x最高比特构成了IP地址的网络部分，称为该地址的前缀，组织内部的设备的IP地址将享有共同的前缀比特x。</p><p>地址聚合、路由聚合、路由摘要：使用单个网络前缀通告多个网络的能力</p><p>CIDR采用前，使用的是<strong>分类编制</strong>（A\B\C类网络），缺点，C类 /24子网仅能容纳254主机 — 太少，B类 /16 支持65534主机，太多，造成浪费。</p><p>255.255.255.255 ：IP广播地址，报文段会交付给同一个网络中的所有主机，路由器也会选择地向邻近的子网转发该报文。</p><p><strong>一台设备如何从某组织的地址快中分配到地址</strong>：</p><ol><li><p>获取一块地址2</p><ul><li>一个组织从ISP中获取一组地址</li><li>一个ISP获取一块地址</li></ul><p>IP地址由因特网名字和编号分配机构(ICANN)管理（它还管理DNS根服务器、分配域名和解决域名纷争），ICANN向区域性因特网注册机构分配地址，这些机构一起形成了ICANN的地址支持组织。</p></li><li><p>获取主机地址：动态主机配置协议</p><p>为组织内的主机配置IP地址：<strong>动态主机配置协议</strong>（Dynamic Host Configuration ， <strong>DHCP</strong>）。</p><p><strong>解释</strong>：DHCP允许主机自动获取一个IP地址，网络管理员也能够配置DHCP，以使得给定主机每次与网络连接都能得到一个相同的IP地址（服务器固定IP地址原理？），或者将主机分配到一个临时的IP地址，DHCP还允许主机得知其他信息（子网掩码、第一跳路由器（默认网管关）、它的本地DNS服务器地址）</p><p>由于DHCP具有将主机连接进一个网络的网络相关方面的自动能力，又常被称为<strong>即插即用协议</strong>或者<strong>零配置协议</strong>，广泛用于住宅因特网、企业网、无线局域网</p><p>本身是一个B-S协议，客户是一个新到达的主机，想获得自身的IP地址在内的网络配置信息。如果子网没有服务器，则需要DHCP中继代理（通常是一台路由器），代理知道用于该网络的DHCP服务器的地址。</p><p>新到达的主机如何与DHCP交互以获得IP地址？</p><ul><li>DHCP服务器发现。新到达的主机的首要任务是发现一个要与之交互的DHCP服务器，使用<strong>DHCP发现报文</strong>。客户在UDP分组中向端口<strong>67</strong>发送报文，UDP分组封装在IP数据报中（但这个数据报应该发给谁？连IP地址都不知道啊？）。<strong>使用广播目的地址255.255.255.255 并且使用本主机的源IP地址0.0.0.0</strong>。该数据报通过链路层，链路层将该帧广播到所有与该子网连接的节点。</li><li>DHCP服务器提供。DHCP服务器收到DHCP发现报文时，做出响应，该报文向该子网的所有节点广播，仍然用255.255.255.255（为什么不用之前数据报的源IP地址？  因为子网中可能存在几个DHCP服务器，该客户也许会发现他处于能在几个提供者之间选择的优越位置）。每台服务器提供的报文包含由收到发现报文的事务ID，向客户推荐的IP地址、网络掩码以及IP地址租用期（IP地址的有效时间量）。服务器租用期一般为几小时或者几天</li><li>DHCP请求，新到达的客户从一个或多个服务器中选择一个，并向选中的服务器提供用<strong>DHCP请求报文</strong>进行响应。</li><li>DHCP ACK。服务器用DHCP ACK报文对请求报文进行响应，证实所要求的参数。</li></ul><p>一旦客户收到DHCP ACK，该客户能够在<strong>租用期内</strong>使用DHCP分配的IP地址。如果客户希望在该租用期超时后继续使用这个地址，DHCP还有一种机制允许客户更新它对这个IP地址的租用</p><p>缺点：每当节点连接到新的子网，要从DHCP获取新的IP地址，不能维持与远程应用之间的TCP连接（解决方案：移动IP：对IP基础设施的扩展，允许移动节点在网络之间移动时使用其单一永久的地址）</p></li></ol><h4 id="网络地址转换">网络地址转换</h4><p>随着小集团的需求增多（办公室…），子网被大量需求，如果子网变大了，超过了原有需求，怎么办？</p><p><strong>网络地址转换 （Network Address Translation，NAT）</strong></p><p>NAT使得路由器对于外部世界而言不是一台路由器，更像是一个具有单一IP的单一设备，所有离开家庭路由器流向更大因特网的报文都有一个源IP地址，且所有进入家庭的报文都有同一个目的IP地址。（本质上，NAT使得路由器对外外界隐藏了家庭网络的细节  [中间盒]） （DHCP发挥了作用）</p><p>既然如此，路由器如何知道将哪个分组发给哪个具体的内部主机呢？</p><p>NAT路由器上的 NAT转换表，表中还包含了端口号及其IP地址</p><p>NAT路由器接收到内部主机的数据报后，<strong>替换端口号与IP地址</strong></p><h4 id="IPv6">IPv6</h4><p>原因：新的子网地址和IP节点以惊人的速度增长，32比特的IP地址空间即将被耗尽。</p><ol><li><p>IPv6数据格式报</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210922175812677.png" alt="image-20210922175812677"></p><p>特点：</p><ul><li>扩大的地址容量（32bit —&gt; 128bit），引入任播地址（地址可以使得数据报交付给一组主机中的任何一个）</li><li>简化高效的40字节首部</li><li>流标签。flow，用于给特殊流的分组加上标签（发送方做要求，比如非默认服务质量或需要实时服务的流，音视频流，可以对一条流中的某些数据报给出更高的优先权）</li><li>版本，4bit，设置为6（注意：此字段=4不代表就创建IPv4数据报）</li><li>流量类型 ≈ IPv4的TOS</li><li>有效载荷长度 16bit，给出跟在定长首部后的字节数量（实际数据报）</li><li>下一个首部。标识数据报中的内容需要交付给哪个息协议（TCP or UDP），与IPv4相同</li><li>跳限制 ，每台路由器对该字段内容-1，==0时则丢弃</li><li>数据。</li></ul><p>IPv6中的更改点：</p><ul><li>分片/重新组装。v6不允许在中间路由器上进行分片和重新组装。这种操作只能在源与目的地执行。如果路由器收到的数据报太大而不能转发到链路上，则路由器会丢掉该数据报，并向分组发送一个“分组太大”的ICMP（Internet Control Message Protocol，网络层协议）差错报文，让发送方重新发送较小数据的报文。(为什么去除？分片和重组是一个耗时操作，该功能从路由器中删除，并放在端系统中，加快网络中IP转发速度)。</li><li>首部检验和。运输层和数据链路层执行了检验操作。设计者可能觉得没必要，v4中，由于首部由TTL字段，每台路由器都需要重新计算首部检验和。每台路由器会重新计算首部检验和，也是耗时操作。</li><li>选项。没有完全消失，可能出现在“下一个首部”指出的位置上。</li></ul></li><li><p>从IPv4到IPv6的迁移</p><p>IPv4 如何迁移到 v6？虽然v6能向后兼容，但v4不能够处理v6数据报。</p><p>建隧道（tunneling）。两台IPv6路由器之间中间的v4路由器集合叫一个隧道。将整个IPv6数据报放到一个v4数据报的数据字段中。v4数据报不知道自己含有一个v6数据报。</p></li></ol><h3 id="通用转发和SDN">通用转发和SDN</h3><p>原因：第二层交换机和第三层路由器等中间盒剧增，都有不同的硬件、软件，不统一。SDN正在提出一种统一、现代、简洁的方法，提供多种网络层功能和某些链路层功能。</p><p>流表   openFlow</p><h2 id="网络层：控制平面">网络层：控制平面</h2><p>控制平面，控制沿着从源主机到目的主机的的端到端路劲间的路由器如何转发数据报，并且控制网络层组件和服务如何配置和管理。</p><p>通用场景下，动作包括转发分组到达路由器的每个输出端口，丢弃分组，复制分组，重写首部</p><p>方式：</p><ul><li>每路由器控制</li><li>逻辑集中式控制</li></ul><h3 id="路由选择算法">路由选择算法</h3><p>目的：从发送方到接收方的过程中确定一条通过路由器网络的好的路径</p><p>图，找到最短路径</p><p>分类方法：</p><ol><li><p>集中、分散</p><ul><li><p>集中式路由选择宣发。用完整的、全局性的网络知识计算出源到目的地的最低开销路径。（要求：具有关于连通性和链路开销的完整信息）。具有全局状态信息的算法被称为链路状态（Link State，LS）算法。必须知道网络中每条链路的开销</p></li><li><p>分散式路由选择算法。路由器以迭代、分布式的方法计算出最低开销路径。没有节点拥有关于所有网络链路开销的完整信息，每个节点仅有与其直接项链链路的开销知识即可工作。距离向量（Distance-Vector ，DV）算法，每个节点维护到网络中所有其他节点的开销估计的向量。</p></li></ul></li><li><p>静态动态</p><ul><li>静态路由选择算法，路由随时间变化慢。</li><li>动态路由选择算法，随着网络流量负载或拓扑发生变化而改变路由选择路径。</li></ul></li><li><p>负载敏感、迟钝</p><ul><li>负载敏感算法，链路开销会动态地变化以反应出底层链路当前拥塞水平。如果当前拥塞的链路与高开销相联系，则算法趋向于绕开该拥塞链路来选择路由。</li><li>负载迟钝算法（当今因特网路由选择算法）</li></ul></li></ol><h4 id="链路状态路由选择算法">链路状态路由选择算法</h4><p>Dijkstra算法。</p><p>LS算法终止时，对于每个节点，我们都得到从源节点沿着它的最低开销路径的前一个节点。</p><p>对于n个节点，最坏情况是O(n<sup>2</sup>)</p><p>对于另一种情况，链路两个方向承载的负载不同时，发生链路振荡</p><h4 id="距离向量路由选择算法">距离向量路由选择算法</h4><p>迭代、异步、分布式</p><p>Bellman-Ford方程</p><p>每个节点x维护 的路由选择信息：</p><ul><li>对每个邻居v，从x到直接相连邻居v的开销c(x,v)</li><li>节点x的距离向量。x到N中所有目的地y的开销估计值。</li><li>x的<strong>每个邻居的距离向量</strong></li></ul><p>在该算法中，每个节点不时地向它的每个邻居发送它的距离向量副本，当x从它的任何一个邻居w收到一个新的距离向量时，它保存w的距离向量，使用Bellman-Ford方程更新自己的距离向量。</p><p>如果节点x的距离向量因为这个步骤而改变，则节点x将向它的每个邻居发送更新后的距离向量，继而让邻居更新他们自己的距离向量。（如果在一个邻居更新过程中收到了另一个邻居的更新通知该怎么办？）</p><p>这样下来，每个开销估计会收敛到从节点x到节点y实际最低的路径开销</p><ol><li><p>距离向量算法：链路开销改变与链路故障</p><p>产生原因：更新通知的延迟造成</p><p>路由选择环路（P.253）。增加最低开销 ---- 无穷计数问题</p></li><li><p>距离向量算法：增加毒性逆转</p><p>避免路由选择环路</p><p>如果z通过y路由选择到目的地x，则z给y说，它到x的距离是无穷大，这样y永远不会试图经由z路由选择到x</p><p>毒性逆转无法接解决3个或更多节点</p></li><li><p>LS、DV比较</p><p>N个节点、E条链路</p><ul><li><p>报文复杂性。LS要发送O（N*E）个报文。且一条链路的开销改变，必须要向所有节点发送新的链路开销。DV算法仅在新的链路开销导致与该链路相连节点的最低开销路径发生改变时，才传播已改变的链路开销。</p></li><li><p>收敛速度。LS ，O（N<sup>2</sup>）时间复杂度。DV收敛较慢，还可能遇到路由选择环路、无穷计数问题</p></li><li><p>健壮性。（一台路由器恶意发送错误的向量表）。LS算法，路由计算分离，有一定健壮性。DV算法中一个不正确节点的计算值会扩散到整个网络。</p></li></ul></li></ol><h3 id="OSPF-因特网中自治系统内部的路由选择">OSPF: 因特网中自治系统内部的路由选择</h3><p>由于规模和管理自治（ISP意愿）路由选择算法不统一。</p><p>通过将路由器组织进自治系统（Autonomous System ，AS）</p><p>每个AS由一组通常在相同管理控制下的路由器组成。通常一个ISP的路由器以及互联他们的链路构成一个AS，当然ISP也可以有多个AS。一个自治系统由全局唯一的AS号（ASN）标识，类似IP号。</p><p>在相同AS中路由器都运行相同的路由选择算法并且有彼此信息。在一个自治系统内运行的路由选择算法叫 <strong>自治系统内部路由选择算法</strong></p><p><strong>开发最短路优先（OSPF）</strong></p><p>Open Short Priority First， 是一种链路状态（LS）协议，使用洪泛链路状态信息和Dijkstra最低开销路径算法，使用OSPF，一台路由器能够构建一副关于整个自治系统的完成拓扑图。</p><p>使用OSPF，路由器向自治系统内的所有其他路由器广播路由选择信息（而不仅仅是相邻的路由器广播），即使链路状态未发生改变，也要周期性的广播链路状态（增强LS算法健壮性）。OSPF报文由IP直接承载，对OSPF的上层协议值为89</p><p>优点：</p><ul><li>安全。鉴别OSPF路由器之间的信息交换。OSPF报文可配置为MD5（默认是简单，未被鉴别并且可以被伪造）</li><li>多条相同开销的路径。存在多条相等开销路径时，无需仅选择单一的路径来承载所有的流量。</li><li>对单播和多播路由选择的综合支持。</li><li>支持在单个AS中的层次结构，一个OSPF AS能够层次化配置多个区域，每个区域都运行自己的OSPF链路状态路由器选择算法，区域内的每台路由器都向<strong>该区域</strong>内的气气他所有路由器广播链路状态。每个区域内，一台或多台区域边界路由器负责为<strong>流向该区域以外的分组</strong>提供路由选择。AS中只有一个OSPF区域配置为主干区域，主干区域的主要作用<strong>是为其他区域之间的流量提供路由选择</strong>。主干总是包含本AS中的所有区域边界路由器。AS中的区域间路由选择要求分组先路由到一个区域边界路由器（区域内路由选择），再通过主干路由到位目的区域的区域边界路由器，再路由到最终目的地。</li></ul><p>设置OSPF链路权重，不太懂</p><h3 id="ISP之间的路由选择：BGP">ISP之间的路由选择：BGP</h3><p>当分组跨越多个AS进行路由时，需要<strong>自治系统间路由选择协议</strong></p><p>AS间路由选择协议设计多个AS之间的协调，所以AS通信必须运行相同的AS间路由选择协议。所以，因特网中运行相同的AS间路由选择协议，<strong>边界网关协议</strong>（Broder Gateway Protocol，BGP）【这个协议将数千的ISP粘合起来】</p><p>BGP中，分组不是路由到特定的目的地址，而是路由到CIDR化的前缀(132.13.12/22)。</p><p>BGP为每台路由器提供了完成以下任务的手段：</p><ul><li>从令居AS获得前缀的可达性信息。允许每个子网向因特网的区域部分通告它的存在，确保在因特网中的所有AS知道该子网。如果没有BGP，则每个子网是孤立的。</li><li>确定到该前缀的最好的路由。</li></ul><h4 id="通告BGP路由信息">通告BGP路由信息</h4><p>对于每个AS，路由器要么是网关路由器（位于AS边缘，直接连接到其他AS中的一台或者多台路由器），要么是内部路由器（仅连接在他自己AS中的主机和路由器）。</p><p>BGP中，每对路由器用179端口<strong>半永久TCP</strong>连接交换路由选择信息。每条直接连接以及所有通过该连接发送的BGP报文，称为<strong>BGP连接</strong>。跨越两个AS的BGP连接称为<strong>外部BGP连接</strong>（eBGP），相同AS中的两台路由器之间的BGP会话称为<strong>内部BGP</strong>连接（iBGP）</p><h4 id="确定最好的路由">确定最好的路由</h4><p>路由器通过BGP连接通告前缀时，<strong>前缀中包括某些BGP属性</strong>（<strong>路由</strong>）。包含AS-PATH和NEXT-HOP</p><p>AS-PATH包含通告已经通过AS的列表，某一个前缀通过AS时，AS将其ASN加入到现有列表。还可以检测和防止通告环路，如果一台路由器在路劲列表中看到包含了它自己的AS，它将拒绝该通告。</p><p>NEXT-HOP， 是起始的AS-PATH起始的路由器接口的IP地址（可能要看书，P259）</p><p>每条BGP路由包含三个组件：NEXT-HOP AS-PATH 目的前缀…</p><ol><li><p>热土豆路由选择</p><p>热土豆，烫手，赶快把它给别人。自私的算法，不管其他人到其他人间的</p><p>选择具有最小最低开销的网关</p></li><li><p>路由器选择算法</p><p>BGP使用。如果到相同的前缀有两条或者多条路由，则顺序调用下列消除规则：</p><ol><li>路由被指派一个本地偏好值作为属性之一。该值可能由路由器设置或在相同AS中的另一台路由器学习到。完全取决于AS网络管理员，具有最高本地偏好值的路由将被选择；</li><li>从余下的路由中（具有相同最高本地偏好值）选择最短AS-PATH的路由</li><li>从余下的路由中，使用热土豆路由选择，选择具有最靠近NEXT-HOP路由器的路由</li><li>如果仍留下多条，则使用BGP标识选择路由。</li></ol><p>非自私算法，先查找具有短AS路径的路由，因而可能减小端到端的时延</p></li></ol><p><strong>IP任播</strong></p><p>BGP除了被用做AS间路由选择协议，还用于实现IP任播服务。</p><p>当一个用户要访问复制内容时，将用户指向具有该复制内容的最近的服务器。</p><p>CDN公司为多台服务器指派相同的IP地址，使用标准的BGP从这些服务器的每台来通告该IP地址。当某台BGP路由器收到该IP地址的多个路由通告，将通告处理为对相同的物理位置提供不同的路径。当配置路由选择表时，每台路由器将本地化使用BGP路由选择算法来挑选到该IP地址的最好的（例如，AS跳计数最少的）路由。客户请求视频时，CDN向客户返回由地理上分散的服务器使用的共同IP地址，当客户向IP地址发送请求时，则因特网路由器向最近的服务器转发该分组。</p><p>实际中CDN通常选择不适用IP任播。因为BGP路由选择变化能够导致相同的TCP连接的不同分组到达Web服务器的不同实力。</p><p>IP任播被DNS系统广泛用于将DNS请求指向最近的根DNS服务器</p><p><strong>路由选择策略</strong></p><p>P263，接入ISP为什么不会转发主干提供商网络的流量？</p><h3 id="SDN控制平面">SDN控制平面</h3><p>SDN体系结构的4个关键特征：</p><ol><li>基于流的转发。SDN控制的交换机能够基于运输层、网络层、链路层首部中任意数量的首部字段值进行。</li><li>数据平面与控制平面分离。数据平面是网络交换机，在流表中执行匹配加动作的规则。控制平面由服务器以及决定和管理交换机流表的软件组成</li><li>网络控制功能。</li><li>可编程网络</li></ol><p><strong>SDN控制平面：SDN控制器和SDN网络控制应用</strong></p><p>SDN控制器结构</p><ul><li>通信层：SDN控制器和受控网络设备之间的通信。SDN控制器控制远程SDN使交换机、主机运行，则需要一个协议传送这些设备之间的信息。并且设备也要能够向控制器传输本地观察到的时间。</li><li>网络范围状态管理层。由SDN控制平面所做出的最终控制决定，将要求控制器具有有关网络的主机、链路、交换机以及其他SDN控制设备的最新状态信息。</li><li>对于网络控制应用程序层的接口。控制器通过北向接口与网络控制应用程序交互</li></ul><p><strong>OpenFlow协议</strong></p><p>运行在SDN控制器和SDN控制的交互及之间。协议运行在TCP之上，默认端口号：6653</p><h3 id="ICMP：因特网控制报文协议">ICMP：因特网控制报文协议</h3><p>目的：主机和路由器用来彼此沟通网络层的信息。差错报告</p><p>在某个位置，IP路由器不能找到一条通往HTTP请求中所制定的主机的路径，路由器就会向你的主机生成并发送一个ICMP报文以指示该错误</p><p>ICMP作为IP有效载荷承载的，位于IP之上。</p><p>类型字段+编码字段，并且包含引起该ICMP报文首次生成的IP数据报首部和前8个字节（以便发送放能确定引发该差错的数据报）</p><p>例如：</p><ul><li>ping程序发送一个ICMP类型8编码0的报文到指定主机，看到回显请求后，目的主机发回一个类型0编码0的ICMP回显回答。</li><li>源抑制报文。执行拥塞控制，使得拥塞的路由器向一台主机发送一个ICMP源抑制报文，以强制该主机减小其发送速率。</li></ul><h3 id="网络管理和SNMP">网络管理和SNMP</h3><h4 id="网络管理框架">网络管理框架</h4><p>网络管理关键组件：</p><ul><li><p>管理服务器。一个应用程序，运行在网络运营中心（NOC）的集中式网络管理工作站上。控制网络管理信息的收集、处理、分析。</p></li><li><p>被管设备。位于被管理网络中，可以是一台主机、路由器、交换机、中间盒…在一个被管设备中，有几个所谓被管对象。这些被管对象是被管设备中硬件的十几部分和用于这些硬件和软件组件的配置参数。</p></li><li><p>一个被管设备中的每个被管对象的关联信息收集在 管理信息库（MIB）。一个MIB对象可以是：</p><ul><li>一个计数器</li><li>运行在一台DNS服务器上的软件版本的描述性信息</li><li>一个特定设备功能是否正确的状态信息</li><li>到一个目的地的路由选择路径的特定协议的信息</li></ul><p>相关的MIB对象收集在MIB模块中</p></li><li><p>每个被管设备中驻留有 网络管理代理，运行在被管设备中的一个进程，与管理服务器通信，在管理服务器的命令和控制下在被管设备中采取本地动作</p></li><li><p>网络管理协议，运行在被管设备和管理服务器之间，允许管理服务器查询被管设备的状态，经过代理间接地的在这些设备上采取行动。代理能够使用网络管理协议向管理服务器通知异常事件。</p></li></ul><h4 id="简单网络管理协议">简单网络管理协议</h4><p>简单网络管理协议 v2 ： SNMPv2是一个应用层协议。用于在管理服务器和代表管理服务器执行的代理之间传递网络管理控制和信息报文。最常使用：<strong>请求响应模式</strong>。也被用来代理向管理服务器发送非请求报文（陷阱报文，通知管理服务器，一个异常情况已导致MIB对象值的改变）</p><p>定义了7中类型的报文，称为 协议数据单元（PDU）</p><p>SNMP PDU经常是作为UDP数据报的载荷传输的，防止UDP数据丢失，管理服务区爱用该PDU的请求ID字段为它向代理发送的请求编号。</p><h2 id="链路层和局域网">链路层和局域网</h2><h3 id="概述-v8">概述</h3><p>节点：运行链路层协议的任何设备（主机、路由器、交换机、WiFi接入点）</p><p>链路：沿着通信路径连接相邻节点的通信信道。</p><h4 id="链路层提供的服务">链路层提供的服务</h4><p>任意一个链路层能提供的基本服务：将数据报通过单一的通信链路从一个节点移动到相邻节点</p><p>还可能包括：</p><ul><li>成帧。将网络层数据报用链路层帧封装起来，一个帧由一个数据字段和若干首部字段组成，网络层数据报就插在数据字段中。</li><li>链路接入。媒体访问控制（MAC，Medium Access Control）协议规定了帧在链路上的传输规则。协调多个节点的帧传输。</li><li>可靠交付。如果提供，则保证无差错地将链路层移动每一个网络层数据（通常通过确认和重传取得）。连链路层可靠交付服务通常用于易于产生高差错的链路，例如无线链路，其目的是在差错发生的链路上，纠正一个差错，而不是通过运输层或应用层协议迫使进行端到端的数据重传。</li><li>差错检测和纠正。帧中的一个比特 0 传输时，接收方节点中的链路层硬件可能不正确地判断为1.这种比特差错由信号衰减和电磁噪声导致的。没有必要转发一个有差错的数据报。发送方在帧中包括差错检测比特，让接收方进行差错检测。</li></ul><h4 id="在何处实现">在何处实现</h4><p><em>链路层在哪一处实现？</em></p><p>主体部分在 <strong>网络适配器</strong>（网络接口卡，<strong>NIC</strong>）中实现，位于网络适配器核心的是<strong>链路层控制器</strong>，通常是一个实现了许多链路层服务的专用芯片。</p><p>链路层控制器的许多功能都是由<strong>硬件</strong>实现的，高层功能是由软件实现。因此，链路层是硬件和软件的结合体。</p><h3 id="差错检测和纠正技术">差错检测和纠正技术</h3><p>注意这里是两个技术，差错检测 和 差错纠正</p><p>在发送节点，为了保护比特免受差错，使用差错检测和纠正比特（EDC）来增强数据D。要保护的数据不仅包括从网络层传递下俩的数据报，还包括链路帧首部中的链路级寻址信息、序号和其他字段。</p><p>接收方任务，只收到D<sup>`</sup>  和 EDC<sup>1</sup> 的情况下，确定D是否和初始数据D相同，但该技术还是可能有<strong>未检出比特差错</strong>！</p><p>因此要选择一个差错检测方案，使得这种事件发生的概率非常小。（开销和概率的权衡）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210927111505369.png" alt="image-20210927111505369"></p><h4 id="奇偶校验">奇偶校验</h4><p><strong>单个奇偶校验</strong></p><p>偶校验，发送方包含一个附加的比特，使得数据中1的总数总是偶数。</p><p>二维奇偶校验：接收方可以检测到出现单个比特差错的事实，并且还可以利用存在奇偶校验差错的列和行的索引来实际识别发生差错的比特并纠正它。能够检测（但无法纠正）[是这样的]   一个分组中两个比特差错的任何分组。</p><p>前向纠错（FEC）： 接收方检测和纠正差错的能力，通常用于音频CD这样的音频存储和回放设备中。FEC允许在接收方立即纠正差错，避免了不得不等待的往返时延</p><h4 id="检验和方法">检验和方法</h4><p>注意是       检验和 方法  而不是   检验 和 方法</p><p><strong>因特网检验和</strong>：将k比特整数加起来，得到的和的反码作为差错检测比特。接收方通过对接收数据包括检验和的和取反码，并且检测结果是否全为1比特来检测检验和。</p><h4 id="循环冗余检测">循环冗余检测</h4><p>如今计网中广泛采用：<strong>循环冗余检测</strong>（CRC，Cyclic Redundancy Check），也叫<strong>多项式编码</strong>。</p><p>发送方和接收方首先协商一个r + 1比特模式，称为生成多项式G，G的最高有效位比特是1.</p><p>对一个给定的数据段D，发送方选择r个附加比特R，附加到D上，得到d+r比特模式，用模2算术恰好能够被G整除（异或 XOR，加法中不进位，减法不借位）。</p><p>接收方用G去除接收到的d+r比特，如果余数 ！= 0，则出现了差错</p><blockquote><p>D * 2<sup>r</sup> XOR R = nG</p><p>R = remainder D*2<sup>r</sup>/G</p></blockquote><p>每个CRC标准都能检测小于r+11比特的突发错误，也能检测到任何奇数个比特差错。</p><p><a href="https://www.bilibili.com/video/BV1xJ411K7Wx?from=search&amp;seid=1083546657965979769&amp;spm_id_from=333.337.0.0">CRC具体例题演示</a></p><h3 id="多路访问链路和协议">多路访问链路和协议</h3><p>两种类型的网络链路：</p><ul><li>点对点链路，由链路一段的单个发送方和链路另一端的单个接收方组成。许多链路层协议都是为点对点链路设计的。（例如，点对点协议 PPP 和高级数据链路控制（HDLC））</li><li>广播链路，能够让多个发送方接收方都连接到相同的、单一的、共享的广播信道上，任何一个节点传输一个帧，信道广播该帧，每个节点收副本。（例如，以太网和无线局域网）</li></ul><p>如何协调多个发送和接收节点对一个共享广播信道的访问 ----- &gt; 多路访问问题（广播信道常用于局域网中）</p><p>因为所有节点都能传输帧，所以多个节点可能会同时传输帧，这种情况发生时，所有节点同时接收到多个帧，即传输的帧在所有的接收方处<strong>碰撞</strong>了。通常当碰撞发生时，没有一个接受节点能够有效获得任何传输的帧（某种意义下，帧的信号纠缠在一起），在碰撞时间间隔中的广播信道都被浪费了。协调多个节点的传输 — &gt; 多路访问协议负责。</p><p>多路访问协议的划分：</p><ul><li>信道划分协议</li><li>随机接入协议</li><li>轮流协议</li></ul><h4 id="信道划分协议">信道划分协议</h4><p>时分多路复用（TDM）和频分多路复用（FDM）是两种能够用于在所有共享信道节点之间划分广播信道带宽的技术。</p><p>一个支持N个几点的信道且传输速率为R bps</p><p><strong>TDM： 时分多路复用</strong></p><p>TDM将时间划分为时间帧，进一步划分每个时间帧为N个时隙，把每个时隙分配个N个节点中的一个。无论何时某个节点在有分组要发送的时候，它在循环的TDM帧中指派给它的时隙内传输分组比特。通常，选择的时隙长度应该使一个时隙内能传输单个分组。（类似时间片方式，每个人都有公平的发言权）</p><p>缺点：</p><ul><li>节点被限制 R/N bps的平均速率，<strong>即使他是唯一有分组要发送的节点时</strong></li><li>节点必须总是等待它在传输序列中的轮次，<strong>即使他是唯一有分组要发送的节点</strong></li></ul><p><strong>FDM：频分多路复用</strong></p><p>FDM将R bps信道划分为不同的频段，每个频段有R/N个带宽，把每个频率分配个N个节点中的一个，因此FDM在R bps信道中创建了N个较小的R/N bps信道。</p><p>优点：避免碰撞，在N个节点之间公平划分带宽。</p><p>缺点：限制一个节点只能使用R/N的带宽，<strong>即使当他是唯一一个有分组要发送的节点</strong></p><p><strong>CDMA：码分多址</strong></p><p>CDMA为每个节点分配一种不同的编码，每个节点用它唯一的编码来对他发送的数据进行编码。能够做到<strong>不同节点同时传输</strong>，并且接收方仍能正确接收发送方编码的数据比特，而不在乎其他节点的干扰传输。（目前在军用系统中使用、民用蜂窝电话也有使用抗干扰）</p><h4 id="随机接入协议">随机接入协议</h4><p>当有碰撞时，涉及碰撞的每个节点反复重发它的帧，到该帧无碰撞通过为止。但当一个节点经历一次碰撞时，它不必立刻重发该帧。相反，它在重发该帧之前的等待一个随机时延。</p><p>常用的随机接入协议：</p><ol><li><p><strong>时隙ALOHA协议</strong></p><p>要求：</p><ul><li>一个时隙等于传输一帧的时间</li><li>节点只在时隙起点传输帧</li><li>节点是同步的，每个节点都知道时隙何时开始</li><li>节点在发送时隙结束之前检测到碰撞时间</li></ul><p>如果有碰撞，则节点在发送时隙结束之前检测到这次碰撞，并且以概率p在后续的每个时隙中重传该帧，知道该帧无碰撞地传输出去。</p><p>优点：</p><ul><li>当某节点是唯一活跃的节点时，时隙ALOHA允许该节点以全速R bps连续传输。</li><li>高度分散，每个节点检测碰撞并独立地决定什么时候重传</li></ul><p>缺点：</p><ul><li>需要节点中对时隙同步</li><li>多个活跃节点，一部分时隙有碰撞被浪费掉；时隙的一部分省控线的，因为所有活跃节点由于概率传输策略会节制传输。</li></ul><p>时隙ALOHA效率是 Np（1-p）<sup>N-1</sup>, 取得最大值时， 效率37%</p></li><li><p><strong>ALOHA  by Norm Abramson</strong></p><p>当一帧首次到达，节点立刻（在完全传输完它的碰撞帧之后）以概率p重传该帧，否则节点等待一个帧传输时间，此后以概率p重传该帧。</p><p>一个给定节点传输成功的概率是 p(1-p)<sup>2(N-1)</sup>（N-1个节点在两份连续时隙内不能传输）， 最大效率是 1 / 2e  [P.297]</p></li><li><p><strong>CSMA 载波侦听多路访问</strong></p><p>ALOHA每个节点独立，不关心是否有其他节点正在传输</p><ul><li><p>载波侦听：一个节点在传输前要先听信道</p></li><li><p>碰撞检测：一个传输节点在传输时一直在侦听此信道，如果由一个节点正在传输干扰帧，则此节点就停止传输。</p><p>既然有载波侦听，为什么还需要碰撞检测？</p><p>信道端到端信道传播时延，虽然是光速传播，但未到达之前还是认为该信道是空闲的 P.299</p><p>传播时延越大，载波侦听节点不能侦听到网络中另一个节点以及开始传输的机会就越大。</p></li></ul></li><li><p><strong>CSMA/CD 具有碰撞检测的载波侦听多路访问</strong></p><p>目的，不传输一个无用的、损坏的帧，改善协议的性能</p><p>如何选择等待的时间间隔？</p><p>理想情况：碰撞节点数少 —&gt; 时间间隔短;碰撞节点数多 —&gt; 时间间隔长</p><p>问题解决： <strong>二进制指数后退</strong>算法</p><ul><li>某帧经历了一连串n次碰撞后，节点随机从0 到 2<sup>n</sup> -1 中选择一个K值，因此，碰撞越多，K选择间隙越大。能够取得的最大值在10以内</li></ul></li></ol><h4 id="轮流协议">轮流协议</h4><p>当有M个节点活跃时，每个活跃节点的吞吐量接近R / M bps (前两个协议不具有)</p><ul><li><p>轮询协议。选主节点，主节点以循环方式轮询每个节点。主节点通过观察在信道上是否缺乏信号，来决定一个节点何时完成了 帧的传输。</p><p>消除了碰撞和空时隙，但引入轮询时延，如果只有一个节点是活跃的，则该节点必然以小于R bps的速率传输；如果主节点故障在，则整个信道不可操作。</p></li><li><p>令牌传递协议。一个称为令牌(token)的小的特殊帧在节点之间以固定的次序进行交换。一个节点收到令牌时，仅当它有帧要发送时，它才会持有这个令牌，否则就向下一个节点转发该令牌。</p><p>令牌传递是分散，效率高。但一个节点的故障可能使得整个信道崩溃。如果一个节点忘记释放令牌，则需要恢复步骤。</p></li></ul><h4 id="DOCSIS：用于电缆因特网接入的链路层协议">DOCSIS：用于电缆因特网接入的链路层协议</h4><p>一个电缆接入网通常在电缆网头端将几千个住宅电缆调制解调器与一个电缆调制解调器端接系统(CMTS)连接。DOCSIS使用FDM将下行（CMTS到调制解调器）和上行（调制解调器到CMTS）网络段划分为多个频率信道。CMTS在下行信道中传输的帧被所哟有在信道上做接收的调制解调器接收，然而因为仅有单一的CMTS在下行信道传输，所以不存在多路访问问题，但上行方向，多个电缆调制解调器共享到CMTS的相同上行信道，可能出现碰撞</p><p>每条上行信道被划分为时间间隔（类似TDM），每个时间间隔包含一个微时隙序列，电缆调制解调器在微时隙中向CMTS传输。CMTS显示的允许各个电缆调制解调器在特定的微时隙中进行传输。CMTS在下行信道上通过发送MAP报文的控制报文，制定哪个电缆调制解调器能够在微时隙中传输由控制报文制定的时间间隔。由于微时隙明确分配给电缆调制解调器，故CMTS能确保在微时隙中没有碰撞传输。</p><p>CMTS一开始如何知道哪个调制解调器有数据要发送？规定一组特殊的微时隙间隔，这个间隔内都可以向CMTS发送微时隙请求帧来完成。但这些帧可能碰撞。如何解决？电缆调制解调器如果没有在下一个下行控制报文中收到对请求分配的响应，就推测出有碰撞，使用二进制指数回退将微时隙的请求帧延缓到以后的时隙发送       P. 302</p><h3 id="交换局域网">交换局域网</h3><h4 id="链路层寻址和ARP">链路层寻址和ARP</h4><h5 id="MAC地址">MAC地址</h5><p>再次强调，不是主机或者路由器具有链路层地址，而是他们的适配器（即网络接口）具有链路层地址。但链路层交换机不具有与他们的接口相关联的链路层地址，因为链路层交换机的任务是在主机和路由器之间承载数据报，它透明底执行了这项任务，主机或路由器不必明确第将帧寻址到其间的交换机。</p><p>链路层地址不同的称呼：</p><p><strong>LAN 地址、物理地址、MAC地址</strong></p><p>MAC地址长度为6字节，2^48个可用MAC地址，常用十六机制表示，MAC地址被设计为是固定的。</p><p><strong>没有两块适配器具有相同的MAC地址</strong></p><p>MAC扁平结构，IP地址具有层次结构（一个网路部分和一个主机部分），两者相反。</p><p>一个适配器可能接收到一个并非向它寻址的帧，不匹配，就会赌气，而不是向上传递网络层数据包。但是，有时适配器的确需要让所有其他适配器拉埃接收并处理他打算发送的帧，这种情况下，发送适配在帧的目的地址字段中插入一个特殊的MAC广播地址，FF-FF-FF-FF-FF</p><h5 id="地址解析协议">地址解析协议</h5><p>Address Resolution Protocol， ARP ：IP  ---- &gt;  ARP</p><p>场景：一个子网中的主机要向相同子网的另一台主机发送数据报</p><p><strong>只为在同一个子网上的主机和路由器接口解析IP地址</strong></p><p>每台主机或路由器中有一个ARP表，包含IP地址到MAC地址的映射关系，也包含了寿命TTL值（指示从表中删除每个映射的时间，通常是20min）</p><p>发送方构造一个ARP packet的特殊分组，包含字段（发送、接收的IP地址和MAC地址）。又可分为ARP查询分组和响应分组，格式均相同。查询分组的目的是询问子网上所有其他主机和路由器，确定对应于要解析的IP地址的那个MAC地址</p><p>过程举例：</p><ul><li>一个主机向它的适配器传递一个ARP查询分组，并且指示适配器应该用MAC广播地址来发送这个分组</li><li>适配器在链路层帧中封装这个ARP分组，用广播地址作为帧的目的地址，将该帧传输到子网中。</li><li>子网中的所有其他适配器都接收到，并且每个适配器把在该帧中的ARP分组<strong>向上传递给ARP模块</strong></li><li>ARP模块检查它的IP地址与ARP分组中的目的IP地址是否匹配，匹配 --&gt; 给查询主机发送一个带有所希望映射的ARP分组。</li><li>查询主机更新它的ARP表，并发送IP数据报，该数据报封装在链路层帧中，并且该帧的目的MAC就是对先前的ARP请求进行响应的主机或路由器的MAC地址（？？？）</li></ul><p>ARP可看成是跨越链路层和网络层边界两边的协议。</p><h5 id="发送数据报到子网以外">发送数据报到子网以外</h5><p>场景：子网的主机要向子网以外的（另一个子网中）主机发送网络层数据报</p><p>注意点：路由器的每个接口，都有一个IP地址、一个ARP模块和一个适配器，适配器有自己的MAC地址</p><p>主机---- &gt; 路由器在子网1的接口  ----- &gt; 路由器在子网2的接口   ------&gt; 目的主机</p><p><em><strong>如何确定目的主机不在子网中，从而将这个帧发送给路由器？</strong></em></p><p><em><strong>ARP表项在TTL内IP地址过期怎么办</strong></em></p><h4 id="以太网">以太网</h4><p>Ethernet，由Xerox、Intel和Dec公司联合开发的基带总线局域网规范。使用CSMA/CD（载波监听多路访问及冲突避免技术）</p><ul><li>目前最流行的<strong>有线局域网技术</strong>（即局域网采用的通信协议），非常的重要（造价低廉（网卡不到100mb）、组网更简单）</li><li>第一个广泛部署的高速局域网</li><li>无连接、不可靠、尽最大努力交付；只实现差错接收，不实现可靠传输（差错帧直接丢弃）</li><li>针对物理层、链路层</li></ul><p>by Bob Metcalfe 和 David Boggs 20世纪70年代中期发明初始的以局域网，使用同轴电缆总线来互联节点。以太网的总线拓扑从80年代到90年代基本不变，使用总线拓扑的以太网是一种广播局域网，所有传输的帧传送到与该总线连接的所有适配器并被处理。</p><p>90年代后期，大多公司和大学使用基于集线器的星形拓扑以太网替代局域网。这种结构中，主机和路由器直接用双绞对铜线与一台集线器项链。集线器是物理层设备，作用于各个比特。当0、1比特到达一个接口时，集线器只是重新生成这个比特，将能量强度放大，并将该比特向所有其他接口传输出去。因此，采用基于集线器的星形拓扑的以太网也是一个广播局域网。同时，如果集线器同时从两个不同接口接收到帧，也会产生碰撞，需要重新传输。</p><p>21世纪初，集线器被交换机替代，交互机是无碰撞的，运行在第二层（路由器在第三层）。</p><h5 id="以太网帧结构">以太网帧结构</h5><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211004102312226.png" alt="image-20211004102312226"></p><p>场景：一台主机向另一台相同以太局域网上的主机发送一个IP数据报</p><ul><li>数据字段（46–1500字节）。承载IP数据报，以太网的最大传输单元MTU是1500字节（过大就被分片），最小长度是46字节（过小会被填充），过小时，网络层使用IP数据报首部的长度字段来去除填充部分</li><li>目的地址（6字节）。包含目的适配器的MAC地址，当适配器收到一个以太网帧，无论是自身MAC地址还是MAC广播地址，它都将该帧的数据字段的内容传递给网络层，如果收到其他MAC的帧，则丢弃</li><li>源地址（6字节）。</li><li>类型字段（2字节）允许以太网复用多种网络层协议，主机能够使用除了IP以外的其他网络层协议。即适配器收到以太网帧时，适配器将它应该将数据字段的内容传递到的那个网络层协议对应。</li><li>CRC（4字节）。使得接受适配器检测，帧中是否出现了差错</li><li>前同步码（8字节）。以太网帧以一个8字节的前同步码字段开始，前7字节的值都是10101010，最后一个字节是10101011.前7字节用途是唤醒 接收适配器，并将他们的时钟和发送方的时钟同步。（为什么有时钟不同步现象？以太局域网类型不同，由10Mbps、100Mbps、1Gbps的速率传输帧）。但发送方适配器不会以精确的额定速率传输帧，相对于额定速率肯定有偏差，接收适配器只需要通过锁定前同步码的前7字节的比特，就能够锁定适配器A的时钟，第8字节的最后两个比特 1 1，<strong>警告</strong>适配器B，数据即将到来。</li></ul><p><strong>特点</strong></p><ul><li>所有的以太网计数都向网络层提供无连接服务（不需握手）</li><li>以太网技术向网络层提供不可靠服务：适配器收到帧，执行CRC校验，但该帧通过CRC校验时，它既不发送确认帧，没有通过CRC校验也不发送否定帧，仅仅丢弃该帧。</li><li>由于丢弃了以太网使得传递到网络层的数据报流有间隙，主机B上的应用能看到这个问题码？取决于上层协议（UDP、TCP）</li></ul><h5 id="以太网技术">以太网技术</h5><p>不同协议</p><p><strong>历史</strong></p><p>早期10BASE-2和10BASE-5标准规定了两种类型的同轴电缆之上的 10Mbps的以太网，没种标准都限制在500米长度以内。通过转发器（物理设备，在输入端接收信号并且在输出端再生信号），能够得到更长的运行距离。一个接口传输的所有帧可在其他接口收到，并且以太网的CSMA/CD协议解决了多路访问问题。节点直接附着在电缆上。</p><p>如今，节点经过点对点的由双绞铜线或光纤电缆构成的线段与一台交换机相连。</p><p>90年代中期，以太网被标准化为100Mbps，更高速率的物理层被定义为用铜线(100BASE-T)和光纤（100BASE-FX、100BASE-SX、100BASE-BX）。用双绞铜线距离限制为100m，光纤距离限制为几千米，允许把不同建筑物中的以太网交换机连接起来。</p><p>吉比特以太网是对极为成功的10Mbps和100Mbps以太网标准的扩展。40Gbps以以太网提供40000Mbps总数据速率。吉比特以太网标准为IEEE 802.3z，完成以下工作：</p><ul><li>标准以太网帧格式，并且向后兼容10BASE-T与100BASE-T</li><li>允许点对点链路以及共享的广播信道，点对点链路使用交换机，广播信道使用集线器（“带缓存的分配器”）</li><li>使用CSMA/CD来共享广播信道</li></ul><p>吉比特以太网最初作用与光纤之上，现在能够在5类UTP线缆上。</p><p>在总线拓扑和基于集线器的星形拓扑年代，以台湾网购是一种广播链路， 会出现碰撞的问题，为了处理这些问题，使用CSMA/CD协议，对跨越一个小的地理半径的有线广播局域网非常有效。但如今使用的是以太网基于交换机的星形拓扑，采用存储转发分组交换，是否还需要一种以太网MAC协议？【不会。交换机协调传输，在任何时候不会向相同的接口转发超过一个 的帧，且现代交换机是全双工，使得一台交换机和一个节点在同时向对方发送帧而没有干扰】</p><h5 id="链路层交换机">链路层交换机</h5><p>交换机对于子网中的主机和路由器是透明的</p><ol><li><p><strong>交换机的转发和过滤</strong></p><p>转发：决定一个帧应该被导向到哪个接口，并把该帧移动到哪些接口的交换机功能</p><p>过滤：决定一个帧应该转发到某个接口还是应当将其丢弃的交换机功能</p><p>转发和过滤借助于交换机表完成，包含：</p><ul><li>一个MAC地址</li><li>通向该MAC地址的交换机接口</li><li>表项防止在表中的时间</li></ul><p>P.313 三种情况：相同局域网（过滤）、表中查不到（广播）、表中有不同接口的表项（转发）</p><p>但一开始交换机表是如何配置的？</p></li><li><p><strong>自学习</strong></p><p>交互机的表是自动、动态和自治建立的，没有来自网络管理员或任何配置协议的任何干预。</p><ul><li>交换机表初始为空</li><li>在每个接口接收到的每个入帧，交互机在表中能够存储：<ol><li>该帧源地址字段中的MAC地址</li><li>帧到达的接口</li><li>当前时间</li></ol></li><li>如果在一段时间（老化期）后，交换机没有接收到以该地址作为源地址的帧， 就在表中删除这个地址。</li></ul><p>交换机是<strong>即插即用</strong>设备</p></li><li><p><strong>链路层交换机的性质</strong></p><p>不同于总线拓扑和基于集线器的星形拓扑那样的广播链路：</p><ul><li>消除碰撞。使用交换机构建的局域网中，没有因碰撞而构成的带宽，交换机缓存帧不会在网段上同时传输多于一个帧。交换机的最大聚合带宽是交换机所有接口速率之和，性能更高</li><li>异质的链路。交换机将链路彼此隔离，局域网中不同链路能够以不同的 速率运行并在不同的媒体上运行</li><li>管理。交换机能检测得到适配器异常工作情况（持续发送帧），在内部会断开 异常适配器。交换机也收集带宽使用的 统计数据、碰撞率等数据。。</li></ul><p>对抗交换机：交换机毒化。向交换机发送大量的具有不同伪造源MAC地址的分组，伪造表项填满了交换机表，没有为合法的主机留下空间。</p></li><li><p>交换机和路由器比较</p><p>交换机：第二层分组交换机，使用MAC地址转发分组</p><p>路由器：第三层分组交换机，使用网络层地址转发分组</p><p>各自优缺点：</p><p><strong>TODO</strong></p><p>什么时候使用什么机器？</p><p>几百台主机组成的小网络      -------- 交换机（因为不要求IP地址的任何配置就能使得流量局部化并且增加总计吞吐量）</p><p>几千台主机组成的更大网络   -----交换机+路由器，路由器提供更健壮的流量隔离方式和对广播风暴的控制。</p></li></ol><h5 id="虚拟局域网">虚拟局域网</h5><p>以上网络结构的缺点：</p><ul><li>缺乏流量隔离。尽管组流量被局域化到一个单一的交换机中，但广播流量（例如ARP和DHCP报文或那些目的地还没有被交换机学习到的帧）仍然需要跨越整个机构网络，又是可能为了隐私的目的需要限制局域网广播的流量</li><li>交换机的无效使用。如果该机构有许多个组，则每个组都必须有一个一级交换机，但每个组人数少，则单台96端口的的交换机就够了，但并不能提供流量隔离</li><li>管理用户 ，如果一个雇员在不同组件移动，必须改变物理布线，将该雇员连接到不同的交互机上</li></ul><p>解决方案：<strong>虚拟局域网</strong>（VLAN）</p><p>支持VLAN的交互及允许经过一个单一的物理局域网的基础设施定义多个VLAN，在一个VLAN内的主机彼此通信。在一个基于端口的VLAN中，交换机的端口由管理员划分为组。每个组构成一个VLAN，每个VLAN中的端口形成一个广播域（即来自一个端口的广播流量仅能到达该组中的其他端口）。</p><p>只需要在交换机中维护一张端口到VLAN的映射表，交换机软件仅在属于相同VLAN的端口之间交付帧</p><p><em>但，不同的VLAN中的主机如何交互？</em></p><p>一种方式：VLAN交换机的一个端口与一台外部路由器相连。路由器的端口配置为想交互的几个主机。路由器等于做了一个中间人。</p><p><em>多台交换机 如何互联？</em></p><p>VLAN干线连接，每个交换机上有一个特殊端口被配置为干线端口，这个端口不属于某一个VLLAN，而属于所有的VLAN，发送到任何vLAN的帧必须要经过干线链路转发到其他交换机。</p><p><em>交换机怎么知道到达干线端口的帧属于某个特定的VLAN？</em></p><p>IEEE定义了一种扩展到达以太网帧格式：802.1Q，跨越 VLAN干线的帧。标准的以太网帧 + 加进首部的4字节VLAN标签，VLAN标签承载着该帧所属的 VLAN标识符。VLAN tag由在VLAN干线发送侧的交换机加进帧中，解析后并由在VLAN干线接收方的交换机删除。</p><p>VLAN tag：</p><ul><li>一个2字节的标签协议标识符（Tag Protocol Identifier ,TYID）字段（具有固定的十六进制值）</li><li>一个2字节的标签控制信息字段（包含一个12bit的VLAN标识字段）</li><li>一个3比特的优先权字段（类似IP数据报TOS字段）</li></ul><p>VLAN可以基于端口也可以结余MAC地址、网络层协议等进行定义。</p><h3 id="链路虚拟化：网络层作为链路层">链路虚拟化：网络层作为链路层</h3><p>连接两台主机的链路是电话网，由自己的用于数据传输和信令的交换机、链路和协议栈。然而，从链路层 的观点看，通过电话网的拨号连接被看做成是一根简单的线路。这个意义上，因特网虚化了电话网，将其看成是两台因特网主机之间提供链路层连接的链路层技术。</p><h4 id="MPLS">MPLS</h4><p><strong>多协议标签交换</strong> ： 改善IP路由器的转发速度。固定长度标签。</p><p>目标：对于基于固定长度标签和虚电路的技术，在不放弃基于目的地IP数据报转发的基础设施的前提下，当可能时通过选择性地标识数据报并允许路由器基于固定长度的标签转发数据报来增强其功能。（该技术与IP协同工作，使用IP寻址和路由选择）</p><p>MPLS首部，位于第二层首部和第三层首部之间。</p><p>字段：标签；预留的3bit实验字段；1bit S字段，用于指示一些列成栈的MPLS首部的结束；寿命字段</p><p>一个MPLS使能的路由器常被称为<strong>标签交换路由器</strong></p><p>一个MPLS加强的帧仅能在两个均为标签交换路由器之间转发（普通的路由器识别不了MPLS首部），在转发表中查找MPLS标签，立即将数据报传递给适当的输出接口来转发MPLS帧。因此，标签交换路由器不需要提取目的IP地址和在转发表中执行最长前缀匹配的查找。<em>路由器如何知道它的邻居是否是标签交换路由器？</em></p><p>MPLS基于标签执行交换，使得路由器不接触IP首部，然而其真正的优点并不在于交换速度的潜在增加。而是MPLS使能的新的<strong>流量管理能力</strong>。MPLS提供了沿着多条路由转发分组的功能，但如果使用IP标准路由协议这些路由将是不可能的 --------- <strong>流量工程</strong>，网络运行着能够超越普通的IP路由选择，迫使某些流量沿着一条路径朝着给定的目的地引导。</p><p>MPLS还可被用于实现<strong>虚拟专用网</strong>（VPN），在为用户实现一个VPNR的过程中，ISR使用它的MPLS使能网络将用户的各种网络连接在一起，MPLS将资源和由用户的VPN所使用欧冠的寻址方式相隔离，其他用户利用该VPN跨越该ISP网络</p><h3 id="数据中心网络">数据中心网络</h3><p>数据网络中心内部主机彼此互联并且与因特网中的数据互联。</p><p>数据中心中的主机被称为 刀片，一般是包括CPU、内存和磁盘存储的商用主机，每20-40个主机叠放在机架上，每个机架顶部有一台交换机（机架顶部交换机，TOR交换机，Top Of Rack），与机架上的主机互联，并与数据中心中的其他交换机互联。[也就是说，每台机架上的每台主机都有一块与TOR交换机连接的网卡，每台TOR交换机有额外的端口能够与其他TOR交换机连接]</p><p>数据中心网络支持两种类型的流量：</p><ul><li><p>在外部客户与内部主机之间流动的流量</p><p>数据中心网络包括了 一台或者多台<strong>边界路由器</strong>，将数据中心网络与公共因特网相连.数据中心网络因此需要所有机架彼此互联，将机架与边界路由器连接。</p></li><li><p>内部主机之间流动的流量</p></li></ul><h4 id="1-负载均衡">1. 负载均衡</h4><p>数据中心内部 ，外部请求首先被定向到一个负载均衡器，（任务：向这个用户分发请求，以主机当前的负载作为函数来在主机之间均衡负载），一个大型的数据中心通常有几台均衡负载器，每台服务于一组特定的云应用。</p><p>负载均衡器基于分组的目的端口号以及目的IP地址做决策，所以经常被称为<strong>第四层交换机</strong></p><p>外部请求 ----&gt; 负载均衡器 ----&gt; 特定处理主机 ----&gt;处理完成后 ----&gt; 回送响应给负载均衡器 ----&gt; 负载均衡器中继发送回外部客户。</p><p>还提供NAT类似功能，将外部IP地址转换为合适的内部主机IP地址，防止客户直接接触主机。</p><h4 id="2-等级体系结构">2. 等级体系结构</h4><p>数千台主机的小型数据中心，一台边界路由器、一台负载均衡器、几十个机架、单一以太网交换机就ok。但主机规模扩增到几万、十几万怎么办？</p><p>数据中心应用<strong>路由器和交换机等级结构</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211002150129091.png" alt="image-20211002150129091"></p><ul><li>每太第一层交换机与多台第二层交换机和一台负载均衡器相连。</li><li>每台第二层交换机通过多个机架的TOR交换机（第三层交换机）与多个机架相连</li></ul><p>问题：存在主机到主机容量受限制的问题 P.324</p><h4 id="3-数据中心网络的发展趋势">3. 数据中心网络的发展趋势</h4><p>为降低数据中心的费用，同时提高在时延和吞吐量上的性能的方案</p><p>部署能够客服传统等级设计缺陷的新型互联体系结构和网络协议的两种方法</p><p><strong>1. 全连接拓扑</strong></p><p>替代交换机和路由器的等级结构</p><p>每台第一层交换机都与<strong>所有</strong>的第二层交换机相连</p><ul><li>主机到主机的流量绝不会超过交换机层次</li><li>对于n太第一层交换机，在任意两台二层交换机之间有n条不向交的路径</li><li>显著改善主机到主机之间的容量。（可以走的路变多了）</li></ul><p><strong>2. 模块化数据中心（MDC）</strong></p><p>每个集装箱由数千台主机、堆放在数十台机架上，紧密排列，数据中心位置，多个集装箱彼此互联，也和因特网连接。但通常集装箱难以检修，当组件出现故障时，集装箱继续运行但性能下降。当许多组件出现故障并且性能过低时，将会替换。</p><h3 id="回顾：Web页面请求过程">回顾：Web页面请求过程</h3><p>一定回顾看书上的举例，十分的全面 P.329</p><h2 id="无线网络和移动网络">无线网络和移动网络</h2><h3 id="概述-v9">概述</h3><p>无线主机：便携机、掌上机、智能手机…</p><p>无线链路：主机通过无线通信链路连接到一个基站或者另一台无线主机，不同的无限连路技术具有不同的传输速率、能够传输不同的距离</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211002153624811.png" alt="image-20211002153624811"></p><p>基站：无线网络基础设施，负责向与之关联的无线主机发送数据、并从主机接收数据。通常负责协调与之相关联的多个无线主机的传输。</p><p>一台无线主机与某基站相关联：</p><ul><li>主机位于基站的无线通信覆盖范围内。</li><li>主机使用基站中继它和更大网络之间的数据。</li><li>eg(蜂窝塔，无线LAN的接入点)</li></ul><p>“跳”的概念解释</p><ul><li><p>单跳：基于基础设施，这些网络具有与较大有限网络（因特网）连接的基站。该基站与无线主机之间的所有通信都经过一个无限跳。日常的网络连接基本都是这样的。</p></li><li><p>单挑，无基础设施。在这些网络中，不存在与无线网络相连接的基站。这种单跳网络中的一个节点可以协调其他节点传输（蓝牙、头戴耳机之类的无线设备…）</p></li><li><p>多跳，基于基础设施。一个基站表现为以有线方式与较大网络相连接。某些无线节点为了经过该基站通信，不得不通过其他无线节点中继他们的通信。（无线网状网络、无线传感网络）</p></li><li><p>多跳，无基础设施。网络中没有基站，节点为了到达目的地可能必须在几个其他无线节点中间中继报文，节点也是可移动的，多个几点中改变连接关系，被称为移动自组织网络(MANET)。如果该移动节点是车载的，被称为车载自组织网络(VANET)</p></li></ul><p>无线网络的分类：</p><ul><li>该无线网络中的分组是否跨越了一个无线跳或多个无线跳</li><li>网络中是否由诸如基站这样的基础设施</li></ul><h3 id="无线链路和网络特征">无线链路和网络特征</h3><p>无线链路和有线链路的区别：</p><ul><li>递减的信号强度。电磁波穿过物体时强度减弱。信号强度随着发送、接收方之间的距离增加而减弱 ----&gt; 路径损耗</li><li>来自其他源的干扰。同一个频段发送信号的点播源将相互干扰。例如，802.11b无线LAN用户同时利用2.4GHz无线电话通信，将导致网络和电话都不会工作的很好。</li><li>多径传播。电磁波的一部分受反射影响， 可能分成多个部分，从不同路径传播，使得接收方接收的信号变得模糊。</li></ul><p>因此，无线链路的比特差错更为明显，无线链路协议除了采用CRC错误检测吗，还采用<strong>链路层ARQ协议</strong>来重传受损的帧。</p><p>信噪比（SNR）：接收主机收到的信号和噪声强度的相对测量，单位dB<br>比特差错率（BER）：接收方接收到有错误传输比特的概率</p><p><strong>特征：</strong></p><ul><li>对于给定的调制方案，SNR越高- --BER越低。发送方能够 通过它的传输功率增加SNR一次来降低接收到差错帧的速率。</li><li>给定的SNR，具有较高比特传输率的调制技术，将具有较高的BER。</li><li>物理层调制技术的动态选择能用于适配对信道条件的调制技术。SNR可能由于环境的改变而改变，蜂窝数据、802.11WiFi和4G蜂窝网络使用了自适应调制和编码。</li></ul><p><strong>隐蔽终端问题</strong>        P.343</p><p><strong>CDMA</strong></p><p>不同主机使用一个共享媒体通信，需要一个协议来保证多个发送方发送的信号不在接收方相互干扰。回顾第六章，三类媒体访问协议。</p><p><strong>码多分址</strong>（Code Division Multiple Access ，<strong>CDMA</strong>），属于信道划分协议，在无线LAN和蜂窝技术中应用广泛。</p><p>码片速率：要发送的每个比特都通过 x 一个信号的比特来进行编码，指的是这个信号的变化速率。它比初始数据比特序列的变化速率快得多。</p><p>概念：</p><p>内积、正交、复用、多址</p><p><a href="https://www.bilibili.com/video/av70564273">湖科大—静态划分信道</a></p><h3 id="WiFi-802-11无线LAN">WiFi:802.11无线LAN</h3><p>IEEE 802.11无线LAN -----&gt; WiFi</p><p>不同的WiFi标准都具有某些共同的特征，使用相同的媒体访问协议CSMA/CA;链路层使用相同的帧结构;能够减少其传输速率以扩展到更远的距离;</p><p>802.11设备工作在两个不同频段上：</p><ul><li>2.4 ~ 2.485GHz，无需执照</li><li>5.1 ~ 5.8GHz，给定的功率等级下有更短的传输距离，并且受多径传播的影响更多。</li></ul><p><a href="https://blog.csdn.net/weixin_34297300/article/details/92311889">IEEE802.11标准</a></p><h4 id="802-11体系结构">802.11体系结构</h4><p>基本构建模块：基本服务集（Basic Service Set，BSS），一个BSS包含一个或者多个无线站点和一个接入点（Access Point，AP）【也叫中央基站】</p><p>每个802.11无线站点都具有一个6字节的MAC地址，该地址存储在该站适配器（802.11网络接口卡）的固件中。每个AP的无线接口也有一个MAC地址。</p><p>基础设施无线LAN：配置AP的无线LAN（基础设施，指AP连同互联AP和一台路由器的有线以太网）。</p><p><strong>信道与关联</strong></p><p>802.11中每个无线站点在能够发送或者接收网络层数据前，都要与一个AP相关联</p><p>网络管理员安装AP时，便为该接入点分配了一个单字或者双字的服务集标识符（Service Set Identifier ，SSID），还会分配一个信道号</p><p>WiFi丛林：是任意物理位置，在这里无线站点能从两个或者多个AP中收到很强的信号</p><p>为了加入其中的一个子网，客户的无线站点必须要与其中的一个AP关联。关联意味着无线站点在自身和AP之间创建一个虚拟线路。仅有关联的AP才向你的无线站点发送数据帧，并且 你的无线站点也通过该关联AP向因特网发送数据帧。</p><p><em>无线站点如何与特定AP关联？</em></p><p>802.11要求每个AP周期性发送<strong>信标帧</strong>，每个信标帧包括AP的SSID和MAC地址。无线站点为了得知正在发送信标帧的AP，扫描11个信道，找到可能位于该区域的AP，选择一个可用AP并关联。（又有关联请求帧和关联响应帧）</p><p>被动扫描：扫描信道和监听信标帧的过程<br>主动扫描：通过向位于无线主机范围内的所有AP广播探测帧完成。（AP用一个探测响应帧回应探测请求帧）</p><p>一旦与一个AP关联，主机将向通过关联的AP向子网发送一个DHCP发现报文，获取在该AP子网中的一个IP地址。</p><h4 id="802-11-MAC协议">802.11 MAC协议</h4><p>许多无线设备或者AP自身希望同时经过相同信道传输数据帧 ---- &gt; 需要多路访问协议来协调传输。</p><p>站点：无线设备和AP，共享多个接入信道。</p><p>带碰撞避免的CSMA（CSMA/CA），属于随机访问协议</p><p><em>以太网和802.11MAC协议的区别？</em></p><ul><li><p>未实现碰撞检测，而是碰撞避免</p><p>原因：</p><ul><li>检测碰撞的能力要求站点具有同时发送和接收的能力。在802.11适配器上，接收信号的强度远小于发送信号的强度，制造具有检测碰撞能力的硬件代价较大、成本较高。</li><li>即使适配器可以接收和发送同时进行，但也会由于隐藏终端问题和衰减问题而无法检测到所有的碰撞</li></ul><p>由于不适用碰撞检测，所以一旦站点开始发送一个帧，他就完全的发送该帧。</p></li><li><p>使用链路层确认 / 重传协议</p><p>无线LAN中某站点发送一个帧，可能不会无损地到达目的站点 -----&gt;链路层确认。</p><p>目的站点在收到一个CRC校验的帧后，等待一个<strong>短帧间间隔</strong>（SIFS），然后发回一个确认帧。如果发送站点在给定时间内未收到确认帧，则假定出现了错误，并重传该帧。若在若干固定次重传后仍未收到确认，发送站点将放弃发送并丢弃该帧。</p></li></ul><p>CSMA/CA协议过程：</p><ol><li>一个站点有帧要发送</li><li>站点最初监听到信道空闲，则将在一个被称为<strong>分布式帧间间隔</strong>（DIFS）的短时间段后发送该帧</li><li>不空闲，则站点选取一个随机回退值，并在侦听信道空闲时递减该值。</li><li>计数值为0时，该站点发送整个数据帧</li><li>收到确认，如果还要发送另一帧，回到第二步。未收到确认，发送站点将重新进入第二步中的回退阶段，从一个更大的范围选择随机值</li></ol><p><strong>1. 处理隐藏终端：RTS和CTS</strong></p><p>背景：两个无线站点之间是隐藏的，但对AP不隐藏 （覆盖范围和衰减问题）</p><p>导致的问题：A站点向AP传输一个帧，中途B站点也要向AP传输一个帧，但B听不到来自A的传输，将会导致碰撞。</p><p>问题解决：802.11允许站点使用一个短<strong>请求发送</strong>(Request - To -Send ,RTS)控制帧和一个短<strong>允许发送</strong>（Clear To Send，CTS）控制帧来<strong>预约</strong>对信道的访问。</p><p>发送方要发送DATA帧时，先向AP发送RTS帧，指示传输DATA帧和确认ACK帧需要的总时间。AP收到后，将广播一个CTS帧作为响应。广播CTS帧作用：（给指定发送方明确的发送许可；指示其他站点在预约期内不可发送）</p><p>缺点：引入了时延、消耗了信道资源。RTS/CTS仅用做长数据帧预约信道。</p><p><strong>2. 使用802.11作为一个点对点链路</strong></p><p>两个节点都具有定向天线，则可以将天线指向对方，在一个点对点链路上运行802.11协议</p><h4 id="802-11帧">802.11帧</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211004102532916.png" alt="image-20211004102532916"></p><ul><li><p>有效载荷与CRC字段：有效载荷通常由IP数据报或者ARP分组组成，最大允许长度为2312字节（通常&lt;1500），包含CRC校验</p></li><li><p><strong>地址字段</strong>：4个地址字段，每一个都可以包含一个6字节的MAC地址。为啥需要4个？</p><p>互联目的需要3个地址字段。网络层数据报从一个无线站点通过一个AP到一台路由器接口。</p><p>当AP在自组织模式中相互转发时使用第四个地址</p><ul><li>地址1：接收该帧的无线站点的MAC地址。</li><li>地址2：传输该帧的站点的MAC地址。</li><li>地址3：与AP相连且与AP连接的路由器接口的MAC地址。在BSS和有线局域网的互联中有关键的作用（理解地址3, P.354）</li></ul><p>注意点：当AP与直接相连的路由器接口传输帧时，有802.3的以太网帧 ------ 802.11帧之间的相互转化</p></li><li><p>序号、持续期和帧控制字段：</p><p>回忆rdt2.1，使用序号可以使接收方区分新传输的帧和以前的帧重传</p><p>持续期，RTS、CTS中的预约时间，包括传输数据帧的时间和传输确认的时间</p><p>帧控制有许多字段，类型和子类型字段用于区分关、RTS、CTS、ACK和数据帧；To和From字段用于定义不同地址字段的含义（含义会随着使用自组织模式或者基础设施模式而改变；基础设施模式时，也会随着是无线站点还是AP在发送帧而变化）；WEP字段指示了是否使用加密</p></li></ul><h4 id="在相同的IP子网中的移动性">在相同的IP子网中的移动性</h4><p>为增加无线LAN的物理范围，同一个IP子网中会部署多个BSS。</p><p><em>无线站点如何在维持进行中的TCP会话的情况下，无缝地从一个BSS移动到另一个</em></p><p>**互联设备不是路由器，则两个BSS中的所有站点都属于同一个IP子网。**如果是路由器，则站点必须在它移动进入的子网中获得一个新的地址（这种地址变化会打断该站点的任何TCP连接）。P.355</p><h4 id="802-11中的高级特色、">802.11中的高级特色、</h4><p>不一定所有协议都实现</p><ol><li><p><strong>速率适应</strong></p><p>自是一个根据当前和近期信道特点来选择物理层调制技术。与TCP拥塞控制类似</p></li><li><p><strong>功率管理</strong></p><p>一个节点能够明显地在睡眠和唤醒状态之间交替。节点能够向AP指示它将要睡眠，AP计划发送它的信标帧在节点刚好唤醒后。</p></li></ol><h4 id="个人域网络：蓝牙和ZigBee">个人域网络：蓝牙和ZigBee</h4><ol><li><p><strong>蓝牙</strong></p><p>IEEE 802.15.1 网络以低功率和低成本在小范围内允许，本质是一个低功率、低速率的电缆替代技术。</p><ul><li>被称为“<strong>无线个人域网络</strong>”（WPAN）</li><li>以TDM方式工作在2.4GHz无线电波段，每个时隙为625us。每个时隙内，发送方利用79个信道中的一个进行传输，同时从时隙到时隙以一个已知的伪随机方式变更信道（<strong>跳频扩展频谱，FHSS</strong>的信道跳动方式将传输及时扩展到整个频谱）。能提供4Mbps的数据率</li><li>自组织网络，受限设备要组织成一个多达8个活动设备的皮可网（piconet），有一个主设备。主设备真正控制piconet，它的湿疹确定了piconet的时间，可以在奇数时隙中欧冠发送，而从设备仅当主设备在前一时隙与其通信后才可发送，并且只能发送给主设备。除了从设备，网络中还可以有255个寄放设备，当设备被主节点转换为活动状态后才可以通信。</li></ul></li><li><p><strong>ZigBee</strong></p><p>第二个人域网络。802.14.5；低功率、低数据率、低工作周期（适用于家庭温度、光线传感器等） 20kbps、40kbps、100、250kbps的信道速率</p><p>一个全功能设备作为主设备。多个全功能设备能够配置为一个网状网络</p></li></ol><h3 id="蜂窝因特网接入">蜂窝因特网接入</h3><p>GSM：全球移动通信系统（Groupe Special Mobile）</p><p>UMTS: 通信移动通信服务（UMTS）</p><p>第一代：模拟FDMA系统，专门用于语音通信。几乎完全被2G替代</p><h4 id="2G蜂窝网体系结构：语音和电话网连接">2G蜂窝网体系结构：语音和电话网连接</h4><p>蜂窝：一个蜂窝网覆盖的区域被分成许多小区(cell)的地理覆盖区域<br>其中每个小区有一个<strong>收发基站</strong>(Base Transceiver Station ,BTS)，负责向位于小区内的移动站点发送、接收信号。</p><p>2GG蜂窝系统的GSM标准对空中接口使用组合的FDM/TDM，由200kHz的频带组成，每个频带支持8个TDM呼叫。GSM以13kbps和12.2kbps速率编码</p><p>基站控制器（BSC）：通常服务与几十个收发基站，为移动用户分配BTS无线信道，执行<strong>寻呼</strong>（找出某移动用户所在的小区），执行移动用户的切换。</p><p>GSM基站系统（BSS）= BSC + BSC控制的BTS</p><p>移动交换中心（Mobile sWitching Center，MSC）：用户鉴别、账号管理、呼叫建立和切换。包含多达5个的BSC，每个MSC大约有20 0000个用户，一个蜂窝提供商网络有若干个MSC，使用网关MSC的特殊MSC将提供商的蜂窝网络和更大的公共电话网相连接</p><h4 id="3G蜂窝数据网：将因特网扩展到蜂窝用户">3G蜂窝数据网：将因特网扩展到蜂窝用户</h4><p>要求手机要运行完整的TCP/IP协议栈（5层）</p><p><strong>1. 3G核心网</strong></p><p>​3G核心蜂窝数据将无线电接入网连接到公共因特网。核心网与现有蜂窝语音网（MSC）组件相协作：不触动现有的核心GSM蜂窝语音网，增加与现有蜂窝语音网平行的附加蜂窝数据功能。</p><p>3G核心网中的两类节点：</p><ul><li><p>服务通用分组无线服务支持节点（SGSN），负责向位于其连接的无线电接入网中的移动节点交付/获取 数据报。</p><p>SGSN与该区域蜂窝语音网的MSC进行交互，提供用户认证、切换，维护活跃移动节点的位置信息，执行位于无线接入网中的移动节点和GGSN之间的数据报转发。</p></li><li><p>网管GPRS支持及诶大（GGSN）【注：GPRS（General Packet Radiio Service）表示通用分组无线服务，是一种在2G网络中的早期蜂窝数据服务。】。网关作用，将多个SGSN连接到更大的因特网。GGSN是移动节点的一个数据报在进入更大因特网之前遇到的3G基础设施的最后一部分</p></li></ul><p><strong>2. 3G无线接入网：无线边缘</strong></p><p>3G无线电接入网是3G用户看见的无线第一跳网络。</p><p>无线电网控制器（RNC）通常控制几个小区的收发基站，RNC既通过MSC与电路路交换蜂窝语音网连接，又通过SGSN与分组交换的因特网连接。因此，尽管3G蜂窝语音服务和数据服务使用不同的核心网，但他们共享一个相同的第一/最后一跳无线电接入网。</p><p>3G UMTS在TDMA时隙中使用<strong>直接序列宽带CDMA</strong> （DS-WCDMA）技术</p><h4 id="4G：LTE">4G：LTE</h4><p><strong>1. 体系结构：一个全IP核心网</strong></p><p>4G长期演进互联网：LTE</p><p>用户：UE  分组网关：P-GW  保证服务质量（QoS）</p><p>特点：</p><ul><li>一种统一的、全IP网络体系结构。全IP：语音和数据都承载在IP数据报中。（3G网络中语音、数据流量有分离的网络组件和路径）</li><li>4G数据平面和控制平面被清晰分离。</li><li>无线电接入网与全IP核心网被清晰分离</li><li>eNodeB是2G基站和3G无线淡忘罗控制器的逻辑后代。UE数据报在eNodeB中被封装，通过4G网络的全IP强化分组（EPC）以隧道形式传输到P-GW</li><li>分组数据网络网关（Packet Data Network Gateway，P-GW），给UE分配IP地址，并且保证QoS实施</li><li>服务网关（S-GW），数据平面的移动性锚点，所有的UE流量将通过S-GW传递。S-GW也执行收费、记账功能以及法定的流量拦截</li><li>移动性管理实体（MME），代表位于它所控制单元中的UE，执行连接和移动性管理。从HHS接收UE订购信息</li><li>归属用户服务（Home Subscriber Server ，HSS）包含漫游接入能力、服务质量配置文件和鉴别信息的UE信息，HSS从UE归属蜂窝提供上得到这些信息</li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211004170036976.png" alt="image-20211004170036976"></p><p><strong>2. LET无线电接入</strong></p><p>LTE在下行信道采用FDM和TDM结合的方法 ---- 正交频分复用（OFDM）技术</p><p>每个活跃的移动节点都可以在一个或者更多个信道频率上被分配一个或多个0.5ms时隙，时隙越多，移动节点的传输速率就越高</p><h3 id="移动管理：原理">移动管理：原理</h3><p>永久归属：一个移动节点的永久居所</p><p>归属代理：归属网络中代表移动节点执行 的移动管理功能的实体。负责与外部代理交互以跟踪移动节点的COA；监视到达的数据报（这些数据报的寻址的节点归属网络与此相同，但节点在另一个外部网络中），转发给外部代理，外部代理再转给移动节点。</p><p>外部网络/被访网络：移动节点当前所在网络</p><p>外部代理：外部网络中帮助移动节点做移动管理功能的实体</p><h4 id="寻址">寻址</h4><p>外部代理放置在外部网络的边缘路由器上， 为移动节点创建一个所谓<strong>转交地址</strong>（Care Of Address ，COA），COA的网络部分与外部网络的网络部分匹配</p><p>因此一个移动节点可以和两个地址关联</p><ul><li>永久地址</li><li>COA（外部地址）</li></ul><h4 id="路由选择到移动节点">路由选择到移动节点</h4><p><strong>1. 移动节点的间接路由选择</strong></p><p><em>通信者如何给在一个网络中的懂节点发送数据报？</em></p><ul><li>移动节点到外部代理的协议。当移动节点连接到外部网络时，它向外部代理注册，离开时取消注册</li><li>外部代理到归属代理的注册协议。外部代理向<strong>归属代理</strong>注册移动节点的COA。某个移动节点离开网络时，外部代理不需要显示地注销COA，因为移动节点到新的网络时，就会注册一个新的COA（告诉该节点的归属代理，完成替换）</li><li>归属代理数据报封装协议。通信者的原始数据封装在一个目的地址为COA的数据报内</li><li>外部代理拆封协议。从封装号的 数据报中去除通信者的原始数据宝，并转发给移动节点</li></ul><p><em>移动节点如何给一个 通信者发送数据报？</em></p><p>直接发送。</p><p><em>会导致数据流中断吗？</em></p><p>只要移动节点再次连接到网络B，向归属代理注册新的COA时间少， 则几乎无丢失数据报</p><p><strong>2. 移动节点的直接路由选择</strong></p><p>间接路由问题：明明有最短路径，但走不了（必须经过过归属代理）    -------三角路由选择问题</p><p>通信者所在网络的一个通信者代理，事先知道该移动节点的COA通过让通信者代理向归属代理询问得知。通信者代理将数据报直接通过隧道技术发往移动节点的COA</p><p>要求：</p><ul><li>需要移动用户定位协议。便于通信者代理向归属代理查询获得移动节点的COA</li><li>当通信者代理中某移动节点的COA过期怎么办？</li></ul><p>解决：</p><p>锚外部代理：首次发现移动节点的外部网络中的外部代理</p><p>当一个节点到达新外部网络后，移动节点向新的外部代理注册，新外部代理向锚外部代理提供移动节点的新COA。当锚外部代理收到一个发往已经离开的移动节点的封装数据报后，可以使用新的COA重新封装数据报并转发给该移动节点。</p><p>缺点：增加了复杂性，并且外部代理作为锚外部代理时负载也会增加。</p><h3 id="移动IP">移动IP</h3><p>移动节点 以 <strong>固定的网络 IP</strong> 地址 , 实现 跨越 不同网段 的 漫游 功能 , 并能保证 基于 网络 IP 的 网络权限 在 漫游过程中 不发生 任何改变 ;（使用间接路由选择）</p><p><strong>永久地址</strong>：移动节点在归属网络中的原始地址</p><p>移动IP标准：</p><ul><li>代理发现。定义了一个归属代理或外部代理来向移动节点通告其服务的协议，以及移动节点请求一个外部代理或归属代理的服务所使用的协议。</li><li>向归属代理注册。定义了移动节点或外部代理向 一个移动节点的归属代理注册或注销COA所使用的协议</li><li>数据报的简介路由选择。定义了数据报被一个归属代理转发给移动节点的方式。</li></ul><h4 id="代理发现">代理发现</h4><p>代理发现：到达一个新网络的移动节点，必须知道响应外部代理或者归属代理的 身份。两种方式：经代理通告或者经代理请求</p><p><strong>1. 代理通告</strong></p><p>外部代理/归属代理 使用现有路由器发现协议的扩展协议来通告服务。代理周期性地在所有连接的链路上广播一个类型字段为9（路由器发现）的ICMP报文，允许一个移动节点知道该代理的IP地址。</p><p>还包含以下扩展：</p><ul><li>归属代理比特H，支出该代理是它所在网络的一个归属代理</li><li>外部代理比特F</li><li>注册要求比特R，支出该网络的移动用户必须向某个外部代理注册。</li><li>转交地址COA字段，由外部代理提供的一个或者多个转交地址的列表。</li></ul><p><strong>2. 代理请求</strong></p><p>移动节点自身能够广播一个代理请求报文，类型值为10的ICMP报文。收到该请求的代理直接向移动节点<strong>单播</strong>一个代理通告</p><h4 id="2-向归属代理注册">2. 向归属代理注册</h4><p>一旦某个移动IP节点收到一个COA，则该地址必须向归属代理注册。可通过外部代理或移动节点自身完成。</p><ul><li>移动IP节点收到外部代理通告后，立即向外部代理发送一个移动IP注册报文。承载在UDP数据报，端口434.包括：由外部代理通告的COA；归属代理的地址HA、移动节点的永久地址MA、请求的注册寿命和一个64比特的注册表示。</li><li>外部代理收到并记录移动节点的永久IP地址。外部代理向归属代理434端口发送移动IP注册报文。其他信息同上</li><li>归属代理接收注册请求并检查真实性和正确性（因为是外部来的）。将移动节点的永久IP和COA绑定在一起。以后到达归属代理的数据报与发往移动节点的数据报都将被封装并以隧道方式发给COA，归属代理返回一个移动IP注册回答，包含HA、MA、世纪注册寿命和被认可的请求报文注册表示</li><li>外部代理接收注册响应，转发给移动节点。</li></ul><h3 id="管理蜂窝网中的移动性">管理蜂窝网中的移动性</h3><p>与移动IP类似，GSM 使用间接路由选择方法。</p><p>GSM中，移动用户的归属网络 ----- &gt; 移动用户的<strong>归属公共地域移动</strong>（PLMN）</p><p>移动用户向某个蜂窝网的提供商订购了方服务，则该蜂窝网就称为了这些用户的归属网络。被访问了PLMN，称为<strong>被访网络</strong>，是移动用户当前所在网络</p><ul><li>归属网络维护一个归属位置注册器（HLR）的数据库，包括每个用户的 永久蜂窝电话号码以及用户个人概要信息，也包括这些用户的当前位置信息。当一个呼叫定位到一个移动用户后，通信者将与归属网络中的<strong>网关移动服务交换中心</strong>（GMSC，归属MSC）的特殊交互机联系。</li><li>被放网络维护一个**访问者位置注册（**VLR）的数据库。为当前在其服务网络的移动用户包含一个表项。随着用户的进入和离开网络出现/消失。</li></ul><h4 id="对移动用户呼叫的路由选择">对移动用户呼叫的路由选择</h4><p>呼叫过程</p><ul><li>通信者打电话（号码的前几位足以全局判别移动用户的归属网络）。呼叫从通信者通过公共交换电话网到达移动用户归属网络中的GMSC。</li><li>GMSC收到呼叫被查询HLR来确定移动用户的位置。最简单情况下，HLR返回移动站点漫游号码（MSRN，漫游号码）。漫游号码是短暂的（类似COA的作用，对通信者和移动用户不可见）；如果HLR不具有该漫游号码，则返回被访网络中的VLR地址，GMSC需要查询VLR（？？？？）来获取移动节点的漫游号码。</li><li>GMSC通过网络到达被访网络的MSC建立呼叫的第二步。</li></ul><p>通信者----&gt; GMSC—&gt; 被访MSC</p><p><em>但HLR如何获得移动用户的位置信息？</em></p><h4 id="GSM中的切换">GSM中的切换</h4><p>呼叫过程中，移动站点将其关联的一个基站改变到另一个基站时出现<strong>切换</strong></p><p>切换发生的原因:</p><ul><li>当前基站与移动用户信号过弱，呼叫可能被中断</li><li>一个蜂窝处理的呼叫太多，负载太大</li></ul><p>如何切换  P.377</p><p>不同的方式：锚MSC 和 新旧MSC转发</p><p><strong>移动IP和GSM移动性间的共性</strong></p><h3 id="无线性和移动性：对高层协议的影响">无线性和移动性：对高层协议的影响</h3><p>无线网络在链路层（衰减、多路径、隐藏终端）等问题和网络层（移动用户改变与网络的连接点）与有线网络的对应物有重大区别，在运输层和应用层是否也有区别？</p><p>运输层协议（特别是TCP）在有线和无线网络中有完全不同的性能</p><p>由于无线信道的高比特差错率和切换丢失的可能，TCP拥塞控制反应可能有问题（发送方 并不知道是因为拥塞还是切换过程中有比特差错被丢弃）。解决方案：</p><ul><li>本地恢复。在比特差错出现的当时和当地 将其恢复</li><li>TCP发送方知晓无线链路。让TCP发送方和接收方知晓无线链路的存在，从而将有线网络中发生的拥塞性丢包和无线网络中发生的差错/丢包区分开来</li><li>分离连接方法。分离成两个运输层连接:移动主机到无线接入点 — 无线接入点到其他通信端点（也即 无线部分 + 有线部分）经过无线段的运输层能够是一个TCP，或是一个特别定制运行在UDP上的差错恢复协议</li></ul><h2 id="计算机网络的安全">计算机网络的安全</h2><p>三种攻击方式</p><ul><li>唯密文攻击。入侵者只能得到截取的密文，不了解明文报文的内容</li><li>已知明文攻击。确信密文、明文中有一些匹配…</li><li>选择明文攻击。入侵者能够选择某一明文报文并且得到该明文报文对应的密文形式</li></ul><h3 id="加密技术">加密技术</h3><h4 id="对称密钥密码体质">对称密钥密码体质</h4><p>单码代替密码---- &gt; 多码代替密码</p><p>两种对称加密技术：</p><ul><li>流密码</li><li>块密码</li></ul><p><strong>1. 块密码</strong></p><p>要加密的报文被处理成k比特的块，每块被独立加密。k比特明文被映射成k比特密文</p><p>通常使用函数模拟随机排列表，分块成行，用更少的规则循环地给每行加密    P. 390</p><p>eg. DFS(数据加密标准)、3DES 、AES（高级加密标准）都使用了比特串作为密钥</p><p><strong>2. 密码块链接</strong></p><p>相同的明文通过块密码被重复加密为相同的密文，可能被猜出</p><p>块密码 ^ 等比特随机数</p><p>但传输比特 * 2 – &gt; 解决方案   密码块链接(CBC)，仅随第一个报文发送一个随机值，发送方和接收方是使用计算的编码块代替后面的随机数。</p><p>P. 392</p><h4 id="公开密钥加密">公开密钥加密</h4><p>公钥、私钥    K<sup>+</sup>(K<sup>-</sup>(M)) = K<sup>-</sup>(K<sup>+</sup>(M))  = M</p><p>但有两个问题：</p><ol><li>入侵者可以通过我主机的公钥 选择明文攻击，可以根据明文去猜密文</li><li>任何一个人都可以向我发送用我的公钥加密的报文，会有伪造发送方的现象</li></ol><p>解决方案：</p><p><strong>1. RSA</strong></p><p>广泛使用了模n算术的运算</p><p>(a mod n)<sup>d</sup> mod n = a<sup>d</sup> mod n</p><p>两大步骤</p><ul><li>选择公钥和私钥</li><li>加密和解密算法</li></ul><p>具体步骤</p><ul><li>选择两个大素数 p q。值越大，破解RSA越困难。p、q乘积为1024比特的数量级较好</li><li>计算n=qp和z = (p-1)(q-1)</li><li>选择小于n的数e，使得e和z没有非1的公因数。e用于加密</li><li>求一个数d，使得ed-1能被z整除。d用于解密</li><li>公钥 K<sup>+</sup> = (n,e),私钥  K<sup>-</sup> = (n,d)</li></ul><p>执行步骤</p><ul><li>我给他发一个m整数表示的比特组合。m&lt;n，为了执行编码，我将执行m<sup>e</sup>计算这个数被n除的整数余数。即加密值： c = m<sup>e</sup> mod n，发送给他</li><li>他要解密，计算 m = c<sup>d</sup> mod n</li></ul><p><strong>2. 会话密钥</strong></p><p>RSA指数运算十分耗时，实际应用中，RSA通常与对称密钥密码</p><p>Send先选择一个会话密钥 K<sub>s</sub> 这个密钥必须共享给Receive。Send用Rec的RSA公钥来加密该密钥，Rec收到后，解密得到密钥。</p><p><strong>3. RSA工作原理</strong></p><p>算术证明 P. 396</p><p>RSA的安全性依赖于这样一个事实：目前没有已知的算法恶意快速进行一个数的因数分解，这种情况下公开值n无法快速分解出素数p和q，但也不确定是否以后就一直没有这样的算法。</p><h3 id="报文完整性和数字签名">报文完整性和数字签名</h3><p>确保没有被更改</p><h4 id="密码散列函数">密码散列函数</h4><p>具有性质：</p><p>找到两个不同的报文x,y使得H(x) = H(y)，在计算上是不可能的（例如因特网校验和和CRC）</p><p>但因特网校验和不太严格，可能有两个相同的字符串有校验和</p><p><strong>MD5散列算法</strong></p><p>通过四步过程计算得到128比特的散列</p><ul><li>填充：先填1，然后填足够多的0，知道报文长度满足一定条件</li><li>添加：在填充前添加一个用64bit表示的报文长度</li><li>初始化累计器</li><li>循环：在最后的循环步骤，对报文的16字块进行4轮处理</li></ul><p>作用：</p><ol><li>密码保护</li><li>完整性验证</li><li>数字签名</li></ol><p>(MD5算法介绍)[<a href="https://www.bilibili.com/video/BV1u44y1z7t1?from=search&amp;seid=8959130404275666978&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1u44y1z7t1?from=search&amp;seid=8959130404275666978&amp;spm_id_from=333.337.0.0</a>]</p><p><strong>安全散列算法SHA（Security Hash Algorithm）–1</strong></p><h4 id="报文鉴别码">报文鉴别码</h4><p>鉴别密钥s</p><p><strong>报文鉴别码</strong>(MAC, Message Authentication Code)：  s级联明文m，计算散列得到H(m+s)</p><p>作用：防止别人也通过散列方法伪造请求</p><p><em>如何向通信实体分发共享的鉴别密钥？</em></p><h4 id="数字签名-v2">数字签名</h4><p>指出一个文件的的所有者，（是我写的这个），证明某个人在一个文件上的签名确实是这个人签署的（可验证性），且只有那个人能签署这个文件（不可伪造性）</p><p>用私钥加密报文m  ，对方用公钥解密</p><p>但直接对报文加解密开销非常大，所以经常计算该报文的一个固定长度的数据“指纹”。<strong>对报文的散列签名而不是对报文的本身签名</strong></p><p><strong>公钥认证</strong></p><p>对获得公钥的 验证，从源头上确定这是你</p><p>数字签名的一个重要应用，证实一个公钥属于某个特定的实体，应用于许多安全网络协议中，SSL和IPsec</p><p>公钥与特定实体的绑定，<strong>认证中心</strong>（<strong>CA</strong>，Certification Authoriity）</p><p>作用：</p><ul><li>证实一个实体（一台机器、路由器）的真实身份，对CA必须完全信任</li><li>一旦CA验证了某个师太的身份，CA将生成一个与其身份和实体公钥绑定的证书。证书中包含了这个公钥和公钥所有者全局唯一的身份表示信息（例如它的IP地址），由CA对这个证书进行数字签名（用CA的私钥）</li></ul><p>在请求公钥的同时，也会发送CA签署的证书，用CA的公钥解密，来验证对方公钥的安全性</p><h3 id="端点鉴别">端点鉴别</h3><p>一个实体经过计算机网络向另一个实体证明<strong>自己</strong>身份的过程（之前讨论的是鉴别他人身份），即如何变得被可鉴别？</p><p>鉴别协议，AP</p><p><strong>鉴别协议 ap1.0</strong></p><p>我就是我</p><p><strong>鉴别协议 ap2.0</strong></p><p>加入IP地址</p><p>问题：IP哄骗</p><p><strong>鉴别协议 ap3.0</strong></p><p>使用秘密口令，又是一个共享秘密。Gmail、Telnet、FTP服务使用</p><p>口令的发送过程可能被窃听</p><p><strong>鉴别协议 ap3.1</strong></p><p>秘密口令 + 加密口令，类似公钥私钥的加解密方式，双方共享一个对称秘密密钥</p><p>问题：回放攻击，监听发件人通信并伪装成发件人（我不知道这是你第几次在跟我说你在不同的设备）</p><p><strong>鉴别协议 ap4.0</strong></p><p>不重数：在一个协议的生存期内只使用一次的数。</p><p>加密过程：</p><ul><li>Alice向Bob发送报文</li><li>Bob选择一个不重数R，发给Alice，这个数可能被窃听</li><li>Alice使用他与Bob共享的对称密钥，加密这个R，把加密的不重数K（R）返回给Bob，这个不重数证明Alice还是活跃的。</li></ul><h3 id="安全电子邮件">安全电子邮件</h3><p>因特网在多个层次上提供安全性功能</p><p>原因：</p><ul><li>提供用户级别的安全性</li><li>在高层部署新的因特网服务较为容易。</li></ul><h4 id="安全电子邮件-v2">安全电子邮件</h4><p>会话密钥 + 数字签名</p><h4 id="PGP">PGP</h4><p>Pretty Good Privacy ，电子邮件加密方案</p><p>数字签名 + 公开密钥对 + 散列</p><h3 id="TCP连接安全：SSL">TCP连接安全：SSL</h3><p>安全套接字层（Secure Socket Layer，SSL）</p><p>TCP的强化版本，<strong>机密性、数据完整性、端点鉴别</strong></p><p>SSL版本的加强版本 运输层安全性，TLS（Transport Layer Security）</p><p>SSL使得TCP安全了，能够应用于运行在TCP上的任何应用程序，提供了一个简单的具有套接字的应用编程接口（API），类似TCP的API。（尽管SSL技术上位于应用层，但它却提供TCP服务的运输协议）</p><p>希望等到TCP会话结束才验证所有的数据完整性。<br>解决：SSL将数据流分割成记录，对每个记录附加一个MAC用于验证完整性，然后加密该“记录+MAC”，但如果有人更改了记录表的部分顺序，则报文完整性被破坏。</p><p>解决方式：<strong>SSL序号</strong></p><p>发送方SSL维护一个序号计数器，每发一个SSL记录，就+1，计算MAC时，就把序号包括在MAC的计算中。接受方通过跟踪发送方的序号，通过在MAC的计算中包括适当的序号，来验证一条记录的完整性。SSL序号的使用组织了第三方执行重排序记录或重放报文段等中间人功能机</p><p><strong>注意SSL序号和不重数的作用</strong></p><p>防止连接重放  防止在一个进行中的会话重放个别分组</p><p><strong>SSL记录</strong></p><p>类型 + 版本+ 长度 + 数据和MAC的密钥加密结果</p><h4 id="过程-v2">过程</h4><p>伪过程 P.412</p><ol><li><p><strong>SSL握手</strong></p><ol><li>Client发送它支持的密码算法列表，以及不重数</li><li>Server从列表中选择一种对称加密算法，一种公钥算法，一种MAC算法。把这些选择以及证书和一个服务器不重数返回给client</li><li>客户验证该证书，提取服务器公钥，生成一个前主密钥（PMS），用服务器的公钥加密该PMS，并将加密的PMS发送给server</li><li>client和server独立地从PMS和不重数中计算出主密钥MS，MS被切片以生成两个密码和两个MAC密钥。</li><li>client发送所有握手报文的一个MAC</li><li>server发送所有握手报文的一个MAC（5.6步骤使得握手免受篡改伤害（算法列表不被删改）</li></ol><p>存在不重数的原因：防御&quot;连接重放&quot;，使得加密的密钥不同</p></li><li><p><strong>连接关闭</strong></p><p>在类型字段中指出该记录是否用于终止该SSL会话</p></li></ol><h3 id="网络层安全性：IPsec和虚拟专用网">网络层安全性：IPsec和虚拟专用网</h3><p>IPsec: IP安全协议，为任意两个网络层实体之间的IP数据报提供了安全，很多机构使用IPsec创建了运行在公共因特网上的虚拟专用网（VPN）</p><p>如果两台主机要跨越公共因特网进行通信，则流量在进入因特网之前要进行加密（IPv4数据报 —&gt; IPsec数据报，类似IPv4数据报，但载荷中包含一个IPsec首部）</p><p><strong>AH协议和ESP协议</strong></p><p>IPsec中两个主要协议：</p><ul><li>**鉴别首部（AH）**协议，提供鉴别和数据完整性服务，不提供机密性服务</li><li><strong>封装安全性载荷（ESP）协议</strong>，提供源鉴别、数据完整性和机密服务，使用广泛（机密性十分重要）</li></ul><p>当主机要向一个目的实体发送安全数据报时，通常使用以上两种之一协议</p><p><strong>安全关联</strong></p><p>源实体向目的实体发送IPsec数据报之前，源和目的实体需要创建一个网络层的逻辑连接，称之为<strong>安全关联</strong>（SA）</p><p>一个SA是一个单工逻辑连接，从源到目的地是单向的，如果要互相发送数据报，则需要建立两个SA</p><p>路由器维护以下SA状态信息</p><ul><li>32bit标识符 — 安全参数索引SPI</li><li>初始接口和目的接口</li><li>加密类型</li><li>加密密钥</li><li>完整性检查的类型</li><li>鉴别密钥</li></ul><p>一个IPsec实体经常维护而许多SA的状态信息，在<strong>安全关联数据库</strong>（SAD）中存储所有的SA状态信息</p><p><strong>IPsec数据报</strong></p><p>两种不同的分组形式，隧道模式和运输模式,<strong>此处针对隧道模式</strong></p><p>IPv4如何转换到IPsec？</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211011103701653.png" alt="image-20211011103701653"></p><ul><li>IPv4数据报后附上一个ESP尾部字段</li><li>使用算法和SA规定的密钥加密该结果</li><li>在这个加密量的前面附加一个ESP首部的字段</li><li>使用算法和由SA规定的密钥生成一个覆盖整个包的鉴别MAC</li><li>该MAC附加到包后面形成载荷</li><li>生成一个具有所有经典IPv4首部字段的全新IP首部，该首部附加到载荷之前</li></ul><p>整个新IPv4的首部字段中的协议号不被设置为TCP、UDP等，而是设置为50，指示这是一个使用ESP协议的IPsec数据报。最外部的IP地址被设置值为位于隧道两个端点的源和目的地路由器接口。</p><p>该路由器将IPsec报发送进公共因特网之后，在到达目的路由器前通过许多路由器，每个都将处理该数据报，将其对待成普通的数据报一样</p><p>ESP尾部三个字段：填充、填充长度、下一个首部<br>填充：因为加密的报文必须为块长度的整数倍<br>下一个首部：指示包含在载荷数据的字段中的类型（UDP、TCP…）</p><p>ESP首部：SPI字段和序号字段。<br>SPI字段：指示接受实体该数据报属于哪个SA<br>接受实体能够用该SPI索引其SAD来确定适当的鉴别/解密算法和密钥<br>序号：防御重放攻击</p><p>IPsec实体还维护一个安全策略库（SPD），指示哪些类型的数据报将被IPsec处理，并且对这些将被处理的数据报应当使用哪个SA</p><p><em><strong>如何保护？</strong></em></p><ul><li>中间人看不到正确的源和目的地址、端口号、不知道是否携带TCP、UDP、ICMP数据，更看不到应用层的数据载荷，机密性比SSL广泛</li><li>无法反转bit来干扰 — MAC</li><li>无法假冒 ---- MAC</li><li>无法发起重放攻击 ---- 序号</li></ul><p><strong>IKE：IPsec中的密钥管理</strong></p><p>VPN具有少量端点时，能够在端点的SAD中人工键入SA信息。但大型的VPN则要求部署自动的机制来生成SA--------<strong>因特网密钥交换(IKE)</strong></p><p>与SSL相似，每个IPsec实体有一个整数，包括了该实体的公开密钥。IKE协议让两个实体交换整数、协商鉴别和加密算法，并安全地交换用于在IPsec SA中生成会话密钥的密钥材料。</p><h3 id="使无线LAN安全">使无线LAN安全</h3><p><strong>有线等效保密（WEP）</strong></p><p>P.422</p><p><strong>IEEE 802.11i</strong></p><p>2004年批准，新标准，提供了强得多的加密形式、可扩展的鉴别机制集合和密钥的分发机制。</p><p>在AP之上增加了一台鉴别服务器，对应多台AP面积中在一台服务器中做出有关鉴别和接入的决定</p><p>运行阶段:</p><ul><li>发现。AP通告它的存在以及它能够向无线客户节点提供的鉴别和加密形式，客户则请求它希望的特定的鉴别和加密形式。</li><li>相互鉴别和主密钥的生成。AP中转报文，发给鉴别服务器。<strong>可扩展鉴别协议</strong>(EAP)定义了客户和鉴别服务器之间交互时简单的请求/响应模式中使用的端到端的报文格式。<ul><li>使用EAPoL(EAP or LAN)封装，通过802.11无线链路发送</li><li>报文在AP拆封，并使用RADIUS协议重新封装，经过UDP/IP传输到鉴别服务器</li></ul></li><li>生成成对主密钥。MK是仅为客户和鉴别服务器所致的共享密钥，双方用MK生成一个次密钥，即成对主密钥。鉴别服务器向AP发送该PMK，则客户和AP限制有一个共享的密钥，可以相互鉴别</li><li>临时密钥TK。借助PMK，无线客户和AP能够生成附加用于通信的密钥。TK用于执行经过无线链路向任意远程主机发送数据的链路级加密</li></ul><h3 id="防火墙和入侵检测系统">防火墙和入侵检测系统</h3><p>通信流量进入/离开网络时要执行安全检查，做记录、丢弃、转发，</p><h4 id="防火墙">防火墙</h4><p>硬件+软件结合体，允许一些数据分组通过而另一部分不允许。</p><p>目标：</p><ul><li>从内到外和从外到内的流量都要通过防火墙。</li><li>仅被授权的流量允许通过</li><li>防火墙自身免于渗透</li></ul><p>分类：</p><ol><li><p><strong>传统的分组过滤器</strong></p><p>一个机构通常有一个内部网络与ISP相连接的网关路由器，分组过滤便在这里。维护一张访问控制列表</p><p>过滤策略：</p><ul><li>IP源和目的地址</li><li>IP数据报中的协议类型</li><li>协议端口</li><li>TCP标志比特：SYN ACK</li><li>ICMP报文类型</li><li>对数据报离开和进入网络的不同规则</li><li>对不同路由器接口的不同规则</li></ul></li><li><p><strong>状态分组过滤器</strong></p><p>实际地跟踪TCP连接，做出过滤决定。解决的问题：防止内鬼。</p><p>用一张连接表来跟踪所有进行的TCP连接，防火墙能够通过观察三次握手来观察一条新连接的开始。当它看到一个FIN分组时，便观察到该链接结束。</p><p>维护连接表和访问控制列表（列表中有是否核对连接字段用于二次确认）</p><p>书中的例子较为具体（P.427）</p></li><li><p><strong>应用程序网关</strong></p><p>在应用层层面限制 ---- <strong>应用程序网关</strong> 是一个应用程序特定的服务器，所有应用程序数据必须通过它。多个应用程序网关可以在同一台主机上运行，但每一个网关有自己进程的单独服务器</p></li></ol><h4 id="入侵检测系统">入侵检测系统</h4><p>分组过滤器检测IP、TCP、ICMP首部字段，为了检测更多的攻击，需要执行<strong>深度分组检查</strong>，查看首部以外的部分，即查看分组携带的实际应用数据。</p><p><strong>入侵检测系统</strong>(IDS)：观察到潜在恶意流量能产生告警的设备<br><strong>入侵防止系统</strong>(IPS)：滤除可以流量的设备</p><p>IDS + IPS = IDS系统</p><p>检测多种攻击：洪泛、网络映射、端口扫描、DoS带宽洪泛、蠕虫》。。</p><p>一个机构可能在机构网络中部署一个或者多个IDS传感器，共同工作，向一个中心IDS处理器发送有关可疑流量活动的信息。</p><p>IDS不仅要做深度分组检查，还要将每个过往的分组与许多的“特征”做比较  ----&gt; 极大处理量，所有IDS传感器多向下游广泛布置，便于维护、减少负载。</p><p>IDS系统分类：</p><ul><li><strong>基于特征的系统</strong><ul><li>维护一个范围广泛的攻击特征数据库，每个特征是与一个入侵活动相关联的规则集。（一个特征可能指示有关单个分组的特性列表（端口号、IP地址、分组中特定的比特串…））特征通常由熟练的网络安全工程师生成并添加到数据库中</li><li>嗅探每个通过它的分组，并与特征库中的特征进行比较</li><li>对新攻击无判断力，可能产生虚假告警</li></ul></li><li><strong>基于异常的系统</strong><ul><li>观察正常运行的流量，产生流量概况文件。寻找统计上不寻常的分组刘（例如ICMP分组不寻常的百分比）。</li><li>不依赖以前的攻击知识</li><li>不太常用</li></ul></li></ul><h1>TCP/IP协议</h1><h2 id="概述-v10">概述</h2><h3 id="一些问题-v7">一些问题</h3><p><em>因特网和万维网的区别？</em></p><ul><li>因特网是互联网的一种，由上千万台设备组成，是一个广域网</li><li>万维网是因特网提供的一种服务（WWW）{因特网还提供FTP文件传输、网络电话、电子邮件之类的服务…}，是无数个站点和网页的集合，由浏览器浏览超文本页面组成。http和https就属于万维网的一种</li></ul><p><em>OSI参考模型和TCP/IP体系结构</em></p><ul><li>OSI 国际标准化组织(ISO)制定的计算机或通信系统间互联的标准体系</li><li><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211012161741783.png" alt="image-20211012161741783"></li><li>TCP/IP体系结构<img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211012161936904.png" alt="image-20211012161936904"></li></ul><h2 id="Internet地址结构">Internet地址结构</h2><h3 id="概述-v11">概述</h3><p>IPv6的缩写规范 P.22</p><h3 id="基本的IP地址结构">基本的IP地址结构</h3><h4 id="分类寻址">分类寻址</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211012162858017.png" alt="image-20211012162858017"></p><p>单播地址：用于识别连接Internet或者某些专用的内联网的计算机网络接口</p><p><strong>子网寻址</strong></p><p>主机部分划分为 子网号 + 主机号</p><p><strong>子网掩码</strong></p><p>由一台主机或者路由器使用的分配为，，确定如何从一台主机对应IP地址中获得网络和子网信息。</p><p><strong>可变长度的子网掩码VLSM</strong></p><p>可用于分割一个网络号，使得每个子网支持不同数量的主机。</p><p>如果没有VLSM，一个子网掩码只能提供给一个网络，限制了要求的子网数上的主机数，使得可以划分多层子网（但IP数还是那么多）</p><p><strong>广播地址</strong></p><p>构建方式：</p><p>子网广播：将子网掩码去翻，并与子网中任意主机地址进行按位或 | 运算（11111111…）</p><blockquote><p>定向广播问题很大，目前仍在禁用(通过定向广播可以将数据报发送给子网中的所有主机)</p></blockquote><p>本地网络广播（有限广播）：255.255.255.255，不会被路由器转发，但子网广播和连接在同一网络中的计算机的本地网络广播将工作。（？？？不懂）</p><p>IPv6没有任何广播地址，仅使用组播地址</p><p><strong>IPv6地址和接口标识符</strong></p><p>IPv6通过特殊前缀表示一个地址范围。</p><ul><li>节点本地（用于统一计算机中通信）</li><li>链路本地（同一网络链路或IPv6前缀中的节点）</li><li>全球性（Internet范围）</li></ul><p>链路本地IPv6地址和一些全球性IPv6地址使用接口标识符（IID，直接由一个网络接口的相关链路层MAC地址形成）作为一个单播IPv6地址的分配基础</p><p>OUI：组织唯一标识符</p><p>EUI：扩展唯一标识符</p><p><em>MAC地址如何被映射成一个IPv6地址？</em></p><h3 id="CIDR和聚合">CIDR和聚合</h3><p>面临问题：</p><ul><li>多半B类地址已被分配------------清除IP地址分类权限并且提高层次化分配的IP地址的聚合能力</li><li>32位IPv4地址不足以应对Internet在21世纪初的规模            --------IPv6</li><li>全球路由表条数增加，随着越来越多的路由条目出现，路由性能将受到影响                          ------------清除IP地址分类权限并且提高层次化分配的IP地址的聚合能力</li></ul><h4 id="前缀">前缀</h4><p>帮助缓解IPv4的压力，分类寻址方案使用一个类似VLSM的方案 — <strong>CIDR（无类别域间路由）</strong>，提供了一种方便的分配连续地址范围的方式，包含多于255台少于65536台主机。</p><ul><li>未经过预定义的任何地址防范未可以作为一个类的一部分，但需要CIDR掩码（对全球性路由系统可见）</li><li>核心因特网路由器必须能解释和处理掩码（网络前缀）</li></ul><h4 id="聚合">聚合</h4><p>取消分类结构的IP地址，能分配各种尺寸的IP地址块，但不能帮助减少路由条目数</p><p>如何减少路由条目数？</p><p>随机寻址 和 拓扑敏感(位置相关)寻址</p><p><strong>路由聚合</strong>：将相邻的多个IP前缀合并成一个短前缀，可以覆盖更多地址空间</p><p><em><strong>CIDR和VLSM的区别</strong></em></p><ul><li>CIDR将几个标准网络和成一个大的网络</li><li>VLSM把一个标准网络分成几个小型网络（子网的子网的子网…）</li></ul><p><strong>！！！考研此处有相关题目！！！</strong></p><h3 id="特殊用途地址">特殊用途地址</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211012172618252.png" alt="image-20211012172618252"></p><h4 id="IPv4-IPv6地址转换">IPv4-IPv6地址转换</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211012172927758.png" alt="image-20211012172927758"></p><p>前缀可以是众所周知的前缀，也可以是组织为转换器分配的唯一前缀。64-71位为0，以保持[RFC4291]指定标识符的兼容性。后缀的位被保留并设置为0</p><h4 id="组播地址">组播地址</h4><p>IPv4 v6都支持组播地址，一个IP组播地址（也称为组或组地址）标识一组主机接口。一个组可以跨越整个因特网</p><pre><code class="mermaid"><span class="token keyword">graph</span> TBA<span class="token text string">[方形]</span> <span class="token arrow operator">--></span>B<span class="token text string">(圆角)</span>    B <span class="token arrow operator">--></span> C<span class="token text string">&#123;条件a&#125;</span>    C <span class="token arrow operator">--></span><span class="token label property">|a=1|</span> D<span class="token text string">[结果1]</span>    C <span class="token arrow operator">--></span><span class="token label property">|a=2|</span> E<span class="token text string">[结果2]</span>    F<span class="token text string">[横向流程图]</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
      <tag>计网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理</title>
    <link href="/2021/08/30/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <url>/2021/08/30/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1>编译原理</h1><span id="more"></span><h2 id="概览">概览</h2><p>机器语言 —&gt; 汇编语言(助记符 MOV…) —&gt; 高级语言（不依赖于特定机器）</p><p>机器语言 — &gt; 汇编语言或高级语言的过程 ：</p><p><strong>编译系统的结构</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830163918375.png" alt="image-20210830163918375"></p><p>语义分析(Semantic Analysis)</p><p>语义：中间表示，独立于表示语言</p><p><strong>编译器的结构</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830164732319.png" alt="image-20210830164732319"></p><h2 id="结构-v4">结构</h2><h3 id="词法分析器">词法分析器</h3><p>主要任务：从左向右逐行扫描源程序的字符，识别出各个单词，确定单词的类型。将识别出的单词转换成统一的机内表示——词法单元（Token）形式</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830165359571.png" alt="image-20210830165359571"></p><p>举个例子</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830165538515.png" alt="image-20210830165538515"></p><p>😃 如何实现词法分析器？</p><h3 id="语法分析">语法分析</h3><p>从词法分析器输出的token序列中识别出各类短语，并构造语法分析树(parse tree)</p><p>举个例子</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830170121279.png" alt="image-20210830170121279"></p><h3 id="语义分析">语义分析</h3><p>主要任务：</p><ol><li>收集标识符的属性信息</li></ol><ul><li>种属Kind：简单变量、复合变量、过程</li><li>类型Type: 整型、字符型…</li><li>存储位置、长度</li><li>值</li><li>作用域</li><li>参数和返回值信息</li></ul><p>符号表：用于存放标识符的属性信息的数据结构</p><ol start="2"><li>语义检查<ul><li>变量或过程未经声明就使用</li><li>变量或过程名重复声明</li><li>运算分量类型不匹配</li><li>操作符和操作数之间的类型不匹配<ul><li>数组下表不是整数…</li><li>…</li></ul></li></ul></li></ol><h3 id="中间代码生成和编译器后端">中间代码生成和编译器后端</h3><p>三地址码(Three-address Code)</p><p>​由类似汇编的指令序列组成，每个指令最多由三个操作数(operand)</p><p>常用的三地址指令</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830171023260.png" alt="image-20210830171023260"></p><p>三地址指令的四元式表示</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830171111052.png" alt="image-20210830171111052"></p><p>举个例子</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830172102677.png" alt="image-20210830172102677"></p><p>语法结构树/语法树（Syntax Tree）</p><h2 id="语言及其文法">语言及其文法</h2><h3 id="基本概念-v2">基本概念</h3><p>字母表：一个有穷符号集合</p><p>乘积、n次幂、正闭包、克林闭包</p><p>串：字母表中符号的有穷序列（空串的长度为0）</p><p>连接（connection）：y附加到x后面形成的串，xy</p><p>空串是连接运算的单位元</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830172522935.png" alt="image-20210830172522935"></p><p>串s的n次幂：将n个s连接起来</p><h3 id="文法的定义">文法的定义</h3><p>文法的形式化定义</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830172924632.png" alt="image-20210830172924632"></p><p>Vn 非终结符：用来表示语法成分的符号（“语法变量”）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830173602635.png" alt="image-20210830173602635"></p><p>S：开始符号，表示该文法中最大的语法成分</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830174100349.png" alt="image-20210830174100349"></p><p><strong>符号约定</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830174146387.png" alt="image-20210830174146387"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830174157061.png" alt="image-20210830174157061"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210830174324785.png" alt="image-20210830174324785"></p><h3 id="语言的定义">语言的定义</h3><p>推导Derivations和规约Reductions</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210901172339176.png" alt="image-20210901172339176"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210901172605747.png" alt="image-20210901172605747"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210901172850379.png" alt="image-20210901172850226"></p><p>归约是推导的逆过程</p><p>句型和句子</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210901173246838.png" alt="image-20210901173246838"></p><p><img src="/home/pplong/.config/Typora/typora-user-images/image-20210901173408893.png" alt="image-20210901173408893"></p><h3 id="文法分类">文法分类</h3><p><strong>0型文法</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026164131136.png" alt="image-20211026164131136"></p><p>0型文法生成的语言是0型语言 L(0)</p><p><strong>1型语言</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026164316687.png" alt="image-20211026164316687"></p><p><strong>2型文法</strong></p><p>上下文无关文法</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026164429771.png" alt="image-20211026164347199"></p><p><strong>3型文法</strong></p><p>正则文法</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026164600834.png" alt="image-20211026164600834"></p><p><strong>联系</strong></p><p>逐级的包含关系，0型文法包含域最广</p><h3 id="上下文无关文法的语法树">上下文无关文法的语法树</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026164933836.png" alt="image-20211026164933836"></p><p><strong>句型的短语</strong></p><p>分析树中每一棵自身的边缘 ： 该句型的一个短语<br>直接短语：子树只有父子两代节点，则子树的边缘叫这个句型的直接短语</p><p>直接短语一定是某个产生式的右部<br>产生式的右部不一定是给定句型的直接短语</p><p><strong>二义性文法</strong></p><p>一个文法可为某个句子生成多棵分析树，则这个文法是二义性的</p><h2 id="词法分析">词法分析</h2><h3 id="正则表达式">正则表达式</h3><p>描述正则语言的更紧凑的方法，按照一定的规则递归构建</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026165918119.png" alt="image-20211026165918119"></p><p>可以用正则表达式定义的语言叫正则语言或者正则集合</p><p><strong>代数规律</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026170108127.png" alt="image-20211026170108127"></p><p><strong>等价性</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026170141425.png" alt="image-20211026170141425"></p><h3 id="正则定义">正则定义</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026170231330.png" alt="image-20211026170231330"></p><p>提供了类似Alias之类的东西</p><p>例子</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026170424415.png" alt="image-20211026170424415"></p><h3 id="有穷自动机">有穷自动机</h3><p>Finite Automata</p><p>具有离散的输入输出信息和有穷数目的内部状态。根据当前的状态和面临的输入信息可以决定系统的后继行为（电梯装置）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026170802603.png" alt="image-20211026170802603"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026170828588.png" alt="image-20211026170828588"></p><p>如果存在一个对应于输入串x的从初始状态到某个终止状态的转换序列，称串x被该FA接受<img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211026171404673.png" alt="image-20211026171404673"></p><p>一个有穷自动机M接受的所有串构成的集合是该FA定义的语言 L(M)</p><p><strong>最长子串匹配</strong></p><p>输入串的多个前缀与一个或者多个模式匹配时，总是选择最长前缀进行匹配<br>到达某个终止状态后，只要输入带还有符号，FA就继续前进，寻找尽可能长的匹配</p><p><strong>分类</strong></p><ul><li>确定的FA  DFA</li><li>非确定的FA  NFA</li></ul><h4 id="DFA">DFA</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027143046811.png" alt="image-20211027143046811"></p><p>DFA 可以用转换图或者转换表表示</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027143449774.png" alt="image-20211027143449774"></p><h4 id="NFA">NFA</h4><p>沿着标记a 的边能达到的状态的<strong>集合</strong>（不是单一的）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027143523033.png" alt="image-20211027143523033"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027143734974.png" alt="image-20211027143734974"></p><p><strong>等价性</strong></p><p>对于任何NFA 都存在识别同一语言的DFA<br>对于任何NFA 都存在识别同意语言的NFA</p><p>$$ 正则文法 \Longleftrightarrow  正则表达式 \Longleftrightarrow  FA$$</p><p><strong>带有空边的NFA</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027144532929.png" alt="image-20211027144532929"></p><p><strong>与不带空边NFA的等价性</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027144650234.png" alt="image-20211027144650234"></p><h4 id="正则表达式-DFA">正则表达式 -&gt; DFA</h4><p>$$正则表达式 \xrightarrow {NFA}  DFA $$</p><h5 id="正则表达式-NFA">正则表达式 -&gt; NFA</h5><p>不同的正则表达式对应的NFA类型</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027145312770.png" alt="image-20211027145312770"></p><h5 id="NFA-DFA">NFA -&gt; DFA</h5><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027145543629.png" alt="image-20211027145543629"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027150323489.png" alt="image-20211027150323489"></p><p>$$\varepsilon-closure(s)$$： 能够从NFA状态s开始只通过$$\varepsilon$$转换到达NFA状态集合</p><h3 id="识别标识符的DFA">识别标识符的DFA</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027150803811.png" alt="image-20211027150803811"></p><p>转换</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027151105738.png" alt="image-20211027151105738"></p><p>整合多个DFA为一个DFA</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027151303681.png" alt="image-20211027151303681"></p><h3 id="词法分析阶段的错误处理">词法分析阶段的错误处理</h3><ul><li>单词拼写错误 int i = 0x3G</li><li>非法字符 ~ @</li></ul><p>如果当前状态与当前输入符号在转换表对应项中的信息为空，则报错，调用错误处理程序</p><ul><li>查找已扫描字符串中的最后一个对应于某终态的字符<ul><li>找到了，将该字符与前面的字符识别成一个单词。输入指针退回到该字符，扫描器重新回到初始状态</li><li>没找到，说明出错，采用错误恢复策略</li></ul></li></ul><p><strong>恐慌模式</strong></p><p>在剩余的输入中不断删除字符，直到词法分析器能在剩余输入的开头发现一个正确的字符为止</p><h2 id="自顶至下分析">自顶至下分析</h2><h3 id="First和Follow集">First和Follow集</h3><h4 id="计算FIRST">计算FIRST</h4><p><strong>First(X)</strong>：可以从X推导出的所有<strong>串首终结符</strong>构成的集合，如果X能推到出e，则e∈FIRST(X)</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027152208916.png" alt="image-20211027152208916"></p><p>计算方式：</p><ul><li><p>计算一个符号的FIRST</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211013161156540.png" alt="image-20211013161156540"></p></li><li><p>计算符号串的FISTR</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211013161604282.png" alt="image-20211013161604282"></p></li></ul><h4 id="计算终结符的FOLLOW">计算终结符的FOLLOW</h4><p>FOLLOW(A) : 可能在某个句型中紧跟在A后边的终结符a的集合，如果A是某个矩形的最右符号，则把$添加到FOLLOW(A)中</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211013161756283.png" alt="image-20211013161756283"></p><p>一个终结符的follow集可能依赖于另一个终结符的follow集</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027152929030.png" alt="image-20211027152929030"></p><p>算法：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211013163110606.png" alt="image-20211013163110606"></p><p><strong>注意要迭代更新哦！！！</strong></p><h4 id="计算SELECT集合">计算SELECT集合</h4><p>定义</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211013164202043.png" alt="image-20211013164202043"></p><p>计算</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211013164234537.png" alt="image-20211013164234537"></p><h4 id="LL-1-文法">LL(1)文法</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211013164326833.png" alt="image-20211013164326833"></p><p>$$SELECT(A \rightarrow \alpha)  \cap SELECT(A \rightarrow \beta) = \phi $$<br>其中alpha 和beta不能同时 $$\xRightarrow * \varepsilon$$</p><p><strong>注意第一条</strong>  ----&gt; α和β的SELECT集就不会相交了</p><p><strong>第三条意义</strong>：同一非终结符的各个产生式的可选集不相交</p><ul><li>L：从左向右扫描输入</li><li>L：产生最左推导</li><li>1：每一步只需要向前看一个输入符号来决定语法分析动作</li></ul><h3 id="递归的预测分析法">递归的预测分析法</h3><p>在预测下降分析中，编写每一个非终结符对应的过程时，根据预测分析表进行产生式的选择</p><p>为每一个非终结符都要编写递归的下降过程</p><h3 id="非递归的预测分析法">非递归的预测分析法</h3><p>根据预测分析表构造一个自动机 （表驱动的预测分析）</p><p>下推自动机PDA。DFA不能识别下面的例子</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027155042904.png" alt="image-20211027155042904"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027155343212.png" alt="image-20211027155343212"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027155414682.png" alt="image-20211027155414682"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027155533916.png" alt="image-20211027155533916"></p><p>总结</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027155712340.png" alt="image-20211027155712340"></p><h3 id="预测分析中的错误处理">预测分析中的错误处理</h3><ul><li>栈顶非终结符和当前输入符号不匹配</li><li>栈顶非终结符与当前输入符号在一蹙额分析表对应项中的信息为空</li></ul><p><strong>采用恐慌模式</strong>：忽略输入中的一些符号，知道输入中出现由设计者选定的同步词法单元集合中的某个词法单元</p><p>例子</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027160145284.png" alt="image-20211027160145284"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027160429586.png" alt="image-20211027160429586"></p><h2 id="自底向上分析">自底向上分析</h2><p><strong>以消除剩余输入为主</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027161701527.png" alt="image-20211027161701527"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027161927887.png" alt="image-20211027161927887"></p><p>一有匹配就归约（以刚进来的为准）</p><p>失败情况</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027162628334.png" alt="image-20211027162628334"></p><p>&lt; IDS &gt;,ib 没有进行规约，错误的识别了句柄</p><p>句柄：句型的最左直接短语</p><h3 id="LR分析法">LR分析法</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027163000350.png" alt="image-20211027163000350"></p><p>基本原理</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027163142562.png" alt="image-20211027163142562"></p><p>状态堆栈 +  输入符号堆栈 + 缓冲符号栈</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027164920571.png" alt="image-20211027164920571"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027164749977.png" alt="image-20211027164749977"></p><h4 id="LR-0">LR(0)</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027165127289.png" alt="image-20211027165127289"></p><p><strong>增广文法</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027165227328.png" alt="image-20211027165227328"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027165405765.png" alt="image-20211027165405765"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027170026739.png" alt="image-20211027170026739"></p><h4 id="分析表构造">分析表构造</h4><p><strong>closure函数</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027170944130.png" alt="image-20211027170944130"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027171011018.png" alt="image-20211027171011018"></p><p><strong>goto函数</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027171028416.png" alt="image-20211027171028416"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027171047696.png" alt="image-20211027171047696"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027170912641.png" alt="image-20211027170912641"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027171131963.png" alt="image-20211027171131963"></p><p>移入/归约冲突</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027171227654.png" alt="image-20211027171227654"></p><p>归约归约冲突</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211027171319095.png" alt="image-20211027171319095"></p><p>不是所有的CFG上下文无关文法都能用LR0方法进行分析，CFG不总是LR0文法</p><h3 id="SLR分析">SLR分析</h3><p>FOLLOW集帮助判定什么时候规约，SLR（1）：向前查看一个符号</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211103095603535.png" alt="image-20211103095603535"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211103095819326.png" alt="image-20211103095819326"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211103095927692.png" alt="image-20211103095927692"></p><h3 id="LR（1）分析">LR（1）分析</h3><p>SLR分析存在的问题</p><ul><li>仅仅简单考察下一个输入符号是否属于规约项目的FOLLOW集，但不能确保正确的规约</li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211103100100103.png" alt="image-20211103100100103"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211103100320722.png" alt="image-20211103100320722"></p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg学习</title>
    <link href="/2021/06/04/ffmpeg%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/06/04/ffmpeg%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>FFMpeg 学习</h1><h2 id="简介-v2">简介</h2><h3 id="历史-v2">历史</h3><p>2000年 FabriceBellard  法布利斯 . 贝拉创建</p><span id="more"></span><h3 id="作用-v2">作用</h3><p>跨平台的多媒体框架</p><p>解码、编码、转码、复用</p><h3 id="耻辱柱">耻辱柱</h3><p>用了开源代码就要开源  GPL协议</p><h2 id="使用-v4">使用</h2><h3 id="基础-v5">基础</h3><p>./configure --help</p><p>编译–安装</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210604094134326.png" alt="image-20210604094134326"></p><p><strong>处理流程</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210604094442731.png" alt="image-20210604094442731"></p><p><strong>基本i信息查询</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210604094934070.png" alt="image-20210604094934070"></p><p><strong>录制命令</strong></p><p>-f  指定使用…采集数据</p><p>-i  指定从哪采集书，是文件索引号</p><p>-r  指定帧率</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -f x11grab -video_size 1920x1080 -i $DISPLAY -f alsa -i default -c:v ffvhuff -c:a flac test.mkv</code></pre></div><p>ffplay播放</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -f x11grab -video_size 1920x1080 -i $DISPLAY -f alsa -i default -c:v ffvhuff -c:a flac test.mkv</code></pre></div><h2 id="使用-v5">使用</h2><p><strong>录制</strong></p><p>音频</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -f alsa -i hw:0 alsaout.wav</code></pre></div><h4 id="分解-和-复用">分解 和 复用</h4><p>-an 不要音频</p><p>-acodec copy   -vcodec copy</p><h3 id="处理原始数据">处理原始数据</h3><p>音频 PCM   视频 YUV</p><h4 id="FFMPEG-提取yuv">FFMPEG 提取yuv</h4><p>ffmpeg -f alsa -i hw:1 alsaout.wa</p><p>ffmpeg -i ig.mp4 -vn -ar 44100 -ac 2 -f s16le igpcm.pcm</p><p>s 有符号  16 每个数值用16位表示  le 存储方式 （小头存储）</p><h4 id="裁剪-合并">裁剪 合并</h4><p>ffmpeg -i ig.mp4 -vf crop=in_w-400:in_h-200 -c:v libx264 -c:a copy igcrop.mp4</p><h4 id="图片和视频互转">图片和视频互转</h4><p>ffmpeg -i ig.mp4 -vf crop=in_w-400:in_h-200 -c:v libx264 -c:a copy igcrop.mp4</p><p>input.txt</p><p>file “name.mp4”</p><p>…</p><p>视频选图片ffmpeg -i video.mp4 -r 1 -f image2 image-%4d.jpeg</p><p>图片整视频ffmpeg -i image-%4d.jpeg out.mp4</p><h4 id="滤镜命令">滤镜命令</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210604131256759.png" alt="image-20210604131256759"></p><p>ffmpeg -i ig.mp4 -vf crop=in_w-400:in_h-200 -c:v libx264 -c:a copy igcrop.mp4</p><h4 id="直播推-拉流">直播推/拉流</h4><p>ffmpeg -i  rtmp://58.200.131.2:1935/livetv/hunantv -c copy out.flv</p><h2 id="基本进阶">基本进阶</h2><h3 id="初步">初步</h3><p>源码结构</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210604140904947.png" alt="image-20210604140904947"></p><h3 id="操作目录">操作目录</h3><h4 id="处理流数据">处理流数据</h4><p>多媒体文件：容器  包含多个流</p><p>流：每种流由不同编码器编码的</p><p>包：从流中读取的数据  包含一个或多个帧</p><p><strong>几个重要的结构体</strong></p><ul><li>AVFormateContext ： 链接多个流的桥梁</li><li>AVStream：所有的流</li><li>AVPacket： 流中的每一块数据</li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210605105046328.png" alt="image-20210605105046328"></p><p><strong>实战：打印音视频信息</strong></p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/log.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat/avformat.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"begin!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AVFormatContext <span class="token operator">*</span>fmt_ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token punctuation">;</span>     <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">av_register_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmt_ctx<span class="token punctuation">,</span> <span class="token string">"./ig.mp4"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">"Cant open !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">av_dump_format</span><span class="token punctuation">(</span>fmt_ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"./ig.mp4"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmt_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/* code */</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><strong>实战：抽取多媒体数据</strong></p><ul><li>av_init_packet()</li><li>av_find_best_stream()</li><li>av_read_frame()  / av_packet_unref()</li></ul><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavutil/log.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libavformat/avformat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;libavcodec/packet.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token operator">*</span> src <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> dst <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> audio_index<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"begin!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AVPacket pkt <span class="token punctuation">;</span>    AVFormatContext <span class="token operator">*</span>fmt_ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token punctuation">;</span>     <span class="token function">av_log_set_level</span><span class="token punctuation">(</span>AV_LOG_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">av_register_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// read two params from console</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">"wrong number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    src <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     dst <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>src <span class="token operator">||</span> <span class="token operator">!</span>dst<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">"wrong input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ret <span class="token operator">=</span> <span class="token function">avformat_open_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmt_ctx<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">"Cant open !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     FILE<span class="token operator">*</span> dst_fd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dst_fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">"cant open file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">av_dump_format</span><span class="token punctuation">(</span>fmt_ctx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// get stream</span>    ret <span class="token operator">=</span> <span class="token function">av_find_best_stream</span><span class="token punctuation">(</span>fmt_ctx<span class="token punctuation">,</span> AVMEDIA_TYPE_AUDIO<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">"Cant find best stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>dst_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    audio_index <span class="token operator">=</span> ret<span class="token punctuation">;</span>    <span class="token function">av_init_packet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pkt<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// dump to a new file</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">av_read_frame</span><span class="token punctuation">(</span>fmt_ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pkt<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read frame"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pkt<span class="token punctuation">.</span>stream_index <span class="token operator">==</span> audio_index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            len <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>pkt<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pkt<span class="token punctuation">.</span>size<span class="token punctuation">,</span> dst_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">!=</span> pkt<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">av_log</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> AV_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">"fwrite wrong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">av_packet_unref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pkt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">avformat_close_input</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fmt_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dst_fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>dst_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token comment">/* code */</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><strong>实战：抽H264</strong></p><ul><li>startcode  特征码，区分帧与帧</li><li>SPS / PPS</li><li>codec --&gt; extradata(sps/pps)</li></ul><p><strong>实战：MP4 – flv</strong></p><ul><li><em>输出上下文</em></li><li>生成新的音频轨 new Stream</li><li>其他参数的copy</li><li>header 多媒体文件头</li><li>写进文件中</li></ul><p><strong>实战 ：截取音视频</strong></p><ul><li>av_seek_frame</li></ul><h3 id="中级开发">中级开发</h3><h4 id="H264编码">H264编码</h4><blockquote><p>libavcodec/avcodec.h</p></blockquote><p>常用u数据结构</p><ol><li>AVCodec编码器结构体</li><li>AVCodecContext 编码器上下问</li><li>AVFrame 解码后的帧\</li></ol><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210606103051471.png" alt="image-20210606103051471"></p><p><strong>实战：视频转图片</strong></p><h4 id="AAC编码">AAC编码</h4><h2 id="SDL-编码">SDL 编码</h2><p>Simple DirectMedia Layer  跨平台媒体a开源库</p><p>编译…</p><h3 id="使用-v6">使用</h3><ol><li>添加头文件</li><li>初始化SDL</li><li>退出SDL</li></ol><p>SDL渲染窗口</p><h4 id="创建窗口">创建窗口</h4><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;SDL.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SDL_Window <span class="token operator">*</span>window <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">SDL_Init</span><span class="token punctuation">(</span>SDL_INIT_VIDEO<span class="token punctuation">)</span><span class="token punctuation">;</span>    window <span class="token operator">=</span> <span class="token function">SDL_CreateWindow</span><span class="token punctuation">(</span><span class="token string">"SDL2 Window"</span><span class="token punctuation">,</span>                    <span class="token number">200</span><span class="token punctuation">,</span>                    <span class="token number">200</span><span class="token punctuation">,</span>                    <span class="token number">640</span><span class="token punctuation">,</span>                    <span class="token number">480</span><span class="token punctuation">,</span>                    SDL_WINDOW_SHOWN <span class="token operator">|</span> SDL_WINDOW_BORDER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"create window wrong !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> __EXIT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">SDL_DestroyWindow</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>__EXIT<span class="token operator">:</span>    <span class="token function">SDL_Quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="音视频同步">音视频同步</h2><p>时间戳 ： PTS DTS</p><p>I B P</p><p>PTS ： AVPacket 中、 AVFrame 中</p><p>av_frame_get_best…_timestamp</p><p><strong>时间基</strong></p><p>tbr：帧率 （timebase rate）</p><p>tbn：time base of stream</p><p>tbc：time base of codec</p><h2 id="image-20210606204155890"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210606204155890.png" alt="image-20210606204155890"></h2><h2 id="JNI">JNI</h2><h3 id="基本i概念">基本i概念</h3><p>JNIEnv  ：</p><p>JavaVM：</p><p>一个JAVAVM----很多A线程     一个线程 — 一个JNIEnv</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token function">Java_com_example_firstcjni_MainActivity_stringFromJNI</span><span class="token punctuation">(</span>        JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span>        jobject <span class="token comment">/* this */</span><span class="token punctuation">)</span>     <span class="token comment">// jobject 谁调的这个方法</span></code></pre></div><p><strong>Singature</strong></p><p>Java C相互调用 函数参数的描述符</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210606223147453.png" alt="image-20210606223147453"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210606223157567.png" alt="image-20210606223157567"></p><h3 id="C-C-调java方法">C/C++调java方法</h3><h2 id="i问题">i问题</h2><ol><li>u如何理解AVFormatContext？</li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>音视频</title>
    <link href="/2021/04/25/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    <url>/2021/04/25/%E9%9F%B3%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<h1>音视频</h1><h2 id="基本概念-v4">基本概念</h2><h3 id="I-B-P-帧">I B P 帧</h3><span id="more"></span><p>I frame:自身可以通过视频解压算法解压成一张单独的完整的图片</p><p>P frame：需要参考其前面的一个I frame 或者P frame来生成一张完整的图片</p><p>B frame:则要参考其前一个I或者P帧及其后面的一个P帧来生成一张完整的图片</p><p>GOP  Group of picture  一组变化不大的视频帧<br>GOP的第一帧成为关键帧：<strong>IDR</strong></p><p>IDR都是I帧，可以防止一帧解码出错，导致后面所有帧解码出错的问题。当解码器在解码到IDR的时候，会将之前的参考帧清空，重新开始一个新的序列，这样，即便前面一帧解码出现重大错误，也不会蔓延到后面的数据中。</p><h3 id="DTS-、PTS">DTS 、PTS</h3><p>DTS： Decoding Time Stamp  标识读入内存中的ｂｉｔ流在什么时候开始送入解码器中进行解码</p><p>PTS :   Presentation Time Stamp  度量解码后的视频帧什么时候被显示出来</p><p><strong>在没有B帧的情况下，DTS和PTS的输出顺序是一样的，一旦存在B帧，PTS和DTS则会不同</strong></p><h3 id="色彩空间-YUV">色彩空间 YUV</h3><p>亮度和色度分离 Y 亮度  UV 两种色度</p><p>Y：亮度，就是灰度值。除了表示亮度信号外，还含有较多的绿色通道量。<br>U：蓝色通道与亮度的差值。<br>V：红色通道与亮度的差值。</p><p><strong>优势</strong></p><p>人眼对亮度敏感，对色度不敏感，因此减少部分UV的数据量，人眼却无法感知出来，这样可以通过压缩UV的分辨率，在不影响观感的前提下，减小视频的体积。</p><h4 id="存储方式">存储方式</h4><p>planar  packed</p><p><strong>planar 先存all Y 再U  V</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210427090315589.png" alt="image-20210427090315589"></p><p>packed 顺序存储</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210427090350317.png" alt="image-20210427090350317"></p><p>pakced存储方式已经非常少用，大部分视频都是采用planar存储方式。</p><p>细分planar</p><ol><li><p>YUV  4：4：4 一个Y对应一组UV</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210427090442152.png" alt="image-20210427090442152"></p></li><li><p>YUV 4：2：2 每两个Y对应一组UV</p><p><img src="/home/pplong/.config/Typora/typora-user-images/image-20210427090512408.png" alt="image-20210427090512408"></p></li><li><p>YUV 4：2：0 每四个Y公用一组UV</p><p><strong>最常用</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210427090547683.png" alt="image-20210427090547683"></p><p>420又分两种模式 三平面存储</p><p>YYYYYYYYUUVV（如I420）或YYYYYYYYVVUU（如YV12）</p><p>420SP 两平面存储  YYYYYYYYUVUV（如NV12）或YYYYYYYYVUVU（如NV21）</p></li></ol><h3 id="ACC">ACC</h3><p>两种格式 ADIF 、ADTS</p><h4 id="ADIF">ADIF</h4><p>Audio Data Interchange Format。 音频数据交换格式</p><p>可以确定的找到这个音频数据的开始，不需进行在音频数据流中间开始的解码，即它的<strong>解码必须在明确定义的开始处进行</strong>。这种格式常用在磁盘文件中。</p><h4 id="ADTS：">ADTS：</h4><p>Audio Data Transport Stream。 音频数据传输流。这种格式的特征是它是一个有同步字的比特流，解码可以在这个流中任何位置开始。它的特征类似于mp3数据流格式。</p><h3 id="硬解码和软解码">硬解码和软解码</h3><h2 id="图像基础">图像基础</h2><h3 id="矢量图、位图">矢量图、位图</h3><ol><li>矢量图</li><li>位图</li></ol><h3 id="颜色">颜色</h3><h4 id="RGB">RGB</h4><ol><li><p>RGB16</p><p>RGB565</p><p>RGB555 最高位不用</p></li><li><p>RGB24</p><p>内存中是 BGR</p></li><li><p>RGB32</p><p>BGR 后8个字节保留</p><p>ARGB32 ： BGRA A代表ALPHA透明度</p></li></ol><h4 id="YCbCr">YCbCr</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210427093047209.png" alt="image-20210427093047209"></p><p>文章有转载</p><p><a href="https://zhuanlan.zhihu.com/p/347989727">https://zhuanlan.zhihu.com/p/347989727</a></p><h2 id="概述-v5">概述</h2><p><strong>音视频播放器架构</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210604085343266.png" alt="image-20210604085343266"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RecylerView滑动嵌套的问题</title>
    <link href="/2021/04/10/RecylerView%E6%BB%91%E5%8A%A8%E5%B5%8C%E5%A5%97%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/04/10/RecylerView%E6%BB%91%E5%8A%A8%E5%B5%8C%E5%A5%97%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1>RecycleView滑动嵌套问题</h1><h2 id="问题引入">问题引入</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210410162131807.png" alt="image-20210410162131807"></p><p>父rec和子recy都是竖直或者横向的时候，这个时候滑动，只有父布局会响应</p><p>原因：父rec消耗了此次点击事件</p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android个人开发时总结</title>
    <link href="/2021/03/06/Android%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <url>/2021/03/06/Android%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1>Android个人项目开发总结</h1><hr><h2 id="dddraft-手账">dddraft 手账</h2><h3 id="布局处理">布局处理</h3><p>问题 ： RecycleView滑动后返回  内容消失   ----RecycleView的复用机制</p><p>解决 ：尝试取消RecycleView的复用   未果</p><span id="more"></span><p>​后使用Scrollview 包裹 RelativeLayout，能够解决滑动后的View消失</p><p>​但是又涉及到内部12个月份的布局顺序排列问题，这里最初使用的是RelativeLayout的顺序排序，但是顺序排序会造成之后动态添加的元素，也会按照这个顺序排序，即添加在顶部或者底部。</p><p>​这里我之后的解决方案并不是很好，我采用了初始化时动态生成12个View，并且固定的设置每个view的topmargin</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//循环体内</span>params<span class="token punctuation">.</span>topMargin <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1029</span><span class="token punctuation">;</span>scrollLinearLayout<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h3 id="自定义的DrugImageView">自定义的DrugImageView</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//解决滑动时带来的 ACTION_CANCEL 的问题（事件分发）</span><span class="token comment">//阻止父层的View截获touch事件</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestDisallowInterceptTouchEvent</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>解决拖动问题</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>    isUpRepeat <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    lastX <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lastY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 还原初始点击时 相对图片的xy 坐标</span>    listener<span class="token punctuation">.</span><span class="token function">onDragDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fingerCount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime <span class="token operator">></span> <span class="token class-name">ClickTimeDuration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            offsetX <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastX<span class="token punctuation">)</span><span class="token punctuation">;</span>            offsetY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastY<span class="token punctuation">)</span><span class="token punctuation">;</span>            rootView<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offsetX<span class="token punctuation">,</span> <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offsetY<span class="token punctuation">,</span> <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offsetX<span class="token punctuation">,</span> <span class="token function">getBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>layout 会使其getLeft 等都发生改变</p><p>核心思想：</p><p>通过lastX记录点击时手指相对于图片内部的位置，然后通过offsetX进行滑动时相对起点的判断，判断永远都是在内部的，但是layout是在外部进行的</p><h3 id="ScaleGestureDetector问题">ScaleGestureDetector问题</h3><p>按照比例进行缩放，但是最初检测不到缩小的手势</p><p>只有先放大后才能够检测到缩小的指令，这里不清楚</p><h3 id="WriteableEditText">WriteableEditText</h3><p>可动态设置的字体  --大小  --和颜色的TextView ，并且确保同一个Text中可以有多个不同格式的Text，并且可拖动</p><ul><li>单击和长按的判断 。实现单击显示/隐藏button，长按实现拖动</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>    firstClickTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstClickTime <span class="token operator">-</span> secondClickTime <span class="token operator">></span> timeDuration<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">">200"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFirstClicked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        initX <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getRawX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getRawY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isFirstClicked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    listener<span class="token punctuation">.</span><span class="token function">onMove</span><span class="token punctuation">(</span>rootView<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getRawX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getRawY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initX<span class="token punctuation">,</span> initY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Writebale"</span><span class="token punctuation">,</span> <span class="token string">"down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    secondClickTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>secondClickTime <span class="token operator">-</span> firstClickTime <span class="token operator">&lt;</span> timeDuration<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dragButton<span class="token punctuation">.</span><span class="token function">getAlpha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dragButton<span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            borderView<span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            dragButton<span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            borderView<span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span></code></pre></div><ul><li><p>另一种动态设置位置的方式</p><p>回调中</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMove</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> rawx<span class="token punctuation">,</span> <span class="token keyword">int</span> rawy<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//x： first rawx</span>    <span class="token class-name">Rect</span> scrollBounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scrollView<span class="token punctuation">.</span><span class="token function">getDrawingRect</span><span class="token punctuation">(</span>scrollBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取整个scrollView的大小</span>    v<span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span>rawx <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">setY</span><span class="token punctuation">(</span>rawy <span class="token operator">-</span> y <span class="token operator">+</span> scrollBounds<span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></li><li><p>文字方面，多个EditText放在一起后 滑动消失再返回后发现输入的字体消失，这里要通过TextWatcher实现保存</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">editText<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTextChangedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeTextChanged</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">int</span> after<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequiresApi</span><span class="token punctuation">(</span>api <span class="token operator">=</span> <span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>P</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTextChanged</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> before<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TextStyleHelper</span><span class="token punctuation">.</span><span class="token function">setEditText</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> currentTextStyle<span class="token punctuation">,</span> editText<span class="token punctuation">,</span> start<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterTextChanged</span><span class="token punctuation">(</span><span class="token class-name">Editable</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//设置指针位置 editText.getEditText().setSelection(s.length());</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></li></ul><h3 id="ScannableString">ScannableString</h3><p>实现TextView的多格式字体显示</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">editText<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeTextChangedListener</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">;</span>editText<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>editText<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTextChangedListener</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>核心： 先在内部除去watcher 添加文字后再恢复watcher</p><p>原因： 死循环</p><p>当一个TextView中含有TextWatcher时 在调用setText时，会先去搜索是否有TextWatcher  又我这里的setText方法是在TextWatcher中调用的，所以就形成了一个死循环</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">sendOnTextChanged</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> before<span class="token punctuation">,</span> <span class="token keyword">int</span> after<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mListeners <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//去遍历所有的TextWatcher</span>        <span class="token keyword">final</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TextWatcher</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> mListeners<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//调用onTextChanged的方法</span>            list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onTextChanged</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> start<span class="token punctuation">,</span> before<span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mEditor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> mEditor<span class="token punctuation">.</span><span class="token function">sendOnTextChanged</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> before<span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="Sudoko-数独游戏">Sudoko 数独游戏</h2>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格式</title>
    <link href="/2021/02/23/%E6%A0%BC%E5%BC%8F/"/>
    <url>/2021/02/23/%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p><span style='color:red;font-size:24px'>nihao</span></p><p><span style='color:red;font-size:24px'>问题</span></p><p><span style='color:orange;font-size:24px'>重点</span></p><p><span style='color: #DA70D6;font-size:24px'>未解决问题</span></p><p><span style='color: #DAA520;font-size:24px'>流程</span></p><p><span style='color:#8A2BE2;font-size:24px'>看情况</span></p><p><span style='color: #00BFFF;font-size:24px'>个人理解</span></p><p><span style='color:#3CB371;font-size:24px'>醒悟</span></p><p><span style='color:#FA8072;font-size:24px'>标题</span></p><p><span style='color:#FA8072;font-size:24px'>是</span></p><p><span style='color:#FA8072;font-size:24px'>是</span></p><center>asdas</center>]]></content>
    
    
    <categories>
      
      <category>模块</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网常识</title>
    <link href="/2021/01/22/%E8%AE%A1%E7%BD%91%E5%B8%B8%E8%AF%86md/"/>
    <url>/2021/01/22/%E8%AE%A1%E7%BD%91%E5%B8%B8%E8%AF%86md/</url>
    
    <content type="html"><![CDATA[<h1>计网常识</h1><!-- toc --><p>[toc]</p><h2 id="五层协议">五层协议</h2><h3 id="物理层">物理层</h3><p>解决在各种传输媒体上传输比特0 和 1 的问题，给数据链路层提供透明传输比特流的服务</p><p>透明： 数据链路层不需要知道物理层使用什么方法传输的</p><span id="more"></span><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331214511474.png" alt="image-20210331214511474"></p><h3 id="数据链路层">数据链路层</h3><p>三个重要问题： 封装成帧、差错检测、可靠传输</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331214815983.png" alt="image-20210331214815983"></p><p>链路：一个节点到相邻节点的一段物理线路，中间没有任何其他的交换节点</p><p>数据链路：实现通信协议的硬件和软件加到连路上，以帧单位封装处理</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331215104288.png" alt="image-20210331215104288"></p><p>帧传输过程中出现误码（1变成0）</p><p>发送方发送数据前将发送的数据和算法计算出<strong>检错码</strong>，放在帧尾</p><p>接受方再进行验证，如果错误，则不会接受该帧，就丢弃了</p><h4 id="封装成帧">封装成帧</h4><p>给上层交付的协议数据单元添加帧头和帧尾使之成为帧</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331215956065.png" alt="image-20210331215956065"></p><p>帧头帧尾：进行帧定界  —</p><ol><li>帧定界标志（不一定有）</li><li>物理层添加前导码，帧间隔时间 96bit</li></ol><p>透明传输：数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样</p><ul><li>面向字节的物理链路使用字节填充的方法实现透明传输 – ESC 27</li><li>面向比特的物理链路使用比特填充的方法实现透明传输</li></ul><p>如何解决不同方式的误判（与界定符相同）</p><h4 id="差错检测">差错检测</h4><p><strong>比特差错</strong>：比特传输时1 0 可能会改变</p><p>误码率：错误的比特占比</p><p>判断：差错检测码</p><ol><li><p>奇偶校验： 在数据后添加1 是的整个数据 的1 的个数为奇数(奇校验)或者偶数(偶校验)</p><p>缺点，只能检测奇数位的错误</p></li><li><p>循环冗余校验：双方约定好一个生成多项式（多项式的各项系数生成比特串），发送方基于待发送的数据和生成多项式计算出差错检测码，也就是冗余码，添加到带传输的后面一起传输（类似Digest的数字签名），接收方通过此方法判断</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331221431870.png" alt="image-20210331221431870"></p></li></ol><h4 id="可靠传输">可靠传输</h4><p>向上层的服务类型：</p><p>不可靠传输服务：丢弃有误码的帧，然后什么都不做</p><p>可靠传输服务：发送端发什么就接受什</p><p>一般交由上层处理</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401102629080.png" alt="image-20210401102629080"></p><p><strong>点对点协议</strong></p><p>PPP Point to Point Protocol</p><p>为在点对点链路传输各种协议数据报提供了标准方法</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401104045712.png" alt="image-20210401104045712"></p><p>从ISP 互联网服务提供商  中国移动… 获得提供的合法ip地址</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401103306939.png" alt="image-20210401103306939"></p><p>存在误判 ，解决方法</p><ol><li><p>帧定界</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401103442613.png" alt="image-20210401103442613"></p></li><li><p>前导码</p></li></ol><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401103535405.png" alt="image-20210401103535405"></p><h4 id="地址">地址</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401104430428.png" alt="image-20210401104430428"></p><h5 id="Mac地址">Mac地址</h5><p>点对点信道的数据链路层不需要地址</p><p>使用广播信道的数据链路层需要使用地址来区分</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401104748601.png" alt="image-20210401104748601"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401104856860.png" alt="image-20210401104856860"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401105646563.png" alt=""></p><p>单播  发送Mac地址不匹配，丢弃</p><p>广播帧 目的字段 FFFFFFFFFFFF  接受</p><p>多播  多播地址  多播组列表</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401105523344.png" alt="image-20210401105523344"></p><h5 id="IP地址">IP地址</h5><p>网际层</p><p>因特网上主机和路由器使用的地址</p><p>网络编号 和 主机编号</p><p>同一网络的网络编号是相同的</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401110022989.png" alt="image-20210401110022989"></p><p>网络传播需要IP地址和Mac地址</p><p>网络传输中主机有运输层和应用层… 而路由器的最高层就是网络层</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401222930927.png" alt="image-20210401222930927"></p><p>封装时的地址</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401223316294.png" alt="image-20210401223316294"></p><h5 id="ARP">ARP</h5><p>IP地址转MAC地址</p><p>地址解析协议</p><p>每个主机都有 ARP高速缓存表 ---- 电话簿</p><p>ARP请求报文发送在MAC帧中 只能在一个网络  一个链路中使用</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401223810852.png" alt="image-20210401223810852"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401224012968.png" alt="image-20210401224012968"></p><h3 id="网络层">网络层</h3><p>主要任务：实现网络互连，实现数据包在网络间的传输</p><p>解决问题：网络层寻址问题  提供怎样的服务   路由选择问题（不同路径选择）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401224627313.png" alt="image-20210401224627313"></p><p>**网络层提供的两种服务**</p><p>面向连接的虚电路服务：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401224838914.png" alt="image-20210401224838914"></p><ul><li><p>无连接的数据报服务</p><p>TCP/IP体系结构的因特网网际层采用</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401225008037.png" alt="image-20210401225008037"></p></li></ul><h4 id="IPV4">IPV4</h4><p>因特网每一台主机/路由器 的每一个接口分配在全世界唯一的32比特标识符</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401225354928.png" alt="image-20210401225354928"></p><h5 id="分类编制">分类编制</h5><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401225751543.png" alt="image-20210401225751543"></p><p>A类地址</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401230004953.png" alt="image-20210401230004953"></p><p>B类地址</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401230208878.png" alt="image-20210401230208878"></p><p>C类地址</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401230335803.png" alt="image-20210401230335803"></p><p>特殊情况</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210401230644359.png" alt="image-20210401230644359"></p><h5 id="划分子网">划分子网</h5><p>需要划分子网，利用原有网络中大量剩余的IP地址，分配第三部分…</p><p>因此有了：<strong>子网掩码</strong></p><p>32比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号</p><p>注意不同的网络类别有不同位数的网络号和主机号</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210402084027580.png" alt="image-20210402084027580"></p><p>举个例子</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210402084230681.png" alt="image-20210402084230681"></p><p>如何被划分成两个子网的</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210402084626964.png" alt="image-20210402084626964"></p><p>默认子网掩码</p><p>A类 8位网络号 ： 255.0.0.0</p><p>B类 16位网络号 255.255.0.0</p><p>C类 24位网络号 255.255.255.0</p><p>注意，主机号为0代表有一个 为1000000 代表有两个 （注意方向和顺序）</p><h5 id="无分类编址">无分类编址</h5><p>数量巨大的C雷王因为地址空间太小并没有充分使用，而IP地址仍在加速消耗，IPV4地址空间紧张</p><p><strong>CIDR Classless Inter Domain Routing</strong></p><p>消除了传统的A\B\C类地址和划分子网的概念，更有效的分配Ipv4地址空间，并且可以在新的Ipv6使用之前允许因特网的规模继续增长</p><p>斜线记法</p><p>128.14.35.7 / 20  代表网络前缀占用的比特数量为20 主机编号就为12</p><p>路由聚合   （构造超网）</p><p>方法： 找共同前缀</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210402090132427.png" alt="image-20210402090132427"></p><p><strong>IPV4的地址应用规划</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210402091203126.png" alt="image-20210402091203126"></p><p>定长： 先确定主机数</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210402091834330.png" alt="image-20210402091834330"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210402092118490.png" alt="image-20210402092118490"></p><p>变长的子网掩码相当于串行动态分配</p><h2 id="Http">Http</h2><p>HyperTextTransferProtocol  超文本传输协议  用于从WWW服务器传输超文本到本地浏览器的传输协议</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210310221622240.png" alt="image-20210310221622240"></p><p>所有消息用明文发送  通过公共的互联网</p><p>HTTP报文字段梳理[HTTP报文首部]<a href="https://www.processon.com/view/link/58025201e4b0d6b27dd4c8af#map">https://www.processon.com/view/link/58025201e4b0d6b27dd4c8af#map</a></p><h3 id="请求方法">请求方法</h3><table><thead><tr><th>方法</th><th>版本</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td><strong>HTTP1.0</strong></td><td>请求指定的页面信息，返回实体主体</td></tr><tr><td>HEAD</td><td><strong>HTTP1.0</strong></td><td>类似GET请求，但返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>POST</td><td><strong>HTTP1.0</strong></td><td>向指定资源提交数据进行处理请求(提交表单或者上传文件), 数据被包含在请求体中。POST请求可能导致新的资源的建立或者已有资源更新</td></tr><tr><td>PUT</td><td>HTTP1.1</td><td>用请求有效载荷替换目标资源的所有当前表示。</td></tr><tr><td>DELETE</td><td>HTTP1.1</td><td>删除指定的资源</td></tr><tr><td>CONNECT</td><td>HTTP1.1</td><td>建立一个到由目标资源标识的服务器的隧道(连接到能将连接改为管道方式的代理服务器)</td></tr><tr><td>OPTIONS</td><td>HTTP1.1</td><td>描述目标资源的通信选项</td></tr><tr><td>TRACE</td><td>HTTP1.1</td><td>沿着目标资源的路径执行一个消息环回测试(回显服务器收到的请求)</td></tr><tr><td>PATCH</td><td>HTTP1.1</td><td>对资源应用部分进行修改(只改一部分属性)</td></tr></tbody></table><blockquote><p><strong>区别POST和PUT方法的差异</strong></p><p>关键在于PUT方法是<strong>幂等的</strong>,第一次调用和多次调用PUT请求产生始终相同的副作用(要么创建要么更新)，且要求前端提供的是一个完整的资源对象(也就是必须已知对象类型); 而多次调用POST请求则可能会创建多个相同资源(POST方法主要是新建资源) (POST不要求已知对象类型, 一般知识修改目标对象的部分内容)(GET/PUT/DELETE方法都是幂等的)</p></blockquote><h3 id="常见的网络请求码">常见的网络请求码</h3><ul><li>101 等到接受其他部分</li><li>200 处理成功</li><li>201 请求成功服务器创建 了新的资源</li><li>202 服务器接受请求但未处理</li><li>204 无内容</li><li>301 永久移动</li><li>302 临时移动</li><li>304 缓存没过期，可以直接用缓存</li><li>400 错误请求  语法</li><li>401 未身份认证  需要登陆</li><li>403 未授权(权限不够) 服务器拒绝请求</li><li>404 找不到请求资源路径</li><li>405 禁止请求中指定的方法</li><li>408 请求超时</li><li>500 服务器内部错误</li><li>502 网关/代理错误</li><li>503 服务不可用</li><li>505 http版本不支持</li></ul><p><strong>HTTP1.0</strong></p><ul><li>每次请求都需要TCP握手</li><li>存在队头阻塞</li></ul><p><strong>HTTP1.1</strong></p><ul><li>采用长连接，每次请求用以前的连接即可</li><li>新增五个请求方法</li><li>目前一般使用HTTP1.1</li><li>解决对同一域名请求次数过多(浏览器会限制一段时间内对同一域名到请求数)：<ul><li>管线技术: 一个连接可以一次发多个请求<strong>但响应必须要按顺序接收</strong> (不太常用)</li><li>精灵图：多个元素小图整合到一张大图发给客户端然后再裁剪</li><li>Data URL: 经过Base64编码以字符串方式表示</li><li>域名分片: 同时请求多个域名</li></ul></li></ul><h3 id="Http2-0">Http2.0</h3><h4 id="多路复用">多路复用</h4><p>​多路复用技术：<strong>解决HTTP1.1队头阻塞的问题</strong> 单连接多资源的方式，减少服务端的链接压力,内存占用更少,连接吞吐量更大；由于减少TCP 慢启动时间，提高传输的速度. 允许单一HTTP 2 连接同时发起多重的请求 - 响应消息</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210310221742708.png" alt="image-20210310221742708"></p><p><strong>多个Stream复用一条TCP连接达到并发效果</strong></p><ul><li>一个TCP连接包含多个Stream，Stream中包含多个Message,</li><li>Message对应HTTP1.x的一个请求或响应。Message包含多个Frame</li><li>Frame是HTTP2的最小单位，以二进制压缩格式放在HTTP1.x的内容， 一条HTTP消息可由多个Frame组成(合称为一条Message)。<strong>一条Frame可以由多个TCP报文组成</strong></li></ul><p>在 HTTP/2 连接上，<strong>不同 Stream 的帧是可以乱序发送的（因此可以并发不同的 Stream ）</strong>，因为每个帧的头部会携带 Stream ID 信息，所以接收端可以通过 Stream ID 有序组装成 HTTP 消息，而<strong>同一 Stream 内部的帧必须是严格有序的</strong>。</p><h4 id="二进制分帧"><strong>二进制分帧</strong></h4><p><img src="https://camo.githubusercontent.com/66ea435b7b3d6426bb30bec91500f4519664fd70386e4dad88f2083f75345e04/68747470733a2f2f63646e2e7869616f6c696e636f64696e672e636f6d2f67682f7869616f6c696e636f6465722f496d616765486f737434406d61696e2f2545372542442539312545372542422539432f68747470322f2545352542382541372545362541302542432545352542432538462e706e67" alt=""></p><p>在二进制分帧层中， HTTP/2 会将所有传输的信息分割为帧（frame）,并对它们采用二进制格式的编码 ，其中 首部信息会被封装到 HEADER frame，而相应的 Request Body 则封装到 DATA frame 里面。这也就类似TCP数据包的结构了，每个HTTP2包具有标识该Stream的ID，标识该 Frame 属于哪个 Stream.所以即使请求是不按序的，也可以根据相同ID的流来进行顺序组合</p><p>HTTP 性能优化的<strong>关键并不在于高带宽，而是低延迟</strong>。TCP 连接会随着时间进行自我「调谐」，起初会限制连接的最大速度，如果数据成功传输，会随着时间的推移提高传输的速度。这种调谐则被称为 TCP 慢启动。由于这种原因，让原本就具有突发性和短时性的 HTTP 连接变的十分低效。</p><h4 id="首部压缩">首部压缩</h4><p>​ HTTP/1 中，HTTP 请求和响应都是由「<strong>状态行</strong>、<strong>请求 / 响应头部</strong>、<strong>消息主体</strong>」三部分组成。一般而言，消息主体都会经过 gzip 压缩，或者本身传输的就是压缩过后的<strong>二进制</strong>文件（例如图片、音频），但状态行和头部却没有经过任何压缩，直接以纯文本传输。</p><p>随着 Web 功能越来越复杂，每个页面产生的请求数也越来越多，导致消耗在头部的流量越来越多，尤其是每次都要传输 UserAgent、Cookie 这类不会频繁变动的内容，完全是一种浪费。</p><p>我们再用通俗的语言解释下，压缩的原理。头部压缩需要在支持 HTTP/2 的浏览器和服务端之间：</p><ul><li>维护一份相同的静态字典（Static Table），包含常见的头部名称，以及特别常见的头部名称与值的组合(61种)；</li><li>维护一份相同的动态字典（Dynamic Table），可以动态的添加内容。使得动态表生效有一个前提：<strong>必须同一个连接上，重复传输完全相同的 HTTP 头部</strong></li><li>支持基于静态哈夫曼码表的<strong>哈夫曼编码</strong>（Huffman Coding） (包含ASCII码表)；</li></ul><p>静态字典的作用有两个：</p><p>1）对于完全匹配的头部键值对，例如 “:method :GET”，可以直接使用一个字符表示；</p><p>2）对于头部名称可以匹配的键值对，例如 “cookie :xxxxxxx”，可以将名称使用一个字符表示。</p><p>HTTP/2 中的静态字典如下（以下只截取了部分）：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210310224715407.png" alt="image-20210310224715407"></p><p>浏览器和服务端都可以向动态字典中添加键值对，之后这个键值对就可以使用一个字符表示了。需要注意的是，动态字典上下文有关，需要为每个 HTTP/2 连接维护不同的字典。在传输过程中使用，使用字符代替键值对大大减少传输的数据量。</p><h4 id="服务器推送"><strong>服务器推送</strong></h4><p>服务端推送是一种在客户端请求之前发送数据的机制。当代网页使用了许多资源:HTML、样式表、脚本、图片等等。在HTTP/1.x中这些资源每一个都必须明确地请求。这可能是一个很慢的过程。浏览器从获取HTML开始，然后在它解析和评估页面的时候，增量地获取更多的资源。因为服务器必须等待浏览器做每一个请求，网络经常是空闲的和未充分使用的。</p><p>为了改善延迟，HTTP/2引入了server push，它允许服务端推送资源给浏览器，在浏览器明确地请求之前。<strong>一个服务器经常知道一个页面需要很多附加资源，在它响应浏览器第一个请求的时候，可以开始推送这些资源</strong>。这允许服务端去完全充分地利用一个可能空闲的网络，改善页面加载时间。</p><p><strong>需要注意的是，这和WebSocket的全双工协议是不同的，HTTP2的推送还属于是被动推送(资源文件)。</strong></p><h3 id="HTTP3-0">HTTP3.0</h3><h4 id="基于TCP而存在的问题">基于TCP而存在的问题</h4><blockquote><p><strong>HTTP2还是存在队头阻塞(在TCP层面，数据包丢失会重传)</strong></p><p>因为HTTP/2仍然基于TCP传输数据，TCP层必须保证收到的字节数据是完整且连续的，当前一个包数据没有到达后或丢包后，后续的包数据智能放在内核缓冲区中，该TCP连接中的所有请求都会被阻塞。只有等到该包数据到达时，HTTP/2应用层才能从内核中拿到数据。例如Stream 2 有个TCP包丢失，那么Stream 3 Stream 4都会被阻塞，所以要<strong>摆脱传统TCP</strong></p></blockquote><p>并且TLS和TCP握手时存在3个RTT，且由于TCP拥塞控制的慢启动过程，刚开始的TCP连接很慢。</p><p>并且当网络场景切换时，例如WiFi变成4G或重新更换WiFi节点，都会引发TLS与TCP重新连接。所以</p><p><strong>将TCP和TLS握手过程整合</strong>。<strong>在UDP基础</strong>上建立了新的<strong>应用层协议</strong> <strong>QUIC</strong>，数据帧移动到QUIC里，在传输层就有了数据帧。QUIC帧-&gt;QUIC数据包，又会加上Connection</p><p>ID区分连接</p><h4 id="无队头阻塞">无队头阻塞</h4><p>UDP不会保证数据包可靠性，由QUIC协议保证数据包可靠性，每个QUIC数据包都有唯一序号表示，如果流的一个数据包丢失了，即使该流的其他数据包到达，也无法被HTTP3读取，直到QUIC重传丢失的报文。而不会影响其他流。(分Stream ID以及Unique ID)</p><h4 id="更快连接">更快连接</h4><p><strong>合并TLS</strong></p><p>基于HTTP的TCP和TLS是分层的，一个是内核实现的传输层，一个是OpenSSL实现的表示层，所以要分批。</p><p>而HTP3在传输数据前需要QUIC协议握手来确认连接ID(UDP没有握手环节), 整个过程只需要1RTT。这是因为QUIC内部包含TLS，会在自己的帧内携带TLS的记录(并且使用TLS1.3)，因此1个RTT可同时完成建立连接和密钥连接</p><p><strong>连接迁移</strong></p><p>并且HTTP3没有基于TCP四元组来确定连接的，而是使用连接ID来标记两个通信端点，所以网络变化后，只要保持上下文信息(TLS密钥、连接ID)，就可以复用原连接。</p><h2 id="Https">Https</h2><p>两大法宝</p><p>SSL  Secure Sockets Layer 安全套接层 使用公匙加密  SSL证书</p><p>TLS  Transport Layer Security 传输层安全   最新行业标准加密协议  继承SSL</p><h3 id="数字证书">数字证书</h3><p>解决问题：身份伪装(有第三者拦截了请求方发的请求并装作是接收人)</p><ul><li>服务器向大家都信任的第三方申请身份证书。</li><li>客户和服务器建立连接时会先向服务器请求证书</li><li>服务器发送数字证书给客户端</li><li>客户端获得服务器证书后，与可信任的第三方进行验证，验证后开始进行正常的内容通信</li></ul><h3 id="数字签名">数字签名</h3><p>解决问题：数据篡改(第三方把发送方的数据包截取下来，修改关键部分并发给接收方)</p><p>验证什么？</p><ol><li>验证数据是否为目的对象发来的</li><li>验证数据完整性，即数据是否被篡改</li></ol><p><strong>怎么签名？</strong></p><ol><li>发送方对需要发送的数据进行哈希,<strong>数据还是在那里</strong>,接收方接收到数据后，按照约定的哈希算法把接收到的数据进行哈希得到哈希值(称为<strong>Digest摘要</strong>)，然后进行对比</li><li>对摘要信息进行加密(使用公/私钥进行加密)，生成<strong>数字签名Signature</strong>，数字签名随数据一起发送给接收方</li><li>接收方接收到数据包，提取出数字签名，用对应的私/公钥进行解密，解密出的是数据的hash值，再对数据包的数据部分进行哈希运算，将得到的值与解密的值进行对比即可</li></ol><h3 id="通信流程">通信流程</h3><blockquote><p>TLS 1.2版本。注意⚠️ ，在这以前已经进行了TCP三次握手</p></blockquote><ol><li>“Client Hello” 客户端向服务端发起建立HTTPS请求 (端口443)(客户端随机数R1、客户端支持的加密套件、TLS版本)</li><li>“Server Hello” 服务端确认支持的TLS版本并从客户端支持的加密套件中选一个作为会话秘钥算法，并生成随机数R2</li><li>“Certificate” 服务器再发一个请求，向客户端发送<strong>数字证书</strong></li><li>“Server Key Exchange” 服务器发送自己的公钥</li><li>“Server Hello Done” 服务器说自己发完了</li><li>“Client Key Exchange”客户端验证数字证书(用CA的公钥解密被CA私钥加密的证书并且使用指定的信息摘要算法)，通过验证后客户端生成随机数R3(<strong>预主密钥</strong> )，<strong>客户端用刚收到的公钥加密预主密钥R3并发给服务端，然后用R1 R2和预主密钥R3运算得到会话密钥Key</strong>；“Change Cipher Spec”: 以后就用商议好的算法和密钥加密;“Encrypted Handshake Message”: 客户端握手这边流程没什么问题了,可以开始加密了</li><li>“Encrypted Handshake Message” 服务器用私钥解密出预主密钥，然后用随机数R1 R2和预主密钥计算出最终的**会话密钥Key。**然后也说我这边流程没什么问题了，可以加密了。<strong>注意这一步，除了服务器私钥被泄漏，除非没人知道预主密钥是什么(除了客户端),因为用公钥加密必须用私钥解密，而不能用公钥同时加解密，所以这也是这里使用非对称加密算法的精髓所在！</strong></li><li>开始进行加密通话(核心就是用会会话密钥进行加解密)，此时双方都用<strong>对称加密</strong>的方式进行加密(不再是公钥私钥，而是一个共同的会话秘钥Key)。由于现在只有通信双方知道会话密钥，且非对称加密方式开销太大(以上步骤已经表明),所以后续数据加密就使用对称加密的方式</li></ol><p>需要注意的点：</p><ul><li>握手期间使用的密钥交换算法(非对称)：RSA等</li><li>信息摘要算法(哈希): MD5/SHA-256/SHA-1等</li><li>握手完成后进行加密算法(对称加密): AES/3DES</li></ul><h2 id="TCP协议">TCP协议</h2><p>Transmission Control Protocol  传输控制协议</p><p>属于哪一层   运输层   网际层都使用IP协议</p><p>面向连接  通信前要建立TCP逻辑连接 — 三次握手、面向字节流、首部开销大 min20字节 max60字节</p><p>可靠传输：重传机制（下文有讲）、流量控制、拥塞控制</p><h3 id="报文信息">报文信息</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331203958930.png" alt="image-20210331203958930"></p><h3 id="可靠传输-v2">可靠传输</h3><p>以字节为单位的滑动窗口  — 接受窗口和发送窗口</p><p>已收到ack确定的报文可以delete</p><p>未按序到达的数据包一般临时存放在接受窗口中，等到缺少的字节收到后再按序交付上层应用</p><p><strong>累计确认！</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331211800303.png" alt="image-20210331211800303"></p><h3 id="超时重传时间选择">超时重传时间选择</h3><p>RTT： 报文段往返时间（每次可能不同）</p><p>RTO: 超时重传时间</p><p>如何合理设置RTO时间</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331212813944.png" alt="image-20210331212813944"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331212910233.png" alt="image-20210331212910233"></p><p><strong>报文段丢失重发的情况  误判</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331213047103.png" alt="image-20210331213047103"></p><p><strong>传报文段超时情况</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331213204617.png" alt="image-20210331213204617"></p><p>针对以上两种情况的新算法：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331213442132.png" alt="image-20210331213442132"></p><h3 id="流量控制">流量控制</h3><p>发送方的数据发的太快以至于接收方接受不下，会造成数据的丢失 （2MSL ）</p><p>基于滑动窗口机制</p><p>接受窗口 rwnd</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331210025354.png" alt="image-20210331210025354"></p><p>解决死锁： 持续计时器</p><p>接收方收到0窗口通知时，开启计时器，超时则发送零窗口的探测报文(携带1字节数据)，如果对方发来的报文创口也是零，则重置计时器继续等待，如果不是零则打破僵局</p><p><strong>既然服务器的窗口为0，那为什么还能接受发送方发来的探测报文段？</strong></p><p>规定接受 0窗口探测报文段、确认报文段、携带紧急数据的报文段</p><h3 id="三次握手-v2"><strong>三次握手</strong></h3><p><strong>为什么不用两次握手</strong></p><ul><li>避免历史连接，防止旧的连接初始化了连接而造成混乱(Seq Num混乱) (<strong>最主要原因</strong>)</li><li>同步双方初始化序列号，确保可靠传输</li><li>避免资源浪费。客户端没有收到ACK报文，会重新发送SYN，服务端每收到一个SYN就会主动建立一个连接。</li></ul><p><strong>如果第三次握手发来的ACK包丢失掉，会出现什么</strong></p><p>此后服务端仍然处于SYN-RCVD状态等待接受该ACK包，客户端却开始发送数据了。服务端能正常接受吗？两种方案</p><ol><li>多数情况，客户端进入ESTABLISHED状态会立即发送数据，发送第一个数据包时会携带ACK确认序号，服务端在收到这个数据包时，通过包内的ACK确认号正常进入ESTABLISHED状态</li><li>如果客户端暂时不发数据，则服务端超时后发送SYN-ACK重传报文</li></ol><h4 id="四次挥手-v2"><strong>四次挥手</strong></h4><p><strong>为什么一定要四次挥？</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220331202037703.png" alt="image-20220331202037703"></p><ul><li>关闭连接时，客户端发送ACK-FIN表示我不再发送了，但你还可以继续发完</li><li>服务端说我收到了，等我把我发的发完我也不会继续等你了</li><li>服务端继续发送要发的数据，发完后服务端给客户端发送ACK-FIN表示我把我想发的也发完了</li><li>客户端收到该FIN，给服务端说OK，那我们就关闭连接吧</li><li>客户端等待2MSL</li></ul><p>为什么这里Server的FIN 和 ACK分两次发送呢？因为我们可以得知Client要关闭时，再发送最后一点数据给Client</p><p>第二次挥手包丢失，重传的是FIN报文还是ACK报文？ 客户端重发FIN，因为<strong>ACK报文是不会被重传的</strong></p><p>为什么要有最后一次的挥手？ 如果没有这次挥手，则服务端给客户端发送的FIN报文就不一定能接收到，<strong>客户端就认为服务端可能还会有数据要发从而保持连接</strong>。</p><p><strong>为什么会有2MSL？他有什么作用</strong></p><ol><li>保证双方正常关闭连接</li><li>防止历史连接延迟的包被新连接所接受</li></ol><p>MSL： Maximum Segment Lifetime 最大报文生存时间，任何报文在网络上存在的最长时间</p><ul><li>如果客户端不等待，第四次挥手后直接关闭自己连接，此时对服务端而言，如果客户端发来的ACK包丢失，则它不知道客户端是否正常收到第三次挥手时服务端发来的FIN-ACK包，所以就不确定客户端是否已经关闭。</li><li>如果客户端等待2MSL，(服务端在发送第三次挥手时也会开启计时)，如果第四次挥手ACK丢失后，服务端没接收到，会认为客户端没有接收到自己发来的FIN-ACK报文，则会重传FIN-ACK报文，客户端收到该报文后则会重置2MSL计时器，并发送第四次挥手的ACK报文。如果发送完该报文后且2MSL后客户端没接收到服务端重发的FIN-ACK报文，说明服务端已经接收到最后一次ACK包，客户端知晓服务端已经关闭，所以此时客户端可以关闭</li><li>另外也能避免第二次挥手后服务端继续发来的数据延迟到达而造成数据混乱情况(如果客户端不等待2MSL，直接断开连接，则如果断开连接后又与相同服务端建立连接，在发新数据的时候，上一次旧连接中第二次挥手后服务端发的数据包延迟到达，且序号刚好符合窗口要求，这时候则会被客户端直接接受，而不会被丢弃，从而造成混乱)</li></ul><h2 id="UDP">UDP</h2><p>User Datagram Protocol</p><p>无连接，可随时发送数据、网络开销小 速度快 、支持一对一 一对多(广播、多播(指定)) 多对一、报文直接打包、首部开销小 8 字节</p><p>面向报文，直接加个报文头就发出去了</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331204004782.png" alt="image-20210331204004782"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331203219149.png" alt="image-20210331203219149"></p><h2 id="DNS">DNS</h2><p>Domain Name ( to ip )System 解析域名   电话簿</p><p>过程：</p><ol><li><p>浏览器缓存</p></li><li><p>系统缓存</p></li><li><p>ISP、 因特网服务商</p></li><li><p>根域名服务器  全世界13组 ，可能这个根域名服务器不知道他的ip，但是可以知道谁可以</p><p>.com 顶级域名服务器  TLD(.com   .net  …)</p></li><li><p>TLD也不知道时，给权限名称服务器  啥都知道</p></li></ol><p>回传时，进行保存</p><h2 id="网络拥塞">网络拥塞</h2><p>拥塞： 网络中某一资源的需求 超过了该资源所能提供的可用部分，网络性能将会变差，出现拥塞而不控制，则网络的吞吐量就会随着负荷的增大而下降（堵车）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331193813129.png" alt="image-20210331193813129"></p><p>cnwd、ssthresh、rtt、swnd、数据包文段、重传计时器</p><h3 id="TCP-Tahoe">TCP Tahoe</h3><p>慢开始 cnwd &gt;&gt; 1</p><p>拥塞避免   cnwd++</p><h3 id="TCP-Reno-改进后">TCP Reno 改进后</h3><p>原因： 有时 个别报文段在网络中丢失，但实际上网络并未发生拥塞，这将导致发送方超时重传，并误认为网络发生拥塞。发送方错误地启动慢开始算法，降低了传输效率</p><p>快重传  让发送方尽快知道发生了个别报文段的丢失 ，而不是让超市重传计时器超时后再重传  相等的ack  == 3时，则相应的报文段立即重传，不会再等超时计时器超时时再重传，接下来执行快恢复算法</p><p><strong>问题： 重传后那丢失之前的数据包都收到了，那接收方重复确认时收到了之后的报文段吗</strong></p><p>收到了</p><p>快恢复</p><p>ssthresh 和 cwnd值为当前窗口的一半， 执行拥塞避免算法</p><p>也有一些把cwnd = 新的sstresh +3</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331194703992.png" alt="image-20210331194703992"></p><h2 id="对称加密和非对称加密的区别">对称加密和非对称加密的区别</h2><h3 id="对称加密">对称加密</h3><p>加密和解密使用的秘匙是同一个</p><p>优点：算法公开，计算量小，加密速度快，加密效率高</p><p>缺点：数据传送前，双方必须商定好密匙，保存。如果一方密匙泄露被黑客拦截，则加密信息不安全，每次使用对称加密算法，都需要使用其他人不知道的唯一密匙，是的双方拥有的密匙数量大</p><p>常见： DES  AES 3DES</p><h3 id="非对称加密">非对称加密</h3><p>需要公开密匙和私有密匙，一方加密，另一方的密匙就解密</p><p>过程： 甲方生成密匙 ，将其中一把作为共有的并向其他方公开，得到公有密匙的乙方使用该密匙对机密信息进行加密后发送给甲方，甲方再用私有的密匙对加密信息进行解密</p><p>优点：安全</p><p>缺点：速度慢</p><p>常见：RSA  ECC</p><h2 id="MD5">MD5</h2><p>MD5讯息摘要演算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码杂凑函数，可以产生出一个128位bit（16Byte）的散列值（hash value），用于确保信息传输完整一致。</p><p>MD5不可逆的原因是其是一种散列函数，使用的是hash算法，在计算过程中原文的部分信息是丢失了的</p><p>不过有个地方值得指出的是，一个MD5理论上的确是可能对应无数多个原文的，因为MD5是有限多个的而原文可以是无数多个。比如主流使用的MD5将任意长度的“字节串映射为一个128bit的大整数(长度始终固定)。也就是一共有2<sup>128种可能，大概是3.4*10</sup>38，这个数字是有限多个的，而但是世界上可以被用来加密的原文则会有无数的可能性。</p><h3 id="用途">用途</h3><ol><li><p>防止被篡改</p></li><li><p>防止直接看到明文 ---- 前后比较</p><p>​现在很多网站在数据库存储用户的密码的时候都是存储用户密码的MD5值。这样就算不法分子得到数据库的用户密码的MD5值，也无法知道用户的密码。（比如在UNIX系统中用户的密码就是以MD5（或其它类似的算法）经加密后存储在文件系统中。当用户登录的时候，系统把用户输入的密码计算成MD5值，然后再去和保存在文件系统中的MD5值进行比较，进而确定输入的密码是否正确。通过这样的步骤，系统在并不知道用户密码的明码的情况下就可以确定用户登录系统的合法性。这不但可以避免用户的密码被具有系统管理员权限的用户知道，而且还在一定程度上增加了密码被破解的难度。）</p></li><li><p>防止抵赖–数字签名</p></li><li><p>文件秒传(检查文件MD5是否相同), 若相同则大概率已经有相同文件在库中</p></li></ol><h3 id="过程">过程</h3><ol><li>对MD5算法简要的叙述可以为：MD5以512位分组来处理输入的信息，且最终要预留出488位(不够则补位，第一位为1之后为0)(为什么是488？因为最后还要添加64位来记录原始数据长度，之后总数据长度为512整数倍，即M * 64 Byte)</li><li>准备4个幻数 每个4个字节</li><li>对每64Byte 通过四个幻数对其进行运算</li><li>输出4个幻数的最终结果即可</li></ol><h3 id="为何已不再安全">为何已不再安全</h3><p><strong>抗碰撞性被验证无效</strong>：不指定MD5 也不指定消息，只要有方法找出两个MD5值相同的数据就算成功</p><p>王小云：发现找到大量MD5碰撞对的方法(但碰撞对基本无意义) -&gt; Marc Stevens: 一个内容(可能是特定的?)生成另外两个MD5值一样但内容不一样的数据，**且都是有意义的. (前缀有效)(例如图片)；可自由选择前缀消息内容，即前缀不一样但MD5也一样，称为选择前缀碰撞。</p><p><strong>为何MD5还在使用</strong></p><p>抗第二原像攻击(抗弱碰撞性)未被打破：即对于指定的数据，找出与其MD5相同但内容不同的另一段数据</p><p>攻击者无法直接控制原始文件(无法逆向源程序)和MD5值，所以无法通过选择前缀碰撞，而只能用第二原像攻击且要保证找到的消息有意义。但这也不是完全安全的。</p><h2 id="另外的问题">另外的问题</h2><h3 id="内网和外网的区别">内网和外网的区别</h3><p>内网又称局域网（Local Area Network，LAN）是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。</p><p>局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。</p><p>局域网主要特点是：</p><p>1、覆盖的地理范围较小，只在一个相对独立的局部范围内联，如一座或集中的建筑群内。</p><p>2、使用专门铺设的传输介质进行联网，数据传输速率高（10Mb/s～10Gb/s）</p><p>3、通信延迟时间短，可靠性较高</p><p>4、局域网可以支持多种传输介质</p><p>外网又被称为广域网（WAN），就是我们通常所说的Internet，它是一个遍及全世界的网络。它可以连接极其大的物理范围，属于远程性的网络，已经实现了跨国互联，局域网以及城域网都远远比不上外网，外网是许多的计算机相互之间用线路连接形成的。</p><p>目前为止，因特网就是世界上最大的外网，它的覆盖范围无可匹敌。一些相隔较远的设备就需要外网的连接，这些设备中比较常见的是路由器和交换机 。</p><p>外网还分为了好几类，按照网络的使用类型可以分成公共传输、专用传输和无线传输三类网络传输。</p><p><strong>迅雷为什么会员可以加速那么快？</strong></p><p><strong>QQ传文件为什么那么快？</strong></p><ul><li></li></ul><h3 id="UDP、TCP、端口号">UDP、TCP、端口号</h3><p><strong>TCP、UDP可以同时绑定相同端口吗</strong></p><p>能，主机收到数据包后会拆解IP报头获得协议，如果是TCP则交给绑定该TCP端口的应用程序处理 UDP交给绑定了UDP该端口的应用程序处理</p><p><strong>多个TCP进程能绑定同一个端口吗</strong></p><p>不能。TCP 服务进程需要绑定一个 IP 地址和一个端口，然后就监听在这个地址和端口上，等待客户端连接的到来(所以要主机上的IP地址和端口有一个不相同才能绑定)</p><p><strong>客户端同一个端口能连接不同服务器的TCP服务吗</strong></p><p>能。在客户端执行 connect 函数的时候，只要客户端连接的服务器不是同一个，内核允许端口重复使用。</p><blockquote><p>参考文章：</p><p>🔗 <a href="https://www.bilibili.com/video/BV1KY411x7Jp/">HTTPS是什么？加密原理和证书。SSL/TLS握手过程</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP/IP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习</title>
    <link href="/2021/01/20/Java%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/20/Java%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>Java SE</h1><!--toc--><h2 id="集合">集合</h2><h3 id="ArrayList">ArrayList</h3><ul><li>允许添加多个null值<ul><li>属性 size 是指 elementData 中实际有多少个元素，而 elementData.length 为集合容量</li><li>DEFAULTCAPACITY_EMPTY_ELEMENTDATA和EMPTY_ELEMENTDATA区别： 构造函数 是否有initialCapacity<ul><li>第一次添加元素时扩容   默认初始的集合容量 10</li></ul></li></ul></li><li>grow()： 数组扩容策略，1.5倍且与最小容量进行比较</li><li>每次增删都使modCount增加 ，并且增删会进行modCount的检查，例如在迭代时进行增删操作时 会报错，Itr中的expectedModCount与modCount不一致！因此ArrayList是不支持多线程的</li></ul><p><span style='color:red;font-size:20px;'>面试：优化数组 </span></p><span id="more"></span><p>标记-清除法</p><h3 id="HashMap">HashMap</h3><p>内部hash函数</p><p>put前要进行对再次对hashcode再次hash，也就是高16 和低 16做异或运算：<strong>增大散列程度</strong>。高位特征不变，低位也具有高位特征。避免容量小时key的高位不参与运算问题</p><p>‘&gt;&gt;&gt;’无符号右移</p><p><strong>为什么要重写equals 和hascode方法，puVal方法中有提到</strong></p><p>注意区分Node的hash 和 key的hashcode</p><p>基本类型的hashcode方法</p><p>自动装箱  最硬核的居然是Integer的hashcode方法，居然就返回的value！！</p><ul><li><p>为什么要右移16位？</p><p>减少碰撞 降低hash冲突</p><p>JDK 1.8 put</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>                  <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>           <span class="token comment">//重点关注</span>           n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>           tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>           <span class="token comment">//重点关注</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>               <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment">//这句话允许了配的钥匙可以开相同的锁</span>               e <span class="token operator">=</span> p<span class="token punctuation">;</span>           <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>               e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>                           <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                       <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token keyword">break</span><span class="token punctuation">;</span>                   p <span class="token operator">=</span> e<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// existing mapping for key</span>               <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                   e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>               <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token operator">++</span>modCount<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>           <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>resize扩容机制</p><p>JDK 1.6</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> table<span class="token punctuation">;</span>       <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> newTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> src<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               src<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>               <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                   <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>                   e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                   newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                   e <span class="token operator">=</span> next<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>注意 &amp; oldCap  和 &amp;oldCap-1 的区别！！！</p><p>注意这里的 (e.hash &amp; oldCap) == 0</p><p><a href="https://blog.csdn.net/u010425839/article/details/106620440?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1.control&amp;dist_request_id=1328767.10456.16173490220630373&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1.control">https://blog.csdn.net/u010425839/article/details/106620440?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.control&amp;dist_request_id=1328767.10456.16173490220630373&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.control</a></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span><span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>             oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>        newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// double threshold</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// initial capacity was placed in threshold</span>    newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// zero initial threshold signifies using defaults</span>    newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>    newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>    newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>              <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>table <span class="token operator">=</span> newTab<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// preserve order</span>                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>                <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                    next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                            loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token keyword">else</span>                            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                        loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                            hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token keyword">else</span>                            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                        hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> newTab<span class="token punctuation">;</span></code></pre></div><p>首先将高16位无符号右移16位与低十六位做异或运算。如果不这样做，而是直接做&amp;运算那么高十六位所代表的部分特征就可能被丢失 将高十六位无符号右移之后与低十六位做异或运算使得高十六位的特征与低十六位的特征进行了混合得到的新的数值中就高位与低位的信息都被保留了 ，而在这里采用异或运算而不采用&amp; ，| 运算的原因是 异或运算能更好的保留各部分的特征，如果采用&amp;运算计算出来的值会向1靠拢，采用|运算计算出来的值会向0靠拢</p></li><li><p>Node 单链表结构</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210228192712917.png" alt="image-20210228192712917"></p></li><li><p>扩容机制</p></li><li><p>hash碰撞</p></li></ul><p>发生hash碰撞时 当前的元素生成新的节点保存在链表的尾部</p><h4 id="HM的线程安全方式">HM的线程安全方式</h4><ul><li>Collections.synchronizedMap（）返回一个新的Map：使用synchronized进行互斥。使用代理new了一个新的🥱，直接锁住方法</li><li>ConccurentHashMap：使用新的锁机制，将HM进行拆分。</li></ul><h4 id="HM-JDK1-8后扩容上的优化">HM JDK1.8后扩容上的优化</h4><ul><li>1.7之前：重新hash计算</li><li>1.8：只比较扩容后最高位, resize时索引增加到oldSize位即可</li></ul><h4 id="线程不安全造成了什么问题？">线程不安全造成了什么问题？</h4><p>产生环形链表</p><h3 id="LinkedHashMap">LinkedHashMap</h3><p><strong>结构</strong></p><p>accessOrder有什么用？</p><p>transient关键字不可见 ？</p><p><strong>实现LRU</strong></p><p><strong>插入删除原理</strong></p><p><strong>hashmap留的后门</strong></p><p>哪种情况下get也会使得重新排序</p><h3 id="ConcurrentHashMap">ConcurrentHashMap</h3><p><strong>JDK1.8中以CAS与synchronized 锁头节点方式实现线程安全，锁的粒度更细</strong></p><p>优先选择-- 性能效率更高</p><p>能说说什么是快速失败什么是安全失败吗？</p><p>快速失败  modCount 不能在多线程下并发修改</p><p>安全失败  concurrent包下的容器都是</p><h4 id="1-7版本">1.7版本</h4><h3 id="SynchronizedMap">SynchronizedMap</h3><p>排斥所 Object mutex</p><p>就是加锁</p><h3 id="HashSet">HashSet</h3><p><strong>Hashset底层由什么实现？</strong></p><p>hashmap</p><h3 id="PriorityQueue">PriorityQueue</h3><p>数组组成；modCount禁止并发</p><p>基于堆的排序</p><h2 id="Clone">Clone</h2><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> u2 <span class="token operator">=</span> u1<span class="token punctuation">;</span><span class="token comment">//将u1的reference给了u2</span>u1 <span class="token operator">!=</span> u2</code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Obj</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Obj</span> obj2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Obj</span><span class="token punctuation">)</span> obj<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj2<span class="token operator">==</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>stu <span class="token operator">==</span> obj<span class="token punctuation">.</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>此时操作u2/u1 都会使另一个的值发生改变</p><p>但如果我们不想改变另一个的值就需要使用到clone</p><p>实现Cloneable接口 //Cloneable接口没有具体的实现方法，他相当于是一个标识，如果类没有继承cloneable接口而调用clone方法，会抛出<strong>CloneNotSupportedExcepion异常</strong></p><h2 id="-v3"></h2><h3 id="深拷贝和浅拷贝">深拷贝和浅拷贝</h3><p>浅拷贝</p><p>clone无法clone 一个对象中的另一个对象，还是是一个reference</p><p>深拷贝</p><p>在对象的对象中实现cloneable接口，重写clone方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Obj</span> obj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Obj</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>stu <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Stu</span><span class="token punctuation">)</span> stu<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="clone的保护机制">clone的保护机制</h3><p>object类中有protected 的native方法 clone，且 User肯定是继承了Object，为什么</p><p><span style='color:red;font-size:24px'>未实现Cloneable接口的类不能调用clone方法</span></p><h4 id="延伸：-protected的作用范围">延伸： protected的作用范围</h4><p>一个public 类， 有protected的方法，</p><p>如果在同包下新建类继承他，这个新建的类对象能够调用protecTed的方法</p><p>如果在不同包下 新建一个类 继承他， 创建这个类的对象，不能调用 clone方法，但是可以在这个类中重写protected的方法，这样就能够调用。</p><p><span style='color:#3CB371;font-size:24px'>这就是protected的 派生类对同包可见，不同包不可见的原理</span></p><p>protected受访问保护规则是很微妙的。虽然protected域对所有子类都可见。但是有一点很重要，子类只能在自己的作用范围内访问自己继承的那个父类protected域，而无法到访问别的子类（同父类的亲兄弟）所继承的protected域和父类对象的protected域</p><h2 id="关键字Final">关键字Final</h2><blockquote><p>关于final的问题，推荐阅读《Java并发编程的艺术》☕</p></blockquote><p><strong>Final修饰类或方法</strong></p><p>一个类被final定义时，表示该类不打算被继承，final类中的任何方法都隐式为final，无法覆盖。在字节码层面，final修饰的普通方法会多有一个flag: <em>ACC_FINAL</em></p><p>注意：</p><ul><li>final方法可以被重载，不能被重写</li><li>private方法是隐式的final</li></ul><p><strong>Final修饰常量</strong></p><p>Final的延迟声明，需要注意的是，如果实现了blank final以及final的延迟赋值，那在其所有的构造器方法中都要实现final常量的赋值</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><blockquote><p><strong>所有被final修饰的字段都是编译期常量吗？</strong></p><p>并不是,比如 final int x = new Random().nextInt();就不是编译期常量</p></blockquote><p><strong>static final字段表示什么？</strong></p><p>表示占据一段不能改变的存储空间，必须在定义的时候进行赋值，否则将不通过编译。但是实际赋值过程可以在非编译期</p><h3 id="域重排序规则">域重排序规则</h3><p>关于重排序的知识，在*《JVM学习—JVM内存模型JMM》*章节中有详细讲到</p><p>多线程下</p><h4 id="写final域重排序规则-final为基本变量">写final域重排序规则(final为基本变量)</h4><p>禁止对final域对写重排序到构造函数之外，编译器在final域写之后，构造函数return之前，会插入<strong>storestore屏障</strong>，禁止处理器把final域到写重排序到构造函数之外,考虑以下一个场景：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> a<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      b<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      a<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">T</span> x<span class="token operator">=</span> t<span class="token punctuation">;</span>      <span class="token keyword">int</span> a <span class="token operator">=</span> x<span class="token punctuation">.</span>a<span class="token punctuation">;</span>      <span class="token keyword">int</span> b <span class="token operator">=</span> x<span class="token punctuation">.</span>b<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>两个线程进行操作，已知<strong>重排序可能会把普通变量重排序到构造函数之后</strong>（未验证）,如果没有进行加锁操作，一个线程执行init方法，一个线程执行read方法，恰巧这时候init线程刚初始化了t对象，构造函数执行完毕将引用赋值给变量t，另一个线程拿到引用地址，读取普通变量，这时候a可能未被赋值，为0值。<br>而使用final修饰的变量可以确保：<strong>在对象引用为任意线程可见之前，对象的final域已经被正确地初始化过了，而普通域无法保证。</strong></p><h4 id="读final域重排序规则-final为基本变量">读final域重排序规则(final为基本变量)</h4><p>在一个线程中，初次读对象引用和初次读该对象包含的final域，JMM 会禁止这两个操作的重排序，处理器在读final域操作之前插入一个<strong>LoadLoad屏障</strong>。对上述的代码，有一种可能的情况是：先读a变量，再读x变量，再读b变量。对普通域而言，这样就是错误的情况(产生空指针)。但由于final域的读和对象引用的读不会发生重排序，所以不会出现问题。也就是可以确保：<strong>在读一个对象的final域之前，会先读包含这个final域的对象的引用</strong></p><h4 id="对final修饰的对象的成员域进行写操作-final域为引用类型">对final修饰的对象的成员域进行写操作(final域为引用类型)</h4><p><strong>在构造函数内对一个final修饰的对象的成员域的写入，与随后在在构造函数之外把这个被构造的对象的引用赋给一个引用变量</strong>，这两个操作上不能被重排序</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalReferenceDemo</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">FinalReferenceDemo</span> finalReferenceDemo<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">FinalReferenceDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      arrays <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//1</span>      arrays<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//2</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writerOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      finalReferenceDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalReferenceDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writerTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      arrays<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//4</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>finalReferenceDemo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//5</span>          <span class="token keyword">int</span> temp <span class="token operator">=</span> finalReferenceDemo<span class="token punctuation">.</span>arrays<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//6</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230305170110555.png" alt=""></p><h4 id="对final修饰的对象的成员域的读操作">对final修饰的对象的成员域的读操作</h4><p>JMM可以确保线程C至少能看到写线程A对final引用的对象的成员域的写入，即能看下arrays[0] = 1，而写线程B对数组元素的写入可能看到可能看不到。JMM不保证线程B的写入对线程C可见，线程B和线程C之间存在数据竞争，此时的结果是不可预知的。如果可见的，可使用锁或者volatile。(不是很有印象)</p><h3 id="final引用从构造函数中溢出">final引用从构造函数中溢出</h3><p>考虑以下代码</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalReferenceEscapeDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">FinalReferenceEscapeDemo</span> referenceDemo<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">FinalReferenceEscapeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//1</span>        referenceDemo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">//2</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">FinalReferenceEscapeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>referenceDemo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//3</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> referenceDemo<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">//4</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 原文链接：https://pdai.tech/md/java/thread/java-thread-x-key-final.html</span></code></pre></div><p>此时如果线程A开始执行writer方法然后执行构造函数, 由于构造方法中不存在数据一致性，所以1操作可能在2操作之后，那在2操作执行完毕且1操作还未执行的时候 ，这时候线程B执行reader方法(此时this引用溢出，对象还未构造完全后就未其他线程可见)，检测referenceDemo对象不为空，然后访问其final成员，结果却为0，这就出现了问题。在构造函数返回前，被构造对象的引用不能被其他线程看见，因为此时的final域可能还没有被初始化。</p><h2 id="实现Serlizable接口的类中UID是啥？">实现Serlizable接口的类中UID是啥？</h2><p>java序列化机制。简单来说，JAVA序列化的机制是通过 判断类的serialVersionUID来验证的版本一致的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID于本地相应实体类的serialVersionUID进行比较。如果相同说明是一致的，可以进行反序列化，否则会出现反序列化版本一致的异常，即是InvalidCastException</p><p>显示声明serialVersionUID可以避免对象不一致，</p><h2 id="equals-和-hascode方法">equals 和 hascode方法</h2><h3 id="为什么要重写">为什么要重写</h3><p>公式：</p><p>hashcode相等时内容不一定相等</p><p>equals相等时hashcode必须相等</p><p>hashmap 存入自定义类时引发的问题</p><p>想用表面一样的两把钥匙去开同一扇门的问题</p><h3 id="hashcode方法如何重写">hashcode方法如何重写</h3><p>到底要比较什么属性或者对象</p><h3 id="equals方法如何重写">equals方法如何重写</h3><p>hash值相同时，由于你 hashmap判断链表时，hash值会用equals 方法比较两个对象， 所以如果要开锁，这里就需要重写equals方法</p><p>Object类原生的equals方法就是判断地址，所以这里需要重写</p><h3 id="String类的equals">String类的equals</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//内存地址相等</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//比较字符串长度</span>        <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//逐一比较字符</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre></div><h2 id="AbstrackStringBuilder">AbstrackStringBuilder</h2><p>构成</p><p>char[] value , int count</p><h3 id="StringBuilder">StringBuilder</h3><p>static final long serialVersionUID = 4383685877147921099L;</p><p>区分 length() 和 capacity()</p><ul><li><p>capacity大小并不是2的幂次方</p></li><li><p>默认16长度，后append多少，就加多少 16 是默认预留的输入长度间隔，超过16则引起扩容</p></li><li><p>容量判断  ensureCapacityInternal(int minimumCapacity)</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minimumCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// mini--- all words</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minimumCapacity <span class="token operator">-</span> value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>                <span class="token function">newCapacity</span><span class="token punctuation">(</span>minimumCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></li><li><p>扩容机制</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">newCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// why add 2 ?</span>    <span class="token comment">//这里也就说明了为什么capacity为什么不是2的幂次方的问题了</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> MAX_ARRAY_SIZE <span class="token operator">-</span> newCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">?</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span>        <span class="token operator">:</span> newCapacity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// overflow</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> MAX_ARRAY_SIZE<span class="token punctuation">)</span>        <span class="token operator">?</span> minCapacity <span class="token operator">:</span> MAX_ARRAY_SIZE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></li><li><p>核心添加方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//String 类下的</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getChars</span><span class="token punctuation">(</span><span class="token keyword">int</span> srcBegin<span class="token punctuation">,</span> <span class="token keyword">int</span> srcEnd<span class="token punctuation">,</span> <span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> dstBegin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcBegin <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>srcBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcEnd <span class="token operator">></span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>srcEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcBegin <span class="token operator">></span> srcEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>srcEnd <span class="token operator">-</span> srcBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//核心</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> srcBegin<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> dstBegin<span class="token punctuation">,</span> srcEnd <span class="token operator">-</span> srcBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div></li></ul><p>追问？ 有了解过底层的arraycopy方法吗？</p><h3 id="StringBuffer">StringBuffer</h3><p>结构： transient char[]  toStringCache , static final long serialVersionUId</p><h4 id="为何是线程安全的？">为何是线程安全的？</h4><p>使用synchronized</p><h2 id="接口、继承、泛型">接口、继承、泛型</h2><p>如何看待接口和抽象类？</p><p>你怎么理解泛型？有什么作用？</p><h3 id="向下转型和向上转型">向下转型和向上转型</h3><p>将整个继承关系想像成由上至下</p><p>向上转型   子转父（包括接口） 丢失方法</p><p>向下转型   父转子   重新获得失去的方法</p><p>联想 ：Android中findViewById中就是需要向下转型</p><h3 id="自动拆箱和装箱">自动拆箱和装箱</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false </span><span class="token comment">//字节码 比较时涉及到intValue方法</span><span class="token comment">//new时涉及valueOf方法</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// high value may be configured by property</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> integerCacheHighPropValue <span class="token operator">=</span>            sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//可以自行设置max的最大值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Maximum array size is Integer.MAX_VALUE</span>                h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">NumberFormatException</span> nfe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// If the property cannot be parsed into an int, ignore it.</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        high <span class="token operator">=</span> h<span class="token punctuation">;</span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span>        <span class="token keyword">assert</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>涉及到的静态内部类的知识</p><p>静态内部类只会在使用到该内部类时才会加载，否则是不会加载的，也就是只有使用到new Integer的valueOf方法时，才会加载该内部类</p><h3 id="CAS-v2">CAS</h3><p><strong>原理</strong></p><p>若：内存位置的值 == 预期原值 -&gt; 则赋予新值。通过while循环完成。</p><p>优点：不用进行用户态 内核态的切换</p><p>缺点：自旋时间不确定</p><p>增加版本控制： AtomicStampedReference，不但会判断原值，还会比较版本信息</p><h2 id="泛型">泛型</h2><p><strong>为什么我们需要泛型？</strong></p><p>没有泛型之前我们是怎么做到？我们可以通过Object存储任意的对象，然后使用时再强转成对应的类型就行了（但如果我们不清楚对象的类型，那么在转换时就kennel出现ClassCast Exception）</p><p>Java泛型Generics是JDK5中引入的新特性，<strong>提供了编译时类型安全检测机制</strong>，允许我们在<strong>编译时</strong>检测非法的类型数据结构。<strong>泛型的本质就是参数化类型</strong>，即所操作的数据类型被指定为一个参数。<strong>保证了类型安全，并消除了强制类型的转换</strong></p><p>常用泛型标识 T E K V，<strong>泛型类不支持基本数据类型</strong>。为什么？</p><h3 id="泛型类">泛型类</h3><p>在实例化类的时候指明泛型的具体类型。泛型类可以有多个泛型标识，不一定是1个或2个</p><p>同一泛型类，根据不同的数据类型创建对象，本质上还是同一个类型（getClass()相等）</p><p><strong>泛型通配符</strong>：用？代替具体类型的实际参数，所以类型通配符是类型实 参而不是类型型参。通常结合上下限来限制泛型的实现类型</p><p><strong>类型通配符的上限： &lt;? extends XXXClass&gt;</strong></p><p>**类型通配符的下限：&lt;? super xxxx&gt; 要求该泛型的类型只能是实参类型或实参类型的父类型，下限不在创建泛型时使用 **</p><p><strong>泛型类的继承</strong></p><p>父类是泛型类：</p><ul><li>子类是泛型类，子类是父类的泛型标识至少要包含父类的泛型标识</li><li>子类不是泛型类，父类要明确泛型的数据类型</li></ul><h3 id="泛型接口">泛型接口</h3><ul><li>实现类是泛型类，则实现了类的泛型标识要包含接口的泛型标识</li><li>实现类不是泛型类，实现类要明确接口定义的泛型</li></ul><h3 id="泛型方法">泛型方法</h3><p>在调用方法的时候指明泛型的具体类型</p><p>语法： 修饰符  &lt;T, E, …&gt; 返回值类型 方法名 (行参列表){}</p><p>其中&lt;&gt;指明了该方法是泛型方法，并指出其要用到的泛型标识</p><h3 id="类型擦除">类型擦除</h3><p>泛型信息只存在于<strong>代码编译</strong>阶段，进入JVM（生成字节码）之前与泛型相关的信息会被擦除掉</p><ul><li>无限制类型擦除，泛型标识直接替换为<strong>Object</strong>（因为没有进行上下限的限制）</li><li>有限制类型擦除，<code>&lt;T extends XXX&gt;</code>，按照上限类型进行类型擦除</li></ul><p>桥接方法，在无泛型条件下保证接口和类的失信关系</p><h3 id="泛型数组">泛型数组</h3><p>可以声明带泛型的数组引用但不能直接创建带泛型的数组对象</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayLists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></div><p>这样就是错误的，编译报错 <code>java: cannot create array with '&lt;&gt;'</code></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayLists <span class="token operator">=</span> objects<span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> objects1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arrayLists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> objects1<span class="token punctuation">;</span></code></pre></div><p>在较老版本中，以上代码可能编译不会报错，但实际运行若要使用到objects1中的值时则会抱数据转换类型的错，但目前自己的idea会抱这个错 jdk 1.8 341</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayLists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></div><p>比较稳妥的方法是这样，不要把原生数据类型暴露给外面，直接使用带有泛型规定的数组泛型对象，这样就能避免上述错误，这也是为什么java不支持直接创建泛型数组的原因</p><p><strong>通过反射创建泛型数组</strong></p><p>不能直接通过T[] data = new T[length]的方式创建数组（字节码层）</p><p>为什么不能通过上述方式创建数组呢？</p><p>这里的核心问题应该是是 T data = new T()无法通过编译，因为若没有上下限，则类型擦除时默认为Object，那这里你new的就是一个Object了。可以通过反射的方式创建</p><p>补充：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">String</span> typeName <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// java.lang.String[]</span>o<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>o<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// throw ArrayStoreException</span></code></pre></div><p>由于Java父子类型转换的限制，当第一行代码运行后，o对象其实便是String[]类型而非Object类型，运行上述代码会报错ArrayStoreException</p><p>如何通过泛型标识创建数组呢？使用反射</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGenerics</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyGenerics</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="I-O操作">I/O操作</h2><h3 id="常见几大输入输出类">常见几大输入输出类</h3><h2 id="异常-v2">异常</h2><h3 id="Exception和Error关系">Exception和Error关系</h3><p><strong>Exception和Error都可以被catch到</strong></p><p>但不应在代码中catch error</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210428185332025.png" alt="image-20210428185332025"></p><p>checkedException ： 编译期异常，易处理，易出错的</p><h2 id="面试问题-v3">面试问题</h2><p>为什么0.1+0.2= 0.30000000004</p><p>short s1 = 1; s1 = s1 + 1;</p><p>HashSet内部如何实现？为什么要重写hashcode 和 equals方法？</p><p>try catch 中 return 会怎么样？ 调用system.exit呢</p><p>为什么作为方法传参时，String 是不可变，但例如自定义类的引用 // 数组  是可变的呢</p><ul><li>在我们进行传递时不管是值传递还是地址传递传递的都会copy一个副本进行传递而不是‘原件’。在引用数据类型中，副本与原件指向同一个地址时改变地址内部的值原件会受到影响，但是如果改变了副本指向的地址那么副本的一切变化于原件就没有关系了。<br>所以当 方法中的s发生改变时相当于将副本指向了新的地址于原件自然就没有关系了，方法外部的s没有变化也就解释的通了。</li></ul><p><strong>为什么String是不可变的</strong></p><p>内部final修饰 ，s1 = s2 是允许的，仅改变指向的引用地址</p><p>是否可以改变value的值？ 可以，反射</p><p><strong>抽象类和接口的区别</strong></p><p>抽象类 代码复用    相同的行为…</p><p>接口是对类的约束，强制要求不同的类有相同的行为</p><p><strong>JDK 8新特性</strong></p><p>**try catch return问题  **</p><p>如果在try、catch中 return  ,finally 仍可执行，但finally后的语句不可执行</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android知识总结</title>
    <link href="/2021/01/10/Android%E9%9D%A2%E8%AF%95/"/>
    <url>/2021/01/10/Android%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1>Android面试总结</h1><!-- toc --><h2 id="CAS">CAS</h2><h3 id="IPC进程间通信">IPC进程间通信</h3><p>Inter-Process Communication</p><ul><li>Windows：通过剪切板、管道、油槽等进行进程间通讯。</li><li>Linux：通过命名空间、共享内容、信号量等进行进程间通讯。</li><li>Android：没有完全继承Linux，比如，其独具特色的通讯方式有Binder、Socket等等。</li><li><span id="more"></span></li></ul><h4 id="线程和进程的关系">线程和进程的关系</h4><p>进程： 一个执行单元 一个程序或者应用</p><p>进程是程序运行和资源分配的基本单位</p><p>线程： CPU调度的最小单元  有限的系统资源</p><p>是cpu调度和分派的基本单位</p><p>Android中 进程空间划分为用户空间和内核空间，进程间用户空间不可分享，但内核空间可分享  所有进程共用一个内核空间</p><p>进程内用户空间 和内核空间交互 要通过系统调用</p><ol><li>copy_from_user（）：将用户空间的数据拷贝到内核空间</li><li>copy_to_user（）：将内核空间的数据拷贝到用户空间</li></ol><h4 id="Android中的IPC">Android中的IPC</h4><h5 id="AIDL">AIDL</h5><p>AIDL     <strong>Android Interface definition language</strong></p><p>C/S 端的AIDL名称  （包名+类名）必须一致</p><p>内部类 Proxy  Stub  都implementes这个接口</p><p>AIDL层双方通信方式类似 符号引用</p><h5 id="Binder">Binder</h5><p>设计基于C/S结构  客户端进程获取服务端进程的代理，并通过向这个代理借口方法中读写数据来完成进程间的数据通信</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210321133957552.png" alt="image-20210321133957552"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210320184127616.png" alt="image-20210320184127616"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1kM2M3OGIxOTNjM2U4YTM4LnBuZz9pbWFnZU1vZ3IyL2F1dG8tb3JpZW50L3N0cmlwJTdDaW1hZ2VWaWV3Mi8yL3cvMTI0MA" alt="img"></p><p>传统进程通信</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210320192944412.png" alt="image-20210320192944412"></p><p>Binder通信</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210321134303878.png" alt="image-20210321134303878"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210320192905310.png" alt="image-20210320192905310"></p><p>Binder可理解为是一种虚拟的物理设备，它的设备驱动是/dev/binder</p><p>从Android Framework角度来说，Binder是ServiceManager连接各种Manager（ActivityManager、WindowManager，etc）和相应ManagerService的桥梁</p><p>从Android应用层来说，Binder是客户端和服务端进行通信的媒介，当你bindService的时候，服务端会返回一个包含了服务端业务调用的Binder对象，通过这个Binder对象，客户端就可以获取服务端提供的服务或者数据，这里的服务包括普通服务和基于AIDL的服务。</p><p><strong>Binder一个很重要的作用是：将客户端的请求参数通过Parcel包装后传到远程服务端，远程服务端解析数据并执行对应的操作，同时客户端线程挂起，当服务端方法执行完毕后，再将返回结果写入到另外一个Parcel中并将其通过Binder传回到客户端，客户端接收到返回数据的Parcel后，Binder会解析数据包中的内容并将原始结果返回给客户端，至此，整个Binder的工作过程就完成了。由此可见，Binder更像一个数据通道，Parcel对象就在这个通道中跨进程传输，至于双方如何通信，这并不负责，只需要双方按照约定好的规范去打包和解包数据即可。</strong></p><p>三层结构：</p><p>Client：具体和某一个Service通信，先从ServiceManager获取该Service的相关信息，根据得到的Serviice信息和Service所在的Serve进程建立通信</p><p>Server：注册Service到ServiceManager</p><p>ServiceManager： 管理这些Service 并向Client提供相关的接口</p><p>Android系统会为每一个应用分配一个唯一的UID，具有相同UID的应用才能共享数据。要求两个应用具有相同的ShareUID并且签名相同才可以跑在同一个进程中。在这种情况下，它们可以互相访问对方的私有数据，比如data目录、组件信息等，不管它们是否跑在同一个进程中。当然如果它们跑在同一个进程中，那么除了能共享data目录、组件信息，还可以共享内存数据，或者说它们看起来就像是一个应用的两个部分。</p><h5 id="序列化的两种方式">序列化的两种方式</h5><p>Parcelable</p><p>Serializable</p><h2 id="Andoird">Andoird</h2><h3 id="启动原理">启动原理</h3><p><a href="https://www.jianshu.com/p/12de32b31836">https://www.jianshu.com/p/12de32b31836</a></p><h2 id=""></h2><h3 id="事件分发机制">事件分发机制</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210301164920245.png" alt="image-20210301164920245"></p><h4 id="dispatchTouchEvent">dispatchTouchEvent</h4><p>true ： 已经进行了处理，不在向下传递，停止分发</p><p>false： 未处理，继续分发    一般默认返回false</p><h4 id="onInterceptTouchEvent">onInterceptTouchEvent</h4><p>Viewgroup特有</p><p>事件传入 dispatch内部 调用这个方法</p><p>false ： 子View 调用dispatc…</p><p>true：交给该Viewgourp的onTouchEvent方法处理 ，不过也要看他自己能不能有没有ontouchEvent</p><h4 id="onTouchEvent">onTouchEvent</h4><p>Activity层</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210301174949296.png" alt="image-20210301174949296"></p><p>ViewGroup层</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210301180054892.png" alt="image-20210301180054892"></p><p>View层</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210301182854640.png" alt="image-20210301182854640"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210301182955527.png" alt="image-20210301182955527"></p><h3 id="View原理">View原理</h3><h4 id="Activty的启动顺序">Activty的启动顺序</h4><p>onCreate – onStart —onResume</p><p>home键返回后  onPause  – onStop   从后台返回时  onStart — onResume</p><p>打开新的activity’时  onpause  --onStop</p><p>关闭程序后  onPuase – onStop – onDestroy – onDetachedFromWindow</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210314102121692.png" alt="image-20210314102121692"></p><h4 id="Activity启动模式">Activity启动模式</h4><ol><li><p>standard 默认标准模式，每启动一个都会创建实例</p><p>应用： B站视频打开</p></li><li><p>singleTop 栈顶复用，在栈顶 就调用onNewIntent复用</p></li><li><p>singleTask 栈内复用， 本栈内只要用该类型的activty就会将顶部的activity出栈</p></li><li><p>singleInstance 单例模式，单独给activity创建一个栈</p><p>前台任务栈  后台任务栈</p></li></ol><h4 id="对activity进行缓存">对activity进行缓存</h4><ul><li>打开新的Activity / Home键 / 电源键  onStop后会调用onSaveInstanceState 方法，可以在参数bundle中进行保存</li><li>onRestoreInstanceState 对数据进行恢复</li></ul><h4 id="Activity间通信">Activity间通信</h4><ol><li>Intent – Bundle</li><li>Service</li></ol><h4 id="View结构">View结构</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210314103217599.png" alt="image-20210314103217599"></p><p>View 树结构</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210314103242042.png" alt="image-20210314103242042"></p><h4 id="View绘制流程">View绘制流程</h4><h5 id="measure">measure</h5><h5 id="layout">layout</h5><h5 id="draw">draw</h5><h3 id="横竖屏切换的生命周期">横竖屏切换的生命周期</h3><h3 id="Gradle">Gradle</h3><h4 id="是什么">是什么</h4><p>Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化构建开源工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，抛弃了基于XML的各种繁琐配置。</p><ol><li>Gradle是一个自动化构建工具</li><li>兼容Maven等仓库</li><li>基于Groovy的特定领域语言来声明名目设置</li></ol><h4 id="配置文件">配置文件</h4><ol><li>settings.gradle:整个Project的配置文件，可以设置包含哪些module</li><li>build.gradle （Project的gradle文件）:整个Project的配置文件</li><li>build.gradle（Module）：Module的配置文件</li><li>gradle.properties：可以在 gradle.properties 文件中配置一些变量</li></ol><h3 id="Fragment">Fragment</h3><p><span style='color: #00BFFF;font-size:24px'>结合BottomNavigationView使用</span></p><p><span style='color:#3CB371;font-size:24px'>如何减少Fragment切换时的重复创建？transaction.replace方法如何？ 有没有考虑用过hide 、add、show的方法？状态保存？</span></p><p>先创建所有fragment的对象，在需要时初始化，如果切换时隐藏，需要时在利用，这样也能够进行状态的保存了</p><p>fragment中 onHiddenChange方法可以监听 hide状态</p><p><strong>fragmentTransaction  addToBackStack 有什么作用?</strong></p><p>记录当前事务， backPress时 依次弹栈</p><h4 id="与Activity通信的几种方式">与Activity通信的几种方式</h4><ol><li>接口  传入activity的view</li><li>getActivity 调用其中的公共方法</li><li>广播？</li><li>getActivity.getFragmentManager.findFragmentById</li></ol><h3 id="Handler">Handler</h3><h4 id="什么是Handler">什么是Handler</h4><p>Android SDK 处理异步消息的核心类</p><p>子线程与主线程通过Handler 通信，子线程通过Hanlder通知主线程的Ui更新</p><p>Handler  Message  MessageQueue    Looper   Thread</p><h4 id="问题的出发点">问题的出发点</h4><p>Handler 多层嵌套过程如何？</p><p>试图在子线程中更改UI:</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210305160239366.png" alt="image-20210305160239366"></p><p>在子线程中添加Looper会报错   且通过Looper.getMainLooper  或者myLooper获取的值和主线程的是一样的</p><h4 id="通信原理">通信原理</h4><p>Message内部结构</p><p>clear方法</p><p>MessageQueue 进表出表  enqueueMessage的最终结果  Meeage按照when的时间远近排序  —涉及链表的操作</p><p>Looper—&gt;ThreadLocal</p><p>looper内部   loop()方法    找是否当前when有一个message     如果message自己能处理就自己处理，如果不能自己处理，就看handler是否能够法处理（回调监听器  mCallBack   有bool值 类似ontouch）    最后看回调监听器的返回值，看是否执行重写的handleMessage</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>callback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">handleCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></div><h4 id="线程通信">线程通信</h4><p>Message线程间通信的数据载体</p><h5 id="AsyncTask">AsyncTask</h5><p>异步任务    对Handler 和Thread的封装  更简洁高效   且封装了ThreadPool</p><ul><li>Message视角</li></ul><p><span style='color: #00BFFF;font-size:18px'>一个线程可以有多个Handler，一个线程的多个Handler只能有一个相同的Looper以及Looper的MessageQueue。Handler初始化时会初始化自身持有的Loope以及looper的messageQueue，发送消息时，先进入到handler.post/send中，然后在mQueue中进行enqueueMessage，通过message的when对当前插入的message进行排序（当然肯定是锁了的），确保一个messagequeue中的所有message都是以when进行排序的</span></p><ul><li><p>Handler视角</p><p><span style='color:#3CB371;font-size:24px'>Handler在进行处理时会通过系统持续循环的looper的loop方法进行搜索，判断当前的时间点是否有与when相同的message等待被处理，如果需要被处理，则会有一套分发机制。先看message是否带有callback的回调方法，如果没有，则看当前handler是否有callback的回调，如果还是没有，则去找handler自身写的handlemessage方法，这个方法也是暴露的，可以重写</span></p></li></ul><h4 id="HandlerThread">HandlerThread</h4><p>就是内置handler的thread</p><h4 id="面试问题">面试问题</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210305165916419.png" alt="image-20210305165916419"></p><p><span style='color:red;font-size:20px;'>一个线程有几个Handler</span></p><p>多个handler</p><p><span style='color:red;font-size:20px;'>一个线程有几个looper，如何保证</span></p><p>只有一个Looper</p><ul><li>线程和looper的关系</li></ul><p><span style='color:red;font-size:20px;'>重点： 内存泄漏</span></p><p>根本原因：内部变量？会持有外部类的引用  ，而activity被handler持有</p><p>MessageQueue  --&gt;Message  --&gt;Handler  -&gt;HandleR  -&gt;this (Activity)   --&gt;拥有大量的内存</p><p>问题转为JVM问题     GC   可达性分析   发现是可达的，故不会GC</p><p>解决方案</p><p>static    弱引用 / 软引用</p><p>destroy时 清理handler 所有的message   messagequeue  quitsafely</p><p><span style='color:red;font-size:20px;'>如何在子线程中使用Handler</span></p><p>HandlerThread</p><p>如何解决      锁机制</p><p><span style='color:red;font-size:20px;'>HandlerThread的不同</span></p><p><span style='color:red;font-size:20px;'>没有消息时会怎么办</span></p><h4 id="额外的问题">额外的问题</h4><p>为什么 runOnUiThread 执行耗时操作还是 会影响主线程的执行</p><h3 id="Intent">Intent</h3><h3 id="RecycleView">RecycleView</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210306140559042.png" alt="image-20210306140559042"></p><h4 id="与ListVIew的不同点">与ListVIew的不同点</h4><p>缓存机制不同</p><h4 id="滚动机制">滚动机制</h4><p>onTouch  – scrollBy   – fill  –  layoutChunk填充  —next --tryGetViewHolder…复用 —</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">getItemDecorInsetsForChild  </code></pre></div><p>解决itemdecoration</p><h4 id="四级缓存">四级缓存</h4><p>mAttachedScrap(屏幕内)// mCaneScrap，mCacheViews(屏幕外)，mViewCacheExtension(自定义缓存)，mRecyclerPool(缓存池)</p><p>缓存和复用到底在处理什么？ View ？ ViewHolder？</p><ol><li>首先在mChangeScrap  两种方式  position / id(stable id)</li><li>mattachScrap  和HiddenView 动画和 cachedView   by position/ id</li><li>自定义</li><li>缓存池</li><li>createViewHolder - -onCreateViewHolder创建</li></ol><p><strong>缓存</strong></p><p>Recycler</p><p>fill之前</p><ol><li><p>mCachedView   把索引0 的holder放到pool中</p></li><li><p>pool中存</p><p>根据ViewType</p><p>sparseArray 键值对存储 类似hashmap</p><p>如果同类项的array已经超过5个， 则不放了！</p></li></ol><p>都在内部类Recylcer</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210316193720147.png" alt="image-20210316193720147"></p><p>缓存池的结构</p><h4 id="嵌套如何解决滑动冲突">嵌套如何解决滑动冲突</h4><h4 id="具体流程和复用机制">具体流程和复用机制</h4><h4 id="内部类">内部类</h4><h5 id="Recyler">Recyler</h5><p>tryGetViewHolderForPositionByDeadline</p><h5 id="RecycledViewPool">RecycledViewPool</h5><h4 id="方法">方法</h4><p>onBindView 缓存的个数  10</p><p>onTouchEvent  触碰关键的函数    ----   滚动机制  scrollBy</p><p>----fill</p><h4 id="LayoutManager">LayoutManager</h4><p>measure方法主要是交给他来做的</p><h3 id="Android启动原理">Android启动原理</h3><p>hhhh</p><q>sbsbsb</q><div class="code-wrapper"><pre class="language-none"><code class="language-none">w;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</code></pre></div><h3 id="屏幕适配">屏幕适配</h3><h4 id="概念-v2">概念</h4><p>dp ：  density-independent pixels n个实际像素，与设备dpi相关，与px（像素）换算关系：dp/160 = px/dpi。  px = dp*dpi /160</p><p>那么dp究竟解决了适配上的什么问题？可以看出1dp = 1/160inch；那么它至少能解决一个问题，就是你在布局文件写某个View的宽和高为160dp*160dp，这个View在任何分辨率的屏幕中，显示的尺寸大小是大约是一致的（可能不精确），大概是 1 inch * 1 inch</p><p>dpi:         Dots Per Inch（每英寸所打印的点数）</p><p>px: 1920*1080 (px)</p><h3 id="Framework">Framework</h3><h4 id="概念-v3">概念</h4><h3 id="ContentProvider">ContentProvider</h3><h4 id="作用">作用</h4><h3 id="OkHttp">OkHttp</h3><h4 id="核心类">核心类</h4><ol><li><p>OkHttpClient</p><p>newCall(this,request)   return new ReaCall</p><ol><li><p>RealCall</p><p>final class 、implements Call</p><p>持有一个final的OkHttpCall，持有传来的Request  构造方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Callback</span> responseCallback<span class="token punctuation">,</span> <span class="token keyword">boolean</span> forWebSocket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>executed<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Already Executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      executed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AsyncCall</span><span class="token punctuation">(</span>responseCallback<span class="token punctuation">,</span> forWebSocket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//同步为什么还要确保是否执行？</span>      <span class="token comment">//可能clone？</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executed<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Already Executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    executed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//dispatcher 返回的是Distpatcher ---OkHttpClient持有</span>    <span class="token class-name">Response</span> result <span class="token operator">=</span> <span class="token function">getResponseWithInterceptorChain</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></li><li><p>Dispatcher</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> maxRequests <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span> <span class="token comment">// 最大request数</span><span class="token keyword">private</span> <span class="token keyword">int</span> maxRequestsPerHost <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 最大requests/Host数 </span><span class="token comment">/** Executes calls. Created lazily. */</span><span class="token operator">/</span><span class="token operator">/</span>重要！<span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> executorService<span class="token punctuation">;</span><span class="token comment">/** Ready async calls in the order they'll be run. */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncCall</span><span class="token punctuation">></span></span> readyAsyncCalls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** Running asynchronous calls. Includes canceled calls that haven't finished yet. */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncCall</span><span class="token punctuation">></span></span> runningAsyncCalls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** Running synchronous calls. Includes canceled calls that haven't finished yet. */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RealCall</span><span class="token punctuation">></span></span> runningSyncCalls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>enqueue 方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 是在runningAsync中添加还是readyAsync中添加 ？？？</span><span class="token comment">//运行队列总数&lt;64 请求所属主机执行的任务数</span><span class="token keyword">if</span> <span class="token punctuation">(</span>runningAsyncCalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxRequests <span class="token operator">&amp;&amp;</span> <span class="token function">runningCallsForHost</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxRequestsPerHost<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  runningAsyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//如果是runningAsyncCall中，则直接执行这个call</span>  <span class="token comment">//核心</span>  <span class="token function">executorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  readyAsyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>executorService方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">ExecutorService</span> <span class="token function">executorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>executorService <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">threadFactory</span><span class="token punctuation">(</span><span class="token string">"OkHttp Dispatcher"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意这里使用的是SynchronousQueue 同步队列</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//类似单例？</span>  <span class="token keyword">return</span> executorService<span class="token punctuation">;</span></code></pre></div><ol><li><p>ExecutorService</p><p>interface  extends Executor Executor只有一个方法execute</p><p>这里使用的构造方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                            <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                            <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                            <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                            <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span>                          <span class="token comment">//注意是Blockqueue</span>                            <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>           threadFactory<span class="token punctuation">,</span> defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p>BlockingQueue  缓存放不下时候的线程</p><ul><li><p>为什么这里用Synchonrous队列？</p></li><li><p>为什么new的ThreadPoolExectuor核心线程数为 0</p><p>线程池概念，减少频繁创建销毁的耗时过程</p></li></ul><ol><li><div class="code-wrapper"><pre><code class="language-java">public void execute(Runnable command) &#123;    //任务不能为空    if (command == null)        throw new NullPointerException();    //获取线程状态    int c = ctl.get();    //1.     if (workerCountOf(c) &lt; corePoolSize) &#123;        if (addWorker(command, true))            return;        //添加线程失败        c = ctl.get();    &#125;    //2.    //如果线程池状态是RUNNING 并且任务成功添加到workQueue中    if (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;        //再次检查        int recheck = ctl.get();        //2.1如果线程池状态线程池是`SHUTDOWN`了，并且能成功的把任务从队列中移除        if (! isRunning(recheck) &amp;&amp; remove(command))        //拒绝任务            reject(command);        //2.2任务加入到队列了，但是当前没有工作线程就添加一个线程        else if (workerCountOf(recheck) == 0)            addWorker(null, false);    &#125;    //3.     else if (!addWorker(command, false))        reject(command);&#125;<pre class="language-none"><code class="language-none">               3. AsyncCall   final class 、 extends NamedRunnable   &#96;&#96;&#96;java   final class AsyncCall extends NamedRunnable &#123;     private final Callback responseCallback;     private final boolean forWebSocket;        private AsyncCall(Callback responseCallback, boolean forWebSocket) &#123;       super(&quot;OkHttp %s&quot;, originalRequest.url().toString());       this.responseCallback &#x3D; responseCallback;       this.forWebSocket &#x3D; forWebSocket;     &#125;</code></pre></div></code></pre></li></ol></li></ol></li><li><p>NamedRunnable</p><p>abstract class implments Runnable</p></li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">NamedRunnable</span><span class="token punctuation">(</span><span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> oldName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></li><li><p>Request</p><p>理解Builder的设计思想</p></li><li><p>Call</p><p>基本的回调接口类</p><p>request 、execute、 enqueue、cancel、isExcuted、isCancled</p></li><li><p>Callback</p></li><li><p>Async</p></li></ol><h4 id="流程分述">流程分述</h4><h5 id="1-如何发送">1. 如何发送</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">okHttpClient<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RealCall</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Callback</span> responseCallback<span class="token punctuation">,</span> <span class="token keyword">boolean</span> forWebSocket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>executed<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Already Executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      executed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AsyncCall</span><span class="token punctuation">(</span>responseCallback<span class="token punctuation">,</span> forWebSocket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">return</span> dispatcher<span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">AsyncCall</span> call<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>runningAsyncCalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxRequests <span class="token operator">&amp;&amp;</span> <span class="token function">runningCallsForHost</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxRequestsPerHost<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      runningAsyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">executorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      readyAsyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">ExecutorService</span> <span class="token function">executorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executorService <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">threadFactory</span><span class="token punctuation">(</span><span class="token string">"OkHttp Dispatcher"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> executorService<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><h5 id="2-被谁处理">2. 被谁处理</h5><h5 id="3-如何维护">3. 如何维护</h5><h5 id="4-建造者模式">4. 建造者模式</h5><p>不需要关注细节，定制、默认</p><p>链式编程   —return this</p><h5 id="5-责任链模式">5. 责任链模式</h5><h3 id="Retrofit">Retrofit</h3><h4 id="好处">好处</h4><p>Retrofit基于okhttp封装的网络请求框架, 网络请求的工作本质上是 OkHttp 完成，而 retrofit 仅负责网络请求接口的封装。</p><p>Retrofit优势，就是简洁易用,解耦,扩展性强,可搭配多种Json解析框架(例如Gson),另外还支持RxJava.网络请求的工作本质上是 <code>OkHttp</code> 完成，而 Retrofit 仅负责 网络请求接口的封装</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210322153358168.png" alt="image-20210322153358168"></p><p>注解类型</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210322153735717.png" alt="image-20210322153735717"></p><p>Retrofit不做网络请求，他相当于是一个中间人</p><p>通过接口，对接口方法进行注解</p><h4 id="原理-v3">原理</h4><h5 id="动态代理">动态代理</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">INetApiService</span> netApiService<span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">INetApiService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>这里得到的netApiService不是本尊，而只是一个动态代理对象</p><h4 id="类">类</h4><p><strong>Platform</strong></p><p><strong>ServiceMethod</strong>  一个~代表一个请求接口</p><p><strong>CallAdapter</strong></p><p>具体类型不同的adapter  Rxjava Gson Java8 guava rxjava…</p><h4 id="设计模式">设计模式</h4><p>动态代理</p><p>工厂模式</p><p>建造者模式</p><p>外观模式</p><h4 id="差异">差异</h4><p>Retrofit的Call 支持泛型，也就是可以用一个bean类进行包装，然后通过GSON直接返回想得到的对象？</p><h4 id="问题">问题</h4><p>为什么请求在子线程而显示在UI主线程？ 添加了Looper？</p><h3 id="Volley">Volley</h3><h3 id="图片加载框架">图片加载框架</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210329094112507.png" alt="image-20210329094112507"></p><h3 id="Glide">Glide</h3><p><strong>load</strong></p><p>空白fragment  – 控制生命周期</p><p>为什么Glide不能在子线程中绘制</p><p>子线程中不会添加生命周期机制  主线程才会对空白的fragment监听activiyty  fragment变化</p><p>RequestBuilder</p><p>Retriver</p><p>单例模式</p><p><strong>with</strong></p><p>类型转换</p><p><strong>into</strong></p><p>克隆模式</p><p>享元模式 – SingleRequest.obtain</p><p>Enging层</p><p>运行缓存：   活动缓存（面向用户） – 内存缓存（活动缓存的二级缓存）</p><p>检测有没有正在执行的缓存可用（磁盘缓存）</p><p>网络请求</p><p>高层设计：</p><p>接口</p><p><strong>生命周期</strong></p><p>LifeCycleListener接口</p><p>空白Fragment附着在activity  监听生命周期</p><p>RequestManager 控制 生命周期 onstart方法中有对targetTracker、 requestTracker的生命周期方法调用</p><p>设计模式</p><h4 id="from">from</h4><h4 id="load">load</h4><h4 id="into">into</h4><h3 id="面试问题-v2">面试问题</h3><h4 id="为什么子线程不能更新UI">为什么子线程不能更新UI</h4><p>原因： ViewRootIml.scheduleTraversals对view进行绘制前，对当前线程进行检查是不是主线程</p><p>，多线程加载Ui使得资源抢占，界面更新混乱</p><p>runOnUiThread的作用</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> mUiThread<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//发送消息到主线程的消息队列中</span>    mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果是主线程，则直接执行</span>    action<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="View-post-和-Handler-post的区别">View.post 和 Handler.post的区别</h4><p>在Oncreate里直接调用View.getWidth或者View.getMeasuredWidth返回都是0</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">AttachInfo</span> attachInfo <span class="token operator">=</span> mAttachInfo<span class="token punctuation">;</span>    <span class="token comment">//当前view加入到window中，则直接用ui线程的handler发送消息</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>attachInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> attachInfo<span class="token punctuation">.</span>mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Postpone the runnable until we know on which thread it needs to run.</span>    <span class="token comment">// Assume that the runnable will be successfully placed after attach.</span>    <span class="token comment">//没有加入到wndow中，放入viewrootimpl的Runqueue中</span>    <span class="token function">getRunQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>如果View尚未attach到window的话，runnable被放到了ViewRootImpl#RunQueue中，最终也会被处理，但不是通过MessageQueue。</p><p>而是等到ViewRootImpl的下一个performTraversals时候，把RunQueue里的所有runnable都拿出来并执行</p><h4 id="Gradle到底是个啥">Gradle到底是个啥</h4><h2 id="Mysql">Mysql</h2><h3 id="引擎">引擎</h3><h4 id="MyIAsm">MyIAsm</h4><h4 id="Inoodb">Inoodb</h4><h3 id="索引">索引</h3><h4 id="MyIAsm和Inoodb的不同">MyIAsm和Inoodb的不同</h4><h2 id="计算机原理">计算机原理</h2><h2 id="面试">面试</h2><p><strong>系统按什么规则回收后台的app</strong></p><p><a href="https://blog.csdn.net/u010227042/article/details/108451297?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161715872916780264092268%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161715872916780264092268&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2">https://blog.csdn.net/u010227042/article/details/108451297?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161715872916780264092268%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161715872916780264092268&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2</a><sub>all</sub>first_rank_v2~rank_v29-1-108451297.pc_search_result_hbase_insert&amp;utm_term=%E7%B3%BB%E7%BB%9F%E6%8C%89%E4%BB%80%E4%B9%88%E8%A7%84%E5%88%99%E5%9B%9E%E6%94%B6%E5%90%8E%E5%8F%B0%E7%9A%84app</p><p><strong>操作系统的IO模型</strong></p><p><strong>Java IO 设计模式</strong></p><p><strong>Linux Unix 区别</strong></p><p><strong>浏览器输入url发生了肾么事</strong></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Java</tag>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2021/01/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/01/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1>设计模式</h1><h2 id="单例模式">单例模式</h2><ol><li><p>饿汉式</p><p><strong>是线程安全的</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>静态  一开始便装载</p></li><li><p>懒汉式</p><p><strong>线程不安全</strong>，多线程下可能会出现多个实例</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> instance<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div></li><li><p>懒汉-Synchronized版</p><p>线程安全但效率低下，全部代码被同步</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> instance<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div></li><li><p>懒汉-Synchronized优化版</p><p>**线程不安全！**一个线程在执行初始化，但另一个线程判断instance为空后就阻塞在等待拿锁了，拿到锁就又初始化了。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> instance<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div></li><li><p>懒汉-Volatile版</p><p><strong>线程不安全</strong>。无法达成同步(一个线程进入if判断完毕后，另一个线程也进入if判断，还是null)</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></li><li><p>Double-Check Locking(DCL) 双检查锁</p><p>使用volatile: 解决new Singleton时指令重排序问题(分配内存-&gt;初始化-&gt;引用地址赋值给对象)</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//DCL </span>    <span class="token comment">//volatile解决有序性问题</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>    <span class="token comment">//私有化构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 先判断是否为null再考虑加锁, 提升效率</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">// 加锁进行同步,确保只有一个线程进入下面的if判断</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//注意这里的双重判断  避免多线程时已经进入第一层</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></li><li><p>静态内部类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//静态内部类不会再一开始就被装载，无内存消耗</span>    <span class="token comment">//JVM装载静态内部类是线程安全的？？？</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonInstance</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonInstance</span><span class="token punctuation">.</span>singleton<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></li><li><p>枚举Enum</p></li></ol><h3 id="消费者生产者">消费者生产者</h3><p>平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率</p><p>实现</p><ol><li>wait</li><li>Lock</li><li>BlockingQueue</li></ol><p>为什么用while 不用 if？</p><p>while 自旋锁，防止虚假唤醒</p><h3 id="虚假唤醒-v2">虚假唤醒</h3><p>虚假唤醒就是一些obj.wait()会在除了obj.notify()和obj.notifyAll()的其他情况被唤醒</p><p>举个例子，我们现在有一个生产者-消费者队列和三个线程。</p><p><strong>1）</strong> 1号线程从队列中获取了一个元素，此时队列变为空。</p><p><strong>2）</strong> 2号线程也想从队列中获取一个元素，但此时队列为空，2号线程便只能进入阻塞(cond.wait())，等待队列非空。</p><p><strong>3）</strong> 这时，3号线程将一个元素入队，并调用cond.notify()唤醒条件变量。</p><p><strong>4）</strong> 处于等待状态的2号线程接收到3号线程的唤醒信号，便准备解除阻塞状态，执行接下来的任务(获取队列中的元素)。</p><p><strong>5）</strong> 然而可能出现这样的情况：当2号线程准备获得队列的锁，去获取队列中的元素时，此时1号线程刚好执行完之前的元素操作，返回再去请求队列中的元素，1号线程便获得队列的锁，检查到队列非空，就获取到了3号线程刚刚入队的元素，然后释放队列锁。</p><p><strong>6）</strong> 等到2号线程获得队列锁，判断发现队列仍为空，1号线程“偷走了”这个元素，所以对于2号线程而言，这次唤醒就是“虚假”的，它需要再次等待队列非空。</p><h3 id="BlockingQueue的实现">BlockingQueue的实现</h3><h2 id="责任链模式">责任链模式</h2><h2 id="建造者模式">建造者模式</h2><h2 id="单例模式-v2">单例模式</h2><h2 id="工厂模式">工厂模式</h2><h3 id="简单工厂模式">简单工厂模式</h3><h3 id="抽象工厂模式">抽象工厂模式</h3><h2 id="外观模式">外观模式</h2><p>**主要解决：**降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</p><p><strong>何时使用：</strong> 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个&quot;接待员&quot;即可。 2、定义系统的入口。</p><p>缺点： 不符合开闭原则，如果要改东西很麻烦，继承重写都不合适</p><p><a href="https://www.runoob.com/design-pattern/facade-pattern.html">https://www.runoob.com/design-pattern/facade-pattern.html</a></p><h2 id="代理模式">代理模式</h2><p>结构型模式  一个类代表另一个类的功能</p><p>**意图：**为其他对象提供一种代理以控制对这个对象的访问。</p><p>**主要解决：**在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），<strong>直接访问会给使用者或者系统结构带来很多麻烦</strong>，我们可以在访问此对象时加上一个对此对象的访问层。</p><h3 id="静态代理-v2">静态代理</h3><p>业务接口 — &gt; 基本实现类  —&gt; 代理类</p><p>缺点： 代码重复 、 为单一类型对象服务</p><h3 id="动态代理-v3">动态代理</h3><p>业务接口 —&gt; 基本实现类 — &gt;动态代理类</p><p>核心 InvocationHandler</p><h2 id="享元模式">享元模式</h2><h2 id="适配器模式">适配器模式</h2><p>两个接口的桥梁 — 电源适配器</p><p>Target – Adaptee – Adapter</p><p>一个事物本来已经很好了，但是找不到合适的对象去对接，（新老版本更替，老版本/新版本如何适配）</p><p>提高了类的复用，让没有关联的两个类一起运行，无层级关系</p><h3 id="JavaIO-适配器模式和装饰者模式的区别">JavaIO 适配器模式和装饰者模式的区别</h3><p>InputStreamReader继承了Reader抽象类并实现，且持有了InputStream的引用，这里是通过StreamDecoder类间接持有的，因为从byte到char要经过编码。<br>很显然，适配器就是InputStreamReader，源角色就是InputStream代表的实例对象，目标接口就是Reader类。OutputStreamWriter 也类似。</p><p>InputeStream 类就是以抽象组件存在的：而FileInputStream就是具体组件，它实现了抽象组件的所有接口；FilterInputStream类无疑就是装饰角色，它实现了InputStream类的所有接口，并且持有InputStream的对象实例的引用；<br>BufferedInputStream是具体的装饰器实现者，它给InputStream类附加了功能，这个装饰器类的作用就是使得InputStream读取的数据保存在内存中，而提高读取的性能。与这个装饰器类有类似功能的还有LineNumberInputStream（java 1.8 已经过期）类，它的作用就是提高行按行读取数据的功能，它们都是InputStream类增强了功能，或者提升了性能。</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210331230002191.png" alt="image-20210331230002191"></p><h2 id="装饰者模式">装饰者模式</h2><p>向一个现有的对象添加新的功能，同时不改变其结构，作为现有类的一个包装，动态扩展一个实现类的功能</p><p>component : 抽象组件角色，定义一组抽象的接口，规定这个被装饰组件都有哪些功能<br>concreteComponent：实现这个抽象组件的所有功能。<br>Decorator：装饰器角色，它持有一个component对象实例的引用，定义一个与抽象组件一致的接口<br>ConcreteDecorator：具体的装饰器实现者，负责实现装饰器角色定义的功能</p><h3 id="mvp到底有什么什么作用？怎么解耦的？">mvp到底有什么什么作用？怎么解耦的？</h3>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓数独游戏UI设计</title>
    <link href="/2020/12/23/%E5%AE%89%E5%8D%93%E6%95%B0%E7%8B%AC%E6%B8%B8%E6%88%8F%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    <url>/2020/12/23/%E5%AE%89%E5%8D%93%E6%95%B0%E7%8B%AC%E6%B8%B8%E6%88%8F%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1>Sudoku Game</h1><!-- toc --><p>[toc]</p><hr><h2 id="Introduce-v2">Introduce</h2><ul><li>A conventional sudoku game with 9*9 blocks using Java and through Android Studio.</li><li>As for the specific operation rule of this game , you need to first press the blocks above the 9*9 matrix blocks, and drug it to the ‘?’ or the block you want to change (not including the original array) .</li><li>click the “SHOWANSWER”  button , the complete correct Sudoku matrix will show on the screen ,with the imgs on the unknown blocks bling twice</li></ul><span id="more"></span><h3 id="Preview">Preview</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/mainScreen.png" alt="hh"> <img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/levelSelect.png" alt="levelSelect"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/gameScreen.png" alt=""><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/answerShow.png" alt="answerShow"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/records.png" alt="records"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/record_2.png" alt="record_2"><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/record_3.png" alt="record_3"></p><h2 id="UI-Settings">UI Settings</h2><h3 id="Previous-Thought（avoid-delay）">Previous  Thought（avoid delay）</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201220105134759.png" alt="image-20201220105134759"></p><ul><li>9*9 Blocks Design  :  It’s certain to abandon statically add ImageView to the parent view. So First I was thinking to use GridLayout, and dynamically generate  81 ImageViews inside it . It worked  , but hearing that recyclerview can save some storage using …?(not so sure),so I turn my side to Recyclerview.But it proves that in a way it’s actually better ,at least I don’t need to care about the dividing line …</li><li>Game-Run Rules  :  In the  first , the action that moving finger on screen to dynamically set the block position of choosing number may be a delayed process ( After that , it proves that I was wrong . Delay is just the images is too big…). So I choose to a rule when click a number above  , and click again the blocks below ,to fill the 9x9 blocks . But this method is just a conventional way ,not attractive enough</li></ul><h3 id="Better-Way-Improve-User-Experience">Better Way (Improve User Experience)</h3><ul><li>So after I ran through the delayed problem and adjusted the imgs to a much smaller size.(from 800 kb to 4kb per Images…) , I go back to my first strategy, to timely let the block move with your finger. And when your finger get up ,it will be removed from parent views ,and there will be a judge about its position.</li></ul><h3 id="Thoughts-of-Afterclass-Improvement">Thoughts of Afterclass Improvement</h3><ul><li>maybe some ugly button imgs can be changed?</li><li>packages classification</li><li>MVC model</li></ul><h2 id="Using-of-Class">Using of Class</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201219223339691.png" alt="image-20201219223339691"></p><ul><li><p>MainActivity:  handling LegacyRequest   , LitePal Connect and some Ui settings</p></li><li><p>AboutActivity: developer information  and Lottie Animation</p></li><li><p>RecordBitmap: a bean class with some necessary data of a complete game record , including view bitmaps, dates ,completion date…</p></li><li><p>LevelChoosePanel: a Ui class for Level-Choose-Panel Ui layout</p></li><li><p>WrongBorder : a Ui class for a  border view when detecting answer is wrong.</p></li><li><p>RecordShowActivity: handling Records show page , including a recyclerview layout .</p></li><li><p>recycleutil:  Recyclerview Adapter and Decoration for its Ui setting.</p></li><li><p><strong>GamingActivity:</strong>  most important activity in this project. including  handling logically generate 9*9 Sudoku matrix, dynamically generate 9x9Ui Blocks(ImageView actually) and check wrong blocks in real time. Also handling gesture listener including finger DOWN , MOVE and UP .</p></li><li><p><strong>SudoHelper</strong> : core algorithm handling module class , to generate a 9*9 Sudoku with only one answer ,and detect validity of current 9x9 Matrix</p></li></ul><h2 id="Algorithm-Use">Algorithm Use</h2><h3 id="Previous-Thoughts-And-Problem">Previous Thoughts And Problem :</h3><ul><li>Previously , I was thinking to use a way of generation method with not-only answer. The method is quite easy. First to choose N (N=30) blocks , each row , column and numbers inside it is random on the condition that it matches the rules of Sudoku. And them use backTrace Method to fill other blocks remaining. And when to judge in the gameActivity , we just need to use the <strong>isValid()</strong> method to detect if this column &amp; row &amp; 3*3 matrix around it fit the rules , if not , that’s wrong. Thus it may provide different answers, due to detecting the 9x9 matrix it provides in the first step.</li></ul><h3 id="After-Improvement">After Improvement :</h3><ul><li><p>As seeing more, a standard Sudoku is a 9*9 Matrix with only one answer. So , to improve this , I use two types of buckTrace() method , difference is if it changes the origin matrix it gives.</p></li><li><p>So , first We randomly choose N different block , and under the rules, filling it with random number. Then using the original backTrace()  method (changes params it gives in). We get a correct 9x9 Sudoku Matrix. And then, we dig put specific numbers of blocks . In each digging process ,we detect that besides the original number in the matrix ,if there’s other number that could make current matrix be a standard matrix . If not , we can safely dig out this number ,and go further , else ,we may need to change the position （generate row and column randomly again）,until we dig out enough numbers of blocks . We get a matrix with only one answer.</p></li><li><p>Some optimization thoughts: if some time , the matrix is not good. Maybe we randomly find many blocks ,but it still can’t be dug out .Therefore ,we may need to go back in the first step, generating a new matrix and do the works below. So we can set a number to record the failed dig-out search , if the number is bigger than a certain number , we re-generate it . So ,in some case ,it may avoid time consuming work inside this methods.</p></li></ul><h2 id="Things-can-be-better">Things can be better</h2><ul><li>Ui , have to say , the Ui design is really so so…But time is catching up , no time for that . So sometime Ui need to be modified.</li></ul><h2 id="Thanks">Thanks :</h2><ul><li><p>Sincerely thanks for watching this. If any details and humble opinion could contribute to your thoughts , I would be content. And if you have any advice or doubts , welcome to put it there.</p></li><li><p>Contact : <a href="mailto:401177923@qq.com">401177923@qq.com</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>个人项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OOP复习</title>
    <link href="/2020/12/23/OOP%E5%A4%8D%E4%B9%A0/"/>
    <url>/2020/12/23/OOP%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>OOP复习 指北</h1><ol><li><p>工厂方法               P117</p></li><li><p>静态boolean 为false main方法中的boolean  没有初始值</p></li><li><p>this 在一个构造器中调用另一个构造器方法</p></li><li><p>静态初始化块 运行次序高于初始化块 且随着第一个类对象的创立只运行一次，且调用程序的静态方法，不创建对象时，该static 方法体也会被执行，仅执行一次。初始化块的运行次序 高于 构造器方法,不论放置的次序如何。</p><p>执行顺序: 父类的静态方法----&gt;子类的静态方法----&gt; 父类的构造----&gt;子类的构造…</p><p>单个类：静态初始化块–&gt;成员变量初始化—&gt;块作用域—&gt;构造方法</p><span id="more"></span><p>先 进行属性的初始化  在进行构造方法的初始化</p><p>继承关系时的调用次序：特殊</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father static"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father &#123;&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father public "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father propertiyu a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201118083928612.png" alt="image-20201118083928612"></p></li><li><p>类对象属性 有初始值  0 false null</p></li><li><p>静态导入                  P136</p></li><li><p>继承            P162</p></li><li><p>签名和可协变、静态绑定 和动态绑定                              P164</p></li><li><p>final 类中的所有方法自动变为final 方法</p></li><li><p>instanceof 是判断其 是否是 该类或者该类的子类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Father</span>    <span class="token comment">//注意使用instance的方式</span></code></pre></div></li><li><p>类型强转只在继承层次关系进行，否则会报错</p></li><li><p>父类可以有实现的方法和字段，也可以没有抽象方法，但抽象方法必须在子类中实现</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Man</span> m<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Male</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义抽象类的对象变量，但这样是无法调用子类的特殊方法的，这里注意多态性的体现</span></code></pre></div></li><li><p>除基本类型外，都是对象，数组也是对象</p></li><li><p>ArrayList  set add 方法的区别，以及不用泛型时 返回的是Object对象</p></li><li><p>包装： 一旦构造了包装器就不能改变贮藏在其中的值</p><p>包装类的 自动装箱和自动拆箱</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> b<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> c<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">;</span>        b<span class="token operator">=</span>a<span class="token punctuation">;</span>        a<span class="token operator">=</span>c<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// b=1000;</span></code></pre></div></li><li><p>接口 ： 可以有  实例化基本类型  int … 但是实例化接口对象后作为的是static final 常量，不能修改，可以直接通过实现类访问。接口中可以有抽象方法，所有抽象方法必须定义，可以有default 方法，可以有private方法但是private方法必须在接口实现，除private 外 不用加修饰符，默认为public，不允许有块作用域和静态初始化块   default 方法可以在子接口中得到重写，且默认方法可以调用其他方法。</p></li><li><p>内部类中的所有静态字段  必须是final 声明局部内部类时，不能有访问说明符。静态内部类，不会生成引用</p></li><li><p>在try catch 块中catch到异常时， 发生异常处之后的语句都不会执行</p><p>在块中出现没有 catch情况的异常时，会执行 finally 后的语句，但执行完finally后的语句便会返回，不会再try catch-finally块之后的语句了</p><p>try - with -resources 自动close</p></li><li><p>检查异常和非检查异常</p></li><li><p>String 常量   字符串缓冲池</p><p>[<a href="https://blog.csdn.net/nc_yhy/article/details/78474468?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160561320919724839249458%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=160561320919724839249458&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2">https://blog.csdn.net/nc_yhy/article/details/78474468?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160561320919724839249458%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=160561320919724839249458&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2</a><sub>all</sub>sobaiduend~default-1-78474468.pc_search_result_no_baidu_js&amp;utm_term=String+%E5%B8%B8%E9%87%8F&amp;spm=1018.2118.3001.4449]:</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201117194626755.png" alt="image-20201117194626755"></p></li></ol><p>21.嵌套异常详解：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after 3/0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"arit cath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"inner excption"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"outer exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201117200610606.png" alt="image-20201117200610606"></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//int a=3/0;</span>            <span class="token comment">//System.out.println("after 3/0");</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"arit cath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"inner excption"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"outer exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201117201055655.png" alt="image-20201117201055655"></p><p>总结一下： 内层捕获到的excption 在外层不会再捕获，哪怕是父子关系。且不会执行try中之后的语句，而是执行finally的语句</p><ol start="22"><li><p>概念性内容：</p><ol><li>类的特性：</li></ol><ul><li><p>封装：在抽象的基础上把对象的属性和方法组合成一个独立的单位，并尽可能隐藏对象的内部细节。</p></li><li><p>多态：用同一个名字定义不同的方法，这些方法体的语句不同，但实现的功能类似 。即同名的方法可以在不同的类中有不同的行为</p></li><li><p>继承（泛化）：在已有类的基础上派生出新的类，新的类能够继承已有类的属性和方法，并且扩展新的属性和方法。即一个对象从另一个对象获得属性和方法的过程</p></li><li><p>抽象类：一个类中没有包含足够的信息来描绘一个具体的对象</p></li><li><p>类是一组具有相同属性和行为的对象的抽象</p></li></ul><ol start="2"><li><p>对象基本特征</p><p>唯一性   分类性   继承性   多态性</p><p>三大基本特征是 ： 封装继承多态</p></li><li><p>对象要素</p><p>抽象   封装  共享  强调对象结构</p></li><li><p><strong>对象的基本特点</strong>：标识唯一性、分类性、多态性、封装行、模块独立性好；</p></li><li><p>运行过程：</p><p>编辑</p><p>编译：java编译器</p><p>加载：java类加载器  加载到内存</p><p>验证：java验证器</p><p>执行：java类解释器      翻译字节码为可执行的机器代码</p></li><li><p>对象具有 标识符  属性  行为</p></li><li><p>面向对象： 新的软件开发和程序设计技术，认为客观事物都是由对象组成的，对象是在原事物基础上抽象的结果</p></li><li><p>服务：通常被称为 方法 或 结果‘</p></li><li><p>包是java提供的一种区别类的名字控件的极值，是类的组织方式，是一种相关类和接口的集合，提供了访问权限和命名的管理机制。</p></li></ol></li><li><p>接口和继承的不同  接口和抽象类的比较   P149</p><ul><li>继承修改旧的功能，接口实现新的功能</li></ul></li><li><p>使用多态的好处  P138</p><p>可重用性</p><p>可扩充性、可维护性、动态绑定</p></li><li><p>数据库 JDBC用到的四大类</p></li><li><p>UML：</p><ol><li><p>组成：事务 关系  图</p></li><li><p>分类：</p><ol><li><p>用例图：</p><p>简要说明 主事件流和其他事件流  前提条件  事后条件</p></li><li><p>类图：（重要）</p><p>显示了静态结构</p></li><li><p>序列图</p></li><li><p>活动图  P16</p><p>分叉 分支   汇合 合并的区别</p><p>[choice]表示条件</p><p>如何画一个具体的活动图</p></li></ol></li><li><p>三层程序设计模式</p><p>表示层       ----业务逻辑层       -----数据访问层</p><p>GUI                 PD                           DA       class</p><p>分层结构的优势   P25</p></li><li><p>程序设计风格</p><p>可重用性   内 外</p><p>可扩展性</p><p>健壮性</p></li></ol></li><li><p>数组初始化的方式</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201118151442152.png" alt="image-20201118151442152"></p></li><li><p>三层设计 的好处 目的  区分三层设计和MVC P25 P272</p><p>分层设计： 分散关注 松散耦合  逻辑复用   标准定义</p></li><li><p>HashMap  可以有 不同的键 其值可都为null ，但null的键只能有一个 hashmap中也是无序的</p><p>ArrayList、Vector可以有多个null值</p><p>HashSet中只有有一个null值</p><p>HashMap的遍历方式  四种</p><p><a href="https://blog.csdn.net/scgyus/article/details/79105211?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160570417819724835825778%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=160570417819724835825778&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2">https://blog.csdn.net/scgyus/article/details/79105211?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160570417819724835825778%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=160570417819724835825778&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2</a><sub>all</sub>top_click~default-1-79105211.pc_search_result_no_baidu_js&amp;utm_term=hashmap%E7%9A%84%E9%81%8D%E5%8E%86&amp;spm=1018.2118.3001.4449</p></li><li><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201119193356887.png" alt="image-20201119193356887"></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Java表达式是变量、常量、运算符、方法调用的序列，它执行指定的计算并返回某个确定的值。</span></code></pre></div></li><li><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201119211925090.png" alt="image-20201119211925090"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓数独游戏课设</title>
    <link href="/2020/12/22/%E5%AE%89%E5%8D%93%E6%95%B0%E7%8B%AC%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2020/12/22/%E5%AE%89%E5%8D%93%E6%95%B0%E7%8B%AC%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1>数独游戏 (回溯算法)—数据结构课程设计实验报告</h1><p>[toc]</p><!-- toc --><hr><h2 id="游戏介绍">游戏介绍</h2><h3 id="简介-v4">简介</h3><ul><li>传统的数独游戏，采用 9x9 方格，通过填入数字 1-9 ，确保<strong>每行、每列、以及该格所在的 3x3 的方格区域</strong>中 不出现相同的数字。</li><li><strong>每个生成的数独只有一个解</strong></li><li>使用 AndroidStudio 平台开发 ，基于Java语言</li></ul><span id="more"></span><h3 id="实现功能：">实现功能：</h3><ol><li>UI 基本游戏界面的 UI 布局，数独生成与 UI 动态生成的异步处理 ，功能按钮</li><li>AutoDetect 游戏内实时检错并自动删除错误数字</li><li>Show Answer 显示答案功能，动态提示答案</li><li>Reset 重置数独功能，重新生成新的数独</li><li>Timer 计时功能</li><li>Record 记录功能，通过数据库记录每次成功完成数独的题目、答案图像，完成日期，完成时间，以及数独的难度</li></ol><h3 id="游戏操作说明：">游戏操作说明：</h3><ul><li>有安卓手机（版本不低于17)：<ol><li>将apk文件  (app-release.apk) 安装至手机，直接启动即可</li><li>进入游戏后，请<strong>先允许该程序访问手机内存</strong>(因为记录保存时要进行数据的存取)，否则程序会自动退出。通过&quot;START&quot;按钮开始游戏，选择难度，进入游戏界面，通过拖动上方较大的1-9的图像，将想要放置的数组拖动到想放置的位置即可。（注：如果是拖动至已生成的原始数独位置，则不会替换为放置的数组，会弹出“The block is origin&quot;提示）。成功完成，则会在中部显示&quot;Congratulation！&quot;的动画提示。</li><li>可通过&quot;RESET&quot;重置该难度下的数独，通过”BACK&quot;返回到游戏主界面，通过“SHOWANSWER”查看答案</li><li>在主界面的Records按钮点击后，可查看已有的记录，通过左右滑动可查看。如果没有记录，则不会显示。</li></ol></li><li>没有安卓手机：<ol><li>麻烦老师在PC端下载安卓模拟器，然后将该apk安装至电脑的安卓模拟器中运行（由于兼容问题可能会出现一些异常)。</li><li>游戏内操作步骤同上2-4步。</li></ol></li></ul><p><strong>我自己的测试视频放在了主目录下，如果以上两种情况下都不能运行，可以看我的演示视频。</strong></p><h3 id="项目运行说明-如果需要-：">项目运行说明 (如果需要)：</h3><ul><li><p><strong>JDK :1.8         API :Android 30 Platform</strong></p></li><li><p>下载Android Studio (3.6版本及以上) 官网地址https://developer.android.google.cn/studio/(安装包800M，这里不给出)</p></li><li><p>左上角 ”File“ --”Open“–选择项目文件夹   可以连接安卓手机(需要打开调试模式)，也可以下载Android Studio平台下的安卓手机模拟器(AVD manager —Create New Virtual Device)</p></li><li><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201222225942614.png" alt="image-20201222225942614"></p></li></ul><h2 id="游戏设计理念-回溯算法核心部分">游戏设计理念(回溯算法核心部分)</h2><p><strong>核心算法区域： “\app\src\main\java\com\example\sudoku”下的SudoHelper.java文件中</strong></p><h3 id="核心思想：">核心思想：</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">1. 先通过随机数，生成有n个元素的（n=30）残缺的数组2. 通过solveSudoku()将残缺数组生成完整的数独3. 将完整的数独进行挖取，每挖一个元素都要确保该位置上的元素不能由其他元素替换</code></pre></div><h3 id="isValid-方法："><strong>isValid()方法</strong>：</h3><ul><li><p>说明： 该方法用于判断数组中该行该列 填入数字c 时，是否在该行所有元素、该列所有元素或者该3*3区域中有与c相同的元素，如果有，则说明违反了规则，返回false;</p></li><li><div class="code-wrapper"><pre><code class="language-java"> /**     * 判断该二维数组中 row行 col列中填入数字c是否违反规则     * @param board 原始的二维数组     * @param row   该数字c的行数     * @param col   数字c的列数     * @param c     数字c     * @return     */    public static boolean isValid(int[][] board, int row, int col, int c) &#123;        for (int i = 0; i &lt; 9; i++) &#123;            //当前列有没有和数字c重复的            if (board[i][col] == c)                return false;            //当前行有没有和数字c重复的            if (board[row][i] == c)                return false;            //当前的3*3单元格内是否有和数字c重复的            if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c)                return false;        &#125;        //否则说明没有重复数字，符合规则        return true;    &#125;<pre class="language-none"><code class="language-none">### **backTrace()方法*** 说明：通过迭代进行数独的判断，由不完整的数独生成完整的数独* &#96;&#96;&#96;java  public static boolean backTrace(int[][] board, int row, int col,int num,int spr,int spc) &#123;          &#x2F;&#x2F;当row等于board.length的时候表示数独的最后一行全部读遍历完了，说明数独中的值是有效的，直接返回true          if (row &#x3D;&#x3D; board.length)              return true;          &#x2F;&#x2F;如果当前行的最后一列也遍历完了，就从下一行的第一列开始。这里的遍历          &#x2F;&#x2F;顺序是从第1行的第1列一直到最后一列，然后第二行的第一列一直到最后          if (col &#x3D;&#x3D; board.length)              return backTrace(board, row + 1, 0,num,spr,spc);          &#x2F;&#x2F;如果当前位置已经有数字了，就不能再填了，直接到这一行的下一列          if (board[row][col] !&#x3D; 0)              return backTrace(board, row, col + 1,num,spr,spc);          &#x2F;&#x2F;如果上面条件都不满足，就从1到9种选择一个合适的数字填入到数独中          for (int i &#x3D; 1; i &lt;&#x3D; 9; i++) &#123;              &#x2F;&#x2F;判断当前位置[row，col]是否可以放数字i，如果不能放再判断下一个能不能放              &#x2F;&#x2F;r行c列已经不能再填入num了，用于isOnlyOne方法              if(i&#x3D;&#x3D;num&amp;&amp;spr&#x3D;&#x3D;row&amp;&amp;spc&#x3D;&#x3D;col)                  continue;              if (!isValid(board, row, col, i))                  continue;              &#x2F;&#x2F;如果能放数字i，就把数字i放进去              board[row][col] &#x3D; i;              &#x2F;&#x2F;如果成功就直接返回，不需要再尝试了              if (backTrace(board, row, col,num,spr,spc))                  return true;              &#x2F;&#x2F;否则就撤销重新选择              board[row][col] &#x3D; 0;          &#125;          &#x2F;&#x2F;如果当前位置[row，col]不能放任何数字，直接返回false          return false;      &#125;  </code></pre></div></code></pre></li></ul><h3 id="isOnlyOne-方法">isOnlyOne()方法</h3><ul><li><p>说明：判断该行该列上的数字，是否能被其他1-9的数字替代，且不违反规则</p></li><li><div class="code-wrapper"><pre><code class="language-java"> /**     * 判断该行该列上的数字，是否能被其他1-9的数字替代，且不违反规则     * @param i 行数     * @param j 列数     * @param b 二维数组     * @return     */    public static boolean isOnlyOne(int i,int j,int[][] b)&#123;  //判断在i,j挖去数字后是否有唯一解        int k=b[i][j];  //保存待挖洞的原始数字        for(int num=1;num&lt;10;num++)&#123;            b[i][j]=0;            if(num!=k&amp;&amp;solveSudoku_noChange(b,k))&#123;     //除待挖的数字之外，还有其他的解，则返回false                b[i][j]=k;                return false;            &#125;        &#125;        return true;     //只有唯一解则返回true    &#125;<pre class="language-none"><code class="language-none">### solveSudoku方法()* 说明： 用于判断不完整的board数组能否生成为二维数独，如果能，则返回true，且会更改board的元素值，num作为isOnlyOne()方法中的特殊判断条件，检验除了num数字，其他数字是否能填入数组使之构成数独。* solveSudoku_noChange() 功能与solveSudoku()方法一致，区别是不更改参数board二维数组的值，仅给出是否能生成数独的结果。* &#96;&#96;&#96;java   &#x2F;&#x2F;num 用做isOnlyOne()的特殊判断标志      &#x2F;&#x2F;spr spc表示表示该位置上的元素不能填入num值      public static boolean solveSudoku(int[][] board,int num,int spr,int spc) &#123;          return backTrace(board, 0, 0,num,spr,spc);      &#125;          public static boolean solveSudoku_noChange(int[][] board,int num,int spr,int spc) &#123;          int temp[][]&#x3D;new int[9][9];          for(int i&#x3D;0;i&lt;9;i++)&#123;              System.arraycopy(board[i],0,temp[i],0,9);          &#125;          return backTrace(temp, 0, 0,num,spr,spc);      &#125;</code></pre></div></code></pre></li></ul><h3 id="generateSudoWithLevel-方法">generateSudoWithLevel()方法</h3><ul><li>说明：通过传入参数 int level，生成解法唯一的残缺数独</li><li>流程图：完整图片文件在源文件中</li><li><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="算法流程图"></li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateSudoWithLevel</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token class-name">Random</span> rand<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">//对不同难度进行挖取个数count的选择</span>     <span class="token keyword">switch</span> <span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">case</span> LEVEL_NORMAL<span class="token operator">:</span>             count <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> LEVLE_EASY<span class="token operator">:</span>             count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> LEVLE_DIF<span class="token operator">:</span>             count <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">int</span> calloc_num <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment">//最初挖取的次数</span>     <span class="token keyword">int</span> count_fresh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//重新寻找次数</span>     <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">while</span> <span class="token punctuation">(</span>calloc_num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">int</span> i <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">int</span> j <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     <span class="token keyword">int</span> num <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                         temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>                         calloc_num<span class="token operator">--</span><span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span>                 <span class="token punctuation">&#125;</span>             <span class="token punctuation">&#125;</span>             <span class="token comment">//如果能生成完整的数独 则退出循环进行下一步</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">solveSudoku</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token comment">//否则重新开始</span>             calloc_num <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>             temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">//对完整的数独进行挖取，并确保每一次挖取的元素不能被其他数字替代</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">int</span> r <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> c <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//如果已经挖取了count个元素，且更新次数&lt;20</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> count <span class="token operator">&amp;&amp;</span> count_fresh <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">return</span> temp<span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>             <span class="token comment">//该位置有值，且能不能被其他值替换，则挖取这个位置的值</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isOnlyOne</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token comment">//如果能被其他元素取代，则重新寻找次数+1</span>             count_fresh<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token comment">//如果寻找次数过多，说明有这是个不太理想的数独，继续寻找可能耗时</span>             <span class="token comment">//则重新生成新的数独</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>count_fresh <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>             i<span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">//进行数据的重置以便重新生成数独</span>         count_fresh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         calloc_num <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>         temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div><h3 id="流程概括">流程概括</h3><ol><li>构建一个不完整的矩阵，其中矩阵中N个元素被填写1-9的数字，且均符合数独的规则 (isValid()==true)</li><li>通过不完整的矩阵，又solveSudo(方法生成一个完整的数独矩阵</li><li>将生成的完整数独矩阵进行元素挖取，每挖一个元素都要保证被挖取的元素不能被其他数字替代(数独解的唯一性)(isOnlyOne())</li><li>3步骤中如果该元素不满足时 重新搜索记录+1,当重新搜索记录大于一定值时，说明这个数独不是一个好的数独，则重新进入步骤一，构建新的数独；反之，则就得到了解唯一的数独，输出即可。</li></ol><h3 id="实验测试—具体耗时">实验测试—具体耗时</h3><ul><li>使用generateSudoWithLevel(int level)函数在IDEA平台上进行数独生成 N次实验，记录每N次的耗时，多次测量并取平均值，画出表格如下</li><li><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201222111013713.png" alt="image-20201222111013713"></li><li><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201222110639573.png" alt="image-20201222110639573"></li></ul><h3 id="实验分析">实验分析</h3><ul><li>随着难度增加， count 增加，生成完整数独后挖取的元素个数也增加，所以耗时必然是一个递增的过程。但在算法中因为涉及到calloc_fresh ，统计过量寻找可删除元素的判断，所以在遇到不太理想的数独时会进行重新生成操作，使得不同难度下单次生成数独的时间可能有差异。实验中的空间复杂度 : O©  (用到一个9x9的二维数组和常数个变量),  渐进复杂度上界  &gt;=O(9^{9x9})  (原因：加入判断calloc_fresh大于一定值时会重新生成数独重新挖取）</li></ul><h2 id="游戏开发中的其他想法和问题">游戏开发中的其他想法和问题</h2><p>开发中还涉及到一些控件动态生成，UI布局选择和游戏模式的思考。如果老师对这部分有兴趣，请移步主目录中的 <a href="http://README.md">README.md</a> 或者 README.pdf 文件</p><p>我把开发过程中的想法和解决方法写在了上述文档中</p><p>Github上项目不定时更新  <a href="https://github.com/PPLong222/SudokuGame">https://github.com/PPLong222/SudokuGame</a></p><p>邮箱 <a href="mailto:401177923@qq.com">401177923@qq.com</a></p><h2 id="课设总结">课设总结</h2><p>​这次课设让我学习了回溯算法，重新认识了数独游戏的定义，让我对求解N皇后和解数独等较为复杂的问题时有了新的思路，解决数独问题还可以通过位运算、舞蹈链等算法，回溯算法只是入门，数据结构和算法对我们来说，课程结束了但是还有很多很多需要今后深入学习。 通过这次课设也让我回顾了之前所学习的java语言和 Android开发的一些基础，发现自己的基础还是不是很牢固，在课设后还需要多巩固多总结。</p><h2 id="感谢-v2">感谢</h2><p>​感谢老师的阅读，如果在测试中发现了任何的异常或者UI不兼容问题，麻烦老师指出。我会及时对项目进行更新</p>]]></content>
    
    
    <categories>
      
      <category>个人项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人项目总结学习</title>
    <link href="/2020/10/22/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2020/10/22/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1>个人项目总结</h1><h2 id="JDBC-HTML-MYSQL-间通信">JDBC \ HTML \ MYSQL 间通信</h2><h3 id="简介-v3">简介</h3><p>实现html 界面输入用户名密码，能够通过mysql 查询到相应的其他值，并且再输出到html界面上</p><!-- toc --><span id="more"></span><h3 id="采坑点">采坑点</h3><ol><li><p>Servlet下的getParameter() 获取的是html 中name的值</p></li><li><p>JDBCTemplate  、 JDBCDruidUtils 的使用尚不熟悉</p></li><li><p>@Test  导入包  ----org.junit 要和hram…1.3 一起导入</p></li><li><p>jar包 最好都导入到web 下的WEB-INF中的lib中，注意别忘记添加依赖</p></li><li><p>各种jar包的寻找和导入</p></li><li><p>JDBCTemplate.query() 中的new BeanPropertyRowMapper&lt;&gt;(x.class,?1,?2…)  是通过 x.class中的 标准的java bean类来实现的</p></li></ol><p>即， 各种变量名不一定要与数据库中的一致</p><p>但： <strong>setter getter方法后的名字必须一致</strong>，比如：</p><p>数据库username —setUsername（）—name 是能够访问到的</p><ol start="7"><li><p>template 中查找数据 为 空，但会报错， 这个时候直接找到这个异常， 捕获，选择处理办法，避免导致服务器异常</p></li><li><p>出现 ？？？？的html显示可能是 编码选择不正常</p><div class="code-wrapper"><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">resp.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);req.setCharacterEncoding(&quot;UTF-8&quot;);</code></pre></div></li><li><p>网站404  ： 可能是继承Httpservlet类中方法没有@Override重写</p></li><li><p>Mysql 中 char类型 是定长的，会自动补齐</p><p>而varchar是变长的，即使指定25个字节，也会根据输出的不同而删除，这一点很重要！！！！</p></li></ol><hr><h2 id="Response-HTML-实现验证码-的验证和更换">Response/HTML 实现验证码 的验证和更换</h2><ol><li><p>各种src的指定路径</p></li><li><p>还未想到解决方法： 参数的传递 （我用的是类的静态变量）</p></li><li><p>现在 想到的解决办法：this.getServletContext()</p><p>传入 setattribute   作为类似的全局变量</p></li></ol><hr><h2 id="Response-ServletContext-FileInputStream实现文件下载">Response /ServletContext/ FileInputStream实现文件下载</h2><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">  <span class="token comment">//获取 html参数名</span><span class="token class-name">String</span> fileName<span class="token operator">=</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到ServletContext对象</span><span class="token class-name">ServletContext</span> servletContext<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到服务器包下的资源的绝对路径</span><span class="token class-name">String</span> realPath<span class="token operator">=</span>servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/Sources/"</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建输入流实体</span><span class="token class-name">FileInputStream</span> fileInputStream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更改响应头信息 设置为手动选择下载位置</span>resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span>servletContext<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到输出流</span><span class="token class-name">ServletOutputStream</span> outputStream <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> readbyte<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>readbyte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>readbyte<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><div class="code-wrapper"><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/Tomcat_2_war_exploded/downLoadServlet?filename=image_1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/Tomcat_2_war_exploded/downLoadServlet?filename=audio.mp3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 音乐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></div><p>注意这里的   ? 的参数传递！！</p><hr><p>##JDBC / HTML/ Mysql /JSP 实现 登录 、注册 并查询 用户信息</p><ol><li>解决 从浏览器上获取 输入的中文字符  乱码问题  核心解决方案：</li></ol>   <div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解决乱码的核心问题</span></code></pre></div><ol start="2"><li><p>对 Mysql中 Unique  / Null 问题的解决 ！！：</p><p>注意 异常捕获问题！ 先捕获子类，再捕 超类 ，利用返回值 ，返给调用类，这是很经典的做法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into users values(null,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>           template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token comment">//用户重名：   DuplicateKeyException 是DataIntegrityViolationException的子类</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DuplicateKeyException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        i<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DataIntegrityViolationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></li><li><p>对 html页面输入框，不输入时， 得到的结果 并不为NULL 而是为&quot;&quot; 的情况</p><ul><li><p>**尽可能的将int、double…类型换成包装类  ** 这样方便直接赋值null</p></li><li><p>在捕获端的处理</p></li><li><div class="code-wrapper"><pre><code class="language-java">    String s1=req.getParameter(&quot;age&quot;);        Integer age=null;        if(!s1.equals(&quot;&quot;))  age=Integer.valueOf(req.getParameter(&quot;age&quot;));//或者用三元 判别式也可以 <pre class="language-none"><code class="language-none">4. 判断 注册信息 错误时， 错误提示的传递   req 存储信息 并将转发到 新的页面  ，forward 重要   &#96;&#96;&#96;java           if(judge&#x3D;&#x3D;-1)&#123;               req.setAttribute(&quot;register_error&quot;,&quot;用户名或密码必须不为空！&quot;);               req.getRequestDispatcher(&quot;&#x2F;register.jsp&quot;).forward(req,resp);           &#125;           else if(judge&#x3D;&#x3D;-2)&#123;               req.setAttribute(&quot;register_error&quot;,&quot;用户名重名啦！&quot;);               req.getRequestDispatcher(&quot;&#x2F;register.jsp&quot;).forward(req,resp);           &#125;</code></pre></div></code></pre></li></ul></li><li><p>html页面上的接收以及显示处理  JSP原理</p><p>先判断 是否为空， 赋值为“”,否则页面会显示 为null</p><div class="code-wrapper"><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;div&gt;&lt;% if(request.getAttribute(&quot;login_error&quot;)&#x3D;&#x3D;null)&#123;        request.setAttribute(&quot;login_error&quot;,&quot;&quot;);&#125; %&gt;    &lt;%&#x3D; request.getAttribute(&quot;login_error&quot;)%&gt;&lt;&#x2F;div&gt;</code></pre></div></li><li><p>重定向</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>         resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></li><li><p>还是对于html  获取的 account 和 password  为“” 而不为null ，异常是捕获不到的,注意一下这种现象</p><p>解决办法：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">String account&#x3D;req.getParameter(&quot;account&quot;);    if(account.equals(&quot;&quot;)) account&#x3D;null;        String password&#x3D;req.getParameter(&quot;password&quot;);    if(password.equals(&quot;&quot;)) password&#x3D;null;   </code></pre></div></li><li><p>发现的问题：</p></li><li><p>对JDBC Druid 的使用和建立还不熟悉</p></li><li><p>对jsp 页面的使用 还不能适应</p></li><li><p>对Cookie Session 很不理解</p></li></ol><hr><h2 id="GUI-BufferedReader-Regex-读取文档类对象信息并存入为具体对象进入具体数组中">GUI  / BufferedReader /  Regex 读取文档类对象信息并存入为具体对象进入具体数组中</h2><ol><li><div class="code-wrapper"><pre><code class="language-java"> String Reg_1 = &quot;(?&lt;=\\n)[^\\n]*(?=\\s)&quot;;        String Reg_2 = &quot;(?&lt;=\\t)[^\\t]*(?=\\t)&quot;;        String Reg_3 = &quot;([0-9]+)&quot;;        Pattern pattern = Pattern.compile(Reg_1);        Matcher matcher = pattern.matcher(allInfo);<pre class="language-none"><code class="language-none">   利用正则表达式筛选数据，Pattern  &amp; Matcher 进行匹配，得到的是mather 的对象   **踩坑：  matcher.group()是得不到对象的，必须要先使用m.find()才会进行查找，之后才能group方法得到下一个对象！并且每次都要这样，类似于 next() **2. 对对象进行添加时判断是否重复， 要先进行 存储数组是否为 Null的问题   (size()!&#x3D;0)   3. &#96;&#96;&#96;java   StringBuilder s&#x3D;new StringBuilder(&quot;&quot;);&#x2F;&#x2F; 不报错   StringBuilder s&#x3D;null;&#x2F;&#x2F; 报错！ </code></pre></div>创建StringBuilder的空对象时发生的问题</code></pre></li><li><p>HashMap 排序的实现 很不明确</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">ranklist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>rankTime<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>ranklist<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> o1<span class="token punctuation">,</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span></code></pre></div></li><li><p>好习惯：在类中 创建 static 的 静态变量数组或者是静态常量字段</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Singer</span><span class="token punctuation">></span></span> singers<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Song</span><span class="token punctuation">></span></span> songsOfYear<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ranklist<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> rankTime<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span></code></pre></div><p>​在类的构造方法中创建具体数组或者对象的实例化</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>singers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scan <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//.........</span><span class="token punctuation">&#125;</span></code></pre></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序</title>
    <link href="/2020/05/23/%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/05/23/%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1>排序</h1><p>[TOC]</p><hr><span id="more"></span><h2 id="冒泡排序">冒泡排序</h2><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//设置了中断位，判断是否已经是排好序的数组了</span><span class="token comment">//能够实现O（n）的最优时间复杂度</span><span class="token keyword">int</span> isSwap <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>isSwap <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isSwap <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="选择排序">选择排序</h2><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> min<span class="token punctuation">;</span> <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//最小的排在前面</span>min <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>min <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>k <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="希尔排序">希尔排序</h2><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SortByShell</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> increment<span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>increment <span class="token operator">=</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>increment <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>increment <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> increment<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span>j <span class="token operator">>=</span> increment<span class="token punctuation">;</span>j <span class="token operator">-=</span> increment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> increment<span class="token punctuation">]</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> increment<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//9,8,7,6,5,4,3,2,1,10 </span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="插入排序">插入排序</h2><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//插入排序前提是之前的数组都是排好序的了</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span>x<span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="桶式排序">桶式排序</h2><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//桶式排序</span><span class="token keyword">void</span> <span class="token function">BucketSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token function">findMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 为bucket分配空间，max尽可能的减少多余的空间</span><span class="token keyword">int</span> <span class="token operator">*</span>bucket<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>MAX<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为每一个arr的数设置标记为 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d  "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="基数排序">基数排序</h2><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 基数排序</span><span class="token keyword">void</span> <span class="token function">RadixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> base<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">*</span>count<span class="token punctuation">;</span><span class="token comment">//开辟有基数base个元素的数组</span>count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 开辟 base行 num列的数组</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>temp<span class="token punctuation">;</span><span class="token keyword">int</span> maxCount <span class="token operator">=</span> <span class="token function">findMaxCount</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> countNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> base<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>num<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>a <span class="token operator">&lt;</span> maxCount<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//对count 和 temp进行 初始化</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> base<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>count<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> num<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//对arr数组中每一个数 该位数上进行判断入桶</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> cNum <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> countNum<span class="token punctuation">;</span><span class="token keyword">int</span> leaveNum <span class="token operator">=</span> cNum <span class="token operator">%</span> base<span class="token punctuation">;</span><span class="token comment">// 进行标记</span>count<span class="token punctuation">[</span>leaveNum<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//保存</span>temp<span class="token punctuation">[</span>leaveNum<span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">[</span>leaveNum<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> base<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//寻找该位上是否有数（有标记）</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//每一个位数操作后对countNum*10 以便得到下一个位数</span>countNum<span class="token operator">*=</span> base<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*for (int i = 0;i &lt; num;i++)printf("%d ", arr[i]);*/</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="快速排序">快速排序</h2><p>先决定中间正确索引pivot，再对两边进行排序。决定pivot时默认最左边为pivot选定的数，temp先保存，右边哨兵先动，&lt; temp时替换左边，然后左边相反。最后l == r时，将temp归位到正确pivot索引上</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> l <span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> temp <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span> i <span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>C语言版：</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">quickSort_getIndex</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">quickSort_getIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> temp <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC 学习</title>
    <link href="/2019/12/22/JDBC%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/12/22/JDBC%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>JDBC 学习</h1><hr><h2 id="JDBC">JDBC</h2><p>** JAVA DATABASE CONNECTIVITY**</p><ul><li>定义了 操作所有关系型数据库的规则（接口） —SUN公司定义<br>各个数据库厂商实现接口 ，提供驱动jar包 <strong>真正执行的代码是jar包中的实现类</strong></li></ul><hr><span id="more"></span><h3 id="导入驱动jar包">导入驱动jar包</h3><h3 id="–注册驱动-–">–注册驱动 –</h3><h3 id="获取数据库连接对象-Connection-–">获取数据库连接对象 Connection –</h3><h3 id="定义sql-–">定义sql –</h3><h3 id="获取执行sql语句对象statement-–">获取执行sql语句对象statement –</h3><h3 id="执行sql-接受结果">执行sql 接受结果-</h3><h3 id="处理结果">处理结果</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注册驱动 ，加载进内存  （内含静态代码快 其中便是DriverManager的注册方法）！！</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取数据库连接对象</span><span class="token class-name">Connection</span> conn<span class="token operator">=</span><span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test_db?serverTimezone=UTC"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"Zyl2000215"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*DriverManager  驱动管理对象（注册驱动 --获取连接）    getConnection (url,user,password)    url :jdbc:mssql//ip :端口 /数据库名称    细节：若是本机的mysql服务器且端口为3306 可以不写ip：端口 */</span><span class="token comment">/*    Connection    1.获取执行sql对象    createStatement    2.管理事务：    开启事务 setAutoCommit()    提交事务 commit（）    回滚事务 rollback() */</span><span class="token class-name">String</span> sql1<span class="token operator">=</span><span class="token string">"update account set salary =3000"</span><span class="token punctuation">;</span><span class="token class-name">Statement</span> stat<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*     Statement :     1. 执行sql     int executeupdate（string sql）： 执行 DML DDL  返回值：影响的行数     ResultSet executeQuery 执行DQL 语句 */</span><span class="token keyword">int</span> count <span class="token operator">=</span>stat<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*    ResultSet :    1. next():游标向下移动一行 注意，最开始的从第一行之前开始       getXXX（数据类型）(参数):获取数据       while(rs.next())实现循环       1， 参数为 int ：列的编号  从  -1- 开始       2.  参数为String ， 列的名称             */</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>stat<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h2 id="抽取JDBC-工具类（for-简化书写）">抽取JDBC 工具类（for 简化书写）</h2><p>1.注册驱动也抽取<br>2.抽取一个方法获取连接对象</p><ul><li><div class="code-wrapper"><pre class="language-none"><code class="language-none">** 使用配置文件---使用静态代码块 ** </code></pre></div></li></ul><p>3.抽取一个方法释放资源</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> user<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>   <span class="token comment">/*         静态代码块，文件加载时执行一次    */</span>   <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Properties</span> pro<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//类加载器  避免直接输入绝对路径造成路径转移时问题</span>           <span class="token class-name">ClassLoader</span> classLoader<span class="token operator">=</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">URL</span> res<span class="token operator">=</span>classLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">String</span> path<span class="token operator">=</span>res<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           url<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           user<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           password<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           driver<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeAll</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> stmt<span class="token punctuation">,</span> <span class="token class-name">Connection</span> conn<span class="token punctuation">,</span> <span class="token class-name">ResultSet</span> rs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>stmt<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre></div><h2 id="PreparedStatement-执行sql-的对象">PreparedStatement :执行sql 的对象</h2><ol><li>sql注入问题<ol><li>目的： 用户输入的一些sql的特殊关键字参与拼接，造成安全性问题</li><li>预编译sql： 参数使用 ？ 作为占位符</li><li>步骤麻烦 但安全：<ol><li><p>Connection.preparedSatement（sql）</p></li><li><p>给？赋值： setXXX(参数1，参数2)<br>参数1： ？的位置编号，从1开始<br>参数2： ？的值</p></li><li><p>resultset 传参时，不需要再传参sql<br>相当于preparedSatement代替了父类statement</p></li></ol></li></ol></li></ol><p>** 后期都会使用到preparedStatement！！！**</p><hr><h2 id="JDBC-控制事务">JDBC 控制事务</h2><p>conn.setAutoCommit.(false);<br>抓异常回滚时，是在异常catch中抓 conn.rollback();</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM 学习</title>
    <link href="/2019/12/22/JVM%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/12/22/JVM%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>JVM 学习日志</h1><p>[toc]</p><!-- toc --><hr><h2 id="简介">简介</h2><p>JVM :       Java HotSoit Virtual Machine</p><p>Write once,  run anywhere</p><p>​    TIOBE 语言热度排行</p><p>Java 程序  -----&gt;编译为字节码文件(本身具有跨平台性)    ----&gt;不同操作系统上JVM</p><h3 id="JRE-和-JDK的关系">JRE 和 JDK的关系</h3><p>JDK：它是Java开发运行环境，在程序员的电脑上当然要安装JDK；<br>JRE：Java Runtime Environment它是Java运行环境，如果你不需要开发只需要运行Java程序，那么你可以安装JRE。例如程序员开发出的程序最终卖给了用户，用户不用开发，只需要运行程序，所以用户在电脑上安装JRE即可。<br>JDK包含了JRE，JRE中包含虚拟机JVM</p><h3 id="JVM跨语言的平台">JVM跨语言的平台</h3><p>JVM起始 从<strong>字节码</strong>开始</p><p>字节码文件可以由不同的编程语言提供 在java平台<strong>解释</strong>运行</p><p>由不同的编程语言提供不同的<strong>编译器</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210224091832738.png" alt="image-20210224091832738"></p><h3 id="JVM的语言无关性">JVM的语言无关性</h3><p>Java虚拟机不关心在内部运行的程序是用何种编程语言写的</p><p>只关心字节码文件</p><p>只要其他编程语言的编译结果满足并包含Java虚拟机的内部指令集，符号表以及请他信息，他就可以被装载和运行</p><h3 id="JVM-字节码">(JVM) 字节码</h3><p>通过编译器编译能在JVM上运行的二进制文件格式</p><p>不同的编译器可以编译出相同的字节码文件  字节码文件可以在不同的JVM上运行</p><h4 id="多语言混合编程">多语言混合编程</h4><p>JDK 1.5 —&gt; Java SE 5.0</p><h3 id="虚拟机">虚拟机</h3><p>软件：执行一系列虚拟计算机指令</p><p>分类  ：</p><ul><li>系统虚拟机: 提供可运行完整操作系统的软件平台，是对物理计算机的仿真</li><li>程序虚拟机:专门为<strong>执行单个计算机程序</strong>设计的   Java虚拟机中执行的指令 — 字节码指令</li></ul><h4 id="特点：">特点：</h4><ol><li>一次编译到处运行</li><li>自动内存管理</li><li>自动垃圾回收机制</li></ol><h4 id="虚拟机在计算机中的位置">虚拟机在计算机中的位置</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210224094303154.png" alt="image-20210224094303154"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210224094516957.png" alt="image-20210224094516957"></p><h3 id="其他">其他</h3><p>OpenJDK  半年更新一次  维护半年  之后不再维护 免费开源</p><p>OracleJDK  维护期三年  付费 内容稍微少一些</p><p>两者在代码的实质上基本一致</p><h2 id="正式进入">正式进入</h2><h3 id="Java代码的执行流程">Java代码的执行流程</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210224095237677.png" alt="image-20210224095237677"></p><h3 id="JVM的架构">JVM的架构</h3><p>Java编译器输入的指令流是 一种<strong>基于栈的指令集架构</strong>   不是基于寄存器的指令集架构</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210224095537650.png" alt="image-20210224095537650"></p><h3 id="JVM的生命周期">JVM的生命周期</h3><ol><li>启动： bootstrapclass loader引导类加载器创建的初始类 initial class 完成的 (加载父类？？)</li><li>执行：一个虚拟机对应着执行一个Java程序</li><li>退出：异常 、 正常执行完毕、操作系统错误、exit方法</li></ol><h2 id="类加载">类加载</h2><h3 id="ClassLoader">ClassLoader</h3><p>只负责class 文件的加载，至于是否能运行，由Execution Engine决定</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210224152835665.png" alt="image-20210224152835665"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210224153411382.png" alt="image-20210224153411382"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210224163801377.png" alt="image-20210224163801377"></p><h3 id="加载Loading">加载Loading</h3><ol><li>通过类的全限定名获取定义此类的二进制字节流</li><li>将该字节流代表的静态存储结构转化为方法的运行时数据</li><li>内存中生成一个代表此类的 java.lang.Class对象，作为方法区这个类的各个数据的访问入口</li></ol><h3 id="链接Linking阶段">链接Linking阶段</h3><h4 id="验证-Verify">验证 Verify</h4><p>确保Class文件的字节流一中包含信息符号当前的虚拟机要求，保证<strong>加载类的正确性</strong>，不危害虚拟机自身安全。</p><p>文件格式验证 元数据验证  字节码验证 符号引用验证</p><h4 id="准备-Prepare">准备 Prepare</h4><p>为类变量分配内存并且设置该内变量的默认初始值，哪怕是a = 1 最开始也是  a=0</p><p>不包含用final修饰的static  final在编译阶段就会分配了</p><h4 id="解析-Resolve">解析 Resolve</h4><p>将常量池内的符号引用转换为直接引用的过程</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210228145418046.png" alt="image-20210228145418046"></p><h3 id="类的初始化">类的初始化</h3><p>执行类构造器方法 clinit  的过程</p><p>javac 编译器自动收集类中的所有<span style='color:red;'>类变量</span>的<strong>赋值动作</strong>和<strong>静态代码块中语句</strong>合并而来</p><p>有静态语句 或者 静态变量 就会有 clinit 方法      不包含主方法</p><p>clinit 方法一定是先执行父类的 clinit 在进行子类的clinit。</p><p>虚拟机必须保证一个类的clinit 方法在多线程下被同步加锁</p><p>类的构造器方法为<init>，且可能有多个，static代码块以及静态变量的初始赋值合并在<clinit>中，且只能用有一个。static 代码块 和 static变量的赋值 有顺序的关系，但是可以在static语句块中赋值再定义 ------有一个注意点  非法的前向引用（<strong>可以赋值但不能调用</strong>）</p><p>举个例子：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    ABC <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ABC <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// ABC = 3</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ABC <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    ABC <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ABC = 4</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ABC <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// Error</span></code></pre></div><h5 id="变量初始化过程">变量初始化过程</h5><p>默认初始化–显示初始化- -构造器初始化–对象.属性的初始化</p><h3 id="加载器的分类">加载器的分类</h3><h4 id="BootStapClassLoader">BootStapClassLoader</h4><ul><li>用c/c++实现 嵌套在JVM内部</li><li>不继承ClassLoader</li></ul><p>系统的核心类库都是用引导类加载器加载的</p><p>不能直接通过getClassLoader获取</p><h4 id="AppClassLoader">AppClassLoader</h4><p>加载环境变量classpath和系统属性 java.class.path  是程序中的<strong>默认类加载器</strong></p><h4 id="ExtensionLoader">ExtensionLoader</h4><p>从java.ext.dirs系统属性指定的目录中加载类库</p><h4 id="自定义类加载器">自定义类加载器</h4><p>目的：</p><ul><li>隔离加载类</li><li>修改类加载的方式</li><li>扩展加载源</li><li>防止源码泄露</li></ul><h2 id="双亲委派机制">双亲委派机制</h2><p>问题引入：</p><p>自己创建 的 java.lang.String 和原生的冲突 会先加载原来的</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210224173500988.png" alt="image-20210224173500988"></p><ol><li>一个类加载器收到了类加载请求，他并不会自己先加载，而是把这个请求委托给父类的加载器执行。</li><li>一次递归请求最终到达顶层的启动类加载器</li><li>如果父类的加载器无法加载（引导类加载器和拓展类加载器只加载指定目录的class），才会委派给子类的加载器加载</li></ol><h3 id="优点">优点</h3><ol><li>保护程序安全，避免核心API被更改</li><li>避免类的重复加载。当父加载器已经加载过某一个类时，子加载器就不会再重新加载这个类</li></ol><h2 id="沙箱安全机制">沙箱安全机制</h2><p>沙箱安全机制是由基于双亲委派机制上 采取的一种JVM的自我保护机制,假设你要写一个java.lang.String 的类,由于双亲委派机制的原理,此请求会先交给Bootstrap试图进行加载,但是Bootstrap在加载类时首先通过包和类名查找rt.jar中有没有该类,有则优先加载rt.jar包中的类,因此就保证了java的运行机制不会被破坏.</p><p>虚拟机会把所有代码加载到不同的系统域和应用域，系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域 (Protected Domain)，对应不一样的权限 (Permission)</p><h2 id="其他-v2">其他</h2><p>JVM中判断两个class对象是否是同一个类存在的两个条件</p><ol><li>类的完整名称必须一致</li><li><strong>加载这个类的加载器必须相同</strong></li></ol><h3 id="类的主动使用和被动使用">类的主动使用和被动使用</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210224184726345.png" alt="image-20210224184726345"></p><h2 id="运行时数据区">运行时数据区</h2><p>RunTime Data Area        桥梁: CPU  — 内存 ---- 硬盘</p><p>不同的JVM对内存的划分方式和管理机制存在差异</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210225201740198.png" alt="image-20210225201740198"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210225201756298.png" alt="image-20210225201756298"></p><p><strong><span style='color:red;'>红色 </span> 一个进程一份</strong></p><p><strong>灰色  一个线程一份</strong></p><p><span style='color:red;'> 一个JVM实例对应一个RunTime实例</span></p><p>HotSpot JVM每个线程对应操作的本地线程直接映射</p><h3 id="虚拟机栈">虚拟机栈</h3><h4 id="概念-v4">概念</h4><p>内部保存一个个的栈帧，对应着一次次的java方法调用（线程私有）</p><ul><li><p>生命周期和线程一致</p></li><li><p>栈是运行时单位，堆是存储单位</p></li></ul><p>作用：主管java程序的运行，保存方法的局部变量，部分结果，参与方法的调用和返回</p><p>优点： 访问速度快  <strong>不存在垃圾回收问题</strong> <strong>GC</strong>   (只有进栈出栈操作) 但可能存在OOM</p><p>设置栈大小 VMOptions: -Xss256k</p><h4 id="异常">异常</h4><ul><li>JVM允许java栈大小是动态或者固定的</li><li>栈溢出异常： 线程的请求分配的栈容量超过JAVA虚拟机允许的最大容量，将抛出Stack Overflow异常</li><li>OOM： 动态扩展时没有足够的内存去申请或者创建，则跑出OutofMemoryError异常</li></ul><h4 id="栈帧">栈帧</h4><p>栈中的数据都是以栈帧方式存在的，每个方法都对应一个栈帧</p><p>当前栈帧：当前执行方法。</p><p><strong>不同线程的栈帧是不允许相互引用的，不能在一个线程的方法里去调用另一个线程中的方法</strong></p><p>包含：</p><h5 id="局部变量表">局部变量表</h5><p>(基本决定栈帧的大小)</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210228084320963.png" alt="image-20210228084320963"></p><ul><li><p>数字数组，存储方法参数和定义在方法体内的局部变量。包含基本数据类型，<strong>对象引用</strong>  （<strong>byte short boolean char 被转换为int</strong>），返回值类型</p></li><li><p><span style='color:red;font-size:24px'>垃圾回收的重点内容</span></p></li><li><p>所需大小是编译器确定下来的。未被赋值的声明是不会列入局部变量表的slot，但会列入locals(maximum local variables)中</p></li><li><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210228090243915.png" alt="image-20210228090243915"></p></li><li><p>Slot  槽：局部变量表的基本单位</p><ul><li>32位以内的类型只占用一个slot <strong>64位占用两个slot，在locals中看得出来</strong><ul><li>在外部方法中引用该类中对象或者方法时（不引用也会有） slot index0 位置会保存类的对象引用this</li><li>slot中的变量存在<strong>重复利用</strong>，内部域变量过期后的slot位置将由外部遍历替代</li><li>局部变量初始化后再使用时必须赋值，否则编译不通过</li></ul></li><li>slot中先保存this(即该类),然后保存该方法参数，然后再是局部变量</li></ul></li></ul><h5 id="操作数栈">操作数栈</h5><p>数组、链表实现 FILO</p><p>作用：根据字节码指令，在栈中写入数据，入栈和出栈，保存计算过程的中间结果</p><ul><li>a + b = c实例</li></ul><h6 id="代码解析">代码解析</h6><p>bipush: 这里的 bi 代表byte 的整型 -128~127 时，与代码中定义的int byte类型无关，他只与结果的具体数值有关，转换成最接近的类型</p><p>sipush:整型 -32768~32767 时</p><p>istore_x: 弹出栈的值并保存到slot索引为x的地方</p><p>注意这里istore_0和istore_1的区别，如果是主方法或者普通方法时，要么保存的是对象的引用this 要么就是args参数在index 为0位置。如果是类的静态方法中时，则就不存在其他的数据，一个数据都保存在index0处</p><p>iconst：当int取值**-1~5<strong>时，JVM采用</strong>iconst**指令将常量压入栈中。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">0: bipush        10     2: istore_1     3: bipush        20     5: istore_2     6: iload_1     7: iload_2     8: iadd     9: istore_3    10: return</code></pre></div><ul><li>每个操作数栈都拥有一个明确的栈深度存储数值，编译器就定义好</li></ul><p>Code — max_stack中</p><ul><li>栈占用单位同slot</li><li>操作数栈中存在复用</li><li>如果被调用的方法中带有返回值的话，其返回值将会被压入当前栈帧操作数栈中，并更新pc寄存器中的指令</li></ul><h6 id="栈顶缓存技术">栈顶缓存技术</h6><p>出发点：栈结构，频繁执行内存读写（出栈入栈）</p><p>栈顶元素全部缓存在cpu寄存器中，提升执行引擎的效率</p><h5 id="动态链接">动态链接</h5><p>------运行时常量池的方法引用</p><p>每一个栈帧内部都包含一个指向<strong>运行时常量池</strong>中该栈帧所属方法的引用</p><p>目的：支持当前方法的代码能够实现动态链接，将保存变量和方法引用的符号引用转换为调用方法的直接引用</p><h6 id="方法的调用">方法的调用</h6><p>静态链接和动态链接</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210228141739834.png" alt="image-20210228141739834"></p><p>静态链接：目标方法在编译期间可知且运行期保持不变，这种情况下降调用方法的符号应用转换为直接引用的过程称为静态链接</p><p>动态链接：编译时无法确定</p><p>方法的绑定机制：早期绑定和晚期绑定</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210228142033732.png" alt="image-20210228142033732"></p><p>晚期绑定：</p><p><strong>多态、继承  无法确定</strong>  ----invokeVirtual</p><p>invokeSpecial</p><p>虚方法：除非虚方法外的所有方法</p><p>非虚方法：</p><ul><li><p>编译期间确定版本，运行时不可变</p></li><li><p>静态方法、<strong>私有方法</strong>、<s>final方法(static修饰的除外)</s>、示例构造器、父类方法</p></li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210228143133793.png" alt="image-20210228143115307"></p><p>在子类中未显示的调用父类方法是虚方法（可能子类进行了重写）</p><blockquote><p><strong>一个问题：为什么调用non-private的final方法是invokevirtual类型的？</strong></p><p>考虑以下一个场景：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Derived"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Derived</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Base</span> b <span class="token operator">=</span> d<span class="token punctuation">;</span> <span class="token comment">//  Base类型引用指向Derived类型实例</span>    b<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//  通过invokevirtual调用到final Derived.foo()</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：RednaxelaFX</span><span class="token comment">// 链接：https://www.zhihu.com/question/45131640/answer/98820081</span></code></pre></div><p>也就是子类重写了父类的虚方法并声明为final不希望被自己的子类继承，这个时候则可以通过多态以Base的类型调用到Derived的final方法，所以也是不确定的</p></blockquote><p><span style='font-size:24px;color:orange'>动态类型和静态类型语言的区别</span></p><p>对类型的检查是在编译期间还是在运行期间</p><ul><li><p>前者判断变量自身的类型信息</p></li><li><p>后者判断变量值的类型信息，变量是没有类型信息的（JavaScript）</p></li></ul><h6 id="方法分派">方法分派</h6><p><strong>静态分派</strong></p><p>首先需要理解，在Java中 Animal animal = new Dog(); 其中Animal表示的是静态类型， 而随后的Dog()则表示实际类型</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispatchTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//方法重载，是一种静态行为，编译期就可以确定</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> dog<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> cat<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DispatchTest</span> staticDispatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatchTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Animal</span> animalDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//变量声明为Animal，引用指向Dog实例</span>        <span class="token class-name">Animal</span> animalCat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//变量声明为Animal，引用指向Cat实例</span>        staticDispatch<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>animalDog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用重载的方法</span>        staticDispatch<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>animalCat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用重载的方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// result:</span><span class="token comment">// Animal Animal</span></code></pre></div><p>考虑以上情况，结果却不为Dog和Cat，这是因为对方法的重载，方法的参数以<strong>变量的静态类型</strong>为准，而不管引用指向的实际类型。变量的静态类型不会发生变化，而实际类型可能在运行时发生改变。静态分派发生在编译阶段，所以确定静态分派的动作实际上不是由JVM完成的，而应该是Javac编译器</p><p><strong>动态分派</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Fruit</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//声明为Fruit，引用指向子类</span>        <span class="token class-name">Fruit</span> orange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Orange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        apple<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orange<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Orange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改引用</span>        apple<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Fruit</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fruit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span><span class="token comment">//重写</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Orange</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span><span class="token comment">//重写</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Result:</span><span class="token comment">// Apple Orange Orange</span><span class="token comment">// 调用的都是Fruit的test方法</span><span class="token comment">// 17: invokevirtual #6                  // Method stream/Fruit.test:()V</span><span class="token comment">// 20: aload_2</span><span class="token comment">// 21: invokevirtual #6                  // Method stream/Fruit.test:()V</span></code></pre></div><p>动态分派和方法的重写有关，涉及到一个概念：方法接受者</p><p>调用invokevirtual字节码指令的多态查找流程：</p><ul><li>在操作数栈顶找到第一个元素所指向的对象的<strong>实际类型C</strong>（这是造成多态查找的根本原因）</li><li>如果在类型C中找到与敞亮中的描述符和简单名称都相符的方法，则进行访问权限校验，如果通过则返回该方法的直接引用。</li><li>否则，按照继承关系从下往上对C的各个父类进行搜索验证</li><li>没有找到合适的方法，抛出AbstractMethodError;</li></ul><p><strong>字段是否有多样性</strong></p><p>参考以下代码, 深刻理解字段不具有多样性</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        money <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">showMeTheMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showMeTheMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am father I got "</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">" money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        money <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token function">showMeTheMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showMeTheMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am son I got "</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">" money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Father</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** I am son I got 0 money *  I am son I got 4 money *  2*/</span></code></pre></div><ul><li>调用new Son()时，肯定先要加载父类，执行父类的init方法，此时父类的money字段为2 ，随后invokevirtual调用虚方法showMeTheMoney()</li><li>但这里是方法的重写，所以有动态分派，实际类型是Son，所以调用Son的showMeTheMoney()</li><li>但这个时候Son对象还没有被初始化啊，所以Son的money字段为0</li><li>然后进行Son对象的初始化，此时money为4且调用son类的showMeTheMoney方法</li><li>最终由于对象的静态类型是Father，所以son.money其实是Father类中的money对象，结果为2</li></ul><p>当子类声明了与父类同名的字段时，虽然在自类的内存中两个字段都会存在，但自类的字段会则遮蔽父类的同名字段，但由于这里通过静态类型访问变量，因此能访问到父类的money变量。</p><blockquote><p><strong>当子类声明了与父类同名的字段时，在自类的内存中两个字段都会存在</strong>。当指定静态类型Father获取时，获取的为属于Father的静态变量，当指定静态类型为Son时获取的是Son的静态变量。已在VisualVM中得到验证</p></blockquote><p><strong>除去重载和重写之外</strong> 针对以上代码，考虑这种情况：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Son</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayOfSon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">// Main</span><span class="token class-name">Father</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>son<span class="token punctuation">.</span><span class="token function">sayOfSon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>这时候是否会报错呢？答案是会的，这里也是多态的一种，因为静态类型是Father, 在编译时只会考虑静态类型所拥有的方法。</p><p><strong>Java是一门静态多分派而动态单分派的语言</strong></p><p>静态分派时考虑静态类型和方法参数等，动态分派只考虑其方法的接收者的实际类型即可。</p><p><strong>JVM如何做到分派呢：建立虚方法表</strong></p><p><span style='font-size:24px;color:orange'>虚方法表</span></p><p>目的： 避免自下而上频繁的使用动态分配</p><p>创建阶段： linking</p><p><strong>每个类中都有一个虚方法表</strong>，虚方法表中存放着每个方法的实际入口地址，如果某个方法在子类中没有被重写，那子类的虚方法表的地址入口和父类相同方法的入口是一样的，如果重写了该方法，则子类虚方法表中的地址会被替换。在父类、子类的虚方法表中都应当有一样的索引序号，当类型变换时，只需要变更查找的虚方法表，就可以找出正确的方法的执行地址</p><h5 id="方法返回地址">方法返回地址</h5><p>方法正常退出的定义（异常退出时由异常表决定）</p><p>存放调用该方法的<strong>pc寄存器</strong>的值 类似ret？？？</p><p><span style='font-size:18px;color:cyan'>异常处理表</span></p><p>class文件中   from  to  target</p><p>异常完成出口不会给上层调用者任何返回的信息</p><h5 id="附加信息">附加信息</h5><h3 id="本地方法栈">本地方法栈</h3><ul><li>线程私有</li><li>内存 固定或者动态扩展</li><li>本地方法用C语言实现</li><li>实现：虚拟机栈中登记本地方法</li></ul><p>当线程调用本地方法时，就进入了一个全新的不受虚拟机限制的 世界，和虚拟机有相同的权限</p><p>本地方法通过本地方法接口访问虚拟机内部运行时数据区</p><h4 id="本地方法接口和库">本地方法接口和库</h4><p>Native Method : Java 调用非Java代码</p><h3 id="程序计数器">程序计数器</h3><p>用来存储指向下一条指令的的<strong>字节码</strong>地址( ProgramCounter Register)</p><ul><li><p>很小的内存空间，运行速度最快</p></li><li><p>线程私有，生命周期和线程的生命周期保持一致</p></li><li><p>存储当前线程正在执行方法的JVM指令地址 如果执行native方法则是未指定值</p></li><li><p>唯一一个在JVM规范中没有规定任何OOM情况的区域</p></li><li><p>线程分支循环跳转异常处理、恢复等基础功能都需要依赖他</p></li></ul><h4 id="PC寄存器的好处">PC寄存器的好处</h4><p>CPU会不停切换线程，切换回来以后不知道从那开始执行</p><p>指明当前执行代码的字节码指令</p><h4 id="CPU时间片">CPU时间片</h4><ul><li><p>CPU分配给各个程序的时间</p></li><li><p><strong>CPU主频高，不断的切换，感觉像是在并行（不是并发）的执行</strong>-------这就叫并发</p></li><li><p>一个内核一时刻只能执行一条指令</p></li></ul><h3 id="堆">堆</h3><p>一个JVM只存在一个堆内存      一个进程对应一个堆，JVM启动时 堆被创建  其空间大小就确定了   ，但堆内存的大小是可以调节的</p><p>堆可以处于物理上不连续的空间，但逻辑上是连续的</p><p>所有的线程共享JAVA堆，还可以划分线程私有的华冲去   TLAB  THREAD LOCAL ALLOCATION BUFFER</p><p><strong>所有的对象实例及数组都应在运行时分配到堆上</strong></p><ul><li>方法结束后，堆的对象不会马上被移除，仅仅在垃圾收集时才会被移除（判断是否有引用）</li><li>堆是 GC 执行垃圾回收的重点区域</li></ul><h4 id="堆空间细分（逻辑上）">堆空间细分（逻辑上）</h4><ul><li><p>Java 7 新生区  养老区  永久区</p></li><li><p>Java 8  包括以后   新生区  养老区  元空间</p></li></ul><h4 id="设置堆空间大小">设置堆空间大小</h4><p>-Xms   堆区（新生代+老年代）的起始内存</p><p>-Xmx    堆区最大内存</p><p>-X JVM运行参数    -ms memory start</p><p>JVM 参数地址</p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p><p>初始大小   电脑内存 / 64     默认大小  电脑内存 / 4</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><p><span style='color:red;font-size:18sp' >问题： 设置Xms为10m  为什么得到的内存&lt;10</span></p><ul><li>Eden 区 只能和Survivor 1 或 2区 进行存储  而不是两个Survivor区都可以存储</li></ul><h4 id="堆空间的OOM">堆空间的OOM</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210302163155472.png" alt="image-20210302163155472"></p><h4 id="年轻代与老年代">年轻代与老年代</h4><p>YoungGen</p><p>占比1 / 3</p><ul><li>Survivor 0 ： from区</li><li>Survivor 1 ：to区</li></ul><p>占比2 / 3</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210302163141130.png" alt="image-20210302163141130"></p><p>默认比例</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210302163437852.png" alt="image-20210302163437852"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210302163456336.png" alt="image-20210302163456336"></p><p><span style='color:red;font-size:18sp' >问题： Eden和Survivor比例是 8:1  但实际是 6:1？</span></p><ul><li>自适应机制   -XX:-UseAdaptiveSizePolicy 关闭自适应的内存分配</li><li>可通过 -XX:SurvivorRatio 调整</li></ul><p><span style='color:orange;font-size:24px'  >几乎所有的Java对象都是Eden区 中new出来的</span></p><h4 id="对象分配过程">对象分配过程</h4><p><span style='color:#00CD66;font-size:18px' >YoungGC     Minor GC</span></p><ol><li>new的对象先到Eden区</li><li>Eden区被填满后  JVm GC器对 Eden区进行垃圾回收 MinorGC  销毁没有引用的对象</li><li>将Eden的剩余对象移动到Survivor 0 区 并加上age 1</li><li>再次触发GC时  上次放到Seurvivor 0 区的就会 进入 1 区 age ++</li><li>阈值 age &gt;15 时 到 Old Gen 区  <span style='color:red;font-size:18sp' >也有可能破格晋升</span></li></ol><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210303084331819.png" alt=""></p><p><strong>注意点</strong></p><ul><li><p>Eden区满 会将 Eden 和Survivor 区一起进行回收</p></li><li><p>Survivor区满不会进行回收！Survivor放不下，直接晋升老年代</p></li><li><p>0区 和1区复制之后有交换，谁空谁是to区</p></li><li><p>动态对象年龄判断：如果Survivor 中相同年龄的所有对象大小的总合大于 该区空间的一半，则年龄大于或等于该年龄的对象直接进入老年代(优化)</p></li><li><p>大对象直接放入老年代 (优化)</p></li></ul><h4 id="Minor-GC、Major-GC-、Full-GC">Minor GC、Major GC 、Full GC</h4><p>STW  ： stop the world</p><ul><li><p>部分收集  Partial GC:</p><ul><li><p>Minor GC :</p><ul><li>执行频率高，速度快触发 STW 暂停用户线程</li></ul></li><li><p>Major GC:</p><ul><li>执行速度比minor GC慢10倍以上  STW时间更长</li><li>老年代空间不足，先尝试minor GC如果还不足，就触发Major GC</li></ul></li><li><p>Mixed GC: 收集整个新生代和部分老年代的垃圾</p></li></ul></li><li><p>整堆收集 Full GC： 收集整个java堆和方法区的垃圾</p><ul><li>调优中尽量避免</li><li>触发条件：<ol><li>老年代空间不足</li><li>方法区空间不足</li><li>System.gc()但不一定执行</li><li>MinorGC进入老年代的平均大小大于老年代的可用内存</li><li>Survivor区转存到老年代时可用内存小于该对象大小</li></ol></li></ul></li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210303160142447.png" alt="image-20210303160142447"></p><p><span style='color:red;font-size:18px' >为什么要分代</span></p><ul><li>优化GC性能   缩小对堆的扫描范围</li></ul><h4 id="TLAB">TLAB</h4><p>问题：堆区是线程共享区域    并发环境下从堆区划分内存空间是线程不安全的</p><p>定义： 每个线程中独有一份TLAB  即私有缓存区域</p><p>目的：</p><ul><li>多线程分配内存，能避免一系列的非线程安全问题</li><li>提升内存分配的吞吐量（快速分配策略）</li></ul><p>JVM将TLAB作为内存分配的首选</p><p>TLAB空间小  仅仅占整个Eden的1% ,  也可以设置</p><p>一旦对象在TLAB空间分配内存失败，JVM尝试使用加锁机制确保数据操作的原子性，进而在Eden空间分配内存</p><h4 id="逃逸分析">逃逸分析</h4><p>将堆上的对象分配到栈</p><ul><li>对象在<strong>方法内部中定义</strong>后  只 在内部使用， 则没有逃逸   ------&gt;使用栈上分配</li><li>对象在<strong>方法内部定义</strong>后  被外部方法所引用 。则发生了逃逸</li></ul><p><span style='color:red;font-size:18px' >如何判断是否发生逃逸</span></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210303161641422.png" alt="image-20210303161641422"></p><p>优化  前提 未发生逃逸</p><h5 id="栈上分配">栈上分配</h5><p>原理 ：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配</p><p>实例n个对象时，开启栈上分配， 速度大幅提高，实例数降低。</p><h5 id="同步省略">同步省略</h5><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210303162647795.png" alt="image-20210303162647795"></p><p>去除了同步操作</p><h5 id="代码优化">代码优化</h5><p>分离对象或者标量替换   肢解</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210303163208358.png" alt="image-20210303163208358"></p><h3 id="方法区">方法区</h3><p>永久代 -----&gt;元空间(都是对JVM方法区的一种实现策略)</p><p>固定大小或者动态变化   自动收缩   逻辑上连续 物理上不连续</p><p>逻辑上属于堆的一部分</p><p><span style='color:#018531;font-size:30px' >方法区用于存储已被虚拟机加载的类型信息、常量、静态常量、即时编译器（JIT）编译后的代码缓存…</span></p><p><span style='color:orange;font-size:18px' >方法区看做是一块独立于Java堆的内存空间</span></p><p><span style='color:orange;font-size:18px' >方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，方法区会溢出 抛出OOM</span></p><p><span style='color:#4169E1;font-size:18px' >元空间和永久代最大的区别</span></p><p>元空间不在虚拟机的内存中，而是在本地内存 ，内部结构也发生改变。JDK1.8 之前是占用 JVM 内存，JDK1.8 之后直接使用物理内存</p><h4 id="方法区-堆-栈的交互关系">方法区 堆  栈的交互关系</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210303164007274.png" alt="image-20210303164007274"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210303164100411.png" alt="image-20210303164100411"></p><h4 id="设置元空间大小">设置元空间大小</h4><p>-XX: MataSpaceSize=     设置初始分配空间 默认20.75M</p><p>-XX：MaxMataSpaceSize  设定最大可分配控件   32位默认64M  64位默认82M    设置为-1则没有限制</p><p>JDK1.7以前    -PermSize</p><p>常用指令  jps  jinfo -flag   xxxxx aaaa</p><p>触及21M  FULL GC 释放没用的类，水位线重置，如果释放空间过多，则降低该值</p><p><span style='color:orange;font-size:18px' >内存泄露和内存溢出</span></p><p>内存泄露   病人康复 但是占着床位</p><p>内存溢出  病人太多，床位不够</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210303171142462.png" alt="image-20210303171142462"></p><h4 id="内部结构">内部结构</h4><h5 id="类型信息">类型信息</h5><p>完整有效名称    直接父类的完整有效名称    修饰符     直接接口的有序列表</p><h5 id="方法信息">方法信息</h5><h5 id="域信息">域信息</h5><p>域名称、域类型、域修饰符</p><p><strong>注意：如果是private类型的话，是看不到域信息的</strong></p><h5 id="non-final类变量">non-final类变量</h5><p>静态变量 在实例对象为null的情况下依然可以访问对象中的静态方法或者字段</p><h5 id="全局常量">全局常量</h5><p>编译时分配   (准备阶段)</p><p><span style='color:orange;font-size:18px' >与静态变量比较</span></p><p>静态变量在准备阶段初始化  在initial阶段赋值   也就是在静态语句中 clinit类构造器方法中赋值。而全局变量则不会再这个阶段赋值</p><h4 id="运行时常量池">运行时常量池</h4><h5 id="字节码的常量池">字节码的常量池</h5><p>存储各种字面量和对类型、方法和域的符号引用</p><p>类引用、字段引用、方法引用、数量值、字符串值</p><p>将在类加载后存放到方法区的运行时常量池中，这时符号地址就转换为了真实地址</p><h5 id="动态性">动态性</h5><p>与常量池的差别</p><h5 id="JDK1-6–1-7–1-8的调整">JDK1.6–1.7–1.8的调整</h5><p><span style='color:red;font-size:24px' >为什么要用元空间替代永久代？</span></p><ol><li>为永久代设置空间大小是很难确定的</li><li>对永久代的调优很困难</li></ol><p>静态变量的位置</p><p>1.6–1.7 对象的引用名放在Old Gen中  1.8 在堆中  ？</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210304150244295.png" alt="image-20210304150244295"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210304150705423.png" alt="image-20210304150705423"></p><p>只要是实例对象 必然会在Java堆中分配</p><h5 id="垃圾回收">垃圾回收</h5><p>回收内容：</p><p>常量池中废弃的常量和不再使用的类型</p><p>苛刻条件： 判断一个类已经被废弃</p><p><strong>总结</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210304145524447.png" alt="image-20210304145524447"></p><h2 id="对象的实例化-面试">对象的实例化(面试)</h2><h3 id="对象的实例化">对象的实例化</h3><ol><li>new</li><li>class.newInstance / constructor.new Instance  反射的方式<ul><li>只能调用空参的构造器，权限必须是public</li><li>constructor的newInstance 调用空参或者带参数的构造器，权限没有要求</li></ul></li><li>clone()<ul><li>需要实现Cloneable接口</li></ul></li><li>反序列化<ul><li>网络中获取对象的二进制流</li></ul></li><li>第三方库Objenesis</li></ol><h3 id="对象创建步骤">对象创建步骤</h3><p>字节码中</p><p>new #x : 分配内存、初始化值</p><p>dup : Duplicate the top value on the operand stack and push the duplicated value onto the operand stack.  复制操作数堆栈上的顶值，并将复制的值推送到操作数堆栈上。</p><p>invokespecial #a : 调用init构造器</p><p><span style='color: #DAA520;font-size:24px'>流程</span></p><ol><li>判断对象对应的类是否加载、连接、初始化，（是否有符号引用）</li></ol><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307084406633.png" alt="image-20210307084406633"></p><ol start="2"><li>为对象分配内存</li></ol><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307084458998.png" alt="image-20210307084458998"></p><ul><li><p>如果内存规整  ------&gt; 指针碰撞</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307084643494.png" alt="image-20210307084643494"></p></li><li><p>内存不规整  -----&gt;虚拟机需要维护一个列表    空闲列表分配</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307084721903.png" alt="image-20210307084721903"></p></li></ul><ol start="3"><li><p>处理并发问题</p><p>CAS 失败重试  区域加锁保证更新的原子性</p><p>每个线程预先分配一个TLAB</p></li><li><p>初始化分配空间</p><p>所有属性值默认值，保证对象实例字段在不赋值时可以直接使用</p></li><li><p>设置对象的对象头</p></li><li><p>init方法进行初始化  ----&gt;赋值</p></li></ol><h3 id="对象的内存布局">对象的内存布局</h3><p>大厂面试</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307090815341.png" alt="image-20210307090815341"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307090828271.png" alt="image-20210307090828271"></p><h4 id="对象头">对象头</h4><ol><li>运行时源数据 Mark Work<ol><li>哈希值</li><li>GC分代年龄</li><li>锁状态标志</li><li>线程持有的锁</li><li>偏向线程ID</li><li>偏向时间戳</li></ol></li><li>类型指针  指向类元数据，确定该对象的所属属性</li></ol><h4 id="实例数据">实例数据</h4><h4 id="Instance-Data">Instance Data</h4><p>对象真正存储的有效信息，包括程序代码定义的各种类型的字段</p><p>规则： 入少年宫图</p><h4 id="对齐填充">对齐填充</h4><p>占位符作用</p><p>64位 JVM   实际对象必须是8的整数位   只有1byte属性也要给你整到 16 bytes</p><p>一个空的对象</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210405171441583.png" alt="image-20210405171441583"></p><p>两个String属性的对象</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210405171535161.png" alt="image-20210405171535161"></p><p>网上说的  32bit  4 byte</p><p>故  对象头字节固定 为 12 字节(扩充到16字节)</p><p><strong>对象头由什么组成</strong>？</p><ol><li><p>MarkWord   64 bit</p><p>存储对象的hashCode、锁信息或分代年龄或GC标志等信息</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210405190427725.png" alt="image-20210405190427725"></p></li><li><p>Class Meta Address  32/64  bit(开启指针压缩</p><p>类型指针指向对象的类元数据，JVM通过这个指针确定该对象是哪个类的实例</p></li></ol><p>小端存储 / 大端存储</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210405184732813.png" alt="image-20210405184732813"></p><p><strong>对象状态</strong>：</p><ol><li>无状态  new时</li><li>偏向锁</li><li>轻量</li><li>重量锁</li><li>gc标记（无引用）</li></ol><h4 id="总结图示">总结图示</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307091320160.png" alt="image-20210307091320160"></p><h3 id="对象访问定位">对象访问定位</h3><p>JVM通过栈帧中的对象引用访问到内部的对象实例</p><h4 id="访问方式">访问方式</h4><ol><li><p>句柄访问</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307091748884.png" alt="image-20210307091748884"></p><ul><li>空间浪费</li><li>稳定  发生移动时外部指向不需要修改</li></ul></li><li><p>直接指针 HotSpot使用</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307091828272.png" alt="image-20210307091828272"></p><ul><li>发生移动时 外部reference需要修改指向的地址</li></ul></li></ol><h2 id="直接内存">直接内存</h2><p>基于元空间</p><p>Java堆外，向系统申请的内存空间</p><p>来源于NIO，使用DirectByteBuffer</p><p>NIO ：Non-Blocking IO  免去中间商</p><p>访问直接内存的速度，优于Java堆</p><p>缺点：</p><ul><li>分配回收成本高</li><li>不受JVM内存回收管理</li></ul><p>OOM  设置： MaxDirectMemorySize</p><p>不知道，则与堆的最大值 -Xmx参数值一致</p><h2 id="执行引擎">执行引擎</h2><h3 id="概述-v2">概述</h3><p>物理机的执行引擎：</p><p>直接建立在处理器、缓存、指令集和操作系统层面上</p><p>JVM的执行引擎：</p><p>虚拟机的执行引擎，由软件自行实现，不受物理条件制约定值指令集和执行引擎的结构体系，能执行不受硬件直接支持的指令集格式</p><p><span style='color:orange;font-size:24px'>JVM主要任务</span></p><p>字节码文件加载到内存中并<strong>解释执行</strong>， 解释/编译为对应平台上的本地机器指令</p><ul><li>执行引擎的执行的字节码指令完全依赖于PC寄存器</li></ul><h3 id="Java代码编译、执行的过程">Java代码编译、执行的过程</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307094756146.png" alt="image-20210307094756146"></p><p><span style='color:orange;font-size:24px'>橙色与java虚拟机无关</span></p><p><span style='color:#FA8072;font-size:24px'>解释器 Interpreter</span></p><p>根据预定义的规范对字节码采用逐行解释的方式执行</p><p><span style='color:#FA8072;font-size:24px'>编译器 Just In Time Compiler编译器</span></p><p>JVM将原码编译成和本地机器平台相关的机器指令</p><p><span style='color:red;font-size:24px'>为什么Java是半编译半解释语言</span></p><p><span style='color: #00BFFF;font-size:18px'>JVM执行代码时将解释执行和编译执行两者结合起来进行</span></p><p><span style='color:#3CB371;font-size:24px'>字节码是一种中间状态的二进制代码，比机器码抽象，需要直译器转译后才能成为机器码</span></p><p>为了实现特定软件运行和软件环境，和硬件环境无关</p><p>编译器将源码编译成字节码， 虚拟机器将字节码转译可以直接执行的指令</p><h3 id="解释器的使用">解释器的使用</h3><p>为什么要加入字节码？</p><p>为什么不直接搞成JVM？   分割工作</p><p>解释器发展历史：</p><p>字节码解释器  效率低下，逐行翻译</p><p>模板解释器  每条字节码和模板函数相关，模板函数直接产生这条字节码执行的机器码  提高性能</p><p>基于解释器执行： 低效</p><h3 id="即时编译-JIT编译器">即时编译  JIT编译器</h3><p>避免数被解释执行，将整个函数体编译成机器码    速度快</p><p><span style='color:#FA8072;font-size:24px'>HotSpot采用的是解释器与即时编译器并存的架构，互相协作取长补短，选择最合适的方式去权衡编译本地代码</span></p><p>JVM启动时，解释器首先发挥作用，随着程序时间推移，JIT编译器逐渐发挥作用，热点探测，将有价值的字节码编译为本地机器指令，以换取更高的执行效率</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307215507412.png" alt="image-20210307215507412"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307220023296.png" alt="image-20210307220023296"></p><h4 id="热点代码和探测方式">热点代码和探测方式</h4><p>何时使用JIT 编译器？</p><p>针对运行时频繁调用的热点代码进行深度优化，直接编译为对应平台的本地机器指令   -----栈上替换 OSR</p><p>热点探测功能</p><p>基于计数器</p><p>JVM为每个方法建立2个不同的计数器</p><ul><li><p>方法调用计数器</p><p>统计方法的调用次数</p><p>阈值 1500 / 10000 次</p><p>-XX: CompileThreshold</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307220456220.png" alt=""></p><p>对于这张图的理解，我认为是解释方式执行后是不存在Code Cache的，只有JIT编译后才存在缓存。</p><p><span style='color: #DA70D6;font-size:24px'>热度衰减</span></p><p>方法调用计数器统计的部署绝对次数，而是相对的执行效率，超过一定时间线度，如果调用次数仍然不足则会减少一半   ，半衰周期</p><p>-XX: UseCounterDecay  关闭热度衰减</p><p>-XX： CounterHalfLifeTime 设置半衰期时间   s</p></li><li><p>回边计数器   统计循环体执行的循环次数</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307220949310.png" alt="image-20210307220949310"></p></li></ul><p>修改HotSpot的编译模式,会发生实质的时间变化</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> s <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> e <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>e<span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>-Xcomp    即时编译 3759</p><p>-Xint     解释编译  9802</p><p>-Xmixed    3847</p><p>可以看出，使用混合编译 和 即时编译模式下，相差不大，但解释编译时很慢且相差很大</p><p>HotSpot有 两个Jit 编译器  C1 和  C2</p><ul><li><p>64位版本  JVM 默认 是-server模式  使用C2  耗时较长的优化，激进优化，优化的代码执行效率更高</p></li><li><p>-client 模式，C1编译器，  对字节码进行简单和可靠的优化，耗时短， 更快的编译速度</p></li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307222415561.png" alt="image-20210307222415561"></p><p>分层编译策略</p><h3 id="Graal编译器和AOT编译器">Graal编译器和AOT编译器</h3><p>AOT Ahead Of Time Compiler  程序运行之前，将字节码转换为机器吗  与JIT 编译器对比</p><h2 id="StringTable">StringTable</h2><h3 id="基本特性">基本特性</h3><p>不可变性  实现Serializebale接口 之处序列化   实现Comparable接口 可比较大小</p><p>JDK 8 后用的是char[]数组存储， JDK9之后使用byte[] + 编码标识存储</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210308080434960.png" alt="image-20210308080434960"></p><ul><li>在方法内部通过形参传递String对象， 内部改变，外部不会改变</li><li>底层是固定大小的HashTable  默认长度是1009，String 多时，Hash冲突，链表很长，影响String.intern</li><li>-XX:tringTableSize 调整长度</li><li>jdk 7 中默认长度是 60013</li><li>jdk8 长度要求最小值是1009</li><li>提高map长度，能够在一定程度提高String存储的效率</li></ul><h3 id="String的内存分配">String的内存分配</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210308082215487.png" alt="image-20210308082215487"></p><p><span style='color:red;font-size:24px'>为什么Stringtable要调整</span></p><p>permsize默认比较小</p><p>永久代垃圾回收频率低</p><p><strong>编译期优化</strong></p><p><span style='color:orange;font-size:24px'>如果拼接的符号前后出现了变量(不是常量)，则相当于在对空间中new String 地址就不一样了</span></p><p>String s2= s1+“123” != String s3 = s1 +s4;</p><p>String s3 = s1 +s2  字节码原理</p><p>new StringBuilder   调用的是append方法 append(s1)—&gt; append(s2) —&gt;StringBuilder. toStrihg方法</p><p>例如：</p><p>在循环体中 使用 string s = s +“123” 是很耗时的，因为每次拼接都new 一个StringBuilder 以及String    调用append方法，十分耗时！</p><p>StringBuilder 扩容优化  直接指定长度  个人测试后发现这里并不明显？？</p><h3 id="intern">intern()</h3><p>确保字符串在内存中只有一份</p><p><span style='color:red;font-size:24px'>面试题</span></p><ol><li><p>new String(“ab”) 会构建几个对象？</p><p>两个</p><p>一个对象是new关键字在堆空间中创建的</p><p>一个对象是字符串常量池中的对象，  ldc</p><div class="code-wrapper"><pre class="language-none"><code class="language-none"> 0 new #4 &lt;java&#x2F;lang&#x2F;String&gt; 3 dup 4 ldc #5 &lt;123&gt; 6 invokespecial #6 &lt;java&#x2F;lang&#x2F;String.&lt;init&gt;&gt; 9 astore_110 return</code></pre></div><p>而String a = “ab”;仅仅是在常量池中创建ab并把让那个a指向常量池的ab</p></li><li><p>new Sting(“a”) + new String(“b”)呢？</p><p>new String 创建在堆控件中</p><p>String a = &quot;a&quot;如果已经有a ，则是常量池中的对象</p><p><strong>6个</strong>  注意 + 的拼接操作是Stringbuilder  StringBuilder的toString 会再new 一个String</p><p><strong>注意：new Sting(“a”) + new String(“b”)不会生成在字符串常量中生成“ab”，但会在堆中创建该对象（只有有一个被加因素为变量，则就不会在字符串中生成相加后的结果）</strong></p><p>而String a = “abc” + “123”则会在常量池中生成“abc” “123” “abc123”</p><p><span style='color:orange;font-size:24px'>toString方法在字符串常量池中没有该String！</span>验证后确实没有</p></li><li><p>在jdk 6 和 jdk7/8的区别</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210308162129529.png" alt="image-20210308162129529"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210308165709630.png" alt="image-20210308165709630"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210308161926144.png" alt="image-20210308161926144"></p><p>如果变换string s4=&quot;11&quot;和s3.intern的位置后结果如何？</p></li></ol><p>​jdk6 中 s3.intern 创建了新的对象“11”，也就是有新的地址   常量池在永久代中‘</p><p>如果常量池中没有，则复制一份，放入常量池中</p><p>​jdk7 中 由于常量池放入堆空间中，他就直接拿堆空间的地址。 常量池记录的是堆空间“11”地址  只占四个字节</p><p>​JDK 1.7后，intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用，这一点与之前没有区别，区别在于，如果在常量池找不到对应的字符串，<strong>则不会再将字符串拷贝到常量池</strong>，而<strong>只是在常量池中生成一个对原字符串的引用</strong>。简单的说，就是往常量池放的东西变了：原来在常量池中找不到时，复制一个副本放到常量池，1.7后则是将在堆上的地址引用复制到常量池。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span><span class="token string">"12"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p><span style='color: #DA70D6;font-size:24px'>疑问：为什么intern后再string s = “123”相同的字符串，这时java堆既有123在堆中引用，又有在常量池的对象，为什么比较还是一样的？</span></p><p>解答：创建s会直接去常量池中创建，但发现有这个对象了，创建的是指向原来堆中对象的一个引用     没看native层源码，不是非常清楚</p><p><span style='color:#FA8072;font-size:24px'>易错例题</span></p><blockquote><p>Q：下列程序的输出结果：<br>String s1 = “abc”;<br>String s2 = “a”;<br>String s3 = “bc”;<br>String s4 = s2 + s3;<br>System.out.println(s1 == s4);<br>A：false，因为s2+s3实际上是使用StringBuilder.append来完成,并且还会调用toString，会生成不同的对象。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Create a copy, don't share the array</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>而这里的new String(char[], int, int)与new String(String)不同，前者不会在常量池中生成对应的字符串。经过测试后发现声明char[]类型字符数组不会在常量池中生成字符串，而前者其实最终是调用了Arrays.copyOfRange方法，将String类的char[]数组value进行改变，只针对char[]，所以不涉及到常量池。这里可专门出一篇文章细细研究</p></blockquote><blockquote><p>Q：下列程序的输出结果：<br>String s1 = “abc”;<br>final String s2 = “a”;<br>final String s3 = “bc”;<br>String s4 = s2 + s3;<br>System.out.println(s1 == s4);<br>A：true，因为final变量在编译后会直接替换成对应的值，所以实际上等于s4=”a”+”bc”，而这种情况下，编译器会直接合并为s4=”abc”，所以最终s1==s4。</p></blockquote><p><strong>实际操作中 添加多个相同的new String对象， intern成倍的影响速度</strong></p><h2 id="垃圾回收-v2">垃圾回收</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210309154809269.png" alt="image-20210309154809269"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210309155016450.png" alt="image-20210309155016450"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210309155037374.png" alt="image-20210309155037374"></p><ul><li>垃圾： 运行程序中没有任何指针指向的对象</li></ul><p>GC的主要作用域 ： 方法区 和 堆</p><h3 id="垃圾标记算法">垃圾标记算法</h3><h4 id="对象存活判断">对象存活判断</h4><h5 id="1-引用计数法">1. 引用计数法</h5><p>​每个对象保留整型的引用计数器属性  记录对象被引用的情况</p><p>​引用时 +1 引用失效 -1</p><p>​引用为 0 进行回收</p><p>​优点： 简单，便于标识，判断效率高，回收无延迟</p><p>​缺点： 单独的空间存储开销；每次加减 ，时间开销；<strong>无法处理循环引用的情况</strong>***（致命）**{相互引用，永不为0， 1–&gt;</p><p>​2—&gt;3—&gt;2   放弃1时， 还存在 2–&gt;3–&gt;2的循环引用}  内存泄露</p><p>​<img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210309161215885.png" alt="image-20210309161215885"></p><h5 id="2-可达性分析算法">2. 可达性分析算法</h5><p>​JVM 选用</p><p>​有效解决了循环引用问题，防止内存泄漏发生、简单高效</p><ul><li><p>GC Roots ：一组必须活跃的引用</p><ol><li><p>按照<strong>GC Roots</strong> 为起始点，从上至下 搜索被根对象集合所连接的目标对象是否可达】</p></li><li><p>使用可达性分析算法后，内存中存活的对象都会被根对象集合 直接或间接连接，搜索所走过的路径称为<strong>引用链</strong></p></li><li><p>如果目标对象没有和任何引用链相连，则不可达，标记为垃圾对象</p></li></ol></li><li><p>GC Roots 可以是什么：</p><ul><li>JVM栈中对象  方法中的参数、局部变量……</li><li>JNI引用的对象</li><li>类静态属性引用的对象</li><li>常量引用的对象 （StringTable 中）</li><li>被synch持有的对象</li><li>JVM内部的引用 Class对象，系统内加载器</li><li>一个指针，保存了root堆内存的对象，但他自己又没有在堆里边，他就是一个root</li></ul></li></ul><h4 id="对象的finaliztion机制">对象的finaliztion机制</h4><p>对象销毁之前可以自定义处理逻辑</p><p>对象回收之前会执行 finalize()方法 ，可以在子类重写该方法</p><p><span style='color:red;font-size:24px'>永远不要主动的调用对象的finalize方法</span></p><ul><li>finalize可能导致对象复活</li><li>执行时间没有保障，由GC线程决定</li><li>可能影响GC性能</li></ul><p>虚拟机中对象的三种状态：</p><ol><li>可触及的</li><li>可复活的  所有引用被释放，但可能在finalize中复活</li><li>不可触及的  调用finalize 且没有复活</li></ol><p>判断一个对象是否可回收   至少两次标记</p><p><span style='color: #00BFFF;font-size:20px'>理解finalize方法 — 一生只能使用一次的免死金牌</span></p><ol><li>到GC Roots没有引用连</li><li>筛选，判断是否有必要执行finalize<ol><li>没有重写 finalize方法 ----没必要    finalize方法被调用 ----没必要执行</li><li>重写了且未被执行   被插入F-Queue队列中   由优先级较低的Finalizer线程执行</li><li>finalize调用是对象唯一能复活的机会，<strong>稍后GC会对F-Queue的对象进行二次标记</strong>，如果在finalize中该对象和引用链任何一个对象建立了联系，则第二次标记，该对象会被移除“即将回收”集合， 如果伺候，对象再次出现没有引用存在的情况，这个时候由于一个对象的finalize方法只会执行一次，对象直接变成不可触及状态</li></ol></li></ol><p>finalize用法的最好实践</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Obj</span> obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj is alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一定要调用gc </span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意点</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">?</span><span class="token string">"null"</span><span class="token operator">:</span><span class="token string">"alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xdm我要被回收了 救我"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*        obj is alive        xdm我要被回收了 救我        -----2s        alive*/</span></code></pre></div><p>注意点，这里为什么要休眠2s？</p><p>Finalizer是低优先级的线程， 并发时 可能会有耗时 ，直接不休眠的话，会显示为null。</p><p><strong>Finalizer并不一定会保证finalize被完全执行</strong>，如果finalize中有sleep等操作，就不一定能保证语句被执行（因为这时主线程可能已经执行结束）。</p><p>​</p><p>使用mat 和 JVisualVM 查看dump堆</p><p>JProfiler 进行GC溯源</p><h3 id="垃圾清除算法">垃圾清除算法</h3><p>成功判断死活对象后，就是执行垃圾回收操作了，释放无用对象所占的空间</p><p>JVM常见的三种垃圾收集算法</p><ul><li>标记-清除算法</li><li>复制算法</li><li>标记-压缩算法</li></ul><h4 id="标记-清除-算法">标记 - 清除 算法</h4><p>Mark - Sweep</p><p>堆中有效内存耗尽  — 停止整个程序 STW —标记 / 清除</p><ul><li>标记：Collector 从引用根节点开始遍历，标记所有<strong>被引用的对象</strong>  ，在对象头中记录为可达对象</li><li>清除：Collector对堆内存从头到尾遍历（所有），如果发现对象的对象头中没有标记为可达，则回收</li></ul><p>缺点：</p><ol><li>效率不高  两次遍历</li><li>GC时会STW</li><li>清理出的内存空间是不连续的，需要维护一个列表</li></ol><p>清除？</p><p><strong>清除不是置空，是把要清除的对象地址，保存在空间的地址列表中，下次有新对象要加载时，判断垃圾的位置空间是不是够，如果够就覆盖</strong></p><h4 id="复制算法">复制算法</h4><p>解决 标记清除算法在垃圾收集效率的缺陷</p><p>将活着的内存分为两块，每次只使用一块，垃圾回收时，将使用的内存的存活对象复制（复制后的就是连续的空间了）到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换角色  (类比Survivor区)</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210309181613653.png" alt="image-20210309181613653"></p><p>优点：</p><ul><li>没有清除标记的过程，实现简单</li><li>复制后的空间是连续的，不需要空闲列表  ，使用指针碰撞</li></ul><p>缺点：</p><ul><li>始终可用的内存空间为1/2</li><li>G1 分拆成大量region的GC，复制需要维护region之间对象的引用关系，也有时间开销 （Java对象的访问方式）</li><li>系统中垃圾很多 —导致复制算法很慢   适用于Survivor区 （回收性价比高）</li></ul><h4 id="标记-压缩算法">标记 - 压缩算法</h4><p>Mark - Compat</p><p>标记： 与 标记清除算法相同</p><p>压缩：所有存活的对象压缩到内存的一段，<strong>按照顺序排放</strong>，之后清理边界外的所有空间</p><p>差异： 移动式的</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210309183437564.png" alt="image-20210309183437564"></p><p>压缩 后内存规整  可以用指针碰撞</p><p>优点：</p><ul><li><p>消除了标记清除算法中内存区域分散的缺点、</p></li><li><p>消除了赋值算法中内存减半的高额代价</p></li></ul><p>缺点：</p><ul><li>效率 低于复制算法</li><li>移动对象时，如果对象被其他对象引用，还需要调整引用的地址</li><li>移动过程中 ，触发STW</li></ul><h4 id="对比">对比</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210309184113952.png" alt="image-20210309184113952"></p><h4 id="分代收集算法">分代收集算法</h4><p>不同生命周期的对象采用不同的收集方式，提高回收效率</p><p>几乎所有的GC都采用</p><ol><li><p>Young Gen 回收频繁、生命周期短    Coping</p></li><li><p>Old Gen 生命周期长、存活率高    Sweep 和 Compat 整合</p><p>Mark 阶段开销与<strong>存活对象</strong>正比</p><p>Sweep 与管理区域的大小成正相关（堆的遍历）</p><p>Compat 与存活对象的数据正比</p></li></ol><h4 id="增量收集算法">增量收集算法</h4><p>基本思想：GC线程和主线程  交替进行并发清理垃圾，让用户感受不到STW</p><p>基础： Sweep 和 Compat</p><p>缺点：</p><p>线程切换和上下文转换有消耗，使得垃圾回收总成本上升，系统吞吐量下降</p><p>（同时做两件事，结果都做的不是很好）</p><h4 id="分区算法">分区算法</h4><p>堆空间越大 GC时间越长</p><p>分割内存区域为多个小块 region ，减少目标停顿时间，每次合理地回收若干个小空间 而不是整个堆空间</p><h3 id="概念-v5">概念</h3><h4 id="System-gy">System,gy()</h4><p>Runtijme.getRunTime().gc() 显示触发 Full GC</p><p>但是附带<strong>免责声明</strong>，无法保证对垃圾收集器的调用</p><p>调用System.runFinalization  强制调用使用引用对象的finalize方法</p><ul><li>主动gc的几种情况</li></ul><h4 id="内存溢出">内存溢出</h4><p>定义： 没有空闲内存且垃圾收集器也无法提供更多内存（OOM前会进行一次Full GC）</p><h4 id="内存泄露">内存泄露</h4><p>没有引用 ， 但GC不能进行回收</p><p>例如： 单例模式、未调用close方法</p><h4 id="STW">STW</h4><p>可达性分析算法中枚举根节点 GC Roots导致所有的Java线程停顿</p><ul><li>确保分析工作在一个一致性的<strong>快照</strong>中进行，例如JVisualVm生成 堆dump 不同时间是不同的</li><li>一致性指整个分析期间 整个执行系统 像被冻结在某个时间点上</li><li>如果分析过程中对象的引用关系还在不断变化，则分析结果的准确性也无法保证</li></ul><p>JVM后台自动发起STW 开发中不要用STW</p><p>理解代码:</p><div class="code-wrapper"><pre class="language-none"><code class="language-none"></code></pre></div><h4 id="垃圾回收的并行和并发">垃圾回收的并行和并发</h4><p>并发</p><p>几个程序处于启动状态且都在同一个处理器上完成，时间片</p><p>（在同一时间段发生）</p><p>垃圾回收的并行：  多条垃圾收集线程并行工作，仍在 STW</p><p><span style='color:red;font-size:24px'>多核中并发是怎样的</span></p><p>并行</p><p>系统多个CPU或者多核时，一个CPU一个核执行一个进程与另一个CPU或者另一个核同时执行一个线程，就是并行</p><p>（在同一时间点发生）</p><p>垃圾回收的并发 ：用户线程和垃圾收集线程同时进行（交替），不会引起STW</p><p>垃圾收集程序在一个核  用户程序在另一个核</p><h4 id="安全点和安全区域">安全点和安全区域</h4><h5 id="安全点">安全点</h5><p>并不是所有的地方都可以立马停下来 GC   必须在特定的地方停下来 即 Safe Point</p><p>安全点太少 ----  GC等待时间过长</p><p>太多 ---- 性能问题</p><ul><li><p>抢先式中断（未采用）</p><p>暂停所有线程，如果有线程不在安全点上，就回复线程，让线程跑到安全点上</p></li><li><p>主动式中断</p><p>设置中断标志，各个线程跑到Safe point去看这个 标志，如果是真的，则挂起</p></li></ul><h5 id="安全区">安全区</h5><p>程序block时无法响应 JVM中断   — Safe region 解决</p><p>一段代码片段， 对象的引用关系不变， 任何位置开始GC都是安全的（二维的safe point）</p><p>实际执行</p><ol><li>线程跑到safe region时，标识进入了safe region 如果发生GC， 则JVM忽略标识为Safe Region的线程</li><li>准备离开Safe region时，会检查JVM是否完成 GC，如果完成了则继续运行，如果没完成GC，则线程必须等待，知道收到了GC完成的命令 才会离开Safe region</li></ol><h3 id="引用">引用</h3><p>希望有这么一群对象，内存空间够，就在这，不够，就把他抛弃</p><p><span style='color:red;font-size:24px'>强引用、软引用、弱引用、虚引用有什么区别，具体使用场景是什么？</span></p><h4 id="强引用">强引用</h4><p>new Object  无论任何情况，只要强引用关系还在，垃圾收集器就永远不会回收掉被引用的对象</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span>s1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sleep</span>syso s2<span class="token punctuation">.</span>name<span class="token punctuation">;</span></code></pre></div><p>上述结果能输出s2的名字，因为由于是强引用，s1虽然没有引用了，但s2仍然持有堆空间中对象的引用，所以full gc时没有被清理</p><h4 id="软引用Soft">软引用Soft</h4><p>OOM前 或者 内存<strong>快要满了</strong>，将会把这些对象放入回收范围中进行二次回收，如果回收内存不够，才会报OOM</p><p>注意软引用的使用方式  –  使用后要把强引用给置空，使得强引用无效</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">   <span class="token class-name">Teacher1</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher1</span><span class="token punctuation">></span></span> softReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher1</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>   teacher <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   softReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//System.out.println(teacher.getName()); Null pointer</span><span class="token comment">//-Xms10m -Xmx10m</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>softReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// nullpointer</span>   <span class="token punctuation">&#125;</span></code></pre></div><h4 id="弱引用Weak">弱引用Weak</h4><p>只能生存到下一次垃圾收集之前</p><h5 id="WeakHashMap">WeakHashMap</h5><p>存储图片信息，内存不足，自动清理   内部Entry继承了WeakReference</p><h4 id="虚引用PhantomReference">虚引用PhantomReference</h4><p>唯一目的，对象被收集器回收前收到系统的通知，记录回收时间</p><p>需要指定引用队列</p><p>get拿不到对象</p><h2 id="垃圾回收期">垃圾回收期</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210322141038714.png" alt="image-20210322141038714"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210322141151403.png" alt="image-20210322141151403"></p><p>-XX PrintCommandlineflags 查看默认垃圾收集器</p><h3 id="指标">指标</h3><p><strong>吞吐量</strong>： 运行用户代码时间占总运行时间的比例</p><p>垃圾收集开销： 吞吐量的补数，垃圾收集所用时间与总运行时间比例</p><p><strong>暂停时间</strong>：一个时间段内应用程序线程暂停让GC线程执行</p><p>内存占用：Java堆区所占的内寸大小</p><p>吞吐量优先 与 注重暂停时间：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210322150414860.png" alt="image-20210322150414860"></p><ul><li>高吞吐量：用户感觉只应用线程在做工作，运行快</li><li>低暂停时间：交互更好</li><li>两者相互矛盾</li></ul><p><strong>现在的标准： 在最大吞吐量优先情况下，降低暂停时间</strong></p><h3 id="Serial">Serial</h3><p>串行收集器： 单线程 只使用一个CPU或一条收集线程完成垃圾收集工作  还会触发 STW</p><p>年代久远Client 模式下默认  、 新生代复制算法、老年代标记整理 、STW、串行回收</p><p><strong>Old</strong></p><p>标记-整理</p><p>Client模式默认</p><p>Server模式 与新生代ParallelScavenge配合  、 CMS后备垃圾收集方案</p><p>串行收集器采用单线程stop-the-world的方式进行收集。当内存不足时，串行GC设置停顿标识，待所有线程都进入安全点(Safepoint)时，应用线程暂停，串行GC开始工作，采用单线程方式回收空间并整理内存。单线程也意味着复杂度更低、占用内存更少，但同时也意味着不能有效利用多核优势。事实上，串行收集器特别适合堆内存不高、单核甚至双核CPU的场合。</p><p><strong>优点</strong></p><p>简单高效   没有线程交互的开销</p><p>适用单核 、 嵌入式</p><p>-XX ：+UserSerialGC</p><h3 id="ParNew">ParNew</h3><p>Parllel New 对新生代并行回收</p><p>新生代回收次数频繁，用并行高效</p><p>复制算法 – STW</p><p><strong>是否ParNew的并行收集就一定比Serial串行快？</strong></p><p>​单CPU环境下，ParNew就没有Serial收集器高，因为这时CPU不需要频繁地做任务切换，因此可以有效避免线程交互过程中不必要开销</p><p>-XXL ParallelGCThreadss num 限制线程数量 default 和CPU数据相同的线程</p><h3 id="Parallel">Parallel</h3><p>复制、并行、STW</p><p>年轻代采用复制算法，老年代采用标记-整理，在回收的同时还会对内存进行压缩</p><p>与ParNew不同点：</p><ul><li><p>吞吐量优先，目的为到达可控制的吞吐量</p></li><li><p>自适应调节策略</p></li></ul><p>高吞吐量 高效利用CPU时间 适合在后台运算不需要太多交互、服务器中</p><p>JDK1.6 用Parallel Old 替代了 老年代的Serial Old</p><p>-XX +UseParallel(Old)GC  互相激活</p><p>-XX：ParallelGCThreads num 设置年轻代并行收集器线程数</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210322145201261.png" alt="image-20210322145201261"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210322145313728.png" alt="image-20210322145313728"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210322145728931.png" alt="image-20210322145728931"></p><h3 id="CMS">CMS</h3><p>Concurrent Mark Sweep  针对老年代 —ParNew</p><p>低延迟，第一次实现了让垃圾收集线程和用户线程同时工作</p><p>尽可能缩短垃圾收集时用户线程的停顿时间</p><p>G1 整体上采用标记-整理算法，局部是通过复制算法，不会产生内存碎片。</p><p>垃圾收集算法采用<strong>标记-清除算法</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210324080947878.png" alt="image-20210324080947878"></p><ul><li>初始标记 ：STW 标记GC Roots <strong>直接</strong>关联到的对象</li><li>并发标记：从直接关联对象开始遍历整个对象图的过程，释放内存空间，与用户线程同时运行</li><li>重新标记：STW 修整并发标记期间，标记产生变动的对象。时间稍短</li><li>并发清除：清理删掉标记阶段判断的已经死亡的对象，释放内存空间、</li></ul><p>并发时期，要确保程序用户线程有足够的内存可以用。因此CMS收集器不能像其他收集器那样等到老虎年代几乎被填满再回收。当堆内存使用率达到一定阈值，便开始回收，确保应用程序在CMS工作过程中，依然有足够的控件支持应用程序运行。如果CMS运行期间预留的内存无法满足程序需要，就会出现一次Concurrent Mode Failure失败，JVM启动后备方案，用Serial Old收集器重新进行老年代的垃圾收集，停顿时间长</p><p>缺点：</p><ul><li>标记清除算法，产生碎片，只能选择空闲列表执行内存分配，不能放入大对象</li><li>对CPU资源敏感，并发时占用一部分线程，总吞吐量降低</li><li>无法处理<strong>浮动垃圾</strong>：用户线程产生新的垃圾，并发标记时产生的垃圾无法被标记（注意 重新标记是修成并发标记已标记的对象，即已经是垃圾的可能又不是垃圾了[保险操作]）</li></ul><p><strong>为什么不换成Mark Compact？</strong></p><p>压缩时会对内存进行整理，但是清理的时候是并发执行的，不能改变使用对象的地址</p><p>JDK9 废弃   JDK14 已经把CMS移除了</p><p>-XX：+UseConcMarkSweepGC 手动指定使用CMS</p><p>-XX: CMSlinitialtingOccupanyFraction  设置堆内存使用率阈值  默认 92</p><h3 id="G1">G1</h3><p>区域化分代式</p><p>JDK 9 开始采用，<strong>面向服务端应用</strong></p><p>适应不断扩大的内存和不断增加的处理器数量  降低暂停时间且兼顾良好的吞吐量</p><p><strong>为什么 叫G1?</strong></p><p>​并行收集器，划分堆内存  ，使用不同Region表示Eden Survivorws Old Gen等</p><p>垃圾优先：</p><p>​G1 GC 有计 划避免了这个堆中进行全区域的垃圾回收，跟踪不同的Region垃圾堆积的价值大小，回收所获得的空间大小与回收所需时间的经验值。  维护一个优先列表，根据允许的收集时间，优先回收价值最大的Region</p><p><strong>特点：</strong></p><ol><li><p>并行并发兼具：</p><p>有多个GC线程工作，利用多核  STW</p><p>能够与应用程序交替执行，不会STW</p></li><li><p>分代收集：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210324084815558.png" alt="image-20210324084815558"></p><p>堆空间分成若干Region，可以不连续而且每个小区域的角色是可以变换的？？？？</p><p>G1同时兼顾老年代和年轻代。</p></li><li><p>空间整合：</p><p>内存回收以region为基本单位，region之间是复制算法，但整体可以看成是标记整理算法（因为分region）。有利于程序长时间运行</p></li><li><p>可预测的停顿时间模型(软实时 Soft Real-Time)</p><p>让使用者明确指定在长度为M ms时间段内，消耗在垃圾收集上的时间不得超过N ms  – 尽可能</p><p>根据允许的收集时间，优先回收价值高的region    收集效率高</p></li></ol><p>JVM GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程</p><p><strong>适用场景：</strong></p><p>服务端，大内存，多处理器</p><p>50%Java堆活动数据占用、对象分配频率或年代提升频率变化大、GC停顿时间长</p><p><strong>分区Region</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210324091225275.png" alt="image-20210324091225275"></p><p>划分整个堆为2048个大小相同的独立Region 每个region控制在1 - 32 M 之间，每个region大小相同，在JVM生命周期内不会被改变。新生代和老年代通过region的动态分配实现逻辑上的连续</p><p>G1还增加了新的内存区域  Humonogous 存储大对象。因为将一个短期存在的大对象放入老年代，会对垃圾收集器造成影响。如果单个H区装不下一个大对象，会找一个连续的H区存储，如果还找不到就Full GC了  ，可将H区看做老年代但不完全相等</p><p>对单个Region  分配规则类似指针碰撞，也可以在region中给单个线程分配TLAB</p><p>内存占用、额外执行负载 比CMS高      （记忆集）</p><p>小内存应用上 CMS优于 G1  大内存G1更优</p><p><strong>参数：</strong></p><p>-XX:+UseG1GC</p><p>-XX:G1HeapRegionSize region  num   大小，2的 num 次方，范围是1m — 32m</p><p>–XX:MaxGCPauseMills 设置期望的最大GC停顿时间   默认 200ms</p><p>-XX ParallelGCThread  STW工作线程数，最多 8</p><p>-XX ConcGCThreads 设置并发标记的线程数   n设置为并行垃圾收集线程数的1/4左右</p><p>-XX InitiaingHeapOccupancyPercent  触发并发GC周期的Java堆占用阈值，超过此值 触发 GC，默认45</p><p>​<strong>垃圾回收过程</strong></p><ol><li><p>YoungGC</p></li><li><p>老年代并发标记过程concurrent Marking</p></li><li><p>Mixed GC</p></li><li><p>如果需要，Full GC还是存在的，提供一种失败保护机制，强力回收  — 单线程、独占式、高强度</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210326155145913.png" alt="image-20210326155145913"></p></li></ol><h4 id="RemeberedSet-记忆集">RemeberedSet 记忆集</h4><ul><li>一个对象可能被不同区域的对象引用  Old区 引用了 Eden区 。判断对象是否存活，是否要扫喵整个堆？</li><li><strong>回收新生代，不得不扫描老年代 ， 降低Minor GC效率</strong></li></ul><p>解决</p><ul><li>使用RemberedSet进行全局扫描</li><li><strong>每个Region都有一个Remebered Set</strong></li><li>每次引用类型数据进行写操作时，都会有一个Write Barrier  （写屏障） 中断 ， 检查要写入的引用指向的对象是否和该引用类型数据在不同的region</li><li>如果不同，通过CardTable把相关引用信息记录到引用指向对象所在region对应的RS 中(本体)</li><li>进行垃圾收集时，在GC根节点的枚举范围加入RS，保证不进行全局扫描也不会有遗漏</li></ul><h4 id="回收具体过程">回收具体过程</h4><p><strong>YoungGC</strong></p><p>Eden空间，G1触发YoungGC  只回收Eden Survivor区</p><p>YoungGC 首先G1停止STW ，G1创建回收集 CS ，即需要背回收的内存分段集合，YoungGC 的 CS包含Eden区和Survivor、区的所有内存分段</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210326161642195.png" alt="image-20210326161642195"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210326162531425.png" alt="image-20210326162531425"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210326162602055.png" alt="image-20210326162602055"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210326164133102.png" alt="image-20210326164133102"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210326164237342.png" alt="image-20210326164237342"></p><p><a href="https://blog.csdn.net/coderlius/article/details/79272773">https://blog.csdn.net/coderlius/article/details/79272773</a></p><h1>深入篇</h1><h2 id="字节码">字节码</h2><h3 id="编译">编译</h3><p>javac编译器</p><p>将java源码编译成字节码的前端编译器   IDEA 默认</p><p>类似的  ECJ (Eclipse Compiler for Java) 编译效率高，编译时并非全量编译，只编译为编译部分的源码进行编译</p><p>Eclipse 和 Tomcat默认使用</p><h4 id="-v2"></h4><p><span style='color:red;font-size:24px'>Integer的自动装箱</span></p><p>内置的IntegerCache</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false </span><span class="token comment">//字节码 比较时涉及到intValue方法</span><span class="token comment">//new时涉及valueOf方法 </span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// high value may be configured by property</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> integerCacheHighPropValue <span class="token operator">=</span>            sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//可以自行设置max的最大值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Maximum array size is Integer.MAX_VALUE</span>                h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">NumberFormatException</span> nfe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// If the property cannot be parsed into an int, ignore it.</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        high <span class="token operator">=</span> h<span class="token punctuation">;</span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span>        <span class="token keyword">assert</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>涉及到的<strong>静态内部类</strong>的知识</p><p>静态内部类只会在使用到该内部类时才会加载，否则是不会加载的，也就是只有使用到new Integer的valueOf方法时，才会加载该内部类</p><h3 id="概念-v6">概念</h3><p>字节码指令是一个一个字节长度，代表某种特定含义的操作码，以及跟随其后的参数—操作数构成的。</p><h4 id="Class文件">Class文件</h4><p>不一定以磁盘文件形式存在，是一组以8字节为基础单位的二进制流</p><p>存储格式   无符号数 + 表</p><p>无法包含注释信息</p><ul><li><p>无符号数： 基本数据类型   用u1、u2、u4.、u8… 表示多少个字节的无符号数</p></li><li><p>表： 由多个无符号数或者其他表作为数据项构成的复合数据类型</p><p>表又_info 结尾    整个class文件就是一张表</p></li></ul><h3 id="Class文件结构">Class文件结构</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210313171015628.png" alt="image-20210313171015628"></p><h4 id="魔数">魔数</h4><p>cafebabe  识别字节码文件  4个字节的无符号整数</p><h4 id="Class文件版本">Class文件版本</h4><p>主版本、副版本  — 依据JDK</p><p>向下兼容： 高版本JVM可运行低版本JDK编译器生成的class文件</p><p>UnsupportedClassVersionError</p><h4 id="常量池">常量池</h4><p>字面量从1开始而不是从0 开始  但是计数器从0开始计数</p><p>存放字面量和符号引用 — 类加载时放在方法区的运行时常量池中</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210315163802015.png" alt="image-20210315163802015"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210315162456278.png" alt="image-20210315162456278"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210315162921696.png" alt="image-20210315162921696"></p><p>解析</p><p>第一个字节指出是什么类型（Constant-utf8_info之类的），然后在看对应类型 有什么样的字节，具体会不一样</p><h4 id="访问标志">访问标志</h4><h4 id="类索引、父类索引、接口索引集合">类索引、父类索引、接口索引集合</h4><h4 id="字段表集合">字段表集合</h4><h4 id="方法表集合">方法表集合</h4><h4 id="属性表集合">属性表集合</h4><h2 id="JVM内存模型JMM">JVM内存模型JMM</h2><p>并发编程引入的问题：线程之间如何通信、线程如恶化同步。</p><p>线程通信机制：共享内存（Java采用）、消息传递</p><p>Java的线程通信由**Java内存模型(JMM)**控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230305175906549.png" alt=""></p><h3 id="重排序">重排序</h3><p>在执行程序时为提高性能，编译器和处理器会对指令进行重排序，可分为三种类型：</p><ul><li>编译器优化：在不改变单线程程序语义的前提下，重新安排语句的执行顺序</li><li>指令级并行的重排序：处理器采用指令级并行技术将多条指令重叠执行(JVM在此会插入特定的内存屏障)</li><li>内存系统的重排序：处理器使用缓存和读/写缓冲区，让加载和存储操作看起来在乱序执行</li></ul><p>源代码-&gt;编译器重排序-&gt;指令级重排序-&gt;内存系统重排序-&gt;最终执行的指令序列</p><p><strong>那重排序有什么坏处呢？</strong></p><p>每个处理器上的写缓冲区仅仅对其所在的处理器可见，在多核多线程的条件下就可能出现问题。即处理器对内存的读写操作的执行顺序不一定与内存实际发生的读写顺序一致。考虑以下代码：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Thread A</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>x <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">//Thread B</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>y <span class="token operator">=</span> a<span class="token punctuation">;</span></code></pre></div><p>最终缺可能得到x = y = 0的结果，为什么？经过重排序可能会，在a = 1 b = 2执行一半后，也就是两个线程将共享变量写入自己的写缓冲区，这时候从内存中读取另一个共享变量 a, b ，这个时候ab都为0，最后再把自己的写缓存区中保存的脏数据再flush到内存中，这时候结果就是x = y = 0了</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                x <span class="token operator">=</span> b<span class="token punctuation">;</span>  <span class="token comment">//指令重排 先执行这个代码,导致x = 0 y = 0</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                y <span class="token operator">=</span> a<span class="token punctuation">;</span>   <span class="token comment">//指令重排 先执行这个代码,导致x = 0 y = 0</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 我们在正常情况下 x y的值组合         * x = 0  y = 1         * x = 1  y = 0         * x = 1  y = 1         * 不可能出现 x = 0 y = 0的情况 除非发生指令重排         */</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次 ("</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 第2705893次 (0,0)</span><span class="token comment">// 代码引用: https://blog.51cto.com/u_15127595/4294208</span></code></pre></div><p>自己的MBP上大概跑了7-8分钟左右，终于跑出来这种情况了！！说明指令重排是存在的，只是上题这种情况发生的条件比较苛刻。</p><p>所以，这也就引申出了<strong>内存屏障</strong>这个概念</p><p>为了保证内存可见性，java编译器在生成指令序列的适当位置插入内存屏障指令来<strong>禁止特定类型的处理器重排序</strong></p><p>内存屏障可分为四类(需要注意的是，一些架构不支持对某些内存屏障的实现)</p><table><thead><tr><th style="text-align:center">Type</th><th style="text-align:center">Example</th><th style="text-align:center">Desc</th></tr></thead><tbody><tr><td style="text-align:center">LoadLoad</td><td style="text-align:center">Load1;<br />LoadLoad;<br />Load2;</td><td style="text-align:center">确保Load1数据的装载，之前于Load2以及所有后续装载指令的装载</td></tr><tr><td style="text-align:center">StoreStore</td><td style="text-align:center">Store1;<br />StoreStore;<br />Store2;</td><td style="text-align:center">确保Store1数据对其他处理器可见(刷新到内存),之前于Store2以及后续素有存储指令</td></tr><tr><td style="text-align:center">LoadStore</td><td style="text-align:center">Load1;<br />LoadStore;<br />Store2;</td><td style="text-align:center">确保Load1数据装载，之前于Store2以及后续所有存储之类</td></tr><tr><td style="text-align:center"><strong>StoreLoad</strong></td><td style="text-align:center">Store1;<br />StoreLoad;<br />Load2;</td><td style="text-align:center">确保Store1数据对其他处理器可见(刷新到内存),之前于Load2以及后续所有装载指令到装载</td></tr></tbody></table><p>StoreLoad Barriers 会使该屏障之前的所有内存访问指令（存储和装载指令）完成之后，才执行该屏障之后的内存访问指令。它是一个“全能型”的屏障，它同时具有其他三个屏障的效果。现代的多处理器大都支持该屏障（其他类型的屏障不一定被所有处理器支持）。执行该屏障开销会很昂贵，因为当前处理器通常要把写缓冲区中的数据全部刷新到内存中（buffer fully flush）。</p><h4 id="happens-before">happens-before</h4><p>如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before的关系（两个操作即可以属于一个线程又可以属于不同线程</p><p>）。需要注意的是：两个操作之间有hb关系，不代表前一个操作必须在后一个操作之前执行，只需要保证前一个操作的执行结果对后一个操作可见(不太懂)</p><ul><li><p>程序顺序规则：一个线程中的每个操作，happens-before 于该线程中的任意后续操作。</p></li><li><p>监视器锁规则：对一个监视器锁的解锁，happens-before 于<strong>随后</strong>对这个监视器锁的加锁。</p></li><li><p>volatile 变量规则：对一个 volatile 域的写，happens-before 于<strong>任意后续</strong>对这个 volatile 域的读。</p></li><li><p><strong>传递性</strong>：如果 A happens- before B，且 B happens-before C，那么 A happens- before C。</p></li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210313233650045.png" alt="image-20210313233650045"></p><h4 id="数据依赖性">数据依赖性</h4><ul><li>读后写</li><li>写后读</li><li>写后写</li></ul><p>如果两个操作访问同一个变量，且这两个操作中只要有一个涉及读操作，那这两个操作之间就存在数据依赖性。这三种情况，只要重排序两个操作的执行顺序，程序的执行结果将会被改变。</p><p>编译器、处理器在重排序时，会遵循数据依赖性，不会改变存在数据依赖关系的两个操作的执行顺序。但是这仅仅是针对单个处理器、单线程的执行的指令序列，不同线程之间的数据依赖性编译器和处理器是不会考虑的。</p><h4 id="as-if-serial">as-if-serial</h4><p>as-if-serial 语义的意思指：不管怎么重排序（编译器和处理器为了提高并行度），（单线程）程序的执行结果不能被改变。编译器，runtime 和处理器都必须遵守 as-if-serial 语义。为了遵守as-if-serial语义，<strong>编译器和CPU不会对存在数据依赖关系的操作做重排序</strong>。这就给编写单线程程序的程序员创造了一个幻觉，他们呢就会认为程序是按照顺序来的。</p><p>之前验证重排序这一特性的代码中，之所以会出现(0,0)的情况，就是因为两个线程中，每个线程自己的操作是不涉及数据依赖的(虽然看作一个整体的时候会有)</p><h3 id="顺序一致性内存模型">顺序一致性内存模型</h3><p><strong>特点</strong></p><ul><li>一个线程的所有操作必须按照程序的顺序执行</li><li><strong>不管程序是否同步</strong>，所有线程都只能看到一个单一的操作执行顺序。在顺序一致性内存模型中，<strong>每个操作都必须原子执行并且立刻对所有线程可见</strong>。概念上，该模型有一个单一的全局内存，任意时间点至可能有一个线程连接到内存，当多个线程并发执行时，所有线程的所有对全局内存的读写要进行串行化操作</li></ul><p>对于同步(但顺序一致)的程序，执行顺序是全局单一的(A1-&gt;A2-&gt;A3-&gt;B1-&gt;B2-&gt;B3)</p><p>未同步程序在顺序一致性内存模型中，在整体执行顺序是无序的，但所有线程对它自己而言，只能看到一个单一的执行顺序(B1-&gt;A1-&gt;B2-&gt;A2-&gt;A3-&gt;B3)。但实际上在JMM中，未同步程序不但整体执行顺序是无序的，而且所有线程看到的操作执行顺序也可能不一致(写缓存区的缘故)。例如正确同步的多线程程序synchronized块中不存在数据依赖的、在临界区内的读写操作就可能进行重排序。对于未同步程序的执行特性，JMM仅提供<strong>最小安全性</strong>：线程执行时读取的值，要么时之前某个线程写入的值，要么时默认值(0, null, false)，JMM保证了线程读操作读到的值不会无中生有（<strong>JVM在堆上分配对象时首先会清零内存空间，然后才会分配对象</strong>）；</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230305192836180.png" alt=""></p><h2 id="查漏补缺篇">查漏补缺篇</h2><h3 id="担保机制">担保机制</h3><p>survivor区装不下了怎么办</p><h3 id="晋升原理">晋升原理</h3><p>大对象是如何分配的</p><h3 id="String">String</h3><p>String 作为参数在方法内部改变为什么不会改变实际的值</p><h3 id="类加载机制">类加载机制</h3><h4 id="类加载-v2">类加载</h4><p>将Java类的字节码文件加载到内存中  并在内存中构建出java类的原型，类模板对象</p><ul><li><p>通过类的全名，获取类的二进制数据流</p><p>获取方式：</p><ul><li>class文件</li><li>jar zip文件</li><li>数据库中的二进制</li><li>http网络协议</li><li>运行时动态生成Class的二进制信息</li></ul></li><li><p>解析类的二进制数据流为方法区的数据结构  Java类模型</p></li><li><p>创建java.lang.Class 类的实例，表示该类型，作为方法区这个类的各种数据的访问入口</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210320150701121.png" alt=""></p><p>数组类型的加载，数组类本身并不由类加载器负责创建。由JVM运行时根据需要直接创建的，数组的元素类型仍然需要依靠类加载器创建 ，如果数组的元素类型是引用类型，则数组类的可访问性就由元素类型的可访问性决定，缺省定义为public</p></li></ul><h4 id="链接">链接</h4><h5 id="验证">验证</h5><p>保证加载的字节码合法 规范</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210320151441865.png" alt="image-20210320151441865"></p><p><strong>格式验证</strong></p><p>和加载过程一起进行，验证通过后，类加载器才会成功将该类的二进制数据信息加载到方法区中，格式验证之外的操作在方法区中运行</p><p><strong>语义验证</strong></p><p>是否素有的类都有父类的存在</p><p>是否一些定义为final的方法或者类被重写或者继承了</p><p>非抽象类是否实现了所有抽象方法 或者接口方法</p><p>是否存在不兼容的方法  方法的签名除了返回值都一样的情况</p><p><strong>字节码验证</strong></p><p>较为复杂的过程</p><p>字节码执行过程中，是否会跳转到一条不存在的指令、</p><p>函数调用是否传递了正确类型的参数</p><p>变量</p><p>赋值是不是给了正确的数据类型</p><p>栈映射帧  – StackMapTable用于检测在特定的字节码出，局部变量表和操作数栈是否有正确的数据信息</p><p><strong>符号引用</strong></p><p>检查 自己要使用其他类 或者方法 是否存在    （在字符串常量池中）</p><h5 id="准备">准备</h5><p>为类的静态变量分配内存</p><p>注意点：java并不支持boolean  对于boolean 内部实现是int，默认值是0，故boolean的默认值就是false</p><ul><li>不包含基本数据类型用static final修饰的情况，因为final在编译时分配，且在准备阶段会显示赋值</li><li>非final修饰的变量，解析阶段进行默认初始化赋值，final修饰后，在解析环节直接显示赋值</li><li>final类变量不能声明 但不复制</li><li>如果以非自变量的形式 初始化static final String ，不会像有具体的代码执行</li></ul><h5 id="解析">解析</h5><p>将常量池中类、接口、字段、方法的 符号引用转换为直接引用  （真实内存中的地址）</p><p>例如 JVM为每个类准备了方法表， 调用一个类的方法时，只要知道这个方法在方法表中的偏移量就可以直接调用该方法。通过解析操作，符号引用就转变为目标方法在<strong>类中方法表的位置</strong></p><h4 id="初始化">初始化</h4><p>显示赋值  装载的最后一个阶段</p><p>方法的调用 、 构造器的支持  则在clinit中调用</p><p>重要工作 ： 执行类的初始化方法 clinit</p><ul><li><p>该方法只能由Java编译器 生成并由JVM调用</p></li><li><p>由类静态成员的赋值语句以及static语句块合并产生的</p></li><li><p>静态的类变量，如果没有显示赋值，则不会调用clinit方法</p></li><li><p>显示赋值的static final 常量 – 在准备阶段已经显示赋值了，不会调用clinit方法</p></li><li><p>引用数据类型显示赋值都是在初始化阶段，基本类型 通过库方法赋值 也会在初始化阶段</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">199</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></li></ul><h4 id="clinit的线程安全性">clinit的线程安全性</h4><p>多线程环境被正确的加锁、同步 。多线程中尝试加载一个类，没抢到锁的会阻塞，若clnit中有耗时很长的操作，可能引发死锁</p><p>clnit中方法 Access flags访问标识  无synchronized  隐式锁</p><h4 id="类的主动使用和被动使用-v2">类的主动使用和被动使用</h4><p>区别： 是否会调用clinit方法</p><p>注意点： <strong>没有初始化的类 不一定没有加载</strong></p><h5 id="主动使用">主动使用</h5><ol><li>new 、反射、克隆、反序列化</li><li>调用类的静态方法  inovokestatic</li><li>使用类、接口的静态字段时<ul><li>如果不是final，则就是主动使用</li><li>如果是final 类型， 则如果是字面量形式，则不是主动使用，如果是函数形式 比如 a = new Random().nextInt类型，当尝试调用a时，则是主动使用（因为函数形式的赋值都在clinit中执行）</li></ul></li><li>Class.forName()</li><li>子类构造时会先进行父类的初始化 -XX traceClassLoad 输出所有类加载顺序<ul><li>初始化类时，不会先初始化他锁实现的接口，但会加载这个接口Load</li><li>初始化接口时，不会初始化他的父接口，但是也会加载Load</li></ul></li><li>接口定义了default方法，直接、间接实现该方法接口的类初始化（只要使用到了这个接口的字段或者方法的） 都会导致这个接口在这之前初始化</li><li>初始化main所在类</li><li>MethodHandle</li></ol><h5 id="被动使用">被动使用</h5><ol><li>访问静态字段，只有真正声明这个字段的类才会被初始化<ul><li>通过子类引用父类的静态变量，不会导致子类初始化，但子类会加载</li></ul></li><li>声明对象数组，不复制，不会引起初始化</li><li>引用常量不会的触发类或者接口的初始化  （链接阶段已经赋值）</li><li>ClassLoader的loadClass方法加载一个类，不是对类的主动使用，注意与forName区分开</li></ol><h4 id="类卸载-Unloading">类卸载 Unloading</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210322092551016.png" alt="image-20210322092551016"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210322092757484.png" alt="image-20210322092757484"></p><p>一个类结束生命周期，关键在于其Class对象 结束生命周期</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210322093200611.png" alt="image-20210322093200611"></p><p>不太可能</p><h3 id="动态绑定与静态绑定">动态绑定与静态绑定</h3><p>Java对对象属性 是静态绑定 ，方法是动态绑定</p><p><strong>根据father在堆中实际创建的对象类型Son来确定f1方法所在的位置</strong></p><p>调用虚方法时，Java采用的是<strong>延迟绑定 / 动态分派</strong>的语义，根据被调用对象（receiver）的实际类型来决定选择哪个版本的虚方法。</p><p>重载的方法在编译时根据参数的<strong>声明类型</strong>静态绑定到具体方法上，与运行时该参数的实际类型无关</p><p>方法的重载是静态编译</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Father</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">new</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Father</span> father<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fatherfather"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> get <span class="token punctuation">(</span><span class="token class-name">Son</span> son<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sonso3n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div><h3 id="双亲委派机制-v2">双亲委派机制</h3><p>JDK  1.2</p><p><strong>优点</strong></p><ol><li>避免类重复加载，确保类的全局唯一性 — GC 有关？</li><li>安全，避免构造同包的恶意代码</li></ol><p>沙箱安全机制</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210404170719177.png" alt="image-20210404170719177"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Study</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web学习</title>
    <link href="/2019/08/22/Web%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/08/22/Web%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>JAVA WEB 知识</h1><!-- toc --><hr><h2 id="知识回顾">知识回顾</h2><div class="code-wrapper"><pre class="language-none"><code class="language-none">1. IP： 计算机在网络中的唯一标识2. 端口号： 应用程序在计算机中的唯一标识 0~655363. 传输协议： 规定数据传输的规则 1. 基础协议：    1. Tcp： 安全协议，三次握手，速度稍慢    2. Udp：不完全，速度快</code></pre></div><h2 id="Web服务器软件">Web服务器软件</h2><ul><li>服务器：安装了服务器软件的计算机</li><li>服务器软件：接受用户请求，处理请求，做出响应</li><li>Web服务器软件：结束后用户请求，处理请求，作出响应<ul><li>web服务器软件，可以部署web项目，用户通过浏览器来访问项目</li><li>web容器</li></ul></li></ul><span id="more"></span><h2 id="Tomcat">Tomcat</h2><h3 id="目录结构">目录结构</h3><ol><li>bin ： 可执行文件</li><li>conf：配置文件</li><li>lib：启动依赖的jar包</li><li>logs： 日志文件</li><li>temp：临时文件</li><li><strong>webapps</strong>：放入web项目文件</li><li>work：存放运行时数据</li></ol><h3 id="运行">运行</h3><ol><li><p>启动方式： bin–startup.bat</p></li><li><p>查找：</p><ol><li>127.0.0.1:8080</li><li>localhost:8080</li><li>自己的ip:8080</li></ol></li><li><p>修改端口号： conf–server.xml----“port”</p></li><li><p>关闭：</p><ol><li>正常关闭：<ul><li>shutdown.bat</li><li>ctrl+c(命令行中)</li></ul></li><li>强制关闭：<ul><li>直接关闭.bat窗口，可能造成文件损失、未保存</li></ul></li></ol></li><li><p>部署：</p><ol><li><p>直接放项目进入webapps （/项目文件夹/html）</p></li><li><p>简单部署：</p><ol><li>直接将html用war打包软件成.war格式</li><li>直接复制到webapps 中</li><li>war包自动解压缩</li></ol></li><li><p>配置conf/server文件</p><ul><li><p>&lt;HOST</p><p>&lt;Context docbase=“xxx” path=&quot;/xxxx &quot;即替换为xxxx</p></li></ul></li><li><p>conf-Catalina-Localhost -创建xml文件，复制3中的代码</p><p>​<Context docbase="xxx " />即可</p><p>虚拟目录： xml文件的名称  (推荐)（不需要重启服务器）</p></li></ol></li></ol><h3 id="静态项目与动态项目">静态项目与动态项目</h3><p>动态项目：</p><ul><li>web-inf<ul><li>web.xml 项目的核心配置文件</li><li>calsses目录：字节码文件</li><li>lib：依赖的jar包</li></ul></li></ul><h3 id="用IEDA-配置TOMCAT">用IEDA 配置TOMCAT</h3><h2 id="Servlet">Servlet</h2><ul><li><p>概念：运行在服务器端的小程序</p><ul><li>其实就是一个借口，定义了 java类被浏览器访问到的规则</li></ul></li><li><p>实际操作：</p><ol><li>创建java EE项目</li><li>写入servlet包</li><li>创建类 实现 servlet接口</li><li>配置servlet —于 web.xml中配置servlet</li></ol></li><li><div class="code-wrapper"><pre><code class="language-xml"> &lt;servlet&gt;        &lt;servlet-name&gt;demo_1&lt;/servlet-name&gt;        &lt;servlet-class&gt;Servelet.Myservlet_1&lt;/servlet-class&gt;    &lt;/servlet&gt;      &lt;servlet-mapping&gt;        &lt;servlet-name&gt;demo_1&lt;/servlet-name&gt;        &lt;url-pattern&gt;/urldemo_1&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;<pre class="language-none"><code class="language-none">  1. 先通过urlpattern 判断 地址是否和输入相等  2. 相等则上移，找到servelet-name  3. servlet-name 再找到servlet  4. servlet再下移到servet-class  5. 加载类进入内存 Class.forname....  6. 创造类对象   getInstance()  7. 实现方法### Servlet 生命周期1. init() Servlet被创建时执行 一次   * 可以通过在&lt;servlet&gt;标签下配置改变 servlet的创建时机   * &lt;load -on-startup&gt; x&lt;&#x2F;load -on-startup&gt;   * x: 负数  ： 第一次被访问时   * x: 0或正整数   ：服务器启动时2. service() 每一次Servlet被访问时执行（页面的刷新） 多次3. destroy() Servlet被关闭时执行  一次   * 条件： 服务器**正常关闭** (临终遗言)### Servlet 3.01. 好处： 支持注解配置，不用xml2. 关键步骤： **类上使用@Servlet注解**，可以不用web.xml### Servlet 体系结构1. Servlet 2. GenericServlet   * 抽象类 不用将Servlet接口类的方法完全实现。其他方法为空实现，更简洁 一点， 一般还是不用3. HttpServlet   * 封装类，比较常用，不用再判断请求方式是GET&#x2F;POST   * 复写 doGet &#x2F;doPost 方法   一个Servlet能够定义多个访问路径4.  定义方式：    * &#x2F;user   路径匹配   * &#x2F;user&#x2F;aaa  多层路径   * &#x2F;user&#x2F;* ：哪种都可以访问到   * *.do  ： 前面加什么都可以，后面必须跟do   扩展名匹配## HTTP 超文本传输### **1. Hyper Text Translation Protocol*** 目的： 定义了客户端和服务器通信时，发送的数据格式* 特点：   1. 基于TCP&#x2F;IP的高级协议  2. 默认端口号 ：80  3. 基于响应和请求一一对应的模式  4. 无状态的： 每次请求间相互独立，每次请求一个资源都是独立的，分步进行的* 历史版本：  * 1.0 每一次 请求都会重新建立链接  * 1.1 复用了链接，节约资源### 2. 请求消息数据格式1. 请求行   * 请求方式 请求url 请求协议&#x2F;版本      (GET&#x2F; login.html HTTP&#x2F;1.1)     * GET：        1. 请求参数在请求行中       2. 请求url长度有限       3. 不太安全     * POST:        1. 请求参数在请求体中（专门封装了）       2. 请求url长度无限       3. 相对安全2. 请求头 ： 浏览器告诉服务器的信息   * 请求头名称： 请求头值（键值对）     常见的请求头:     * User-Agent: 浏览器告诉服务器，所使用的的浏览器版本信息，解决浏览器兼容问题  包含浏览器的关键字（Chrom Firfox......）      * Accept: 解析什么样格式的页面     * ......     * Referer：告诉服务器  当前请求从哪里来 （防止盗取连接、便于统计工作）       * 盗取超链接：referer来判断当前请求连接是否在指定网站 获取而来       * 统计工作：     * Connection: 连接是否能被复用3. 请求空行   * 空行4. 请求体（正文）：   * 封装post请求小心的请求参数  例如：     username&#x3D;111;   1. 从流对象中拿去数据</code></pre></div></code></pre></li></ul><p>GET /Tomcat_2_war_exploded/index2.html HTTP/1.1<br>Host: localhost:8080<br>Connection: keep-alive<br>Cache-Control: max-age=0<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3;q=0.9<br>Sec-Fetch-Site: none<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-User: ?1<br>Sec-Fetch-Dest: document<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=0.9<br>Cookie: JSESSIONID=1B454411C9ADDC7AAFFE3D5BF306E302</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">### 3. Request 1. 原理   1. Request Response对象 均由服务器创建，我们使用2.  Request： 获取请求操作   1. 继承结构：      * ServletRequest 接口      * HttpServletRequest  继承该接口 仍然是接口      * Tomcat 中的类 RequestFacede来实现 该接口3. Request 功能：   1. 获取请求行数据      * 获取请求方式 String getMethod();      * **获取虚拟目录** String getContextPath();      * 获取Servlet 路径: /demo1   getServletPath();      * 获取get方式请求参数 getQueryString();      * **获取请求的URI ** getRequestURL()        * URL: 统一资源定位符           * URI: 统一资源标识符   范围&gt;URL       * 获取协议和版本： getProtocal()      * 获取客户机的IP: getRemoteAddress();           2. 获取请求头数据      1. 方法：         * getHeader（name） ：通过请求头名称获取请求头的值         * getHeaderNames(): 获取所有请求头的名称      3. 获取请求体数据         步骤：         1. 获取流对象         * bufferedReader getReader() 字符数据流         * ServletInputStream getInputStrea() 获取字节输入流      2. 从流对象中拿去数据   4. 其他功能：   1. 获取请求参数通用方式：       1. getParameter(string) 根据参数名称获取参数值      2. getParameterValues（） 返回参数名称返回参数值的数组（复选框）      3. getParameterNames() 获取所有请求的参数名称      4. Map&lt;str,str[]&gt; getParameterMap() 获取所有参数的map集   2. 中文乱码问题：      * get 方式在tomcat 8 已经 被解决      * post 在输入中文时易乱码      * 在获取参数前修改 编码 使其跟html编码相同      * request.setcharartorEncoding（&quot;utf-8&quot;）   3. 请求转发： 一种在服务器内部的资源跳转方式      1. request. getrequestdispatcher(/uri).forward(request,respose)      2. 特点：          1. 浏览器地址栏路径 未发生变化          2. 只能转发到**当前的服务器**内部资源中         3. 转发 是一次请求，多个资源间使用同一个请求    4. 共享数据：      1. 域对象： 一个有作用范围的对象，可以再范围内共享数据      2. request域： 代表一次请求，一般用于请求转发的多个资源共享数据      3. 方法：         1. setAttribute(name,obj) 存储数据         2. getAttribute(name) 通过键获取值         3. removeAttribute(String name) 通过键删除值   5.  获取ServletContext（）  对象### 4. 响应消息数据格式1. 响应行   * 组成 ：协议/版本  响应状态码  状态码描述   * 响应状态码： 服务器告诉客户端 浏览器本次请求和响应的一个状态   * 状态码都是三位数字     * 1. 1XX: 服务器服务器接收客户端消息 未接收完成，等待一段时间后 发送1xx 状态码       2. 2XX： 接收成功！        3. 3XX： 302: 重定向  资源跳转   304: 缓存       4. 4XX：客户端错误          1. 404： 请求路径无对应资源          2. 405：请求方式没有对应的doPost/doGet方法       5. 5XX：服务器端错误（比如 类中方法异常）2. 响应头   1. 常见的响应头：      1. Content-type： 服务器告诉客户端响应头的数据格式、编码格式      2. Content-dispostion： 服务器告诉客户端 以什么格式打开响应头         1. in-line 默认值： 在当前页面打开         2. attachment： 以附件形式打开（弹出新窗口）3. 响应空行4. 响应体   1. 发送的数据 ，&lt;html&gt;形式### 5. Response对象功能：设置响应消息 1. 设置响应行   1. 设置状态码： setStatus(int x)2. 设置响应头   1. setHeader(String name,String value)3. 设置响应体   1. 获取输出流      1. 字符输出流 getWriter()         1. **获取流对象之前**设置编码： resp.setCharsetEncodeing(&quot;xxx&quot;)         2. **设置浏览器编码**            resp.setHeader(&quot;content-type&quot;,&quot;text/html;charset=utf-8&quot;)         3. **简单形式**：             resp.setContentType(&quot;text/html;charset=utf-8&quot;)               2. 字节输出流 getoutputStream()         1. op.write(&quot;xx&quot;.getBytes(&quot;utf-8&quot;))         2. 也要setContentType！         3. 字节输出流一般用于输出图片   2. 使用流，将数据输出到客户端浏览器#### 案例：1. 重定向的特点：   1. 地址栏发生变化    2. 可以访问其他服务器的资源&quot;www.baidu.com&quot;   3. 两次请求，不能再用request对象共享数据2. 转发的特点   1. 服务器地址不变   2. 只能访问当前服务器下的资源   3. 一次请求，可以用request对象共享数据3. 路径写法：   1. 相对路径： 不能确定唯一资源      * ./index.html        * 不以/开头 ，以. 开头      * 规则：确定访问当前资源和目标资源的相对关系        * 语法 : ./当前目录        ​../ 后退一级的目录   2. 绝对路径：确定唯一资源      * ​如 :http:///ssxxxx.x..xx..x       /xxx/xxx      * ​    以 /开头的      * 规则： 定义的路径给谁用        * 给客户端用： 加虚拟目录        * 给服务器： 不用加虚拟目录   3. 动态获取虚拟目录      * req.getContextPath(),获取上一级目录### ServletContext    (interface)1. 代表： 整个Web应用，可以和程序的容器（服务器）来通信2. 获取方式：   1. req.getServletContext();   2. this.getServletContext();(必须继承HttpServlet)3. 功能：   1. 获取MIME类型：      * MIME: 互联网通信过程中定义的一种文件数据类型        * 比如： text/html    image/jpeg      * 获取： getMimeType(str file)   2. 域对象：共享数据      1. setAttribute()      2. getAttribute()      3. removeAttribute()         * servletContext域的范围:所有用户请求的数据（类似于一个全局的类对象），使用要谨慎，而且其生命周期很长   3. 获取文件的真实路径      1.  getRealPath(str)         1. &quot;/b.txt&quot; ---Web 目录下的         2. &quot;/WEB-INF/b.txt&quot;  ---WEB-INF目录下的         3. &quot;/WEB-INF/classes/a.txt&quot;  ----src目录下的            因为会自动存储在WEB-INF的classes中的      2. 注意： ClassLoader只能获取src下的路径（局限）## **Cookie** 1. 会话： 一次会话中包含的多次请求和响应      1. 一次会话： 浏览器第一次给服务器发送请求，直到一方断开为止2. 功能：在一次会话范围内的多次请求间 **共享数据 **3. 方式：   1. 客户端会话： Cookie  数据存入到客户端      1. 使用步骤：         1. 创建对像   API  绑定数据         2. 发送Cookie         3. 获取Cookie，拿到数据               2. 创建： new Cookie();         * resp.addCookie(cookie)带着Cookie 去下一个地方         * req.getCookies()               3. 实际原理：                  * 响应头 ： set-cookie: msg=hello, 变成了键值对的形式，客户端会把这个数据保存到本地，然后带到第二个请求的请求头中 Cookie: msg=hello               4. Cookie 细节：         1. 一次能发送多个Cookie吗？                     * 可                    2. Cookie在浏览器重的保存时间            * Cookie 不设置下，关闭浏览器再访问就没有了            * 设置生命周期：              * setMaxAge（int seconds）              * 在创建Cookie时使用              * x&gt;0 持久化写入到硬盘文件，x代表存活秒数，关闭浏览器再打开，也可以访问到              * x&lt;0 默认值              * x=0 删除信息                     3. Tomcat 8 之后才能直接存中文          4. Cookie 获取范围            1. setPath（） 设置虚拟目录            2. 同一个服务器下的多项目                     5. Cookie  单个：4kb            ​同一个域名下 ：20个         6. Cookie 用来存储**少量不太敏感**的情况         7. 在不登陆的情况下，完成**服务器对客户端**的识别## Session 1. request.getSession（） getAttribute setAttribute remove....2. 仅此在一次会话中访问对象  ， 关闭浏览器就没有了 3. 原理：依赖于Cookie4. 细节：   1. 客户端关闭后，两次获取的session不是同一个      默认不是，设置： 用Cookie保存 id   2. 客户端不关闭，服务器关闭后两次获取的session不是同一个      但要确保数据不丢失      *  session的钝化： 服务器正常关闭前，将session对象序列化存到硬盘上      * session的活化： 服务器启动后，将session文件转化到内存中的session对象   3. 销毁：      1. 服务器关闭      2. 调用invaliddate方法      3. 30min后自动关闭   4. **session可存储任意大小任意 的数据  ， 更安全**## JSP (Java Server Pages)1. 概念：既可以有html标签 也可以有java代码   2. 目的：简化书写3. 原理   * JSP 本质上就是一个Servlet     * .jsp ----&gt; .java/.class4. JSP脚本： 声明java代码的方式       1. &lt;% ......   %&gt;：定义的java代码，在service方法中可以定义的都可   2. &lt;%!  ...%&gt;：定义成员变量和成员方法   3. &lt;%= ..%&gt;：输出语句 ，（输出成员变量值）   4. 内置对象： request  response out，其凡是在jspService中定义的，都可以用      1. **response 缓冲永远先于 out 输出不论顺序**，会先找到response缓冲区并拼接到service中      2. 所以：尽量不用response.getWriter()写   5. 可以截断： 在中部用&#123; &#125; 阶段 并插入html语句</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql 学习</title>
    <link href="/2019/07/22/Mysql%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/07/22/Mysql%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>数据库学习</h1><!-- toc --><h2 id="DDL">DDL :</h2><p>操作数据库：CRUD  功能    （创建、查询、更新、删除）</p><p>1.<strong>查询与创建</strong></p><p>show databases、  create database  xxx  、show create  database xxx(查询名称和字符类型)\</p><p>​create database xxx if not exists XX(不会报错)</p><p>​create database xx character set xxx(utf-8)</p><p>​可以连用语句   create database xxx if not exists XX character set xxx</p><span id="more"></span><ol start="2"><li><p>修改</p><p>alter database xxx  character set xxxx        设置已创建的数据库的字符类型</p></li><li><p>删除</p><p>​drop database  (if exists xxx)  *要先转到当前的database</p><p>4.使用数据库</p></li></ol><p>​查询当前的数据库   Select database();</p><p>​使用数据库            use xxxx;</p><h2 id="数据结构">数据结构</h2><h3 id="整型">整型</h3><p>默认是有符号的 , unsigned 指定无符号，会设置默认长度，这里<strong>长度不代表范围，范围有类型决定</strong>，长度指的是值的显示宽度，如果小于指定长度，则补齐0（但必须搭配zerofill才行，且加上后就默认变成unsigned了（不支持负数））</p><ul><li>Tinyint</li><li>Smallint</li><li>Mediumint</li><li>Int、integer</li><li>Bigint</li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211008193310011.png" alt="image-20211008193310011"></p><p>超出范围 插入时直接报错</p><h3 id="小数">小数</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211009124043616.png" alt="image-20211009124043616"></p><ul><li>浮点型<ul><li>float</li><li>double</li></ul></li><li>定点型<ul><li>dec</li><li>decimal</li></ul></li></ul><p>M 代表整数部位 + 小数部位<br>D 代表小数部位(自然就限制了整数的位数)<br>如果超过范围，则报错。都省略，decimal默认精度是(10,0)</p><h3 id="字符型">字符型</h3><ul><li><p>较短文本</p><ul><li><p>char，固定长度，剩余的用空格补齐,性能更高，默认长度为1（指字符数）char的存储方式是，对英文字符（ASCII）占用1个字节，对一个汉字占用两个字节；</p></li><li><p>varchar，可变长度。varchar的存储方式是，对每个英文字符占用2个字节，<strong><s>汉字也占用2个字节</s>。</strong></p><ul><li>utf-8mb3下汉字占3个字节. mn4占4个字节</li><li>gbk下汉字占2个字节</li></ul></li><li><p>Enum枚举 ENUM(‘男’,‘女’)类似这样，只能插入其中一个</p></li><li><p>Set类型，可以选择多个插入。插入方式…values(‘a’,‘b’,‘c’)</p></li><li><p>binary – varbinary 保存较短的二进制字符串</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211009125026467.png" alt="image-20211009125026467"></p></li></ul></li><li><p>较长文本</p><ul><li><p>text，只能保存字符数据，例如日记</p></li><li><p>blob，保存二进制数据，只能存字节，例如照片（但一般不会这样）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211009130912386.png" alt="image-20211009130912386"></p></li></ul></li></ul><h3 id="日期">日期</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211009130250988.png" alt="image-20211009130250988"></p><p>timestamp和实际时区有关（mysql的time-zone），更能反应实际的日期，datetime只能反应插入时的当地时区。<br>timestamp只支持到1970到2038年的某时刻。datetime可以从1000到9999</p><h2 id="操作表">操作表</h2><p>​CRUD</p><ol><li><p>查询    show tables；</p><p>查询表结构  desc xxx(表名)</p></li><li><p>创建    create table xxx（</p><p>​            列名1  数据类型1，</p><p>​列名2  数据类型2，</p><p>​…</p><p>​列名n  数据类型n</p><p>​);</p><p>数据库中的数据类型(int 、double（n,m）最多n位，小数点后m位</p><p>​、date（yyyy-MM-dd）、datetime(yyyy-mm-dd HH:mm:ss)</p><p>​timestamp（时间戳，若不给这个字段赋值，则默认使用当前系统时间）</p><p>​varchar(需指定最大字符)</p><p>)</p></li></ol><p>3.删除          drop table xxx /   (if exists xxx)</p><p>4.修改表      修改表名 :  alter table xxx rename to （newxxx）</p><p>​修改表的字符集  :alter table xxx character set utf-8</p><p>​添加一列  ：    alter table xx add aaa(new colume)  bbb(数据类型)</p><p>​修改列名 类型： alter table 表名 change 列名 新列名字  新数据类型</p><p>​alter table 表名  modify 列名 新数据类型</p><p>​删除列： alter table 表名 drop 列名;</p><p><strong>5. 复制表</strong></p><ul><li>create table copyxxx like … 仅复制表结构</li><li>create table copyxxx select * from anotherTable; 复制表结构 + 数据</li><li>2的基础加where   只复制部分数据</li></ul><ol start="6"><li><p>查看表结构</p><p>show index from  xxx  查看索引</p><p>desc xxx</p></li></ol><h2 id="DML-增删改表中数据">DML 增删改表中数据</h2><ol><li><p>添加数据</p><p><strong>values 方式</strong></p><p>​insert into (表名)(column , ~, , ,) values  (x,x,x)  // 列名与值必须对应</p><p>​inster into （表名）valuse （xxxxx）给所有的行列加上值，否则报错</p></li></ol><p>​                  除了数字类型，其他的必须引号，单双都可，支持插入多行、子查询，逗号隔开</p><p>​<strong>set 方式</strong></p><p>​    insert into table set col1 = x,col2 =y …</p><ol start="2"><li><p>删除数据</p><ul><li>delete from (table) where xxx (condition) 没有where 条件的话则完全删除</li><li>truncate table xxx ，不允许加where，直接删除表</li></ul><p><strong>delete删除后，自增长的值从断点开始，truncate清空后，自增长的值从1开始</strong></p><p><strong>delete删除后有返回值，truncate无返回值（0行受到影响）</strong></p><p><strong>truncate不能回滚</strong></p><div class="code-wrapper"><pre class="language-none"><code class="language-none">  Truncate table 删除表中所有记录  比  deleye from table  效率更高</code></pre></div></li></ol><p>​3. 修改数据：</p><p>​update table set colume =x1, … (where  ,)一样可以加入条件<br>​不加条件则会将表中所有数据 都更改</p><h2 id="DQL-查询表中记录-（-）">DQL 查询表中记录 （*）</h2><hr><ol><li>普通查询   select * from 表名</li><li>语法：  select  字段列表   from 表名列表 where 条件列表  group by 分组字段  <br>          order by 排序   limit  分页限定<BR/>          去除重复关键字：  DISTINCT<BR/>         起别名关键字： AS xxx</li><li>基础查询：<br/> 1. 多个字段的查询：  <BR/>            select (DISTINCT)xxx  ,yyy   from table <br/>             select (DISTINCT)xxx +yyy   (AS 总分)  from table 求总合且能够换名字 <br/>             select (DISTINCT)xxx +IFNULL(yyy,0)   from table 解决null无法相加问题</li><li>条件查询<br > 1.  条件语句中的= 只有一个=符号  <br /> 2. &lt;&gt; 与!=  等价    、可以用&amp;&amp;但推荐使用 AND<BR> 3. BETWEEN  AND 关键字 也能处理中间量</li><li>模糊查询<br>setlect * from table WHERE  xxx LIKE '_ /‘%’<br>_  :  单个字符  %  :多个字符<br>—若前面没有字符 ‘’%x%&quot; 一样能查出该条数据！！</li><li>排序查询：’<br>select     …  order by xxx DESC/ASC ,aaa …（降序、升序）</li><li>聚合函数：(运算会排除null值)<br>count \max\min\sum\avg<br>select xxx(colume) from table ;<br>select count (ifnull (column,0)) from student;（将null值替换为0）</li><li>分组查询：<br>select sex ,avg(column) AS 平均值，count (id) from table Where … GROUP BY sex Having count(column)…;<br>—AS xxx 起别名，注意逗号<br>—其后可以跟 聚合函数<br>—条件语句在 GROUP BY 之前    <strong>不满足 则不参与分组</strong><br>—聚合函数在 GROUP BY 之后 且有having关键字  <strong>不满足 则不显示</strong></li><li>分页查询：<br>select * from student LIMIT a,b;<br>—a : 起始的页数 (0是第一条)  b: 结尾的页数+1 [a,b);</li></ol><h2 id="约束">约束</h2><p>一种限制，限制表中行列数据，保证最终添加到表中的数据是可靠的</p><ul><li>not null</li><li>deafult ，字段有默认值</li><li>primary key 主键，保证该字段的值的<strong>唯一性、非空性</strong><ul><li>可以有组合主键（两个或者多个不能<strong>都</strong>相同）</li></ul></li><li>unique 唯一性，但可以为空，但只能为一个null</li><li>check，检查约束（mysql不支持），对具体填入值的限制</li><li>foreign key 外键约束，在从表中添加，限制两个表的关系，该字段的值必须来自主表的关联值<ul><li>主表的关联列(Dep)一般是一个键(主键、唯一键)</li></ul></li></ul><p>约束也分为列级约束、表级约束</p><p><strong>表级约束添加</strong></p><p>可以使用constraint + 自定义keyname  或者直接使用默认</p><p>constraint xxx(casual constraint name) primary key(id)…<br>primary key (id)</p><p><strong>修改表时添加约束</strong></p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table xxx modify column aaa int not null; # 列级约束alter table xxx add primary key(id);# 表级约束# 修改表时删除约束alter table xxx modify column aaa int ; # 不要not null ...了# 删除主键的两种方法alter table xxx modify column aaa int;alter table xxx modify drop primary key;  # 删除唯一键alter table xxx drop index key_name;alter table xxx drop foreign key key_name;</code></pre></div><h3 id="外键约束">外键约束</h3><ol><li><p>创建： create table xxx(</p><p>​外键列</p><p>​costraint 外键名 foreign key （外键列名称）（此处括号必须加）      references 主表名称(主表列名称)（一般是主键）</p><p>);</p><p>*<em>外键关联后主表不能被删除</em> *</p></li></ol><p>​    2.删除 ： Alter  table xxx drop foreign key 外键名;</p><p>​    3.添加：  Alter  table xxx add costraint 外键名 foreign key 外键列名称 references 主表名称(主表列名称)（一般是主键）;</p><ol start="4"><li><p><em><strong>级联</strong></em>  （外键可以为NULL ）</p><ul><li>创建表后级联更新：Alter table （foreign table） ADD CONSTRAINT … ON UPDATE  CASCADE;  (ON DELELTE CASCADE)</li></ul></li></ol><h2 id="标识列">标识列</h2><p>auto_increment   自增长列，系统自动提供值,标识列必须是一个key，且只能有一个标识列</p><p>设置起始值和步长</p><p>variable ： auto_increment _increment步长         auto_increment_offset起始值（mysql不支持修改）<br>set auto_increment _increment = 3;</p><h2 id="数据库设计范式">数据库设计范式</h2><p><strong>目的：解决数据库中的问题</strong></p><ol><li>第一范式： 每一列都是不可分割的原子数据项</li><li>第二范式：在第一范式基础上，非码属性必须完全依赖于候选码<ul><li>函数依赖 ： 通过A属性（组）的值 可以确定 唯一B属性的值  (B依赖于A)</li><li>完全函数依赖： A是属性组  则B属性值的确定 需要A属性组中<strong>所有的属性值</strong></li><li>部分函数依赖： A是属性组  。。。。。。。只需要依赖A中的部分属性值</li><li>传递函数依赖：A (组)确定 唯一B， B(组)  确定唯一C  则C传递函数依赖于A</li><li>码： 一张表中的 一个属性或属性组被其他所有属性完全依赖，则这个属性为该      表的码<ul><li>主属性：码属性组中的所有属性</li></ul></li></ul></li><li>第三范式，在第二范式基础上，任何非主属性不依赖其他非主属性</li></ol><h2 id="数据库的备份和还原">数据库的备份和还原</h2><ol><li>命令行：<ul><li>mysqldump -uuser -ppassword xxx(database)&gt;path</li><li>使用备份文件 source path;</li></ul></li></ol><hr><h2 id="多表查询">多表查询</h2><div class="code-wrapper"><pre class="language-none"><code class="language-none">* 语法：select * from  aaa,bbb,......（笛卡尔积方式）</code></pre></div><ul><li><p>多表查询的分类</p><ol><li>内连接查询：</li><li>隐式内连接查询：<br>Select *(<a href="http://emp.name">emp.name</a>)  from aaa,bbb WHERE <a href="http://emp.id=dept.id">emp.id=dept.id</a>;<br>规范写法<br>Select <a href="http://t1.name">t1.name</a>,<a href="http://t2.name">t2.name</a><br>from  emp t1, dept t2<br>WHERE <a href="http://t1.id=t2.id">t1.id=t2.id</a>;</li><li>显示内连接：<br>select xxx from table (INNER) JOIN table2 on <a href="http://emp.id=dept.id">emp.id=dept.id</a>;</li><li>外连接查询：<br>左外连接：<br>SELECT XX FROM TABLE LEFT [OUTER] JOIN table2 ON <a href="http://table.id=table2.id">table.id=table2.id</a>;<br><strong>查询左表所有数据以及交集部分 （避免on 查询中的空值现象）</strong><br>右外连接：同上</li><li>子查询：<ol><li>结果是单行单列：<br>可作为条件，用运算符判断 （比如avg max…）</li><li>结果是多行单列(多个id值)<br>in(…)</li><li>结果是多行多列的<br>子查询可作为一张虚拟表，作为表的查询</li></ol></li></ol><hr><h2 id="事务">事务</h2><ol><li>基本介绍<ul><li>概念：包含多个操作的业务，被事务管理时，要么同时成功要么同时失败（例如转账）</li><li>操作：<ul><li><ol><li>开启事务-start transaction;</li></ol></li><li><ol start="2"><li>回滚-rollback(发现问题时回滚);</li></ol></li><li><ol start="3"><li>提交-commit;</li></ol></li><li>Mysql数据库中事务默认自动提交:一条DML自动提交一次事务<br>（Oracle是手动提交的）<br>查看默认提交方式 select @@autocommit<br>修改 ：  set … =0； （手动提交）<br>2.事务的四大特征</li></ul></li></ul><ol><li>原子性： 是不可分割的最小操作单位</li><li>持久性： 事务一旦提交或回滚，数据库将持久的保存数据</li><li>隔离性： 多个事务之间，相互独立</li><li>一致性： 事务操作前后，数据总量不变（守恒）<br>3.事务的隔离级别</li></ol><ul><li>概念： 多个事务操作同一批数据，引发一些问题，设置隔离级别便可以解决     这些问题</li><li>存在问题：<ol><li>脏读： 一个事务读取到另一个事务中未提交的数据</li><li>不可重复读（虚读）：同一个事务中两次得到的数据不一致</li><li>幻读：一个事务操作DML数据表中所有记录，另一个事务添加了一条     数据，则第一个事务查询不到自己的修改</li></ol></li><li>隔离级别：<ol><li>read uncommitted： 读未提交 （脏读、虚度、幻读）</li><li>read committed ： 读已提交 （不可重复读，幻读）</li><li>repeatable read：可重复度 （幻读）(默认)</li><li>seriablizable： 串行换（解决所有问题）</li></ol></li><li>查询隔离级别：<br>select @tx_isolation;<br>*设置： set global transaction isolation level …;</li></ul></li></ol></li></ul><h2 id="DCL-：管理用户，授权-：">DCL  ：管理用户，授权  ：</h2><p>DBA: 数据库管理员：<br>1. 管理用户：<br>* 查询：切换mysql数据库， 查询user表<br>% 表示可以再任意主机使用用户登录数据库<br>* 创建： Create user ‘namexxx@‘主机名’ indentified by ‘password’<br>* 删除： DROP USER ‘namexxx@‘主机名’<br>2. 修改用户密码：<br>UPDATE USER SET password = password(‘xxx’) where user =‘xxx’’<br>set password dor ‘name’@‘zhuji’ =password(‘newpassword’)’<br>忘记密码后：<br>1. net stop mysql  —停止服务 （需要管理员权限）<br>2. mysqld --skip-grant-tables—使用无验证方式启动<br>3. 打开新的cmd 窗口，直接输入mysql 命令<br>4. user mysql<br>5. 使用命令更改 …<br>6. 关闭窗口<br>7. 打开任务管理器，手动结束mysqld进程<br>3. 授权：<br>1. 查询权限<br>show grants for ‘user’@‘hostxxx’;<br>2. 授予权限<br>grant 权限列表 on xxxdatabase .xxxtable to ‘xxxUser’@‘host’;<br>all（所有权限）<br>3. 撤销权限<br>revoke xxx on xxxdatabase.xxtable to  ‘xxxUser’@‘host’;</p><hr><h2 id="JDBC-Template-与-连接池">JDBC Template 与 连接池</h2><h3 id="数据库连接池">数据库连接池</h3><ol><li><p>目的：（避免使用后就开除的现象） 节约用户时间，重复使用连接对象。</p></li><li><p>概念： 容器。存放数据库连接，系统初始后容器被创建，容器中申请一些连接对象，用   户访问数据库时，从容器中获取连接对象，访问后将归还这些连接对象</p></li><li><p>有点： 节约资源， 用户访问高效</p></li><li><p>实现：</p><ol><li><p>接口：datasource</p><ul><li>方法getConnection()获取连接</li><li>若是从连接池中，则connection.close（）代表归还这一个 连接</li><li>由数据库厂商来实现<br>2.C3P0:数据库连接池技术</li></ul><ol><li>导入jar包 以及依赖的jar包 放入libs中</li><li><strong>定义配置文件(properties OR xml )并 直接放入src目录</strong><br>*一个配置文件可以有多个配置 ，以配置名区别<ul><li>设置URL user password</li><li>设置最大连接数与超时连接秒数</li></ul></li><li>创建核心对象<br>DataSource ss = new ComboPooledDataSource（x）<br>参数为空： 默认配置<br>参数为Configname：指定配置<br>Connection con=ds.getConnection</li><li>连接</li></ol></li><li><p>Druid：数据库联机吃实现技术，by阿里巴巴（性能好）</p><ol><li><p>导入jar包</p></li><li><p>配置文件</p><ul><li>properties</li><li>可以任意名称 任意路径，不自动加载</li></ul></li><li><p>获取数据库连接池对象 ：通过工厂类获取<br>ds=DruidDataSourceFactory.creteDataSource（需要pro对象）</p><p>thiscalss.class.getClassloaaer()…getReourcesAsStream(“xxx.xx”)</p></li><li><p>连接<br>conn=ds.getConnection();</p></li></ol></li><li><p>**定义工具类 **</p></li></ol><h3 id="Spring-JDBC–JDBC-Template">Spring JDBC–JDBC Template</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none"> *Spring 框架对JDBC的简单封装</code></pre></div><p>1.导入jar包<br>2.创建jdbctemplate对象，依赖于dataSource<br>jdbctemplate t=new jdbctemplate(ds）<br>3.调用其中方法完成crud操作**（建议查看源码）**<br>1. update(sql,?1，？2,?3,?4…)<br>不需要手动关闭连接 …自动归还连接<br>2. queryformap() <strong>（只能是一个数据行）</strong><br>3. queryforlist()  可先将每个计划 封装成map 再 将map作为list的泛型<br>4. query() 返回对象为javabean<br>1. 参数（sql,new RowMapper<T>(){</p><div class="code-wrapper"><pre class="language-none"><code class="language-none"> &#125;）；匿名内部类，自己实现查找方式 2. （sql，new BeanPropertyRowMapper&lt;T&gt;(T.class)） 注意：对于数据表中为null的值，普通类型无法识别，会报错，这里使用包装类 进行解决 5. querForobject (sql, xxx.class（xxx:数据类型）)</code></pre></div></li></ol><h2 id="基础函数">基础函数</h2><h4 id="日期-v2">日期</h4><p>now() 返回当前系统日期+时间</p><p>curdate() 返回当前时间，不包括具体时分秒</p><p>select year((now)) month\monthname…同理获得当前时间</p><p>str_to_date(xxxxxxx,%c-%m-%Y’)  ：日期格式字符转换成制定格式</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211005161627866.png" alt="image-20211005161627866"></p><p>date_format:日期转换成字符，一样遵循以上格式</p><h4 id="流程控制函数">流程控制函数</h4><p><strong>if函数</strong></p><p>if(e1,e2,e3)    三元运算符</p><p><strong>case函数</strong></p><p>case …<br>when x then y;<br>when a then b;<br>…<br>else n;<br>end</p><h3 id="分组函数">分组函数</h3><p>用做统计使用，又叫聚合函数</p><p>sum avg max min count</p><ul><li>忽略null值，有null值的比如avg也就不做分母</li><li>count忽略null值</li><li>max、min、count处理任何类型‘sum、avg处理数值类型’</li><li>和distinct搭配，去重</li></ul><h3 id="分组查询">分组查询</h3><p>筛选分成分组前和分组后的筛选</p><p><strong>分组前</strong></p><p>同一列分组  group by一般在from后           关键字 ：<strong>where</strong></p><p>使用group by需要注意行数统一，可以进行多个分组</p><p><strong>分组后</strong></p><p>关键字：<strong>having</strong></p><p>对group by的具体限制。 属于分组后的筛选</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select count(*),dep_id from staff group by dep_id having count(*) &gt;&#x3D; 2;</code></pre></div><h3 id="连接查询（多表查询）">连接查询（多表查询）</h3><p>sq92</p><p><strong>等值连接</strong></p><p>where <a href="http://s.id">s.id</a> = <a href="http://d.id">d.id</a>,次次轮循匹配</p><p><strong>非等值连接</strong></p><p><strong>自连接</strong></p><p>emp e,emp e2</p><p>sq99 1999年的新的sql标准</p><p><strong>内连接</strong></p><p>select … from …  <strong>（inner ）join</strong>   emp p  <strong>on</strong> …</p><p>拿一张表去匹配另外一张表</p><p><strong>外连接</strong></p><p>一个表有，另一个表没有的情况 = 内连接结果+主表中有但从表没有的记录</p><p>left outer 左边的是主表  right outer 右边的是主表</p><p><strong>全外连接</strong></p><p>从表中有主表中没有的也能查出来</p><p><strong>交叉连接</strong></p><p>cross join   笛卡尔乘积</p><h3 id="子查询">子查询</h3><p>子查询出现位置</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211006164521956.png" alt="image-20211006164521956"></p><h4 id="where、having后">where、having后</h4><ol><li><p>标量子查询</p><p>一般用 &gt; &lt; = 这类的符号连接</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> salary<span class="token keyword">from</span> staff<span class="token keyword">where</span> salary <span class="token operator">></span>      <span class="token punctuation">(</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> staff          <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'赵云龙'</span><span class="token punctuation">)</span></code></pre></div></li><li><p>列子查询</p><p>使用多行比较操作符</p><p>in/ not in（任意一个）  any/some(某一个)  all(所有)</p></li><li><p>行子查询</p><p>多个字段当成一行来用</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211006165928954.png" alt="image-20211006165928954"></p></li></ol><h4 id="select后">select后</h4><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 查询部门的人数,也可以用连接查询...select d.name,(    select count(*)    from staff s    where s.dep_id &#x3D; d.id    )from Dep d;</code></pre></div><h4 id="from后">from后</h4><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 注意：from后的子查询的表需要起别名select salaryfrom (     select * from staff    where salary &lt; 30000         ) as staff;</code></pre></div><h4 id="exists后">exists后</h4><p><strong>相关子查询</strong></p><p>1 表示有值      0 表示没有查到</p><h3 id="分页查询">分页查询</h3><p>数据太多</p><p>limit startOffset，size;（起始索引从 <strong>0</strong> 开始）</p><h3 id="联合查询">联合查询</h3><p>将多条查询语句合并成一个结果</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from staff where dep_id &#x3D; 3 union select * from staff where id &lt; 10;# equivalent to select * from staff where dep_od &#x3D; 3 or id &lt; 10;# 粗暴拼接，不考虑表类型是否相同，且查询列数量必须相同，查询顺序可以不同，可以不对应# 并且会去掉重复项（查询出的值完全相同） --不想去重:  union allselect id,name from Dep where id &lt; 10 union select levelDes,id from level where id &lt; 10;</code></pre></div><h2 id="基础进阶">基础进阶</h2><h3 id="MySQL执行流程">MySQL执行流程</h3><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/mysql%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B.png" alt=""></p><p>主要分为两层: Server层和存储引擎层</p><ul><li>Server层: 建立连接、分析、执行SQL</li><li>存储引擎层: 数据的存储和提取，有InnoDB、MyISAM等存储引擎。不同的存储引擎共用一个Server层</li></ul><h4 id="连接器">连接器</h4><p>提供MySQL连接服务，MySQL连接基于TCP进行传输。连接后，后续该用户在此连接的任何操作，都会<strong>基于连接开始时读到的权限</strong>进行权限逻辑的判断</p><p>查看当前连接数 show processlist;Command为Sleep表示当前是一个空闲连接</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">mysql&gt; show processlist;+-------+-----------------+----------------------+---------+---------+---------+------------------------+------------------+| Id    | User            | Host                 | db      | Command | Time    | State                  | Info             |+-------+-----------------+----------------------+---------+---------+---------+------------------------+------------------+|     5 | event_scheduler | localhost            | NULL    | Daemon  | 5956243 | Waiting on empty queue | NULL             || 10257 | root            | 115.156.141.98:56720 | study   | Query   |       0 | init                   | show processlist || 10262 | root            | 114.115.150.92:37304 | pp_live | Sleep   |    1521 |                        | NULL             || 10263 | root            | 114.115.150.92:37308 | pp_live | Sleep   |    1465 |                        | NULL             || 10264 | root            | 114.115.150.92:37320 | pp_live | Sleep   |    1240 |                        | NULL             || 10265 | root            | 114.115.150.92:37324 | pp_live | Sleep   |    1192 |                        | NULL             |</code></pre></div><p>空闲连接默认最大等待时间时8h，超过后会被断开。也可以手动断开连接: <code>kill connection +id</code></p><p>MySQL连接也是与HTTP相似，有长连接和短连接之分，一般使用长连接(多次SQL执行返回只用一次TCP连接), 但使用长连接可能造成占用内存过多</p><h4 id="缓存查询">缓存查询</h4><p>连接完成后就可以发送SQL语句，此时解析SQL语句的第一个字段</p><ul><li>如果是select，代表是查询语句，则MySQL会先去查询缓存Query Cache中查找缓存数据，看之前是否执行过该查询命令，以key value形式保存在内存中，key为SQL查询语句，value为SQL语句查询结果。但是这个缓存命中率很低，因为<strong>只要表中有更新，那么这个表的查询缓存就会被清空</strong>(MySQL8.0已经删除掉查询缓存)</li></ul><h4 id="解析SQL">解析SQL</h4><p><strong>词法分析</strong></p><p>根据输入的SQL命令，提取出SQL关键字，构建SQL语法树</p><p><strong>语法分析</strong></p><p>根据词法分析的结果，语法解析器根据语法规则判断这个SQL语句是否满足MySQL语法</p><h4 id="执行SQL">执行SQL</h4><ul><li>prepare预处理</li><li>optimize优化</li><li>execute执行</li></ul><p><strong>预处理</strong></p><ul><li>检查SQL查询语句中的表或字段是否存在</li><li>扩展select * 中的*符号为表中的所有列</li></ul><p><strong>优化</strong></p><p>是否使用索引查询，用哪个索引查询</p><p><strong>执行</strong></p><p>三种方式</p><ul><li>主键索引查询</li><li>全表扫描</li><li>索引下推：对联合索引的查询避免了回表操作</li></ul><h3 id="InnoDB的MVCC实现机制">InnoDB的MVCC实现机制</h3><p>目的：为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读</p><p>MVCC：Multi-Version Concurrency Control，多版本并发控制。实现对数据的并发访问</p><p><strong>InnoDB两种读方式</strong></p><ul><li>当前读：读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁(update/insert/delete)，通过间nk lock实现</li><li>快照读: 基于MVCC，为了提高并发性能，快照读可能读到的数据不是最新数据。前提是隔离级别不是串行级别</li></ul><blockquote><p>MVCC的目的就是多版本并发控制，在数据库中的实现，就是为了解决读写冲突，它的实现原理主要是依赖记录中的 <strong>4个隐式字段</strong>，<strong>undo日志</strong> ，<strong>Read View</strong> 来实现的。</p></blockquote><h4 id="组成">组成</h4><h5 id="隐式字段">隐式字段</h5><p>每行除了自定义的字段外，还有数据库隐式定义的四个字段:</p><ul><li>DB_ROW_ID 6byte, 隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</li><li><strong>DB_TRX_ID</strong> 6byte, 最近修改(修改/插入)事务ID：记录创建这条记录/最后一次修改该记录的事务ID</li><li><strong>DB_ROLL_PTR</strong> 7byte, 回滚指针，指向这条记录的上一个版本（存储于rollback segment里）</li><li>DELETED_BIT 1byte, 记录被更新或删除并不代表真的删除，而是删除flag变了</li></ul><h5 id="Undo日志">Undo日志</h5><p>InnoDB为了回滚而记录的数据文件，主要分为3类:</p><ul><li>Insert undo log: 插入一条记录时，至少要把这条记录的主键值记下来，回滚时只需要把这个主键值对应的记录删掉即可</li><li>Update undo log: 修改一条记录时，至少要把这条记录的旧值都记录下来，回滚时更新到旧值即可</li><li>Delete undo log: 删除一条记录时，至少要把这条记录的内容都记下来，这样回滚时再把这些内容组成的记录插入到表中即可<ul><li>删除时，只需要设置老记录的DELETE_BIT，并不会立即删除</li><li>InndoDB有专门的线程来清理DELETE_BIT为1的数据，</li></ul></li></ul><p>需要注意的是：<strong>只要修改数据就会记录到undo日志中，而不会等到提交后再记录</strong></p><p>不同事务或者相同事务的对同一记录的修改，会导致该记录的undo log成为一条记录版本线性表，即链表，undo log的链首就是最新的旧记录，链尾就是最早的旧记录</p><h5 id="Read-View">Read View</h5><p>是事务进行快照读操作时残生的读视图，在该事务执行快照读的时刻，会生成数据库系统当前快照，记录并维护系统当前活跃事务的ID。</p><p>创建ReadView时会涉及以下字段</p><ul><li>m_ids ：指的是在创建 Read View 时，当前数据库中「活跃事务」的<strong>事务 id 列表</strong>，注意是一个列表，<strong>“活跃事务”指的就是，启动了但还没提交的事务</strong>。</li><li>min_trx_id ：指的是在创建 Read View 时，当前数据库中「活跃事务(未提交)」中事务 <strong>id 最小的事务</strong>，也就是 m_ids 的最小值。</li><li>max_trx_id ：这个并不是 m_ids 的最大值，而是<strong>创建 Read View 时当前数据库中应该给下一个事务的 id 值</strong>，也就是全局事务中最大的事务 id 值 + 1；</li><li>creator_trx_id ：指的是创建该 Read View 的事务的事务id</li></ul><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/ReadView.drawio.png" alt=""></p><blockquote><p>Read View遵循一个可见性算法，主要是将要被修改的数据的最新记录中的DB_TRX_ID（即当前事务ID）取出来，与系统当前其他活跃事务的ID去对比（由Read View维护），如果DB_TRX_ID跟Read View的属性做了某些比较，不符合可见性，那就通过DB_ROLL_PTR回滚指针去取出Undo Log中的DB_TRX_ID再比较，即遍历链表的DB_TRX_ID（从链首到链尾，即从最近的一次修改查起），直到找到满足特定条件的DB_TRX_ID, 那么这个DB_TRX_ID所在的旧记录就是当前事务能看见的最新老版本</p></blockquote><p><strong>判断条件</strong></p><ul><li>首先比较DB_TRX_ID &lt; min_trx_id, 表示这个版本的记录时在创建ReadView前已经提交的事务生成的，所以该版本的记录对当前事务可见</li><li>如果DB_TRX_ID &gt;= max_trx_id, 表示这个版本的记录时在创建ReadView后已经提交的事务生成的，所以该版本的记录对当前事务不可见</li><li>如果DB_TRX_ID在[min_trx_id,max_trx_id)之间，则要判断DB_TRX_ID是否在m_ids列表中<ul><li>如果DB_TRX_ID在列表中，表明生成该版本记录的活跃事务依然活跃，所以该版本的记录对当前事务不可见。(<strong>特例：对本事务可见！</strong>)</li><li>如果DB_TRX_ID在列表中，表明生成该版本记录的活跃事务已经被提交，所以该版本的记录对当前事务可见</li></ul></li></ul><p>总结: 通过版本链来控制并发事务访问同一个记录对方式就叫MVCC</p><h4 id="可重复读的工作流程">可重复读的工作流程</h4><p>启动事务时生成一个ReadView，然后<strong>整个事务期间都使用该ReadView</strong></p><h4 id="读已提交的工作流程">读已提交的工作流程</h4><p><strong>每次读取数据时都会生成一个新的ReadView</strong></p><p>建议这里自己梳理一下流程，可以参考<a href="(https://xiaolincoding.com/mysql/transaction/mvcc.html)">《小林coding-Redis事务隔离级别是如何实现的?》</a>中的流程</p><h4 id="MVCC能否完全避免幻读">MVCC能否完全避免幻读</h4><p>不能。考虑以下场景 (基于RR模式)</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># Transcation A # 假设原本就没有id&#x3D;100的数据begin; #1select * from t1 where id &#x3D; 100; #5update t1 set name&#x3D;&quot;xxx&quot; where id&#x3D;100; #6select * from t1 where id &#x3D; 100; #7commit; # 8# Transaction Bbegin; # 2insert into t1 values(100, name, age); # 3commit; # 4</code></pre></div><ul><li>操作2执行时，基于MVCC的快照读方式，生成ReadView。是看不到该数据的</li><li>操作6能执行成功，因为B已经提交。<strong>该记录的trx_id值由事务B的id变为事务A的id</strong></li><li>操作7执行快照读，根据DB_TRX_ID与最初ReadView对比，发现就是事务A自己，所以可以看到该记录</li></ul><h3 id="事务-v2">事务</h3><p>TCL  Transaction Control Language 事务控制语言</p><p>一组sql语句组成一个执行单元，要么全部执行，要么全部不执行</p><h4 id="存储引擎">存储引擎</h4><p>mysql中的数据用各种不同的技术存储在文件中（决定用什么方式来存）</p><p>show engines</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211009204408842.png" alt="image-20211009204408842"></p><p>innodb 支持事务，其他的则不支持</p><h4 id="事务的ACID属性"><strong>事务的ACID属性</strong></h4><ul><li>原子性 Atomicity<ul><li>指事务是一个<strong>不可分割</strong>的工作单位，事务中的操作要么都发生，要么都不发生</li></ul></li><li>一致性 Consistency<ul><li>事务必须使数据库从一个一致性状态转换到另一个一致性状态</li></ul></li><li>隔离性 Isolation<ul><li>一个事物的执行不能被其他事务干扰，一个事务内部的操作及使用的数据对并发的其他事务的隔离的。</li></ul></li><li>持久性 Durability<ul><li>一个事务一旦被提交，它对数据库中的数据改变就是永久性的（注意commit的地位）</li></ul></li></ul><h4 id="事务的创建">事务的创建</h4><h5 id="隐式事务">隐式事务</h5><p>insert update delete    （但多个sql合在一起就不是了）</p><p>variable ：autocommit决定是否开启隐式事务</p><h5 id="显式事务">显式事务</h5><ol><li>前提：先设置autocommit 为 0 （只针对当前会话）</li><li>start transaction（可不写，默认）</li><li>写sql，执行后在表中值已经被更改但未被commit</li><li>提交事务 commit（或者在commit之前回滚事务，恢复到之前的状态）</li></ol><p>开启事务可以用两种命令，不同的命令事务启动时机是不同的</p><ul><li>begin/start transaction: 不代表事务立即启动，只有在执行这个命令后执行了增删改查的SQL语句，才是事务真正启动的时机</li><li>start transaction with consistent snapshot：立即启动事务</li></ul><blockquote><p><strong>查看当前会话的事务ID</strong></p><p><code>SELECT TRX_ID FROM INFORMATION_SCHEMA.INNODB_TRX  WHERE TRX_MYSQL_THREAD_ID = CONNECTION_ID() </code>;</p></blockquote><h4 id="事务的隔离级别">事务的隔离级别</h4><p>同时运行多个事务，访问相同的数据时，没有适当的隔离机制，就会<strong>导致各种并发问题</strong></p><ul><li><strong>脏读</strong>：一个事务读到了另一个未提交事务修改的数据。两个事务，T1读取了T2更新了但未commit的字段，<strong>若T2回滚(关键)</strong>，则T1读取的数据就是无效的</li><li><strong>不可重复读</strong>：T1读取了一个字段，然后T2更新了该字段(提交)，之后T1再次读取后，值就不一样了（从自身的角度说，“我什么都没干，但结果却不一样了”）</li><li><strong>幻读</strong>：T1读了一个字段，但T2在表中插入了一些新的行，如果T1再读，就会多出几行<ul><li>比如update的时候，一个事务已经提交了，但对另一个事务来说，select只看到三条，但最终比如更新后row的影响条数是五条</li></ul></li></ul><p><strong>事务中delete表后还可以回滚，但truncate不可回滚！</strong></p><p><strong>Mysql中提供的4种隔离级别</strong></p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 查看当前的隔离级别select @@tx_isolation# 设置隔离级别（只针对当前连接）set (global 代表设置全局的)session transaction isolation level xxxx;# 实验前提：两个会话都需要都开启一个事务 set autocommit &#x3D; 0;</code></pre></div><ul><li>read- uncommitted 读未提交：一个事务没提交时，做的变更就能被其他事务看到</li><li>read committed 读已提交：一个事务提交后，做的变更才能被其他事务看到。<strong>通过ReadiView实现</strong><ul><li>避免脏读，但不可重复读、幻读不能避免</li></ul></li><li>repeatable read 可重复读：一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一样的。<strong>通过ReadiView实现</strong><ul><li>避免脏读+不可重复读</li><li>InnoDB默认隔离级别</li></ul></li><li>serializable 串行化：<strong>对记录加上读写锁</strong>，在多个事务对该记录进行读写操作时，如果发生饿了读写冲突，则后访问的事务必须等待前一个事务执行完成<ul><li>都可避免</li><li>会阻塞住,性能十分低下</li></ul></li></ul><p>Mysql InnoDB引擎的默认级别虽然是可重复读，但它很大程度上(无法完全避免)避免了幻读现象, 主要有两个解决手段:</p><ul><li>针对快照读(普通select), 通过MVCC方式解决幻读</li><li>针对当前读(select for update), 通过<strong>记录锁+间隙锁. next-key lock</strong> 解决</li></ul><h4 id="保存点">保存点</h4><p><strong>savepoint x</strong>只搭配<strong>rollback to x</strong>使用</p><h3 id="Mysql锁机制">Mysql锁机制</h3><h4 id="锁的类型">锁的类型</h4><h5 id="全局锁">全局锁</h5><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># lockflush tables with read lock# unlock, 会话断开后全局锁会自动释放unlock tables</code></pre></div><p>执行后整个数据库处于只读状态， 所有线程执行<strong>表结构的改</strong>指令都会被阻塞</p><p>应用: 全库逻辑备份(备份整个数据库)</p><p>对于InnoDB存储引擎，其支持事务并且可重复读，可以使用MVCC+ReadView方式来在备份的同时进行数据更新</p><p>对MyISAM存储引擎，在备份数据库时就能使用全局锁的方法</p><h5 id="表级锁">表级锁</h5><p>Mysql中表级锁有以下几类：</p><ul><li>表锁 <code>lock tables t_student read/write</code></li><li>元数据锁MDL. 对数据库表进行操作时自动加上了MDL，只有在事务提交后才会被释放<ul><li>对一张表进行CRUD时加点是MDL读锁，当一个线程执行select语句中，如果有其他线程向更改该表的结构，则会被阻塞</li><li>对一张表做结构变更时加的是MDL写锁，当一个线程对表结构进行改变时，如果有其他线程执行CRUD操作，则会被阻塞</li></ul></li><li>意向锁</li><li>AUTO-INC锁：实现AUTO_INCREMENT自增</li></ul><p><strong>MDL锁存在的问题——长事务</strong></p><p>考虑以下场景:</p><ol><li>如果线程A启动事务，却一直不提交，执行select语句后；</li><li>线程B也执行同样select语句，此时不会阻塞，因为读-读是不冲突的；</li><li>这时线程C修改表字段，但由于线程A的事务并没有提交，MDL读锁还在占用，故线程C无法申请到MDL写锁，会被阻塞；</li><li>此后所有线程对该表的读操作都会被阻塞。</li></ol><p>为什么会出现这种情况？</p><p>因为申请MDL锁的操作会形成一个<strong>优先队列</strong>，队列中<strong>写锁获取优先级顺序高于读锁</strong>，所以只要出现写锁被阻塞，则后续的读锁一定被阻塞</p><p><strong>意向锁</strong></p><p>目的：快速判断表里是否有记录被加锁</p><ul><li><p>InnoDB的表里对某些记录加上共享锁之前，需要在表级别上加一个意向共享锁</p></li><li><p>InnoDB的表里对某些记录加上独占锁之前，需要在表级别上加入一个意向独占锁</p></li></ul><p>即当插增删改操作时，需要先对表加上意向独占锁，然后对该记录加上独占锁。普通的select语句不会加行级锁(利用MVCC实现无锁地一致性读)</p><p>但也可以对select加共享锁和独占锁</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 先在表上加上意向共享锁，然后对读取的记录加共享锁</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span><span class="token comment"># 先表上加上意向独占锁，然后对读取的记录加独占锁</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span></code></pre></div><p>如果没有意向锁，则加独占表锁时，要遍历表里对所有记录，看是否记录存在独占锁，效率低下</p><p>有意向锁，由于在对记录加独占锁前，会加上表级别的 意向独占锁，则在加独占表锁时，直接看该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁</p><p><strong>意向锁不会与行级的共享排他锁互斥！</strong></p><table><thead><tr><th>表级锁</th><th>IS</th><th>IX</th></tr></thead><tbody><tr><td>IS</td><td>兼容</td><td>兼容</td></tr><tr><td>IX</td><td>兼容</td><td>兼容</td></tr><tr><td>S</td><td>兼容</td><td>互斥</td></tr><tr><td>X</td><td>互斥</td><td>互斥</td></tr></tbody></table><h5 id="行级锁">行级锁</h5><p>InnoDB支持而MyISAM不支持。普通的select不对记录加锁，属于快照读。如果要在查询时对记录加锁，则要采用以下方式:</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 对读取的记录加共享锁 S锁</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span><span class="token comment"># 对读取的记录加独占锁-X锁</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span></code></pre></div><p>除此之外 update 和 delete操作都会加行级锁，且锁的类型都是记录锁X(也是在整个事务期间都持有该锁的)</p><p>其中共享锁(S锁): 读读共享、读写互斥; 独占锁(X锁): 写写互斥、读写互斥</p><p><strong>行级锁的类别</strong></p><ul><li><strong>Record Lock 记录锁</strong>:锁住一条记录，有S/X锁之分<ul><li>当一个事务对一条记录加S锁后，其他事务也可以对该记录加S锁，但不能加X锁;</li><li>当一个事务对一条记录加X锁后，其他事务不可以再加锁;</li></ul></li><li>Gap Lock 间隙锁：只存在于可重复读隔离级别，为了解决可重复读隔离级别下的幻读问题<ul><li>例如表中有范围(2, 10)的间隙锁，这时就无法插入id = 4的记录(<strong>但可以修改id=3的内容</strong>)</li><li>间隙锁有S/X之分，但<strong>两个事务可以同时持有包含共同间隙范围(可以是子集)的间隙锁而不存在互斥问题</strong>，因为间隙锁的初衷是防止幻读</li></ul></li><li>Next-Key Lock 临键锁: 两者的组合，锁定一个范围，且锁定记录本身<ul><li>例如表中有范围(2, 10)的NK锁，这时就无法插入id = 4的记录(<strong>且无法修改id=3的内容</strong>)[为了避免两次查出来数据不一样的情况]</li><li>next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。</li></ul></li></ul><p><strong>插入意向锁</strong></p><p>一个事务在插入一条记录时，先检查插入位置是否已经被其他事务加了间隙锁，如果是，在此期间会生成一个插入意向锁，表明有事务想在某个区间插入一条新的记录，但现在处于等待状态。插入意向锁名字虽然有意向锁，但是它并<strong>不是意向锁，它是一种特殊的间隙锁，属于行级别锁</strong>。如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁</p><p>生成时机：</p><p>每插入一条新记录，都需要看一下待插入记录的下一条记录上是否已经被加了间隙锁，如果已加间隙锁，此时会生成一个插入意向锁，然后锁的状态设置为等待状态（<em>PS：MySQL 加锁时，是先生成锁结构，然后设置锁的状态，如果锁状态是等待状态，并不是意味着事务成功获取到了锁，只有当锁状态为正常状态时，才代表事务成功获取到了锁</em>），现象就是 Insert 语句会被阻塞</p><h4 id="InnoDB如何加行级锁的">InnoDB如何加行级锁的</h4><p><strong>加锁的对象是索引，则加锁的基本单位是next-key lock(前开后闭区间)</strong>。间隙锁是前开后开区间但next-key lock会在一些场景下退化为记录锁或间隙锁</p><blockquote><p>Mysql查看SQL过程中加了什么锁: <code>select * from performance_schema.data_locks\G;</code></p></blockquote><h5 id="唯一索引等值查询">唯一索引等值查询</h5><ul><li>查询记录存在，则在索引树上定位到这条数据后，n-k lock会退化为记录锁</li><li>查询记录不存在，在索引树上找到第一条大于该查询记录的记录，将n-k lock退化为间隙锁</li></ul><p>例如表进行查询<code>select * from t1 where id = 1 for update;</code>，其中id为主键，此时查询有记录存在，可以从下表看出，加了表级的X意向锁以及行级的X记录锁</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230313190227731.png" alt=""></p><blockquote><p>LOCK_TYPE: RECORD 指出是行级锁(<strong>而不是记录锁！</strong>)</p><p>LOCK_MODE指出该行级锁的类型</p><ul><li>LOCK_MODE = X: next-key lock</li><li>LOCK_MODE = X, REC_NOT_GAP: Record Lock</li><li>LOCK_MODE = X, GAP: Gap Lock</li><li>LOCK_MODE: X,INSERT_INTENTION： 插入意向锁</li></ul></blockquote><p>发生这种退化的原因是，此时仅靠记录锁也能够避免幻读的问题(该索引下的数据不会再被增删)，原因：</p><ol><li>主键具有唯一性，不会再增加一条id相同的数据(记录锁做不到)</li><li>该行有记录锁X，其他事务无法删除该记录</li></ol><p><strong>记录不存在时</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230313191226596.png" alt=""></p><p>此时表中有id为1，2，3，10的数据，<code>select * from t1 where id = 1 for update;</code>后发现表级意向锁不变，行级锁又记录锁变为间隙锁，并且LOCK_DATA有值为10。此时该事务<strong>在id=10点主键索引上加了间隙锁</strong>，锁住的范围为(3, 10),接下来如果有其他事务插入 id=4,5,6…9记录的话都会阻塞，同时区间不是[3,10]是因为此时删除了10对最终结果也没有影响(因为是等值查询)</p><h5 id="唯一索引范围查询，">唯一索引范围查询，</h5><p>**1. 范围类型为 &gt; x **</p><blockquote><p>⚠️ InnoDB中有特殊的记录来标识最后一条记录:supremum pseudo-record代表的是记录的末尾(类似Integer.MAX_VALUE，或者带有伪头尾节点的尾节点)。也有代表最靠前的一条记录(类似伪头节点)</p></blockquote><p>设表中记录 &gt; x的记录值为S:{b, c, d, …, supremum pseudo-record}, &lt;=x的最大值为a</p><p>此时依次为S集合中的每个记录与a添加nk锁 (a,b], (b, c] 包括记录supremum pseudo-record</p><p><strong>2. 范围类型为 &gt;= x</strong></p><ul><li>x值在表记录中时(a == x): 此时a记录加上<strong>记录锁</strong>，其他记录加锁仍然保持不变</li><li>x值在表中没有记录(a &lt; x): 此时保持不变</li></ul><p><strong>3. 范围类型为 &lt;= x</strong></p><p>设表中记录 &lt; x的记录值为S:{b, c, d, …}, &gt;= x的最大值为a</p><ul><li>如果x值不在表记录中时: 此时依次为S集合中的每个记录添加nk锁 <strong>(-∞,b]</strong>, (b, c]  <strong>a记录的锁退化为间隙锁(x, a)</strong><ul><li>为什么要退化为间隙锁? 因为此时(x , a)范围区间内没有数据，只需要保证没有新数据添加进这个区间即可避免幻读</li></ul></li><li>如果x值在表记录中时(a == x): 此时依次为S集合中的每个记录添加nk锁 <strong>(-∞,b]</strong>, (b, c],… (z, a]</li></ul><p><strong>4. 范围类型为 &lt; x</strong></p><p>设表中记录 &lt; x的记录值为S:{b, c, d, …}, &gt;= x的最大值为a</p><ul><li>如果x值不在表记录中时: 此时依次为S集合中的每个记录添加nk锁 <strong>(-∞,b]</strong>, (b, c]  <strong>a记录的锁退化为间隙锁(x, a)</strong>，原因同上</li><li>如果x值在表记录中时(a == x): 此时依次为S集合中的每个记录添加nk锁 <strong>(-∞,b]</strong>, (b, c],… <strong>a记录的锁退化为间隙锁(z, a)</strong>，原因同上</li></ul><h5 id="非唯一索引等值查询">非唯一索引等值查询</h5><p><strong>1. 查询值x不存在</strong></p><p>设x位于表中最小区间 [a,b]中, 则<strong>在b加上间隙锁(a, b)</strong>,此时插入一条二级索引为a/b的元素有可能会插入成功(涉及主键值和二级索引，比如间隙锁可能插入到second_index = b &amp;&amp; id = 3的记录，而不是second_index = b &amp;&amp; id = 10的记录)</p><p>其他事务插入二级索引为a的值时，二级索引树上定位到插入到位置：</p><ul><li>若下一条是age=a的记录(age有多条为a的值)，该记录上是没有间隙锁的，所以插入成功</li><li>若下一条是age=b的记录，且正好该记录上是有间隙锁的，所以插入失败</li></ul><p>其他事务插入二级索引为b的值时，二级索引树上定位到插入到位置：</p><ul><li>若下一条是age=b的记录(age有多条为b的值)，正好该记录上是有间隙锁的，所以插入成功</li><li>若下一条是age=b的记录，该位置的下一条记录不存在或者没有间隙锁，所以能插入成功</li></ul><p>此时LOCK_DATA可能变为: b, z。 z代表加锁元素的id值，表示允许插入id大于20的值，但不允许插入id小于20的值</p><p>这里具体例子，有如下数据:</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">+----+------+------+| id | name | age  |+----+------+------+|  1 | zyl  |   20 ||  2 | ppl  |   10 ||  3 | zzz  |   15 || 10 | zzz  |    3 || 15 | zzz  |   15 || 25 | jbs  |    4 |# ......#  LOCK_TYPE: RECORD#  LOCK_MODE: X,GAP#  LOCK_STATUS: GRANTED#  LOCK_DATA: 15, 3</code></pre></div><p>此时，我开启事务后并执行命令<code>select * from t1 where age = 14 for update;</code>，查询表锁结构后发现LOCK_DATA为15,3，也就是这时候再另一事务中插入id =-1 age=10的数据(不在间隙锁区间内)，发现能插入，而插入id=4 age=10的数据不能插入(在间隙锁区间内); 同理: id=4,age=15的数据可以插入(因为插入位置在id=3 age=15后)，但插入id=-1 age = 15的数据会阻塞(因为插入后仍然处在间隙锁区间内)</p><p>综上所述：判断查询值x不存在时能否插入二级索引为间隙值边界值的记录，需要考虑主键和其他索引的情况，也就是插入后元素是否处在间隙锁区间内，但是此时是没有幻读问题的</p><p>**2. 查询值x存在 **</p><p>以上图为例子， 比如此时x=15,由于不是唯一索引，所以肯定存在值相同的记录，所以非唯一索引等值查询的过程是一个扫描的过程，所以肯定先会给age=15的记录的二级索引加nk锁(10,15], 然后再给age=15的记录的<strong>主键索引</strong>加上<strong>记录锁</strong>，最终给age=20的元素的<strong>二级索引</strong>加上间隙锁(15, 20)</p><blockquote><p><strong>为什么还要在后面加上间隙锁?</strong></p><p><strong>避免幻读现象</strong>(因为由第一种情况可知，只加nk锁和记录锁还是会导致插入边界二级索引值记录可能成功)</p></blockquote><p><strong>需要注意的是，这里不仅给二级索引加了锁，还给主键索引也加了锁，意味着其他事务无法更新或者删除id=3这一行的记录</strong></p><h5 id="非唯一索引范围查询">非唯一索引范围查询</h5><p>索引的nk lock不会退化</p><p>例如在上图中执行语句<code>select * from t1 where age &gt;= 15 for update;</code> 则有二级索引的nk锁(10,15] (15, 20] (20, +∞]， 并且id = 3， 15， 1的记录都要加上主键的记录锁</p><h5 id="没有加索引的查询">没有加索引的查询</h5><p>锁定读或update/delete方式: 没有使用索引列作为查询条件, 导致全表扫描, 每条记录的索引上都会加nk锁，锁住了全表，这时其他事务对该表进行增删改操作都会被阻塞</p><blockquote><p><strong>如何避免这种错误: Mysql设置参数<code>sql_safe_updates</code>为1</strong></p><p>update 语句必须满足如下条件之一才能执行成功：</p><ul><li>使用 where，并且 where 条件中必须有索引列；</li><li>使用 limit；</li><li>同时使用 where 和 limit，此时 where 条件中可以没有索引列；</li></ul><p>delete 语句必须满足以下条件能执行成功：</p><ul><li>同时使用 where 和 limit，此时 where 条件中可以没有索引列；</li></ul></blockquote><h4 id="Mysql死锁产生">Mysql死锁产生</h4><p>考虑以下场景:</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># Transaction A:begin; # 1# age max &#x3D; 20select * from t1 where age &gt; 30 for update; # 2insert into t1 values(id, name, 32); # 5# Transaction B:begin; # 3select * from t1 where age &gt; 30 for update; # 4insert into t1 values(id, name, 33); # 6</code></pre></div><p>此时 两个事务进行insert操作时都会被阻塞。</p><p>在操作4完成后，查看表中锁结构发现两个事务<strong>都对supremum pseudo-record加上了 nk锁</strong> 且都加了表级意向锁 IX(不冲突)</p><p>操作5完成后，在B事务中查看表中的锁发现：事务A给supremum pseudo-record加上了插入意向锁，并且当前正在等待获取锁</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#        INDEX_NAME: idx_age#OBJECT_INSTANCE_BEGIN: 140347585918968#           LOCK_TYPE: RECORD#           LOCK_MODE: X,INSERT_INTENTION#         LOCK_STATUS: WAITING#           LOCK_DATA: supremum pseudo-record</code></pre></div><blockquote><p>为什么可以存在两个事务对最后一条特殊记录的nk锁？</p><p>对于这种范围为 (30, +∞] 的 next-key lock，两个事务是可以同时持有的，不会冲突。因为 +∞ 并不是一个真实的记录，自然就不需要考虑 X 型与 S 型关系。(不太理解)</p></blockquote><p>又考虑一个间隙锁引发的死锁问题:</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">##  假设有id为 20 25 27 30 的数据,id为主键##  Transaction A:begin; # 1# age max &#x3D; 20update t1 set name&#x3D;&quot;xxx&quot; where id&#x3D;27; # 2insert into t1 values(27, name, age); # 5# Transaction B:begin; # 3update t1 set name&#x3D;&quot;xxx&quot; where id&#x3D;27; # 4insert into t1 values(27, name, age); # 6</code></pre></div><ul><li><p>在操作4完成后，查看表中锁结构发现两个事务加了表级IX锁以及(25, 30)的间隙锁</p></li><li><p>在操作5执行后便会被阻塞，事务A给记录id=30处添加了插入意向锁并且正在等待</p></li><li><p>在操作6执行后便会被阻塞，事务B给记录id=30处添加了插入意向锁并且正在等待</p></li></ul><p><strong>即两个事务不能在同一时间内，一个拥有间隙锁，另一个在该间隙区间内插入插入意向锁</strong></p><p><strong>如何避免死锁</strong></p><p>形成死锁的四个必要条件：互斥、请求与保持、不剥夺、循环等待</p><p>解决方案:</p><ul><li>设置事务等待锁的超时时间, 超时便回滚 <code>innodb_lock_wait_timeout</code></li><li>开启主动死锁检测: 发现死锁后主动kill链条中的一个事务 <code>innodb_deadlock_detect: on</code></li></ul><h4 id="Insert加隐式锁">Insert加隐式锁</h4><p>Insert 语句在<strong>正常执行</strong>时是不会生成锁结构的，它是靠聚簇索引记录自带的 trx_id 隐藏列来作为<strong>隐式锁</strong>来保护记录的</p><h3 id="日志">日志</h3><h4 id="Buffer-Pool">Buffer Pool</h4><p>更新一条记录时，先从磁盘读取该记录，然后在内存中修改改记录，那么是直接写回到磁盘还是先保存到缓存中比较好？显然是后者</p><ul><li>读取数据，如果数据在BufferPool中，则直接读取BP的数据</li><li>修改数据时，数据在BP中，直接修改BP数据所在的页，然后将其页设置为脏页(该页的内存数据和磁盘上的数据已经不一致)，后台线程选择合适的时机将脏页写入磁盘</li></ul><p>由于InnoDB把存储的数据划分为若干页 ，以页为磁盘和内存交互的基本单位，默认大小为16KB</p><p>在MySQL启动时，InnoDB会为BP申请一片连续的内存空间，然后按照16KB划分许多个页</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/innodb/bufferpool%E5%86%85%E5%AE%B9.drawio.png?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0" alt=""></p><h4 id="undo-log">undo log</h4><p>用于撤销回退的日志，每当InnoDB对一套记录进行操作时，只要把回顾时所需要的信息记录到undo log里即可</p><blockquote><p><strong>undo log 是如何刷盘（持久化到磁盘）的？</strong></p><p>undo log 和数据页的刷盘策略是一样的，都需要通过 redo log 保证持久化。</p><p>buffer pool 中有 undo 页，对 undo 页的修改也都会记录到 redo log。redo log 会每秒刷盘，提交事务时也会刷盘，数据页和 undo 页都是靠这个机制保证持久化的。</p></blockquote><h4 id="redo-log">redo log</h4><p>BP是基于内存的，如果断电重启，那没有及时写入磁盘的脏页数据就无法被恢复。为了防止这个问题，每次更新数据时，InnoDB先更新内存，标记BP的页为脏页，然后将本次对改页的修改以redo log的形式记录下来。后续在适当时，后台线程将内存脏页写回磁盘，这就是**WAL(Write-Ahead Logging)**技术(MySQL写操作并不是立即写到磁盘上，先写日志，然后在合适的时间上再写到磁盘上)</p><p>需要注意的是，redo log是物理日志，记录对X表第几个数据页的特定个偏移量做了特定更新，而不是像undo log一样更逻辑化地记录。执行语句时，就会产生这样的物理日志，而当<strong>事务提交时，只要将redo log持久化到磁盘即可</strong>，而不需要等到将缓存再BP到脏页数据持久化到磁盘。</p><blockquote><p>理解undo log与redo log区别</p><ul><li>undo log记录的是操作数据之前的情况</li><li>redo log记录的是操作数据之后的情况(物理上)</li></ul></blockquote><p><strong>顺序写和随机写</strong></p><p>写redo log到磁盘中用追加操作的方式，磁盘操作顺序是顺序写；写入具体数据时要先找到写入位置才能写入磁盘，磁盘操作是随机写。而<strong>磁盘的顺序写速度快于随机写</strong>，所以redo log写入磁盘开销更小。<strong>WAL技术就让MySQL的写操作从磁盘的随机写转化到顺序写</strong></p><p><strong>redo log的优点</strong></p><ol><li>实现事务的持久性，让MySQL有crash-safe能力</li><li>将写操作从随机写变成了顺序写，提升MySQL写入磁盘的性能</li></ol><p>当然redolog也不是直接写入磁盘的，有自己的缓存，redo log buffer，redo log会先写到buffer中然后再持久化到磁盘。所以，断电问题有转移到了<strong>redo log buffer什么时候刷</strong>盘这一问题来：</p><ul><li>MysQL正常关闭时</li><li>redo log buffer中记录的写入量大于buffer内存空间的一半</li><li>InnoDB后台线程每隔1s将redo log buffer持久化</li><li>每次事务提交时都将缓存在redo log buffer的redo log持久化到磁盘(可选)</li></ul><p>三种策略 主要根据<code>innodb_flush_log_at_trx_commit</code>参数：</p><ul><li>0: 每次事务提交时，redo log留在buffer中，不主动触发刷盘</li><li>1(Default): 每次事务提交，缓存在buffer的redo log立即刷到磁盘</li><li>2: 每次事务提交，将缓存在redo log buffer的redo log 写到redo log文件，不是磁盘，而是OS到缓存页 Page Cache。这样就算Mysql挂了，OS不挂，最终还是会被写入到磁盘的</li></ul><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/how_update/innodb_flush_log_at_trx_commit.drawio.png?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0" alt=""></p><p><strong>redo log 文件写满了怎么办</strong></p><p>简言之：有两个文件，循环写。先写一个文件，写满后再另一个文件写，期间查看是否被刷盘，如果刷盘则覆盖写，如果没有被刷盘且写满了，就会被阻塞</p><h4 id="binlog">binlog</h4><p>redo log和undo log都是InnoDB生成的，而binlog是MySQL完成更新操作后在Server层生成的</p><p>binlog记录了所有数据库表结构变更和表数据修改的日志，<strong>不会记录查询类的操作</strong></p><blockquote><p><strong>为什么有了binlog还要有redo log？</strong></p><p>这个问题跟 MySQL 的时间线有关系。最开始 MySQL 里并没有 InnoDB 引擎，MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。</p><p>而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用 redo log 来实现 crash-safe 能力。</p></blockquote><p><strong>redo log和binlog区别</strong></p><ul><li>适用对象不同: 一个基于InnoDB 一个基于MySQL Server层</li><li>文件格式不同：<ul><li>binlog有三种文件格式:<ul><li>STATEMENT 默认: 每一条修改数据的SQL都会记录到binlog中，但STATEMENT中有例如now()等的动态函数，会在主从复制过程中造成结果不一致问题</li><li>ROW：记录行数据最终被修改成什么了，每行数据的变化结果都会被记录，可能造成binlog文件过大</li><li>MIXED：两者混合</li></ul></li><li>redolog：物理日志</li></ul></li><li>写入方式不同：<ul><li>binlog：追加写，写满一个文件，创建新文件继续写，不会覆盖以爱你的日志，保存的是全量日志</li><li>redo log：循环写，日志空间大小固定，全部写满就从头开始</li></ul></li><li>用途不同：<ul><li>binlog：备份恢复、主从复制</li><li>redo log：掉电恢复</li></ul></li></ul><p><strong>binlog 刷盘时机</strong></p><p>执行事务时，先把日志写到binlog cache，事务提交时，再把cache写到binlog文件中</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/how_update/binlogcache.drawio.png" alt=""></p><p>MySQL提供一个 sync_binlog 参数来控制数据库的 binlog 刷到磁盘上的频率：</p><ul><li>sync_binlog = 0 的时候，表示每次提交事务都只 write，不 fsync，后续交由操作系统决定何时将数据持久化到磁盘；</li><li>sync_binlog = 1 的时候，表示每次提交事务都会 write，然后马上执行 fsync；</li><li>sync_binlog =N(N&gt;1) 的时候，表示每次提交事务都 write，但累积 N 个事务后才 fsync。</li></ul><p>注意，与redo log稍有不同的是，binlog都是先从buffer写入到OS Page Cache</p><blockquote><p>以下引用🔗 <a href="https://xiaolincoding.com/mysql/log/how_update.html#binlog-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%88%B7%E7%9B%98">小林Coding-binlog什么时候刷盘</a>的内容</p></blockquote><p>具体更新一条记录 <code>UPDATE t_user SET name = 'xiaolin' WHERE id = 1;</code> 的流程如下:</p><ol><li>执行器负责具体执行，会调用存储引擎的接口，通过主键索引树搜索获取 id = 1 这一行记录：<ul><li>如果 id=1 这一行所在的数据页本来就在 buffer pool 中，就直接返回给执行器更新；</li><li>如果记录不在 buffer pool，将数据页从磁盘读入到 buffer pool，返回记录给执行器。</li></ul></li><li>执行器得到聚簇索引记录后，会看一下更新前的记录和更新后的记录是否一样：<ul><li>如果一样的话就不进行后续更新流程；</li><li>如果不一样的话就把更新前的记录和更新后的记录都当作参数传给 InnoDB 层，让 InnoDB 真正的执行更新记录的操作；</li></ul></li><li>开启事务， InnoDB 层更新记录前，首先要记录相应的 undo log，因为这是更新操作，需要把被更新的列的旧值记下来，也就是要生成一条 undo log，undo log 会写入 Buffer Pool 中的 Undo 页面，不过在内存修改该 Undo 页面后，需要记录对应的 redo log。</li><li>InnoDB 层开始更新记录，会先更新内存（同时标记为脏页），然后将记录写到 redo log 里面，这个时候更新就算完成了。为了减少磁盘I/O，不会立即将脏页写入磁盘，后续由后台线程选择一个合适的时机将脏页写入到磁盘。这就是 <strong>WAL 技术</strong>，MySQL 的写操作并不是立刻写到磁盘上，而是先写 redo 日志，然后在合适的时间再将修改的行数据写到磁盘上。</li><li>至此，一条记录更新完了。</li><li>在一条更新语句执行完成后，然后开始记录该语句对应的 binlog，此时记录的 binlog 会被保存到 binlog cache，并没有刷新到硬盘上的 binlog 文件，在事务提交时才会统一将该事务运行过程中的所有 binlog 刷新到硬盘。</li><li>事务提交，剩下的就是 <strong>两阶段提交</strong> 的事情了</li></ol><p>需要注意这里的顺序: undo -&gt; redo -&gt; binlog</p><h4 id="两阶段提交-2PC">两阶段提交 2PC</h4><p>理解为什么会有两阶段提交：当事务提交后，此时redo log 和bin log cache中的内容都没有 持久化到磁盘，并且两个都是异步的过程，如果此时:</p><ul><li>redo log刷到磁盘后，MySQL宕机，binlog还没来得及写入，主从复制就会出问题</li><li>binlog刷到磁盘后，redo log还没来得及写入，则崩溃后数据就会丢失</li></ul><p>所以两阶段提交是分布式事务一致性的协议，保证多个逻辑操作要么全部成功要么全部事务，这又有点事务的感觉了。</p><p>两阶段提交将单个事务的提交拆分成2个阶段: 准备Prepare阶段和提交Commit阶段。每阶段都由协调者Coordinator和参与者Participant共同完成。</p><p><strong>两阶段提交过程</strong></p><p>为了保证redo log和binlog日志的一致性，MySQL使用内部XA事务，由binlog作为协调者，存储引擎作为参与者</p><p>不要把提交（Commit）阶段和 commit 语句混淆了，commit 语句执行的时候，会包含提交（Commit）阶段。</p><p>当客户端执行commit语句后(或隐式执行), MySQL内部开启一个XA事务，分两阶段完成XA事务的提交：</p><ul><li>Prepare：将XID(内部XA事务ID)写入到redo log，同时将redo log对应到事务状态设置为prepare，然后将redo log持久化到磁盘。</li><li>Commit：将XID写入到binlog，然后将binlog持久化到磁盘，将redo log状态设置为commit。此时该状态并不需要持久化到磁盘，只需要 write 到文件系统的 page cache 中就够了，因为只要 binlog 写磁盘成功，就算 redo log 的状态还是 prepare 也没有关系，一样会被认为事务已经执行成功；</li></ul><p>这时再看之前存在的问题：</p><ul><li>如果binlog中没有当前内部事务XID，说明redo log完成刷盘，但binlog没有刷盘，所以回滚事务。</li><li>如果binlog有当前内部事务XID，说明redo log和binlog都已经完成了刷盘，则提交事务。</li></ul><blockquote><p>事务没提交的时候，redo log会持久到磁盘吗？</p><p>会的，因为前面有说过，后台线程可能会1s把redo log buffer的数据持久化到磁盘，如果这个时候有个事务没提交，但buffer数据已经被持久化到磁盘了，如果发生断电，这时候再恢复是否会出现数据不一致问题？</p><p>不会，因为此时binlog还没有写入，redo log和binlog 存在数据不一致问题，mysql重启后会进行回滚操作。<br>redo log 在进行数据重做时，只有读到了 commit 标识，才会认为这条 redo log 日志是完整的，才会进行数据重做(有特例，例如binlog已经写入)，否则会认为这个 redo log 日志不完整，不会进行数据重做</p></blockquote><p><strong>存在的问题</strong></p><ol><li>磁盘IO次数高</li><li>锁竞争激烈</li></ol><p><strong>优化：组提交</strong></p><h3 id="视图">视图</h3><p>一种虚拟表，5.1版本后的新特性，通过表动态生成的数据（类似临时拼凑的表，可重复利用）</p><p>只保存sql逻辑，不保存查询结果</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create view v1asselect id,namefrom staffwhere dep_id &#x3D; 3;select * from v1;</code></pre></div><ul><li><strong>视图可重用；减少sql操作</strong></li><li><strong>不必知道查询细节</strong></li><li><strong>保护数据，提高安全性</strong></li></ul><p><strong>操作视图</strong></p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 修改视图create or replace viewas...alter view xxxas...# 删除视图drop view xxx# 查看视图结构desc view;# 更新视图（原始表也会有）insert into xxx values(.....); update xxx set ....; delete from xxx where ... ;#视图权限（一般的视图里是不允许更新到真实表中的）</code></pre></div><h4 id="视图权限">视图权限</h4><p>具有一下关键字的sql语句的视图，是不能更新的</p><ul><li>group by  （肯定，因为不知道怎么改）</li><li>常量视图<ul><li>create view xxx as  select ‘john’ name;</li><li>update xxx set name =‘avad’;</li></ul></li><li>select中能够包含子查询</li><li>join或者连接（可更新不可插入）</li><li>from一个不能更新的视图</li><li>where子句的子查询引用了from子句中的表<ul><li><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211010220425178.png" alt="image-20211010220425178"></li></ul></li></ul><p><strong>视图和表的区别</strong></p><ul><li>创建语法不同</li><li>视图基本不实际占用物理空间（只保存sql逻辑，不保存数据）</li><li></li></ul><h3 id="变量-v2">变量</h3><h4 id="系统变量">系统变量</h4><p>500条，比较多</p><ul><li>全局变量<ul><li>服务器每次启动，将为所有全局变量赋初始值</li><li>针对所有会话连接有效，但不能跨重启（服务器重启默认，需要修改配置文件）</li></ul></li><li>会话变量<ul><li>针对当前会话</li></ul></li></ul><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 查看全局&#x2F;会话变量show global | session variables (like &#39;....&#39;);# 查看制定的系统变量的值select @@global.key_name;# 赋值（只要没加global，就是session）set global|session key_name &#x3D; xxx;set @@global|@@session.key_name &#x3D; xxxx;</code></pre></div><h4 id="自定义变量">自定义变量</h4><ul><li>用户变量<ul><li>作用域：针对当前会话</li><li>使用：声明、赋值、使用</li></ul></li><li>局部变量<ul><li><strong>仅在定义它的begin end块中有效</strong></li></ul></li></ul><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 用户变量声明 、赋值set @user_key_name &#x3D; xx;set @user_key_name:&#x3D;xx;select @user_key_name:&#x3D;xx;# 将查询的结果赋值给变量select xxx into @user_key_name from xxxxtable;# 局部变量声明declare key_name type (default xxx);# 赋值与以上相同，但set时不加@，第一种select时需要加@</code></pre></div><h3 id="存储过程和函数">存储过程和函数</h3><p>mysql数据库中 proc表包含了function 和 function的统计</p><p>目的： 都是一堆东西，打个包，简化一下</p><ul><li>存储过程<ul><li>有0个或多个返回，适合<strong>批量插入、更新</strong></li></ul></li><li>函数<ul><li>有且仅有一个返回，适合做处理数据后返回一个结果</li></ul></li></ul><h4 id="存储过程">存储过程</h4><p>一组预先编译好的SQL集合（类似批处理语句）</p><ul><li>提高代码重用性</li><li>简化操作</li><li>减少了 编译次数、减少了和数据库服务器的连接次数，提高了效率</li></ul><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 创建create procedure a_name(param_columns...)begin...(legal sql dialects)# 存储过程提中的每条SQL语句必须加分号# 存储过程借位使用DELIMITER重新设置end# param_columns ：参数模式 + 参数名 + 参数类型# in&#x2F;out&#x2F;inout name varchar(20)# 结束标记,事先设置DELIMITER $$#调用方法call a_name(params...);</code></pre></div><p>注意参数模式，</p><ul><li>in，可以作为输入，该参数需要调用方法传入值</li><li>out，该参数可以作为输出，即参数可以作为返回值</li><li>inout</li></ul><h5 id="空参列表">空参列表</h5><h5 id="in模式">in模式</h5><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">delimiter $;create procedure proc2(in sname varchar(20))begin    select name from staff  s where s.name &#x3D; sname;end $# 调用call proc2(&#39;赵云龙&#39;);</code></pre></div><p>问题： 参数名字和列名冲突（加表名；也可以declare一个局部变量）</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">declare temp varchar(29) default &#39;&#39;;select xxx into temp;</code></pre></div><h5 id="out模式">out模式</h5><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create procedure proc3(in sname varchar(20),out selfstr varchar(50) )begin    select self_intro into selfstr # into用来复制，后可跟多个out参数    from staff  s    where s.name &#x3D; sname;end;# 通过自定义用户变量来接收这些out值CALL proc3(&#39;赵云龙&#39;,@selfStr);select @selfStr;</code></pre></div><h5 id="inout模式">inout模式</h5><p>例如，传入的参数都改变的情况，节省了参数个数</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># **存储过程的删除**drop procedure xxx# 查看存储过程show create procedure xxx;</code></pre></div><h4 id="函数-v3">函数</h4><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 创建create function xxx(params...) returns returntypebegin...end# parmas: 参数名 + 参数类型# 函数体有return语句，但没有也不报错# 调用select xxx(params);# examplecreate function myf3(name varchar(20)) returns varchar(20)begin    declare c varchar(20) default 0;    select self_intro into c    from staff    where staff.name &#x3D; name;    return c;end $;select   myf3(&#39;赵云龙&#39;);# 查看函数show create function xxx;# 删除drop function xxx;</code></pre></div><p>错误示范,不能使用多行</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create function myf2(name varchar(20)) returns intbegin    declare c int default 0;    select * into c    from staff;    return c;end $;select myf2(&#39;赵云龙&#39;);# The used SELECT statements have a different number of columns</code></pre></div><h4 id="区别">区别</h4><ul><li>存储过程主要是面向过程，功能比较复杂；只能直接执行；预编译保存在数据库中，需要时直接从库中调用，省去了编译的时间；提高了运行速度，降低网络数据传输量</li><li>函数针对性强，针对某个特定的功能，视为为其他程序服务，只能返回一个变量；可以作为一个sql语句的一部分来调用</li></ul><h3 id="流程控制结构">流程控制结构</h3><ul><li>顺序结构：自上而下</li><li>分支结构：可选分支</li><li>循环结构</li></ul><h4 id="分支结构">分支结构</h4><p><strong>if 函数</strong></p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">if a  and b then ...elseif  ... thenelseif ... then...else...endif;</code></pre></div><p><strong>case结构</strong></p><ul><li>情况一：类似java中switch进行等值判断。when的是要判断的值<ul><li>可以作为表达式，可以放在任何地方</li></ul></li><li>情况二：类似多重if语句，用于实现区间判断。when的是要判断的条件，then的是要做的动作<ul><li>可以作为独立的语句。只能放在begin end中</li></ul></li></ul><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">case ...when .... then ...when ... then ...else ...end case;</code></pre></div><p>如果else省略，且无匹配，则返回null;</p><h4 id="循环结构">循环结构</h4><p><strong>while</strong></p><p>不一定执行</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">[tag:] while xxx do# 循环体end while[tag];# 加上tag可以进行多层的循环控制</code></pre></div><p><strong>loop</strong></p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 可以用来模拟简单的死循环[tag:] loop# 循环体end loop[tag];</code></pre></div><p><strong>repeat</strong></p><p>肯定执行一次</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">[tag:] repeat# 循环体until ...end repeat[tag];</code></pre></div><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 平常例子create procedure pro_while1(in insertcount int)begin    declare i int default 1;    while i&lt;&#x3D;insertcount do        insert into tcl_test values (1000+i,concat(&#39;1000&#39;,i),(1000+i)*10.0);        set i&#x3D;i+1;        end while ;end $;# 带tag和if判断退出的循环语句# 注意leave的使用create procedure pro_while2(in insertcount int)begin    declare i int default 1;    xx: while i&lt;&#x3D;insertcount do        insert into tcl_test values (1500+i,concat(&#39;1000&#39;,i),(1500+i)*10.0);        if i&gt;20 then leave xx;        end if;        set i&#x3D;i+1;        end while xx;end $;</code></pre></div><p>iterator  : 类似java中的continue;</p><h2 id="进阶-v3">进阶</h2><h3 id="自启动服务">自启动服务</h3><p>早就想设置了，赣！</p><p>/usr/lib/systemd/system下新建xx.service文件</p><p><strong>基本位置</strong></p><ul><li>/var/lib/mysql数据库文件存放路径</li><li>/var/share/mysql     配置文件目录</li><li>/usr/bin                 相关命令脚本</li><li>/etc/init.d/mysql    启停脚本</li></ul><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell"># 查看安装目录ps -ef | grep mysqlmysql        530       1  0 09:50 ?        00:00:00 &#x2F;usr&#x2F;bin&#x2F;mariadbdpplong      3841    3006  0 10:06 pts&#x2F;1    00:00:00 grep --color&#x3D;auto --exclude-dir&#x3D;.bzr --exclude-dir&#x3D;CVS --exclude-dir&#x3D;.git --exclude-dir&#x3D;.hg --exclude-dir&#x3D;.svn --exclude-dir&#x3D;.idea --exclude-dir&#x3D;.tox mysql# 查看数据文件位置select @@datadir</code></pre></div><h3 id="基本">基本</h3><h4 id="主要配置文件">主要配置文件</h4><ul><li>二进制日志 log-in  主从复制</li><li>错误日志 log-error  默认关闭，记录严重的错误和警告信息，每次启动和关闭的信息</li><li>查询日志log      默认关闭，记录查询的sql语句</li><li>数据文件    /var/lib/mysql</li></ul><h4 id="逻辑架构">逻辑架构</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211020103933579.png" alt="image-20211020103933579"></p><ul><li>连接层：提供本地Sock通信和大多数基于B-S服务端工具实现的类似TCP/IP通信，完成连接处理、授权认证的工作。引入了<strong>线程池概念</strong>，为通过认证安全介入的客户端提供线程。可以实现基于SSL的安全链接。</li><li>业务逻辑处理层：完成大多数核心功能，SQL接口，SQL分析、优化、内置函数。解析查询病创建内部解析树，对完成相应的优化。对SELECT还会查询内部缓存<ul><li>Parser： Lex + YACC</li><li>Optimizer： 优化SQL</li></ul></li><li>数据存储引擎层： 真正负责了MySQL数据的存储和读取，服务器通过API与存储引擎进行通信，不同存储引擎有不同功能。（MyISAM和InnoDB）[目前只有Mysql实现了底层数据存储引擎的插件式管理  --&gt; Mysql可插拔存储引擎特色]</li><li>数据存储层：将数据存储在运行于裸设备的文件系统上，完成与存储引擎的交互</li></ul><h4 id="存储引擎-v2">存储引擎</h4><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 查询当前的存储引擎, 目前默认是InnoDBshow variables like &#39;%storage_engine%&#39;; # 创建表时可以指定 Engine &#x3D; xxx</code></pre></div><p>Mysql中的存储引擎及其特点：</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211020105635279.png" alt="image-20211020105635279"></p><h5 id="MyIASM和InnoDB">MyIASM和InnoDB</h5><p><a href="https://www.runoob.com/w3cnote/mysql-different-nnodb-myisam.html">Mysql和InnoDB区别</a></p><h4 id="-v6"></h4><h3 id="优化原因">优化原因</h3><h4 id="Sql性能下降原因">Sql性能下降原因</h4><ol><li><strong>查询语句太烂</strong></li><li><strong>索引失效</strong><ol><li>单值</li><li>复合</li></ol></li><li>关联查询太多（join）</li><li>服务器调优设置</li></ol><h4 id="Sql执行顺序">Sql执行顺序</h4><ol><li>from .根据查询指定的表格，from计算笛卡尔积。</li><li>on根据join_condition过滤数据。</li><li>join添加相关外部表格数据。</li><li>where根据where_condition过滤数据。</li><li>group by分组。</li><li>having根据having_condition过滤数据。</li><li>选择指定的列。</li><li>distinct指定列去重。</li><li>orderby按order_by_condition排序。</li><li>取出指定的记录量。</li></ol><p><strong>七种JOIN</strong></p><p>针对A\B交并集情况</p><h3 id="索引-v2">索引</h3><h4 id="概念-v8">概念</h4><p>一种 <strong>排好序的快速查找数据结构</strong></p><h4 id="优缺点">优缺点</h4><ul><li><strong>优点：</strong><ul><li>提高数据检索的效率，降低数据库IO成本</li><li>通过索引列对数据进行排序，降低了数据排序的成本，降低CPU消耗</li></ul></li><li><strong>缺点：</strong><ul><li>占据磁盘空间</li><li>降低更新表的效率，每次对表进行操作，Mysql不仅要保存数据，还要保存和更新对应的索引文件</li></ul></li></ul><p>在数据之外，数据库系统还维护这满足特定查找算法的数据结构，以某种方式指向数据，这样就可以在这些数据结构上实现高级查找算法</p><h4 id="B树">B树</h4><p>优化重点：尽量减少磁盘的IO操作，因为每次访问二叉树的一个节点就会发生一个IO<br>想减少IO操作  ----&gt; 尽量<strong>降低树的高度</strong></p><p>Mysql的InnoDB存储引擎一次IO读取一页(16K)的数据量，即二叉树一次IO有效数据量只有16K，空间利用率低</p><p><strong>特点</strong></p><ul><li>B树的节点存储多个元素，每个内节点有多个分叉</li><li>节点的元素包含健值和数据，健值从大到小排序</li><li>父节点中的元素不会出现在子节点中</li><li>素有叶子节点位于同一层，叶节点具有相同的深度，叶节点之间无连接</li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211020114931955.png" alt="image-20211020114931955"></p><p>相比平衡二叉树，比较的次数没有明显减少，但磁盘IO次数会大大减少(比较在内存中进行，耗时很少？？？)</p><p><strong>可优化之处</strong></p><ol><li>B树不支持范围查询的快速查找，例如查 10 -35 的数据，查到15后，就需要返回到根节点，重新遍历查找。(需要从根节点多次遍历)</li><li>如果data存储的是行记录，则行的大小随着列数的增多，占用空间变大，一页中可存储的数据量就会变少----&gt; 树增高—&gt;磁盘IO次数增多</li></ol><p>因此，就有了 ——–&gt;</p><h4 id="B-树">B+树</h4><p>与B树区别： 只有叶子节点才会存储数据，非叶子节点存储健值，叶子节点之间使用双向指针链接，最底层的叶子节点形成了一个双向有序链表</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211020115655060.png" alt="image-20211020115655060"></p><p>数据都在最底层的叶子节点上 ---- &gt; 每次查找需要到最底层叶子节点才能找到（这里第二层不是实际数据，只是一个参考值）<br>每次的磁盘IO和树高有直接关系<br>在叶子节点的搜索这里采用的是逐个比较</p><p>具体搜索过程可参见 <a href="https://blog.csdn.net/qq_35190492/article/details/109257302?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163470018116780264064360%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163470018116780264064360&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109257302.pc_search_ecpm_flag&amp;utm_term=Mysql%E7%B4%A2%E5%BC%95&amp;spm=1018.2226.3001.4187">一文搞懂MySQL索引所有知识点</a></p><h4 id="操作-v2">操作</h4><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 创建索引create  index idx_name on table(column(xxx))alter table xx add index idx_name on (column(xx))</code></pre></div><h4 id="索引类型">索引类型</h4><ol><li>主键索引： 索引列中值唯一，不允许有空值</li><li>普通索引：</li><li>唯一索引： 唯一，可空</li><li>全文索引： 只能在文本类型CHAR VARCHAR TEXT类型字段上创建</li><li>空间索引：</li><li>前缀索引：</li></ol><p><strong>哪些情况需要索引</strong>？</p><ul><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段</li><li>查询中与其他表关联的字段，外键关系</li><li>单键/组合索引如何选择(高并发—&gt;组合)</li><li>查询中排序的字段，排序字段通过索引去访问将大幅提高排序速度</li><li>查询中统计或者分组的字段</li></ul><p><strong>哪些条件不需要索引</strong></p><ul><li>where /group by/ order by中永不倒的字段不需要索引</li><li>数据量小的表不需要</li><li>大量重复数据的列上不需要建立索引(索引的价值是快速定位)</li><li>经常更新的表不用创建索引</li><li>无序的值不建议作为索引</li></ul><h3 id="性能分析">性能分析</h3><ol><li>慢查询日志的开启和捕获</li><li>explain+SQL分析</li><li>show profile查询SQL在mysql服务器的执行细节和生命周期</li><li>sql服务器参数调优</li></ol><h4 id="Explain">Explain</h4><p>可以模拟优化器执行SQL查询语句，从而知道Mysql是如何处理SQL语句的</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">explain select * from xxx; </code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211020145916673.png" alt="image-20211020145916673"></p><ul><li><p><strong>id</strong></p><p><strong>1. id相同，顺序执行</strong> （注意这里的执行顺序根据SQL的执行顺序来的）</p><p><strong>2. id 不同如果是子查询，则id值越大优先级越高，先被执行</strong></p><p><strong>3. id相同，丛上往下顺序执行，所有组中，id值越大优先级越高</strong></p></li><li><p>select_type</p><ul><li>simple：最简单的select查询，查询中不包含子查询和union</li><li>primary：查询中若包含复杂的字部分，则外层查询被标记为此</li><li>subquery：select或者where表中包含了子查询</li><li>derived：from列表中包含了子查询</li><li>union：第二个select出现在union之后</li><li>union result：从union表中获取的结果的sleect</li></ul></li><li><p>type：访问类型（好到坏,至少达到range和ref级别）</p><ul><li><p>system：表只有一行记录，是const的特列</p></li><li><p>const：通过一次索引就能够找到，用于比较primary key和unique索引，只匹配一行数据，很快</p></li><li><p>eq_ref：唯一性索引扫描，对每个索引建，表中只有一条记录与之匹配</p><ul><li><div class="code-wrapper"><pre><code class="language-mysql">explain select * from t1 ,article where t1.id = article.id  # primary = primary<pre class="language-none"><code class="language-none">* ref：非唯一性索引扫描，返回匹配某个单独值的所有行，本质是一种索引访问。可能给找到多个匹配的行  *      &#96;&#96;&#96;mysql    explain select * from t10 where col2 &#x3D; 1 # col2 is an index</code></pre></div></code></pre></li></ul></li><li><p>range：只检索给定范围的行(between\in&lt; &gt;)，只需要开始索引的某一点，结束于另外一点，不用扫描全部索引</p></li><li><p>index：全索引扫描，只遍历索引树，因为索引文件通常比数据文件小、虽然all和index都是读全表，但index从索引中读，all从硬盘中读</p><ul><li><div class="code-wrapper"><pre><code class="language-mysql">explain select col2 from t10 ; # col2 is an index<pre class="language-none"><code class="language-none">  * all：扫描全表，例如(select t1.name from t1)* possible_keys: 显示**可能**应用在这张表中的索引  * 可能有possible_key &#x3D; null 但 key有值的情况* key：实际用的索引，如果查询中使用了覆盖索引，将会在key中出现  * 覆盖索引：select查询的字段，和建索引的复合索引的字段的个数和顺序吻合* key_len：索引中使用的字节数，在不损失精度的情况下，长度越短越好，ken_len显示的是索引字段的最大可能长度，并非实际使用长度。根据表定义得出，而不是  * 变长字段需要额外2字节，可空字段需要额外1字节* ref ：显示索引的哪一列引用了啥  * &#96;&#96;&#96;mysql    explain select * from t10,t11 where t10.col2 &#x3D; 1  and t10.col1 &#x3D; t11.col3; #col2-- index   col1 -- index  col3 --any</code></pre></div></code></pre></li></ul></li></ul></li><li><p>row：根据表统计信息以及索引选用情况，大致估算处找到所需要记录所需要读取的行数</p></li><li><p>extra：其他信息</p><ul><li>using filesort：说明mysql对数据使用外部的索引排序，而不是按照表内的索引进行读取。无法通过索引完成的排序称作“文件排序” ---- 不太好的情况</li><li>using temporary：使用了临时表保存中间结果（对查询结果进行排序时）  — 非常不好的情况</li><li>using index：相应的 select 操作使用了覆盖索引，避免了表的数据行，效率高。<ul><li>同时出现using where，表明索引被用来执行索引键值的查找</li><li>没有同时出现using  where，表明索引用来读取数据而并非执行查找动作</li><li>索引覆盖：select的数据列只用从索引中就能够取得，不必读取数据行。</li></ul></li><li>using where：使用where过滤</li><li>using join buffer ：使用连接缓存</li><li>impossible where：where的句子值总是false</li><li>select tables optimized away</li><li>distinct：优化distinct，在找到第一匹配的元祖后停止找同样值的动作</li></ul></li></ul><p><strong>哪些情况不需要索引？</strong></p><ul><li>表记录太少</li><li>经常增删改的表</li><li>数据重复且分布平均的表字段</li></ul><h4 id="个人测试">个人测试</h4><p>这里我用</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create table t1(    id int primary key not null ,    name varchar(20),    sex char(1) default &#39;男&#39;,    rand_id int);# proceduredelimiter $$create procedure init_tens(in num int)begin    declare cols int default 1;    declare scope int default num*10;    declare isex char default &#39;男&#39;;    loop_x1: while cols &lt; num        do        set cols &#x3D; cols + 1;        if(cols % 2 &#x3D; 0)        then             set isex &#x3D; &#39;女&#39;;        else             set isex &#x3D; &#39;男&#39;;        end if;        insert into pp_test.t1 values (cols,                               concat(&#39;id:&#39;,cols),                                isex,                               round(rand()*scope)                              );        end while loop_x1;end $$</code></pre></div><p>这样的一张表去测试速度，当然call这个procedure num = 500 000时，机器跑了接近6min,数据容量在20MB（10000条跑7s,差不多）</p><p>通过primary key 去query，感觉时间上都是ms级别，没啥差别<br>但通过rand_id去query时，时间就非常的慢，至少是20倍</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211021233658608.png" alt="image-20211021233658608"></p><h4 id="学习测试">学习测试</h4><h5 id="单表">单表</h5><p>测试用例</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create table if not exists article(    id int(10) unsigned  not null primary key auto_increment,    auther_id int unsigned not null,    category_id int not null ,    views int not null ,    comments int not null ,    title varbinary(255) not null ,    content text not null);explain select id , auther_id from article where category_id &#x3D; 1 and comments &gt;1 order by  views desc limit 1;# 如何避免出现filesort 和 all的type？</code></pre></div><ol><li><p>where后要建</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create index idx_article_ccv on article (category_id,comments,views)create index idx_article_ccv on article (category_id,comments,views)# 解决全表扫描问题</code></pre></div></li><li><div class="code-wrapper"><pre><code class="language-mysql">explain select id , auther_id from article where category_id = 1 and comments = 1 order by  views desc limit 1;#  comments &gt; 1 的效率完全不一样 ----&gt; 索引失效<pre class="language-none"><code class="language-none">   ##### 两表&#96;&#96;&#96;mysqlcreate table class(    id int not null auto_increment,    card int not null ,    primary key (id));create table book(    bookid int not null auto_increment,    card int not null ,    primary key (bookid));explain select * from class left join book on class.card &#x3D; book.card</code></pre></div></code></pre></li></ol><p><strong>有主外键后，索引在哪张表建？</strong></p><p>左右连接的判断就是，哪张表是全的，就不管他，只关心残缺表的查询</p><p><strong>多表</strong></p><h4 id="索引失效">索引失效</h4><ol><li><strong>最佳左前缀法则</strong></li></ol><p>建立索引的第一个index必须有，才能够使用索引查询</p><ul><li><strong>全值匹配最佳</strong></li><li><strong>中间兄弟不能断</strong>，断了则只能使用到断之前的那一个（类似阶梯）</li></ul><ol start="2"><li><p>在索引列上左任何操作（计算、函数、类型转换），会导致<strong>索引失效</strong>而转向全表扫描</p></li><li><p>存储引擎不能使用索引中范围条件右边的列</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">explain select * from t20 where col3 &#x3D; 1 and col4 &#x3D; 2 and ool5 &#x3D; 10;# ref &#x3D; const const constexplain select * from t20 where col3 &#x3D; 1 and col4 &gt; 2 and ool5 &#x3D; 10;# ref &#x3D; null# 到了范围查找时，就用不上后面的index了</code></pre></div></li><li><p>尽量使用覆盖索引（只访问索引的查询— 查询列和索引列一致  ----&gt; 产生using index），避免select *</p></li><li><p>使用!= &lt; &gt;无法使用索引 — 导致全局扫描</p><ol><li>但manjaro – mariadb10.6.4 是不会失效的</li></ol></li><li><p>is null is not null 无法使用索引</p><ol><li>同上，未失效</li></ol></li><li><p>like以通配符%开头，mysql索引失效</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">explain select * from t20 where name like &#39;%123&#39;;# type and possible key is nullexplain select * from t20 where name like &#39;123%&#39;;# type : range ,key is using# 如何解决 %...% 情况</code></pre></div><p><strong>覆盖索引</strong></p><p>加一个或多个其他列的，这时只要查询列中仅有主键和这些键值的组合，就能够使得type变为index，且使用到key(其他的索引是不行的)</p></li><li><p><strong>字符串不加单引号会使得索引失效</strong></p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">explain select col3 from t20 where name &#x3D; 200;# mysql内部自动将200隐式转化为字符串类型# 使得possible_key !&#x3D; null 但key为null type 为null</code></pre></div></li><li><p>or导致索引失效</p><p>possible_key != null  但 key为null</p></li></ol><h4 id="show-profile">show profile</h4><h4 id="小表驱动大表">小表驱动大表</h4><p>原由：数据库的连接和释放耗时</p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from A where id in (select id from b)# &#x3D; 先去select id from b# 如果B的数据集 &lt; A的数据集，则in 优于 exists，反之则exist优于inselect * from A where exists (select 1 from B where B.id &#x3D; A.id)# 注意 上面的两句语句语义相同，这里exists含义不能从where直接true或者false去理解</code></pre></div><h4 id="order-by排序">order by排序</h4><p>Mysql支持两种方式排序，filesort和index，尽量用index方式排序，效率高（尽可能在索引列上排序）</p><ul><li>索引最左前缀</li><li>where自居和order by自居条件咧组合满足最左前缀</li></ul><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from t1 where col1 &gt; 20 order by col1; # 会产生filesort吗(col1 is index)select * from t1 where col1 &gt; 20 order by col2; #col1-col2 is co-index  --- using filesortselect * from t1 order by col1 asc,col2 desc; # col1-col2 is co-index  --- index默认是asc顺序</code></pre></div><p>如果不在索引列上，filesort有两种排序算法：</p><ul><li>双路排序：4.1之前： 两次扫描磁盘 。读取行指针和orderby列，进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据（也即：从磁盘读取排序字段，在buffer进行排序，再从磁盘读取其他字段）</li><li>单路排序：4.1之后，磁盘读取查询需要的所有列，按order by在buffer进行排序，然后扫描排序后的列表输出。<ul><li>效率快，避免二次读取数据</li><li>把随机IO变成顺序IO</li><li>占用更多空间，因为每一行都保存在内存中</li><li>存在问题：如果读取的buffer的容量小于读的容量，就会导致每次只能取到buffer的大小，排完一次，创建临时文件，再排一次，还要进行多个临时文件的多路合并<ul><li>增大sore_buffer_size</li><li>增大 max_length_for_sort_data</li><li>避免select *</li></ul></li></ul></li></ul><h3 id="补充">补充</h3><p>一个节点的大小 = 一页大小 ，一页大小默认是16K</p><h2 id="原理-v4">原理</h2><h3 id="InnoDB">InnoDB</h3><p>主要优势：</p><ul><li>遵循ACID模型，有事务控制</li><li>行锁</li><li>有聚集索引的主键索引</li><li>支持外键约束</li><li>崩溃后修复：InnoDB崩溃回复后会自动完成崩溃之前提交的更改，病撤销正在进行但并未提交的更改</li><li>维护自己的缓冲池，在住内存缓存表和索引数据。经常使用的数据直接从内存处理</li><li>允许对同意表进行并发读写访问 ，缓存更改的数据以简化磁盘IO</li><li>自适应哈希索引 — 从表中重复访问相应的行</li></ul><h4 id="架构">架构</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211023214352512.png" alt="image-20211023214352512"></p><h4 id="内存结构">内存结构</h4><h5 id="缓冲池">缓冲池</h5><p>主内存中的一个区域，用于在InnoDB访问时缓存表和索引数据，允许直接从内存访问经常使用的数据</p><p>为了提高大量读取操作的效率，缓冲池被划分可能包含多行的页面<br>为了缓存管理的效率，缓冲池被实现为页面的链表</p><p><strong>LRU算法</strong></p><p>当需要空间将新页面加入到缓冲池时，最少使用的页面将会被逐出，并且新页面会加入到列表<strong>中间</strong><br>列表划分为两个子列表</p><ul><li>最近访问的新的 年轻的页面的 子列表</li><li>最近访问的久页面的子列表（可能被驱逐的侯选页）</li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211023214750401.png" alt="image-20211023214750401"></p><ul><li>默认缓冲池的3/8为旧的子列表</li><li>列表的重点是新的子列表尾部和旧子列表的头部相交之处</li><li>页面插入到缓冲池时，是插入到列表中点</li><li>访问旧子页面中的列表将使得它变young，移动到新子列表的头部<ul><li>如果页面是因为用户启动的操作需要它而被读取，则第一次访问会立即发生，并且页面会变年轻。</li><li>如果页面是由于<strong>预读</strong>操作而读取的，则第一次访问不会立即发生，并且在页面被逐出之前可能根本不会发生。</li></ul></li></ul><p>通过show engine innodb status 查看缓冲池的参数指标</p><h5 id="Change-Buffer">Change Buffer</h5><p>更改缓冲是一种特殊的数据结构，当二级缓存页不在缓冲池中时，它会缓存对二级索引页的更改</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211023215943712.png" alt="image-20211023215943712"></p><h5 id="自适应哈希索引">自适应哈希索引</h5><p>通过innodb_adaptive_hash_index变量启动。根据观察到的搜索模式，使用索引建的前缀构建哈希索引（将索引值转化成指针）</p><h4 id="磁盘结构">磁盘结构</h4><h5 id="索引-v3">索引</h5><p><strong>聚集索引</strong>：与主键同义，存储行数据</p><ul><li>在<code>PRIMARY KEY</code>表上定义 a时， <code>InnoDB</code>将其用作聚集索引。应该为每个表定义一个主键。如果没有逻辑唯一且非空的列或列集使用主键，请添加自动增量列。自动递增列值是唯一的，并在插入新行时自动添加。</li><li>如果您没有<code>PRIMARY KEY</code>为表定义 a ，则<code>InnoDB</code>使用第一个 <code>UNIQUE</code>索引，并将所有键列定义为<code>NOT NULL</code>聚集索引。</li><li>如果表没有索引<code>PRIMARY KEY</code>或没有合适的 <code>UNIQUE</code>索引，则<code>InnoDB</code> 生成以<code>GEN_CLUST_INDEX</code>包含行 ID 值的合成列命名的隐藏聚集索引 。行按<code>InnoDB</code>分配的行 ID 排序。行 ID 是一个 6 字节的字段，随着插入新行而单调增加。因此，按行 ID 排序的行在物理上是按插入顺序排列的。</li></ul><p>在 <code>InnoDB</code>中，<strong>二级索引中的每条记录都包含该行的主键列</strong>，以及为二级索引指定的列。</p><h4 id="文件结构">文件结构</h4><p>查看页的大小 innodb_page_size，多少页就是ibd大小/ page_size .</p><h5 id="frm">frm</h5><p>表定义文件</p><h5 id="ibd">ibd</h5><p>索引和数据文件</p><h2 id="一些问题-v4">一些问题</h2><h3 id="Mysql和Mariadb的区别">Mysql和Mariadb的区别</h3><ul><li>MyISam：<ul><li><strong>不支持外键</strong></li><li><strong>不支持事务</strong></li><li><strong>非聚集索引</strong></li><li>支持FULLTEXT类型的全文索引</li><li><strong>最小粒度锁是表锁</strong></li><li>存储结构<ul><li>.frm文件：表的定义</li><li>.MYD：数据文件</li><li>.MYI：索引文件</li></ul></li></ul></li><li>Innodb：<ul><li><strong>支持外键</strong></li><li><strong>支持事务</strong>（Mysql默认引擎为InnoDB的重要原因）</li><li><strong>聚集索引</strong></li><li>不支持FULLTEXT类型的全文索引</li><li><strong>最小的锁粒度是行锁</strong></li><li>存储结构<ul><li>Frm文件：表的定义文件</li><li>Ibd文件：数据和索引存储文件，数据以主键存储，真正的数据在叶子节点中</li></ul></li></ul></li></ul><h3 id="什么是聚簇索引和非聚簇索引">什么是聚簇索引和非聚簇索引</h3><ul><li><p>聚簇索引：数据存储和索引放在一个文件，索引结构的叶子节点保存了行数据（索引！项的顺序和表中记录的物理顺序一致）</p><ul><li><p>默认是主键</p></li><li><p>如果么有定义主键，InnoDB会选择一个唯一的非空索引代替</p></li><li><p>如果没有这样的索引，将会在内部生成一个名为GEN_CLUST_INDEX的隐式聚簇索引</p></li><li><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211023211744223.png" alt="image-20211023211744223"></p><p>注意辅助索引存储的是主键的key</p></li></ul></li><li><p>非聚簇索引： 数据与索引分开存储，表数据存储顺序与索引顺序无关</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211023211734818.png" alt="image-20211023211734818"></p></li></ul><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">explain select * from t20 where col3 &#x3D; 1 and col4 &gt; 0 and ool5 &#x3D; 1;# myisam中 type为system 但innodb却为range？(idx_col_345)</code></pre></div><p><strong>为啥Mysql放弃Full Join？</strong></p><p><strong>order by怎么实现排序的？</strong></p><p><strong>Mysql中数据是如何加密的</strong></p><p><strong>复合索引和最左原则</strong></p><ul><li>单一索引：新建索引的语句只实施在一列上</li><li>复合索引：多个列上建立索引<ul><li>数据库操作期间开销小，能代替多个单一索引</li><li>何时使用？根据<strong>where条件</strong>后多字段</li></ul></li><li>最左原则：复合索引的第一个字段必须出现在查询语句中，这样索引才能够被使用（类似查字典）</li></ul><p><strong>sq92 和 99的连接写法有实际差别吗？</strong></p><p><strong>Mysql索引为啥选择B+树？</strong></p><ul><li>哈希索引：很快，但无序—不能进行范围查找、排序操作，不能通过key去做主键。还可能存在哈希碰撞问题</li><li>AVL：树的高度 — 读取磁盘次数增加，可能有回表的现象（查找范围区间）</li><li>B和B+树前面有说：主要还是降低了树的高度</li></ul><h3 id="Mysq索引为啥会失效">Mysq索引为啥会失效</h3><p>主要是联合索引</p><p>注意联合索引中的值<strong>顺序存储</strong>的方式 ----- &gt; 联合索引如何排序？</p><ul><li>对左前缀原则，为什么没有第一个索引值就会失效呢？<ul><li>无法通过第一个值去定位索引所在的位置呀 ---- 由联合索引的<strong>顺序排序</strong>导致的（类似%abc）</li></ul></li><li>对范围查找，为什么之后索引的就会失效呢？<ul><li>对符合条件的情况，叶子节点和非叶子节点可能是无序的 — &gt; 不能通过二分查找去找之后索引的数据（不懂就画图）</li></ul></li></ul><h3 id="count-与count-1-区别">count(*)与count(1)区别</h3><p>结论: count(*) = count(1) &gt; count(primary key) &gt; count(field)</p><p>首先理解count的作用: 统计符合查询条件的记录中，参数<strong>不为NULL</strong>的记录的个数</p><p>当count(primary key)时：</p><ul><li>如果表中索引只有主键：InnoDB循环遍历聚簇索引，如果id值不为null(也不可能为null)，就将count变量+1；</li><li>如果表中还有二级索引，则InnoDB循环遍历的对象就不是聚簇索引，而是二级索引(<strong>因为相同数量的二级索引记录闭聚簇索引记录占用更少的存储空间，遍历的IO成本比聚簇索引更小</strong>)</li></ul><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">mysql&gt; explain select count(id) from t1;+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+|  1 | SIMPLE      | t1    | NULL       | index | NULL          | idx_age | 5       | NULL |    7 |   100.00 | Using index |+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+# age为二级索引</code></pre></div><p>当count(1)时同理，但count(1)比count(primary key)少一个步骤，不需要读取记录中的字段值，所以<strong>count(1)执行效率比count(primary key)更高</strong></p><p>count(*) == count(0) 在性能方面等于 count(1)</p><p>count(field) 效率是最差的，因为其会采用全表扫描的方式来计数</p><p><strong>InnoDB与MyISAM count的区别</strong></p><p>没有任何查询条件下的count(*) MyISAM查询速度快于InnoDB</p><p>这是因为MyISAM数据表中都有一个meta信息row_count维护表中所有记录数，并由表锁保证一致性，执行count(*)只需要O(1)的复杂度即可</p><p>而InnoDB支持事务的，由于同一时刻的多个事务查询，基于MVCC的原因，所以InnoDB不可能维护多个row_count来返回不同的行数，所以<strong>InnoDB会在执行count函数时进行遍历</strong></p><h3 id="使用like-“-x”一定造成索引失效吗">使用like “%x”一定造成索引失效吗</h3><p>考虑以下场景，一张表，只有主键id和索引name，此时执行命令 select * from t2 where name like “xxx%”，是否是全表扫描?</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">mysql&gt; explain select * from t2 where name like &quot;xxx%&quot;;+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+--------------------------+| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref  | rows | filtered | Extra                    |+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+--------------------------+|  1 | SIMPLE      | t2    | NULL       | index | idx_name      | idx_name | 43      | NULL |    1 |   100.00 | Using where; Using index |+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+--------------------------+</code></pre></div><p>可以看到几个特点：</p><ul><li>type不是all而是index，表明读的是整个索引树</li><li>possible_keys为二级索引name，而不是主键id。</li><li>有using index 表明该select语句使用到覆盖索引，即select的数据列<strong>只用从索引中就能够取得，不必读取数据行</strong>。</li></ul><blockquote><p>所以为什么这里全扫描二级索引树而不扫描主键所在的聚簇索引树呢？</p><p>因为二级索引树的记录很少，只有索引值 + 主键值，而聚簇索引记录东西多，比如事务id、MVCC回滚指针等，遍历聚簇索引树IO花销大</p></blockquote><h3 id="MySQL-ACID如何保证的">MySQL ACID如何保证的</h3><ul><li>原子性：undo log</li><li>隔离性：MVCC</li><li>持久性：缓冲cache+redo log</li><li>一致性：前三者</li></ul><h2 id="一些链接">一些链接</h2><p><a href="https://blog.csdn.net/ThinkWon/article/details/104778621?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163470018116780264064360%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163470018116780264064360&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-104778621.pc_search_ecpm_flag&amp;utm_term=Mysql%E7%B4%A2%E5%BC%95&amp;spm=1018.2226.3001.4187">Mysql面试题</a></p><h2 id="常用语法">常用语法</h2><p><strong>查看某个数据库的大小占用</strong></p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select    table_schema as &#39;数据库&#39;,    sum(table_rows) as &#39;记录数&#39;,    sum(truncate(data_length&#x2F;1024&#x2F;1024, 2)) as &#39;数据容量(MB)&#39;,    sum(truncate(index_length&#x2F;1024&#x2F;1024, 2)) as &#39;索引容量(MB)&#39;from information_schema.tableswhere table_schema&#x3D;&#39;pp_test&#39;;</code></pre></div><p><strong>查看某表的所有索引</strong></p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">show index from article</code></pre></div><p><strong>查看数据库的表状态</strong></p><div class="code-wrapper"><pre class="language-mysql" data-language="mysql"><code class="language-mysql">show table status from pp_test# 查看表中所有列的字符集show full columns from t22;</code></pre></div><p>f</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Study</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode题库</title>
    <link href="/2019/01/22/LeetCode%E5%88%B7%E9%A2%98/"/>
    <url>/2019/01/22/LeetCode%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1>LeetCode 题库</h1><link href="/css/code-tag-label.css" rel="stylesheet" type="text/css"/><p style="display:inline;">&#x1F30D  当前题库题目数: &nbsp<p id="issue-count" style="display:inline;"></p></p><!-- toc --><span id="more"></span><div class="echart-block" style="max-height:500px"><center>    <img id="chart-block-img" src="/img/loading.gif" style="width: 400px;height:400px;margin-top:50px;display=inline-block;">    <div id="leetcode-type-chart" style="width: 600px;height:500px;display=none;"></div></center></div><p><strong>WANTED</strong> 📜 ：</p><ul><li><p><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">LeetCode167 两数之和 II - 输入有序数组</a></p></li><li><p>LeetCode 28 字符串匹配</p></li><li><p><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/">LeetCode 1004. 最大连续1的个数 III</a></p></li><li><p><a href="https://leetcode-cn.com/problems/longest-repeating-character-replacement/">LeetCode 424. 替换后的最长重复字符</a></p></li></ul><h2 id="JZ-03-两数相加-⭐">JZ-03. 两数相加 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-hash">Hash</div><div class="code-tag-label code-tag-label-math">Replace</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210308090153998.png" alt="image-20210308090153998"></p><h3 id="思考：">思考：</h3><p>未排序、有重复数字、找出的是任意的重复数字、所有数字大小都在0—n-1的范围内、输出的是重复的那个数字</p><h3 id="1-基于哈希表">1. 基于哈希表</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210308092439462.png" alt="image-20210308092439462"></p><p>时间复杂度 O(N)  空间复杂度  O(N)</p><h3 id="2-原地置换-nb">2. 原地置换  nb</h3><p>这里确实 应该多看题目给的数字范围在0–n-1思考，这是解这道题的关键，之前的哈希表是没有用到这个条件的</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> temp<span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre></div><p>理解这里的思想主要是自己想一个数组一步步去进行    有点桶排序的感觉？</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210308124958004.png" alt="image-20210308124958004"></p><p>这里最后发现问题的关键是   n-1范围内， 索引为i对应的位置上肯定是 i ，然后去判断时 发现重复的元素，肯定是在他的值对应的索引上去找的，如果有这个值，则找到了，没有，则说明还未填上，则填上。</p><p><span style='color: #00BFFF;font-size:24px'>这里主要是还是要掌握桶排序的思想，先去思考能不能通过O  N的方式解决问题</span></p><h2 id="JZ-04-二维数组中的查找-⭐⭐">JZ-04. 二维数组中的查找 ⭐⭐</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210310083059606.png" alt="image-20210310083059606"></p><h3 id="观察：">观察：</h3><p>每行递增、每列递增</p><h3 id="1-自己想的矩阵分割法">1. 自己想的矩阵分割法</h3><h3 id="2-翻转矩阵-线性搜索">2.  翻转矩阵 / 线性搜索</h3><p>​矩阵的右上角开始</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> j <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>num<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>num<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h2 id="JZ-10-青蛙跳台阶-⭐">JZ-10. 青蛙跳台阶 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-dp">DP</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210315090449362.png" alt="image-20210315090449362"></p><h3 id="思考">思考</h3><p>就是拼砖头的递归思想</p><p>返回格式  ()+1</p><h3 id="1-递归（超时）">1. 递归（超时）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>   <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token function">getMax</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">getMax</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre></div><p>递归的时间复杂度是On*n 空间复杂度 On 所以肯定超时了</p><h3 id="2-动态规划">2.  动态规划</h3><p>典型的斐波那契数列问题，艹,就是一个三个缓存数进行斐波那契数列的运算</p><p><strong>为什么是斐波那契？</strong></p><p><strong>以后看算法题的时候，先看其通项结构</strong></p><p>f(n) = f(n-1) + f(n-2)</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   sum <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000000007</span><span class="token punctuation">;</span>   a <span class="token operator">=</span> b<span class="token punctuation">;</span>   b <span class="token operator">=</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span></code></pre></div><p>时间复杂度 On 空间复杂度 O1</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210315092525503.png" alt="image-20210315092525503"></p><h2 id="JZ-14-I-剪绳子-⭐⭐">JZ-14 -I 剪绳子 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-math">Formula</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210330163524643.png" alt="image-20210330163524643"></p><h3 id="思考：-v2">思考：</h3><p>动态规划、通项式、贪心算法？</p><p>后来发现在求On的时候有复杂的情况，就放弃了，应该是数学方面的问题，不应该暴力迭代</p><h3 id="O-1">O (1):</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210330163659124.png" alt="image-20210330163659124"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210330163712589.png" alt="image-20210330163712589"></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>作者：jyd链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>jian<span class="token operator">-</span>sheng<span class="token operator">-</span>zi<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>mian<span class="token operator">-</span>shi<span class="token operator">-</span>ti<span class="token operator">-</span><span class="token number">14</span><span class="token operator">-</span>i<span class="token operator">-</span>jian<span class="token operator">-</span>sheng<span class="token operator">-</span>zi<span class="token operator">-</span>tan<span class="token operator">-</span>xin<span class="token operator">-</span>si<span class="token operator">-</span>xiang<span class="token operator">-</span>by<span class="token operator">/</span></code></pre></div><h2 id="JZ-22-链表中倒数第k个节点-⭐">JZ-22. 链表中倒数第k个节点 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-dfs">DFS</div><div class="code-tag-label code-tag-label-foreach">TwinPointer</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210315222551714.png" alt="image-20210315222551714"></p><h3 id="思考-v2">思考</h3><p>正常情况下，O n+n？</p><h3 id="1-递归寻找？"><s>1. 递归寻找？</s></h3><p>我最开始准备是 getNode(node.next)先往下去找，找到next为null时再向上返回，但是这时候如何去减k值我就不知道了</p><p>这个最后在第三点中得到解决👍</p><h3 id="2-妙妙双指针">2. 妙妙双指针</h3><p>让前指针先走k步，然后后指针跟随者前指针一起走</p><p>核心的点是在当pre为null时，也就是走到头了，这时候former与pre差k步，也就是倒数第k个元素。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ListNode</span> premer <span class="token operator">=</span> head<span class="token punctuation">;</span>   <span class="token class-name">ListNode</span> former <span class="token operator">=</span> head<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              premer <span class="token operator">=</span> premer<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>premer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       premer <span class="token operator">=</span> premer<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       former <span class="token operator">=</span> former<span class="token punctuation">.</span>next<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> former<span class="token punctuation">;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210315225759099.png" alt="image-20210315225759099"></p><p>时间复杂度O n 空间复杂度 O2</p><p><strong>如果这种问题递归不行的话，就想想双指针会怎么做吧</strong></p><h3 id="3-回溯">3. 回溯</h3><p>📆 2022.10.30 回顾想的解法，主要是解决两个问题</p><ol><li>回溯时倒数第k个 如何判断，如何判断当前是倒数第几个元素</li><li>回溯时如何既有当前元素的逆序数，又有当前元素的指针？</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">method</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Object[0] 当前结点的逆序数(m == k 时返回的是结点的data值)</span> <span class="token comment">// Object[1] 当前元素：只有逆序数与k相等时才不为空</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> object <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>object<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>head<span class="token punctuation">.</span>val<span class="token punctuation">,</span> head<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> object<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>m<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>这里需要注意的是，回溯时并不是只有m==k后就不回溯了，而是之后一直到头结点都有回溯到过程，所以在这个过程中要灵活处理返回到Object[] 确保它就为m==k时的那个值</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20221030195355851.png" alt="image-20221030195355851"></p><p>递归？</p><h2 id="JZ-24-反转链表-⭐">JZ-24. 反转链表 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-recursion">Recursion</div><div class="code-tag-label code-tag-label-foreach">TwinPointer</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210308212250360.png" alt="image-20210308212250360"></p><h3 id="思考-v3">思考</h3><p>似乎没什么，注意  null</p><h3 id="1-自己写的-pre-指针代码">1. 自己写的 pre 指针代码</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> prer<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pre<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> <span class="token class-name">Lastpre</span><span class="token punctuation">;</span>              <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pre <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token class-name">Lastpre</span> <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token class-name">Lastpre</span> <span class="token operator">=</span> <span class="token class-name">Lastpre</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            prer <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token class-name">Lastpre</span><span class="token punctuation">.</span>next <span class="token operator">=</span> prer<span class="token punctuation">;</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> pre<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>prer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span></code></pre></div><p>​写了很久，结果太拉了，自己都不想分析了</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210308224413999.png" alt="image-20210308224413999"></p><h3 id="2-双指针">2. 双指针</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ListNode</span> cur <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ListNode</span> pre <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token class-name">ListNode</span> t <span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    t <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>    cur <span class="token operator">=</span> pre<span class="token punctuation">;</span>  <span class="token comment">// ①标记</span>    pre <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> cur<span class="token punctuation">;</span></code></pre></div><p>这里主要还是自己以前的老问题，就是标记1处，这里就理解为是单纯的赋值就行了</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210308224939792.png" alt="image-20210308224939792"></p><h3 id="3-递归">3. 递归</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ListNode</span> ret <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment">// 5.next = head;</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//此处置空的时候一定要注意关注点是ret 而不是head...</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span></code></pre></div><p>递归理解起来有一定的难度</p><p>特别是注意ret 和 head的包含关系, 如果理解不了的时候就报head.next.next 用另一个遍历替换  head.next = ret 集中关注在ret上，因为递归，所以内存消耗肯定很多啦</p><p><span style='color:#3CB371;font-size:20px'>这种递归给我的启示是以后分不清next的时候或者等价关系，就用中间变量去解耦，或者用已知指针替换，这样会更好理解一些</span></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210308232940772.png" alt="image-20210308232940772"></p><h2 id="Jz-47-礼物的最大价值-⭐⭐">Jz-47. 礼物的最大价值 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-dp">DP</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210315082753010.png" alt="image-20210315082753010"></p><h3 id="1-递归">1. 递归</h3><h3 id="2-动态规划-v2">2. 动态规划</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                      matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                      matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> matrix<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                      matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> matrix<span class="token punctuation">[</span>matrix<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度 O m*n 空间复杂度 O 1</p><p>回顾动态规划的思想，这种问题还是很典型，这种动态规划的思想会破坏原有矩阵</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210315090005261.png" alt="image-20210315090005261"></p><p>继续优化</p><p>对矩阵很大的情况，很少有可能会在第一行或者第一列进行加，所以这个时候可以先进行初始化。然后相当于从[1] [1]开始</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 初始化第一行</span>         grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 初始化第一列</span>         grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> grid<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>              grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grid<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> grid<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></div><p>自己对动态规划还是不熟悉</p><h2 id="Jz-48-最长的不含重复字符的子字符串-⭐⭐">Jz-48. 最长的不含重复字符的子字符串 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-dp">DP</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210318165801690.png" alt="image-20210318165801690"></p><h3 id="思考-v4">思考</h3><p>平常解 时间复杂度</p><p>关键是每一次index到一个数都需要和当前字符串的字母进行对比，能避免吗？实质是相同字母的最大间距，也可能不是。</p><h3 id="1-动态规划">1. 动态规划</h3><h2 id="JZ-50-第一个只出现一次的字符⭐">JZ-50. 第一个只出现一次的字符⭐</h2><div class="code-tag-time">2023/3/8 15:32:00</div><div class="code-tag-label code-tag-label-hash">Hash</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230308153154938.png" alt=""></p><h3 id="1-哈希表-遍历">1. 哈希表+遍历</h3><p>先按序遍历一次，统计次数，然后再按序遍历一次，统计第一个出现次数为1的字符</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Integer</span> nums <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">++</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> c<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token char">' '</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>注意，这里map的value也可也设置为，只出现一次则为索引值，出现多次则为-1，最终遍历判断</p><h3 id="2-哈希表-队列">2. 哈希表+队列</h3><p>主要按FIFO顺序存储出现的元素，那最后肯定希望的是从队列中拿出一个队头元素(首次出现)就行了，不用再遍历一次，因此问题就变成了当队头元素出现两次及以上时，如何将队头元素出队，所以队列中要判断当前元素的出现次数。</p><ul><li>当元素第一次出现时，先添加进Map中统计并且插入队列中</li><li>当元素多次出现时，先将统计的值置为-1(表示多次出现),然后再判断队头以及之后的元素是否是单次出现的，如果是的话则需要出队</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 关键代码, 比较当前元素是否是多次出现的</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token char">' '</span><span class="token operator">:</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="JZ-54-二叉搜索树第k大节点-⭐">JZ-54. 二叉搜索树第k大节点 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">InOrder Traversal</div><div class="code-tag-label code-tag-label-tree">Tree</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210405161703797.png" alt="image-20210405161703797"></p><h3 id="思考-v5">思考</h3><p>递归  ？</p><h3 id="中序遍历">中序遍历</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthLargest</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        m <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token function">getMax</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">getMax</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">getMax</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度 On  空间复杂度 O1</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210405164353990.png" alt="image-20210405164353990"></p><p>这道题主要一直在纠结递归的返回参数问题，思考的时候没有思考深入， 没有想清楚本质，以后遇到这种问题还是要多想一哈，不过感觉递归还是个人的弱点…</p><p><strong>涉及到二叉搜索树，就要想清楚他的性质，中序遍历是从小到大的排序数组</strong></p><h2 id="JZ-56-数组中数字出现的次数-I-⭐⭐">JZ-56 数组中数字出现的次数 I ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-hash">Hash</div><div class="code-tag-label code-tag-label-math">XOR</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210402213300125.png" alt="image-20210402213300125"></p><h3 id="思考-v6">思考</h3><p>On 时间复杂度 O1 空间复杂度</p><p>哈希表肯定用不了  取模算不了    动态规划算不了    双指针     数组肯定是偶数长度的</p><p>两次遍历？ 排序？</p><h3 id="1-My-hashTable">1. My hashTable</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">singleNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>max<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                hash<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                hash<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span></code></pre></div><p>居然还不错？</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210402220633539.png" alt="image-20210402220633539"></p><h3 id="2-My-HashMap">2. My HashMap</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">singleNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>               hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                   result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> result<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210402221317356.png" alt="image-20210402221317356"></p><h3 id="3-异或大法">3. 异或大法</h3><p>理由： 相同的两个数字异或结果肯定为 0 ，且<strong>异或具有交换性</strong></p><p>分组：找到不同的a,b不同的位数 进行分组</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">singleNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         total <span class="token operator">^=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> total<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mask <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> num<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a <span class="token operator">^=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            b <span class="token operator">^=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210403095612566.png" alt="image-20210403095612566"></p><h2 id="Jz-63-股票的最大利润-⭐⭐">Jz-63. 股票的最大利润 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-dp">DP</div><div class="code-tag-label code-tag-label-foreach">TwinPointer</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210316215457375.png" alt="image-20210316215457375"></p><h3 id="思考-v7">思考</h3><p>双指针？排序？</p><p>前后遍历  O 2N</p><h3 id="1-双指针遍历">1. 双指针遍历</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> maxInterval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> preIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lasIndex <span class="token operator">=</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>preIndex <span class="token operator">!=</span> lasIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>lasIndex <span class="token operator">!=</span> preIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>lasIndex<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span> <span class="token operator">></span>maxInterval<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                maxInterval <span class="token operator">=</span> prices<span class="token punctuation">[</span>lasIndex<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            lasIndex <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        preIndex <span class="token operator">++</span><span class="token punctuation">;</span>        lasIndex <span class="token operator">=</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> maxInterval<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度 On*n 空间复杂度 O1</p><h3 id="2-动态规划-v3">2. 动态规划</h3><p>核心思想</p><p>创建一个数组 dp[i]代表的是i天卖出时的最大收益</p><p>又可等于 第i-1天的最大收益 或者 第i天价格 - 前i-1天价格的最低价</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> minValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>       <span class="token keyword">int</span> profit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           minValue <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minValue<span class="token punctuation">,</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           profit <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>profit<span class="token punctuation">,</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minValue<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> profit<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210316225500458.png" alt="image-20210316225500458"></p><p>时间复杂度On 空间复杂度O1</p><p>还是，多去找通项公式，不一定是符号表达的，能用语言刻画的一样可以</p><h2 id="JD-17-09-第K个数-⭐⭐">JD-17.09. 第K个数 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-dp">DP</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210428183546466.png" alt="image-20210428183546466"></p><h3 id="思考-v8">思考</h3><p>递归、动态规划 无果</p><h3 id="1-动态规划-v2">1. 动态规划</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getKthMagicNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> p3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>p5<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>p7<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       numList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           numList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>numList<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span>numList<span class="token punctuation">[</span>p5<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>numList<span class="token punctuation">[</span>p7<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>numList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>numList<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span> p3<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>numList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>numList<span class="token punctuation">[</span>p5<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span> p5<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>numList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>numList<span class="token punctuation">[</span>p7<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span> p7<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> numList<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210428183707107.png" alt="image-20210428183707107"></p><p>这是合并子序列问题，当这种可选择的，可分成不同数组的I问题，可以采用<strong>合并子序列方法</strong>，多索引判断</p><h2 id="面试-17-10-主要元素-⭐">面试-17.10. 主要元素 ⭐</h2><div class="code-tag-time">2022/11/14 11:05:00</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20221114110525822.png" alt="image-20221114110525822"></p><h3 id="思考-v9">思考</h3><ul><li>要求在On的时间复杂度内，肯定是一次遍历。最开始尝试用“最近出现最多次”的方法来统计，但最后发现不可行。但想不到其他的办法了</li></ul><h3 id="1-Boyer-Moore-投票算法">1. Boyer-Moore 投票算法</h3><p>自己想的“最近出现最多次”方法的原理与之基本相同，但关键点在于没有对候选元素进行再一次验证。也就是当面对[1,2,3]和 [3,2,3]的情况时想不到处理的对策，这也是自己算法的问题所在，只做了第一步却没有做第二步。</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cur_num <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 优化，如果出现size / 2 + 1次，则说明就是主元素</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">></span> numsSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> cur_num<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur_num <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// count为0时，即候选数不间断出现的次数与这之间出现其他不同的数的次数抵消，则替换候选数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cur_num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 验证候选数是否符合条件</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> cur_num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> count <span class="token operator">></span> numsSize <span class="token operator">/</span> <span class="token number">2</span><span class="token operator">?</span> cur_num <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div><blockquote><p>什么当数组中存在主要元素时，Boyer-Moore 投票算法可以确保得到主要元素？</p><p>LeetCode: Boyer-Moore投票算法中，遇到相同的数则将 count 加 1，遇到不同的数则将 count 减 1。根据主要元素的定义，<strong>主要元素的出现次数大于其他元素的出现次数之和</strong>，因此在遍历过程中，主要元素和其他元素两两抵消，最后一定剩下至少一个主要元素，此时candidate 为主要元素，且 count≥1。</p></blockquote><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20221114112209399.png" alt="image-20221114112209399"></p><h3 id="总结-v3">总结</h3><ul><li><strong>验证也是设计算法时一个重要的环节 ⚠️ ，再次遍历不会影响On的时间复杂度</strong></li></ul><h2 id="1-两数之和-⭐">1. 两数之和 ⭐</h2><div class="code-tag-time">2021/3/7 23:02:00</div><div class="code-tag-label code-tag-label-foreach">TwinPointer</div><div class="code-tag-label code-tag-label-hash">Hash</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307223505616.png" alt="image-20210307223505616"></p><p>先审题， 两个整数，返回数组下标，给出的数组不是排序的，返回的数组是排序的？</p><p>回过头才发现忽略的因素：  数组是否有相同元素？</p><h3 id="思路-v2">思路</h3><ol><li>二分？</li><li>排序后找？</li><li></li></ol><p>我的代码：</p><h3 id="1-双头指针">1.  双头指针</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">   <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token comment">//一个向前 一个向后，避免重复查找</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">></span>i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>               result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>               <span class="token keyword">return</span> result<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307224350988.png" alt="image-20210307224350988"></p><p>时间复杂度  O(N<sup>2</sup>)   空间复杂度 O(1)</p><h3 id="2-哈希表">2. 哈希表</h3><p>确实，最开始想到了郑老板出题的时候这个，只是怕放入map集合又会消耗一定的时间，哎…</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>j<span class="token punctuation">,</span>i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210307230039420.png" alt="image-20210307230039420"></p><p>时间复杂度 :  O(N)   空间复杂度 O(N) 哈希表的开销</p><p>这里由于哈希表 的get方法是 O(1)的开销，所以考虑哈希表的方式直接查找，精妙之处在与其索引key的灵活使用</p><h2 id="4-寻找两个正序数组的中位数-⭐⭐⭐">4. 寻找两个正序数组的中位数 ⭐⭐⭐</h2><div class="code-tag-time">2022/11/8 21:12:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20221108211139910.png" alt="image-20221108211139910"></p><h3 id="思路-v3">思路</h3><ul><li>暴力解法：将两个数组合二为一然后直接取中位数即可，时间、空间复杂度O(m + n)</li><li>基于数组是正序的来思考</li></ul><h3 id="1-双指针-未达标">1. 双指针 (未达标)</h3><p>并不需要得到整个数组再去用O1的时间找，只需要在定位到中位数，即哪个数在数组，也就是位于 (m + n) / 2 或者 (m + n) / 2与 (m + n) / 2 - 1的位置，在此之前数组都是正序排序的。所以只需要在两个数组中筛选出前(m + n) / 2个数即可。</p><p>代码不够优雅，有待改进。</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> nums1Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> nums2Size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j  <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>nums1Size <span class="token operator">+</span> nums2Size<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 用于保存(nums1Size + nums2Size) / 2的元素到另一个变量中</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">==</span> <span class="token punctuation">(</span>nums1Size <span class="token operator">+</span> nums2Size<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> nums1Size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> nums2Size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>  <span class="token comment">// 判断中位数是一个还是两个</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums1Size <span class="token operator">+</span> nums2Size<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度O(m + n)</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20221108211307933.png" alt="image-20221108211307933"></p><h3 id="2-二分查找">2. 二分查找</h3><p>可以思考一种在Olog时间复杂度内到方法，巧妙</p><h2 id="6-Z-字形变换⭐⭐">6. Z 字形变换⭐⭐</h2><div class="code-tag-time">2022/3/3 20:32:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-math">Formula</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220303191539454.png" alt="image-20220303191539454"></p><h3 id="审题">审题</h3><ul><li>Z字形排序主要针对列 numRow限定行数，多的行数可能会增加难度</li><li>可能的数据结构、数学公式？</li><li>分析：<ul><li>简单：先创建二维字符矩阵，然后根据填好的矩阵按照次序输出，但这样的空间复杂度高</li><li>进阶：按照规律直接划分一维的数组</li></ul></li><li>做后反思点：<ul><li>row不为1和n和为1和n的时候的特殊情况，一次存在2个点和只存在一个点</li></ul></li></ul><h3 id="1-暴力">1. 暴力</h3><p>先划分好二维字符矩阵，然后再按照Z字形排序依次填入矩阵中，最后从矩阵中依照行列顺序读就行了。</p><p>缺点：耗费O(numRow * actCol)的空间复杂度</p><h3 id="2-数学公式">2. 数学公式</h3><p>一维字符数组本来不用排到二维矩阵中就有的Z字形逻辑，逻辑上通过等差数列也可以得到</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 特殊情况判断，避免后面除法出现分母为0的情况</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> actCol <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>numRows <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> numRows<span class="token punctuation">;</span>        <span class="token keyword">int</span> curRow <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>curRow <span class="token operator">&lt;=</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curRow <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> curRow <span class="token operator">==</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> actCol<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>curRow <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>curRow <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                curRow<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>curRow <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>curRow <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> actCol<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>curRow <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>curRow<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>curRow <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>curRow<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>curRow <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>curRow <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                curRow<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220303202830051.png" alt="image-20220303202830051"></p><p>还不错！On的时间复杂度和空间复杂度，sb节省了一定的时间</p><h3 id="3-顺序遍历-分行存储-转">3. 顺序遍历 分行存储 (转)</h3><p>思路就是按照顺序遍历，通过索引flag区分到哪一行了，到Z字形转折点时就flag–，非常的巧妙。思路真的是非常的好想，为什么我开始没有想到这么好滴思路？感觉自己一下就跳过顺序遍历这种想法了，可能因为觉得分行存储不好做吧（但实际还是可以的）</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StringBuilder</span><span class="token punctuation">></span></span> rows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StringBuilder</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numRows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> rows<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            rows<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">==</span> numRows <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token operator">-</span> flag<span class="token punctuation">;</span>            i <span class="token operator">+=</span> flag<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> row <span class="token operator">:</span> rows<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：jyd</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/zigzag-conversion/solution/zzi-xing-bian-huan-by-jyd/</span></code></pre></div><p>但因为使用了多个SB，所以这里的空间占用率略高，还存在多个sb合并的合并的情况，所以时间复杂度也相对较高，但是思路确实是非常的清晰的。</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220303204028214.png" alt="image-20220303204028214"></p><h3 id="反思">反思</h3><p>还是做题的时候的一些问题：</p><ol><li>寄… 花了很多时间，中间卡了很久，结果是因为自己做题是设了个n，默认的是numRows，但应用的时候没有写，导致查了半天bug。还是写的时候严谨一点，尽可能用它给的参数，否则就自己提前说明好来</li><li>数学太撇，等差公式还看错了…</li><li>还有charAt和自己写的row起始索引不一致导致后续更换问题，本来是0开始，我自己为了方便从1开始，但后续就需要-1，如果没发现这个问题的话还会有错误</li></ol><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201009182029446.png" alt="image-20201009182029446"></p><h2 id="7-整数反转-⭐⭐">7. 整数反转 ⭐⭐</h2><blockquote><p>Time : 2022 / 4 / 6 9 :46<br>TAG : Overflow / Decimal</p></blockquote><div class="code-tag-time">2022/4/6 09:46:00</div><div class="code-tag-label code-tag-label-math">Math</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220405204338443.png" alt="image-20220405204338443"></p><h3 id="审题-v2">审题</h3><ul><li>翻转后整数超过32位signed 范围就返回0</li><li>环境不准存储64位整数</li><li>思路：<ul><li>直接：<ul><li>十进制按位取，然后再拼凑</li><li>位运算？</li></ul></li></ul></li></ul><h3 id="1-十进制按位计算">1. 十进制按位计算</h3><p>按十进制取位，然后再反过来乘，组成新的十进制。但需要注意以下问题：</p><ul><li><strong>负数取模问题</strong>：temp取绝对值，因为负数的符号影响之后的加减法</li><li><strong>如何正确判断溢出的情况？</strong></li></ul><p>冗余：我这里ArrayList完全没必要，因为后面的计算顺序是从后往前算，其实也可以从前往后算</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> paw <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           temp <span class="token operator">=</span> temp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span>  list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> tmp <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>               <span class="token comment">// Overflow detection</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> tmp <span class="token operator">*</span> paw <span class="token operator">+</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               res <span class="token operator">=</span> <span class="token punctuation">(</span>tmp <span class="token operator">*</span> paw<span class="token punctuation">)</span> <span class="token operator">+</span>res<span class="token punctuation">;</span>               flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               paw <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>    <span class="token comment">// overflow detection.not rigorous</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token operator">-</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> res<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>O(n)的时间复杂度，加减法和模10耗时</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220405212648589.png" alt="image-20220405212648589"></p><h4 id="题解的优化">题解的优化</h4><p>官方题解的优化确实比我写的要好得多，用 &lt; Integer.xxx_VALUE / 10 来判断是否溢出，这种方法非常的简便快速</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> rev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>rev <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">||</span> rev <span class="token operator">></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">int</span> digit <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>           x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>           rev <span class="token operator">=</span> rev <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> digit<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> rev<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220406093819912.png" alt="image-20220406093819912"></p><h4 id="注意点-v2">注意点</h4><p>题解的方法跟我方法差距这么大主要是有一个原因：</p><ul><li><p>当顺序取模10的数，即从低到高位，则</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">rev <span class="token operator">=</span> rev <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> digit<span class="token punctuation">;</span></code></pre></div></li><li><p>当逆序取模10的数，即从高到低位，则</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">res <span class="token operator">=</span> <span class="token punctuation">(</span>digit <span class="token operator">*</span> paw<span class="token punctuation">)</span> <span class="token operator">+</span>res<span class="token punctuation">;</span></code></pre></div></li></ul><p>两种思路不一样，产生的解决方法也就不一样，第一种的解决方法能在一次遍历内就解决，而我这一种要先遍历一次并存储，再从集合中去取，经历两次运算和集合操作，自然就要慢一点。</p><p><strong>所以还是对一种已知方法就数学问题上要思考一下有没有其他的方式能得到这个值，多思考几种方案取最简洁的那一种</strong></p><h3 id="2-字符串反转">2. 字符串反转</h3><p>突发奇想，用类库进行字符串反转，再Catch Exception去捕获溢出时转换的异常，比较慢但是算是一种方法…</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">// 截取尾数连续为0的部分</span>        s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">-</span>res<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220406093556481.png" alt="image-20220406093556481"></p><h2 id="11-盛最多水的容器-⭐⭐">11. 盛最多水的容器 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201010183940869.png" alt="image-20201010183940869"></p><h3 id="1-暴力-超时">1. 暴力(超时)</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> final_max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> gap <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>               max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> min<span class="token operator">*</span>gap<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           final_max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>final_max<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> final_max<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><h3 id="2-一次遍历-转">2. 一次遍历(转)</h3><ul><li>若向内 移动短板 ，水槽的短板 min(h[i], h[j]) 可能变大，因此下个水槽的面积 可能增大 。</li><li>若向内 移动长板 ，水槽的短板 min(h[i], h[j]) 不变或变小，<strong>因此下个水槽的面积 一定变小</strong> 。</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span>                 <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> height<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>                 <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> height<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：Krahets</span><span class="token comment">// 链接：https://leetcode.cn/problems/container-with-most-water/solutions/11491/container-with-most-water-shuang-zhi-zhen-fa-yi-do/</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201010182820360.png" alt="image-20201010182820360"></p><h2 id="12-整数转罗马数字-⭐⭐">12. 整数转罗马数字 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-hash">Hash</div><div class="code-tag-label code-tag-label-greedy">Greedy</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201012085753307.png" alt="image-20201012085753307"></p><p>我的代码：</p><h3 id="HaspMap-存储键值对-判断">HaspMap 存储键值对 判断</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getOne</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">StringBuilder</span> stringBuilder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token class-name">Map</span> hashMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"IV"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">"IX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token string">"XL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"XC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token string">"CD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token string">"CM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">/</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             n<span class="token operator">=</span>n<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>             i<span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201012090037059.png" alt="image-20201012090037059"></p><h3 id="贪心法int-String-基本数组-对应存储"><strong>贪心法</strong>int String 基本数组 对应存储</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">intToRoman</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">StringBuilder</span> stringBuilder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token string">"CM"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token string">"CD"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"XC"</span><span class="token punctuation">,</span><span class="token string">"L"</span><span class="token punctuation">,</span><span class="token string">"XL"</span><span class="token punctuation">,</span><span class="token string">"X"</span><span class="token punctuation">,</span><span class="token string">"IX"</span><span class="token punctuation">,</span><span class="token string">"V"</span><span class="token punctuation">,</span><span class="token string">"IV"</span><span class="token punctuation">,</span><span class="token string">"I"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">>=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             num<span class="token operator">=</span>num<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>             i<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201012090139984.png" alt="image-20201012090139984"></p><h3 id="思考-v10">思考</h3><ul><li>对于判断 和 输出对于字符的思路，我的思路上与题设大体一致</li><li>不能解决 4 -9 的问题，就只能存储进数组中，通过索引解决</li></ul><h4 id="HashMap-中的get方法时间复杂度是否为O（1）？">HashMap 中的get方法时间复杂度是否为O（1）？</h4><p>在hash不发生冲突的情况下， 是O（1），也就是说，最优情况才是O(1)，没有第二种方法直接建立int a[] 和String s[]的直接对应联系来的 快</p><h2 id="17-电话号码的字母组合-⭐⭐">17. 电话号码的字母组合  ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201012205456540.png" alt="image-20201012205456540"></p><p>我的代码：</p><h3 id="String类型的迭代">String类型的迭代</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">    <span class="token keyword">private</span> <span class="token class-name">String</span> letterMap<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">" "</span><span class="token punctuation">,</span>    <span class="token comment">//0</span>            <span class="token string">""</span><span class="token punctuation">,</span>     <span class="token comment">//1</span>            <span class="token string">"abc"</span><span class="token punctuation">,</span>  <span class="token comment">//2</span>            <span class="token string">"def"</span><span class="token punctuation">,</span>  <span class="token comment">//3</span>            <span class="token string">"ghi"</span><span class="token punctuation">,</span>  <span class="token comment">//4</span>            <span class="token string">"jkl"</span><span class="token punctuation">,</span>  <span class="token comment">//5</span>            <span class="token string">"mno"</span><span class="token punctuation">,</span>  <span class="token comment">//6</span>            <span class="token string">"pqrs"</span><span class="token punctuation">,</span> <span class="token comment">//7</span>            <span class="token string">"tuv"</span><span class="token punctuation">,</span>  <span class="token comment">//8</span>            <span class="token string">"wxyz"</span>  <span class="token comment">//9</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> res<span class="token punctuation">;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span><span class="token class-name">String</span> digits<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> list<span class="token punctuation">;</span>       <span class="token keyword">else</span><span class="token punctuation">&#123;</span>           <span class="token function">getString</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> list<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span>  <span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">String</span> digits<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token class-name">String</span> tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>digits<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">char</span> c<span class="token operator">=</span>digits<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> letter<span class="token operator">=</span>arrstr<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>letter<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">getString</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>tmp<span class="token operator">+</span>letter<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201012212830953.png" alt="image-20201012212830953"></p><h3 id="StringBuilder-实现的迭代">StringBuilder 实现的迭代</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token comment">//一个映射表，第二个位置是"abc“,第三个位置是"def"。。。</span><span class="token comment">//这里也可以用map，用数组可以更节省点内存</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> letter_map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">,</span><span class="token string">"ghi"</span><span class="token punctuation">,</span><span class="token string">"jkl"</span><span class="token punctuation">,</span><span class="token string">"mno"</span><span class="token punctuation">,</span><span class="token string">"pqrs"</span><span class="token punctuation">,</span><span class="token string">"tuv"</span><span class="token punctuation">,</span><span class="token string">"wxyz"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span><span class="token class-name">String</span> digits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//注意边界条件</span><span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> digits<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">iterStr</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//最终输出结果的list</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归函数</span><span class="token keyword">void</span> <span class="token function">iterStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">StringBuilder</span> letter<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//递归的终止条件，注意这里的终止条件看上去跟动态演示图有些不同，主要是做了点优化</span><span class="token comment">//动态图中是每次截取字符串的一部分，"234"，变成"23"，再变成"3"，最后变成""，这样性能不佳</span><span class="token comment">//而用index记录每次遍历到字符串的位置，这样性能更好</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>letter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取index位置的字符，假设输入的字符是"234"</span><span class="token comment">//第一次递归时index为0所以c=2，第二次index为1所以c=3，第三次c=4</span><span class="token comment">//subString每次都会生成新的字符串，而index则是取当前的一个字符，所以效率更高一点</span><span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//map_string的下表是从0开始一直到9， c-'0'就可以取到相对的数组下标位置</span><span class="token comment">//比如c=2时候，2-'0'，获取下标为2,letter_map[2]就是"abc"</span><span class="token keyword">int</span> pos <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token class-name">String</span> map_string <span class="token operator">=</span> letter_map<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//遍历字符串，比如第一次得到的是2，页就是遍历"abc"</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>map_string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        letter<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>map_string<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果是String类型做拼接效率会比较低</span><span class="token comment">//iterStr(str, letter+map_string.charAt(i), index+1);</span>            <span class="token function">iterStr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> letter<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//这个方法保证了每一次大循环后得到的stringbuilder都是新的</span>            <span class="token comment">//注意： 这里的删除方法很重要！！</span>            letter<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>letter<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201012205626708.png" alt="image-20201012205626708"></p><h3 id="思考-v11">思考</h3><p>StringBuilder 确实操作比 String类型快很多很多，且在 空间占用上也远远低于 String</p><p>这还得归结于String 相加时 总会新分配一个String对象进行赋值</p><hr><h2 id="21-合并两个有序列表-⭐">21. 合并两个有序列表 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-recursion">Recursion</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201016083409297.png" alt="image-20201016083409297"></p><h3 id="1-迭代">1. 迭代</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*题目给的是：  有 序 的数组，这点很重要*/</span><span class="token keyword">public</span>  <span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> nodehead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> nodehead<span class="token punctuation">;</span><span class="token comment">// 理解这里pre=nodehead 的指向问题</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span> <span class="token comment">// 这里的两步都能想到</span>                    l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    pre <span class="token punctuation">.</span>next<span class="token operator">=</span> l2<span class="token punctuation">;</span>                    l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 这里注意！ 关键点  是指针节点后移的步骤</span>                <span class="token comment">// 那pre之前的数呢？ ---传给nodehead了 </span>                pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//抓一下最后几个节点，可能不止一个节点，但他是有序的，就无妨了</span>        pre<span class="token punctuation">.</span>next<span class="token operator">=</span>l1<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">?</span>l2<span class="token operator">:</span>l1<span class="token punctuation">;</span>        <span class="token keyword">return</span> nodehead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token comment">/**    *    时间复杂度O(n+m) 空间复杂度O(1) （pre 和nodepre作为变量）    */</span>    <span class="token punctuation">&#125;</span></code></pre></div><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201016083455230.png" alt="image-20201016083455230" style="zoom:150%;" /><h3 id="2-递归">2. 递归</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token comment">//到这里都没问题</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">&lt;=</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//此处 总爱 直接return一个 函数方法体 其实是不对的 ，具体得到的是谁呢？</span>    <span class="token comment">// 用 node.next能够实现对元素的保存</span>            l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**    *    时间复杂度O(n+m) 空间复杂度O(m+n) （递归函数的调用）     所以 执行结果内存消耗稍微慢于 迭代    */</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201016084013216.png" alt="image-20201016084013216"></p><h3 id="分析：">分析：</h3><p>自己做的时候，开始是都想到了这两种算法，不过后来总觉得哪里行不通，就放弃了递归，采用迭代。分析问题的原因：</p><ol><li>问题用那种方法解决？<ol><li>从头部解决：     --------<strong>迭代</strong><ul><li>用头元素记录 ，标兵元素去移动</li></ul></li><li>从尾部解决：     --------<strong>递归</strong><ul><li>为了得到保存结果 用next指针继续下一次判断</li></ul></li></ol></li><li>两者的关键点 都是 巧妙的使用  next指针</li></ol><hr><h2 id="26-删除排序数组中的重复项-⭐">26. 删除排序数组中的重复项 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201018171723036.png" alt="image-20201018171723036"></p><h3 id="1-暴力三循环-解非排序数组">1. 暴力三循环 --解非排序数组</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 删除数组中重复元素的 * 分析： 造成 时间复杂度高的步骤： 判断 之后的元素是否相等和 移动数组 */</span><span class="token comment">// for     三层循环来做  算法不稳定  O(N3)/Ok(1)</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">deleteSameNode</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> total<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 设置total 用于 循环体中 避免重复判断</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>total<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>total<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                total<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>total<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>       <span class="token comment">//注意这里的 j--</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>注意点：</p><ul><li>j-- ：避免多个重复的数在一起而被漏掉</li><li>total作为循环判断的依据：    避免多个重复的数在一起而被漏掉 或者 重复判断了移动到末尾的数字</li></ul><h3 id="2-双指针单循环-—-解排序数组">2. 双指针单循环 — 解排序数组</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">deleteSameNode_2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               i<span class="token operator">++</span><span class="token punctuation">;</span>               nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201018231302964.png" alt="image-20201018231302964"></p><h3 id="反思-v2">反思</h3><p>这里我思考的时候 ，没有看题目要求， 直接按照一般的数组来解决了，其实 题目给的 有序数组 ，双循环再想到单循环双指针 ，是非常好解决的。此处也提供了一种思路， 先将 数组 有序化 ，再通过这种方式 进行O(n) 的运算</p><h2 id="28-实现strStr-⭐⭐">28. 实现strStr() ⭐⭐</h2><blockquote><p>Time : 2022 / 3 / 26 10 : 23<br>TAG : KMP、迭代</p></blockquote><div class="code-tag-time">2022/3/26 10:23:00</div><div class="code-tag-label code-tag-label-math">KMP</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220326095118494.png" alt="image-20220326095118494"></p><h3 id="审题-v3">审题</h3><ul><li>返回匹配的子字符串在母字符串中第一次出现的位置</li><li>母串长度为n 字符串长度为m</li></ul><h3 id="1-暴力迭代">1. 暴力迭代</h3><p>在母串中依次查找，时间复杂度O(nm)</p><h3 id="2-KMP">2. KMP</h3><p>关于KMP，在字符串匹配中的应用是十分重要的，因为它把O(mn)的时间复杂度降低至O(m + n)</p><p><strong>Knuth-Morris-Pratt</strong> 算法，简称 KMP 算法，由 Donald Knuth、James H. Morris 和 Vaughan Pratt 三人于 1977 年联合发表</p><p>KMP的核心步骤：</p><ol><li>根据目标子串生成next数组(重点)</li><li>在母串中依据目标子串和next数组进行查找</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> haystack<span class="token punctuation">,</span> <span class="token class-name">String</span> needle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>haystack<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token function">kmp_gen_next</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">is_son_str</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">is_son_str</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> son<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> son<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> son<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> son<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">kmp_gen_next</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> next<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>                next<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220326100442552.png" alt="image-20220326100442552"></p><h4 id="优化">优化</h4><p>针对next数组优化，因为如果father_str[i] != son_str[j] 且 son_str[j] == son_str[next[j]]时，就会出现不必要的重复判断，因为之前判断两者不相等，而转化j后再去判断，（但son_str[j] == son_str[next[j]]）所以两者肯定还是不相等，就优化了next数组</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">kmp_gen_next_modified</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> next<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               i<span class="token operator">++</span><span class="token punctuation">;</span>               j<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   next<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>               <span class="token keyword">else</span>                   next<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>               j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> next<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>不明显，可能是生成next时多了一些判断？</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220326100339847.png" alt="image-20220326100339847"></p><h4 id="二刷-C语言版本">二刷-C语言版本</h4><p>自己觉得KMP难理解的点（配合图来理解）：</p><ol><li>先理解前缀和后缀，KMP是通过子串的前后缀来进行线性判断的。也就是说，如果子串有相同的最长前、后缀，则就可以进行移位比较</li><li>接下来，如何计算这个最长的前后缀？问题的关键也就变成了计算next数组了，那next数组是什么？next数组是指示截止当前元素为止，当前长度的数组最长前后缀的长度是多少？例如abcabcd，d处的数值便是3（因为有最长前后缀abc）。计算next数组时的一个难点，也是我认为比较难以理解的一个地方：在比较计算第k个索引元素的值时。先看前一个元素的值，也就是看到前一个数为止当前数组的最大前后缀，若值为m。<ol><li>则比较第m+1个元素与当前元素是否相等，如果相等，就说明到当前元素为止，数组能构成一个更长的前后缀（这里可以画图理解），所以当前元素的值=前一个元素值+1</li><li>如果不想等的话，则要去找次长的前后缀，然后<strong>比较次长的前缀 和 加了新元素的后缀</strong>是否相等，如果找到了就等于次长前缀长度 + 1，如果没找到，就重复这个过程，直到没有最长前后缀，此时当前元素的值为0（也就是没有最长前后缀）。</li></ol></li></ol><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">genNext</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> needle<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">calloc</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cur_hop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>cur_hop<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cur_hop<span class="token operator">++</span><span class="token punctuation">;</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cur_hop<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur_hop <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                cur_hop <span class="token operator">=</span> next<span class="token punctuation">[</span>cur_hop <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> haystack<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> needle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> out_length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>haystack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>next <span class="token operator">=</span> <span class="token function">genNext</span><span class="token punctuation">(</span>needle<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> out_length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20221103213544861.png" alt="image-20221103213544861"></p><h2 id="29-两数相除-⭐⭐">29. 两数相除 ⭐⭐</h2><blockquote><p>Time: 2021 10 12 4:06pm</p></blockquote><div class="code-tag-time">2021/10/12 16:06:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-binary">Bin</div><div class="code-tag-label code-tag-label-iteration">Iteration</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211012150254273.png" alt="image-20211012150254273"></p><h3 id="审题-v4">审题</h3><ul><li>不得使用* / mod，也就是说+ -  位运算都可以用、</li><li>返回[商]</li><li>除数不为0</li><li>可以为负数</li><li>排除递归、dp…</li></ul><h3 id="1-暴力-v2">1. 暴力</h3><h3 id="-v7"></h3><h3 id="2-二分查找-转">2. 二分查找(转)</h3><ol><li>先把特殊情况罗列</li><li>因为溢出的可能，所以都取成负数</li><li>在判断溢出时用负数和移动不等式两边去进行巧妙判断</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> dividend<span class="token punctuation">,</span> <span class="token keyword">int</span> divisor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 考虑被除数为最小值的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 考虑除数为最小值的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> dividend <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 考虑被除数为 0 的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 一般情况，使用二分查找</span>        <span class="token comment">// 将所有的正数取相反数，这样就只需要考虑一种情况</span>        <span class="token keyword">boolean</span> rev <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dividend <span class="token operator">=</span> <span class="token operator">-</span>dividend<span class="token punctuation">;</span>            rev <span class="token operator">=</span> <span class="token operator">!</span>rev<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            divisor <span class="token operator">=</span> <span class="token operator">-</span>divisor<span class="token punctuation">;</span>            rev <span class="token operator">=</span> <span class="token operator">!</span>rev<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 注意溢出，并且不能使用除法</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> check <span class="token operator">=</span> <span class="token function">quickAdd</span><span class="token punctuation">(</span>divisor<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> dividend<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token comment">// 注意溢出</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> rev <span class="token operator">?</span> <span class="token operator">-</span>ans <span class="token operator">:</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 快速乘</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">quickAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// x 和 y 是负数，z 是正数</span>        <span class="token comment">// 需要判断 z * y >= x 是否成立</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> add <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>z <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>z <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 需要保证 result + add >= x</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> x <span class="token operator">-</span> add<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                result <span class="token operator">+=</span> add<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>z <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 需要保证 add + add >= x</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>add <span class="token operator">&lt;</span> x <span class="token operator">-</span> add<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                add <span class="token operator">+=</span> add<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 不能使用除法</span>            z <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211012155401725.png" alt="image-20211012155401725"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20211012155418405.png" alt="image-20211012155418405"></p><h3 id="3-类二分查找-转">3. 类二分查找(转)</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> dividend<span class="token punctuation">,</span> <span class="token keyword">int</span> divisor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 考虑被除数为最小值的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 考虑除数为最小值的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> dividend <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 考虑被除数为 0 的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 一般情况，使用类二分查找</span>        <span class="token comment">// 将所有的正数取相反数，这样就只需要考虑一种情况</span>        <span class="token keyword">boolean</span> rev <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dividend <span class="token operator">=</span> <span class="token operator">-</span>dividend<span class="token punctuation">;</span>            rev <span class="token operator">=</span> <span class="token operator">!</span>rev<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            divisor <span class="token operator">=</span> <span class="token operator">-</span>divisor<span class="token punctuation">;</span>            rev <span class="token operator">=</span> <span class="token operator">!</span>rev<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>divisor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 注意溢出</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>candidates<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">>=</span> dividend <span class="token operator">-</span> candidates<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candidates<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> candidates<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 没看懂</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> candidates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>candidates<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> dividend<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ans <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>                dividend <span class="token operator">-=</span> candidates<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> rev <span class="token operator">?</span> <span class="token operator">-</span>ans <span class="token operator">:</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="4-递归-转">4. 递归(转)</h3><p>感觉这个比上面的好懂一点</p><p>举个例子：11 除以 3 。<br>首先11比3大，结果至少是1， 然后我让3翻倍，就是6，发现11比3翻倍后还要大，那么结果就至少是2了，那我让这个6再翻倍，得12，11不比12大，吓死我了，差点让就让刚才的最小解2也翻倍得到4了。但是我知道最终结果肯定在2和4之间。也就是说2再加上某个数，这个数是多少呢？我让11减去刚才最后一次的结果6，剩下5，我们计算5是3的几倍，也就是除法，看，递归出现了。说得很乱，不严谨，大家看个大概，然后自己在纸上画一画，或者直接看我代码就好啦！</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> dividend<span class="token punctuation">,</span> <span class="token keyword">int</span> divisor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dividend <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dividend<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dividend<span class="token operator">></span>INT_MIN<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>dividend<span class="token punctuation">;</span><span class="token comment">// 只要不是最小的那个整数，都是直接返回相反数就好啦</span>            <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span><span class="token comment">// 是最小的那个，那就返回最大的整数啦</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> a <span class="token operator">=</span> dividend<span class="token punctuation">;</span>        <span class="token keyword">long</span> b <span class="token operator">=</span> divisor<span class="token punctuation">;</span>        <span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        a <span class="token operator">=</span> a<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span>a<span class="token operator">:</span><span class="token operator">-</span>a<span class="token punctuation">;</span>        b <span class="token operator">=</span> b<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span>b<span class="token operator">:</span><span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> res<span class="token operator">></span>INT_MAX<span class="token operator">?</span>INT_MAX<span class="token operator">:</span>res<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 似乎精髓和难点就在于下面这几句</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> tb <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">// 在后面的代码中不更新b</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tb<span class="token operator">+</span>tb<span class="token punctuation">)</span><span class="token operator">&lt;=</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            count <span class="token operator">=</span> count <span class="token operator">+</span> count<span class="token punctuation">;</span> <span class="token comment">// 最小解翻倍</span>            tb <span class="token operator">=</span> tb<span class="token operator">+</span>tb<span class="token punctuation">;</span> <span class="token comment">// 当前测试的值也翻倍</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count <span class="token operator">+</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token operator">-</span>tb<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></div><h2 id="34-在排序数组中查找元素的第一个和最后一个位置-⭐⭐">34. 在排序数组中查找元素的第一个和最后一个位置 ⭐⭐</h2><div class="code-tag-time">2022/4/6 14:50:00</div><div class="code-tag-label code-tag-label-binary">BinaryS</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220406102748986.png" alt="image-20220406102748986"></p><h3 id="审题-v5">审题</h3><ul><li>升序排列的数组，有重复数字，数字可为负数</li><li>找的数不存在，返回[-1,-1]</li><li>思路：<ul><li>直接：<ul><li>迭代</li></ul></li><li>进阶：<ul><li>二分查找：问题，如何找到起始的点？</li></ul></li></ul></li></ul><h3 id="1-顺序遍历">1. 顺序遍历</h3><p>时间复杂度O(n)，没有充分利用到升序数组这个条件</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> start <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                start <span class="token operator">=</span> i<span class="token punctuation">;</span>                end <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                end<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> start<span class="token punctuation">;</span>        res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> end<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220406103252339.png" alt="image-20220406103252339"></p><h3 id="2-二分查找-v2">2. 二分查找</h3><p>不仅对整体二分查找，还二分查找中点target的左右端点。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f1 <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f1 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> f1<span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> f1<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 临时保存binarSearch结果，避免重复运算</span>                <span class="token keyword">int</span> l_temp<span class="token punctuation">;</span>                <span class="token keyword">int</span> r_temp<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    l_temp <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>l_temp <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    left <span class="token operator">=</span> l_temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    r_temp <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>r_temp <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    right <span class="token operator">=</span> r_temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 二分查找</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 靠左边</span>            <span class="token comment">// 注意这里+1 和 -1，必要的</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                l <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                r <span class="token operator">=</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> m<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果l==r还要判断中间值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">)</span>                <span class="token keyword">return</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220406113758421.png" alt="image-20220406113758421"></p><p>**补充：**官方题解的方法是设置bool值来表明是查找第一个大于target和第一个大于等于target的值</p><h3 id="反思-v3">反思</h3><ul><li>二分法想起容易，写起来还是十分费劲，自己写有很多的bug</li></ul><h2 id="36-有效的数独-⭐⭐">36. 有效的数独 ⭐⭐</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210917143810318.png" alt="image-20210917143810318"></p><h3 id="审题-v6">审题</h3><ul><li>分区域 ，每行每列每九宫格</li></ul><p>…已经不知道自己有多蠢了，题的意思是求出题中所给缺陷数独是否符合规范！！而不是求是否能生成一个数独。。。搁这做了半天一直不对。。。</p><p><strong>看题！！！看题！！！看题！！！</strong></p><p>最后摘一道题解，日后再做一下</p><h3 id="1-顺序检验（转）">1. 顺序检验（转）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">bool <span class="token function">isValidSudoku</span><span class="token punctuation">(</span>vector<span class="token generics"><span class="token punctuation">&lt;</span>vector<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> row<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 哈希表存储每一行的每个数是否出现过，默认初始情况下，每一行每一个数都没有出现过</span>       <span class="token comment">// 整个board有9行，第二维的维数10是为了让下标有9，和数独中的数字9对应。</span>       <span class="token keyword">int</span> col<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 存储每一列的每个数是否出现过，默认初始情况下，每一列的每一个数都没有出现过</span>       <span class="token keyword">int</span> box<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 存储每一个box的每个数是否出现过，默认初始情况下，在每个box中，每个数都没有出现过。整个board有9个box。</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token comment">// 遍历到第i行第j列的那个数,我们要判断这个数在其所在的行有没有出现过，</span>               <span class="token comment">// 同时判断这个数在其所在的列有没有出现过</span>               <span class="token comment">// 同时判断这个数在其所在的box中有没有出现过</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> curNumber <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>curNumber<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>curNumber<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>box<span class="token punctuation">[</span>j<span class="token operator">/</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>curNumber<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>               row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>curNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 之前都没出现过，现在出现了，就给它置为1，下次再遇见就能够直接返回false了。</span>               col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>curNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>               box<span class="token punctuation">[</span>j<span class="token operator">/</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>curNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>除此之外还可以考虑位运算的方法，这里的理解也比较巧妙</p><h2 id="38-外观数列-⭐">38. 外观数列 ⭐</h2><div class="code-tag-label code-tag-label-recursion">Recursion</div><h3 id="String-与-StringBuilder-关于效率和递归的使用">* String 与 StringBuilder 关于效率和递归的使用</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201027184424039.png" alt="image-20201027184424039"></p><h3 id="1-递归-v2">1. 递归</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**         * 思路： 这种问题看起来很没有思路但是实际上又和前一项有联系         *  考虑到追根溯源 --- 从尾部解决 然后对每一层进行分析         */</span>        <span class="token comment">//String的增删效率低 但是这里我的效率依然很低....  </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">countAndSay</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> bcstr<span class="token operator">=</span><span class="token function">countAndSay</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>bcstr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>bcstr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>bcstr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>bcstr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span>bcstr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201027184706268.png" alt="image-20201027184706268"></p><p>这种做法能做出来，但我觉得基于迭代的 空间复杂度 还有String自身的增添麻烦，且每一次迭代都会新建StringBuilder对象，是会效率不高。</p><h3 id="2-看题解后的细节调整">2. 看题解后的细节调整</h3><p>细节分析： 这里的主要效率不高的拖延点在于str.append 的操作</p><p>​可能是由于           str.append(String.valueOf(j)+bcstr.charAt(i));  使得两个字符串再次相加得到的新字符串，再将新的字符串赋值上去，使得在这里出现的String类型的增删。 且append(int ) 添加的是String类型的数字，但由于append(int+char)型的是会先将char 转换成加上int的char 再赋值给builder， 所以这里连用append 更好。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bcstr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201027185740882.png" alt="image-20201027185740882"></p><h2 id="42-接雨水-⭐⭐⭐">42. 接雨水 ⭐⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-stack">Stack</div><div class="code-tag-label code-tag-label-dp">DP</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220117101802334.png" alt="image-20220117101802334"></p><h3 id="审题-v7">审题</h3><ul><li>区间和高度决定了能够接多少水，以接近区间的最高点和起点决定？</li><li>算每一个可接单元的每一层吗？</li><li>做法：先在LogN的时间点找到每个区间，然后在区间内进行运算</li><li>做后思考：如何在On的情况下计算？</li></ul><h3 id="1-暴力–顺序搜索">1. 暴力–顺序搜索</h3><p>以起始点大小为判断条件，找到末点大于起始点的点，分情况讨论：</p><ul><li>如果找到了 ，则在此基础上以较小的起始点为顶，起始点 - 各点的值逐渐累加</li><li>没有找到，则找第二大的点，并以末点为顶…</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> height<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// confirm a region</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span>  height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                      total <span class="token operator">+=</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  i <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token comment">// if can`t find a number bigger than height[i]</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">int</span> temp <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                          temp <span class="token operator">=</span> j<span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  j <span class="token operator">=</span> temp<span class="token punctuation">;</span>                  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      total <span class="token operator">+=</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>                  i <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> total<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220117154832631.png" alt="image-20220117154832631"></p><p>为什么这么慢？<br>考虑到内部其实有三层循环（但实际上只有两层），最坏时可能对每一个起点，都没有一个比他大的点，并且第二大的点都在末尾排列，所以时间复杂度来到了O(n^2)<br>如何消除平方的时间复杂度关键要么换算法类型要么就解决如何找第二大的点</p><h3 id="2-动态编程-（转-验）">2. 动态编程 （转 - 验）</h3><p>确实，这个题符合动态编程的特点。要想知道该点处的积水量，即<strong>找到该点左右两侧最大值中较小的那个</strong>，这里用On的空间复杂度去保存这些点，以便能实现O1的计算，所以能在On的时间复杂度内完成。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right_max <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>height<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left_max <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>height<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>       right_max<span class="token punctuation">[</span>height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       left_max<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           left_max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left_max<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           right_max<span class="token punctuation">[</span>height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> right_max<span class="token punctuation">[</span>height<span class="token punctuation">.</span>length  <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           total <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>left_max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> right_max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> total<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220117161221631.png" alt="image-20220117161221631"></p><h3 id="3-栈存储-（转-验）">3. 栈存储 （转 - 验）</h3><p>思路与 1 一致，有点像1、2的结合，不需要先遍历，有补偿机制。On的时间复杂度和空间复杂度。但不知道为啥这么慢</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> distance<span class="token punctuation">,</span> rel_height<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> height<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  <span class="token operator">></span> height<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">int</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              distance <span class="token operator">=</span> index <span class="token operator">-</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>              rel_height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>pop<span class="token punctuation">]</span><span class="token punctuation">;</span>              total <span class="token operator">+=</span> rel_height <span class="token operator">*</span> distance<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> total<span class="token punctuation">;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220117163209828.png" alt="image-20220117163209828"></p><h3 id="4-超妙双指针-（转）">4. 超妙双指针 （转）</h3><p>On的时间复杂度  O1的空间复杂度  。非常的妙，以相向的双指针处的值的当前差值来决定从哪边进行补偿，并存储了对应两边的最大值。而又由于其双指针差值选择避开了出现较小的值导致错误补偿的可能</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left_max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right_max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">>=</span> left_max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left_max <span class="token operator">=</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                ans <span class="token operator">+=</span> <span class="token punctuation">(</span>left_max <span class="token operator">-</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token operator">++</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> right_max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                right_max <span class="token operator">=</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                ans <span class="token operator">+=</span> <span class="token punctuation">(</span>right_max <span class="token operator">-</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token operator">--</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/trapping-rain-water/solution/jie-yu-shui-by-leetcode/</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220117164109645.png" alt="image-20220117164109645"></p><h2 id="43-字符串相乘">43. 字符串相乘</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210403103757421.png" alt="image-20210403103757421"></p><h3 id="思考：-v3">思考：</h3><p>不能用Bigdemical   大数相乘   注意最高位数   返回类型为String   long可能有溢出</p><p>位运算？</p><h3 id="1-My-自实现的进位机制">1. My 自实现的进位机制</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token operator">||</span>num2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> l1 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> l2 <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> l3 <span class="token operator">=</span> l1 <span class="token operator">+</span> l2<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>l3<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l3<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//冗杂</span><span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> min<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> temp  <span class="token operator">=</span>num1<span class="token punctuation">;</span>    num1 <span class="token operator">=</span> num2<span class="token punctuation">;</span>    num2 <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//选出最小的数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mr <span class="token operator">=</span>  <span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token punctuation">)</span><span class="token punctuation">(</span>mr <span class="token operator">%</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            result<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//这里有冗杂的成分</span>        result<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> mr<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            result<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度 O(m * n ) 空间复杂度 O(m+n)</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210403200458765.png" alt="image-20210403200458765"></p><p>整解的思路差不多，但是在处理result[i+j-1]这一块更加简洁</p><h2 id="50-Pow-x-n-⭐⭐">50. Pow(x,n) ⭐⭐</h2><blockquote><p>Time : 2022 / 4 / 5 10 : 46<br>TAG : Iteration / Recursion / Complement / Bits</p></blockquote><div class="code-tag-time">2022/4/5 10:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-recursion">Recursion</div><div class="code-tag-label code-tag-label-math">Bits</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220402195616362.png" alt="image-20220402195616362"></p><h3 id="审题-v8">审题</h3><ul><li>x是小数，返回的也是double类型数字.指数可能为负数</li><li>可能的做法：</li><li>思路：<ul><li>简单：递归；递归</li><li>进阶：能否在对数时间复杂度内完成</li></ul></li></ul><h3 id="1-递归（Stack-Over）">1. 递归（Stack Over）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">,</span><span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span></code></pre></div><p><strong>优化</strong>(Stack OF)</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">,</span><span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">,</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">?</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> x<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220402205928765.png" alt="image-20220402205928765"></p><h3 id="2-迭代（OverTime）">2. 迭代（OverTime）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">1.0D</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           n <span class="token operator">=</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>           x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">double</span> res <span class="token operator">=</span> x<span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           res <span class="token operator">=</span> res <span class="token operator">*</span> x<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><strong>优化</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1.0D</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Long</span> longx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            longx <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>longx<span class="token punctuation">)</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>longx <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1.0d</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>longx <span class="token operator">/</span> <span class="token number">2</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>longx <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">?</span><span class="token number">1.0</span><span class="token operator">:</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> x <span class="token operator">*</span> x <span class="token punctuation">;</span>            longx <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">*=</span> x<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220402205324791.png" alt="image-20220402205324791"></p><h3 id="问题-v2">问题</h3><p>这里还涉及到了自己的一个学习漏洞，对补码的理解和计算机位表示的混乱理解：</p><blockquote><p>具体解析参见文章《计算机组成原理》 [补码的加减法]章节</p></blockquote><p>这道题我的问题主要在于：signed int (1 &gt;&gt; 31 - 1)等于多少，这里应该从位的角度先去理解，计算-1的补码然后二者相加，因为是补码运算，所以符号位囊括在计算过程中。（而-a = ~a+1，这一点也很重要，简化理解过程），得到二进制存储后，再根据对应的数据类型去转化，这里得到的其实是1&gt;&gt;31，而又是signed int，所以结果又根据原码-&gt;补码的反操作来求补码-&gt;原码，得到原码的值应该是-1&gt;&gt;31。</p><p>总结一下就是：<strong>完全按照计算机的步骤来，不要自己一会补码运算一会原码相加，把自己都搞混了</strong></p><h3 id="总结-v4">总结</h3><p>一直想做这道题，今天终于还是抽时间写了这道题。这道题踩到坑了，最开始用迭代和递归，都没做出来，要么超时要么StackOF。以为是算法本身的问题，但后来实在没办法，想了想后觉得奇怪。一调试发现一个重要的问题！也是非常基础的问题（只怪自己基础不牢固）</p><p>$$int \ n = Integer.MIN_VALUE  \quad then \quad -n = n$$</p><h2 id="53-最大子序和-⭐⭐">53. 最大子序和 ⭐⭐</h2><div class="code-tag-label code-tag-label-dfs">DFS</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210405093158517.png" alt="老版"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230304110445390.png" alt="新版"></p><h3 id="思考-v12">思考</h3><p>O n 的解法</p><p>动态规划？</p><h3 id="1-My-DP">1. My DP</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>     dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dp<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>dp 序列求，最开始题没看清楚以为求的是数组子序列， 设置了end 和begin，后来一看只求最大值  …</p><p>空间复杂度 On 时间复杂度 On</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210405094811575.png" alt="image-20210405094811575"></p><h3 id="改进">改进</h3><p>动态规划需要额外的数组一般是可以改进的</p><p>所以这里我改进了之后</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp_pre <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp_pre <span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp_pre<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp_pre<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>空间复杂度变为O 1</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210405095134634.png" alt="image-20210405095134634"></p><h3 id="2-分治-线段树">2. 分治  线段树</h3><p>…</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210405161553429.png" alt="image-20210405161553429"></p><h3 id="再回首">再回首</h3><div class="code-tag-time">2023/3/4 21:52:00</div><h4 id="1-动态规划-v3">1. 动态规划</h4><p>既然要找出数组最大和的连续子数组，那可以这样想，从1开始，在<strong>整个数组</strong>中找出以第i个数结尾且和最大的子数组。为什么这样？这样就有递推式：</p><ul><li>以当前元素结尾且包含前一个元素</li><li>以当前元素结尾但不包含前一个元素</li></ul><p>则有表达式</p><p>$$maxSubArrSums[i]=\begin{cases}maxSubArrSums[i - 1] + nums[i] \nums[i]\end{cases}$$</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sumsArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curMaxSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        sumsArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sumsArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>sumsArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curMaxSum <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>sumsArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> curMaxSum<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> curMaxSum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>最终再将maxSubArrSums优化，转化成一个变量即可</p><h4 id="2-分治-线段树-®">2. 分治(线段树) ®</h4><p>求一个数组的最大连续子序列和，那可以分成左右两部分来看：</p><p>$$整体最大连续子段和=\begin{cases}左部分的最大子段和 \右部分的最大字段和\左部分与右部分交集的子段和\end{cases}$$</p><p>这样就已经解决了两种情况了，只需要解决最后一种左右部分交集的子段和，如何处理？这就引申出来了一个整体的<strong>从左开始</strong>的最大子段和和<strong>从右结束的</strong>最大子段和，这样</p><p>$$左右部分交集的子段和 = 左部分从右结束的最大子段和 + 右部分从左开始的最大子段和$$</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Status</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> lSum<span class="token punctuation">,</span> rSum<span class="token punctuation">,</span> iSum<span class="token punctuation">,</span> mSum <span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Status</span><span class="token punctuation">(</span><span class="token keyword">int</span> lSum<span class="token punctuation">,</span> <span class="token keyword">int</span> rSum<span class="token punctuation">,</span> <span class="token keyword">int</span> iSum<span class="token punctuation">,</span> <span class="token keyword">int</span> mSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lSum <span class="token operator">=</span> lSum<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>rSum <span class="token operator">=</span> rSum<span class="token punctuation">;</span>            <span class="token comment">// 区间和</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>iSum <span class="token operator">=</span> iSum<span class="token punctuation">;</span>            <span class="token comment">// 最大子段和</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mSum <span class="token operator">=</span> mSum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getStatus</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mSum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Status</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Status</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Status</span> left <span class="token operator">=</span> <span class="token function">getStatus</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Status</span> right <span class="token operator">=</span> <span class="token function">getStatus</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">sumLeftAndRightSub</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Status</span> <span class="token function">sumLeftAndRightSub</span><span class="token punctuation">(</span><span class="token class-name">Status</span> left<span class="token punctuation">,</span> <span class="token class-name">Status</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> iSum <span class="token operator">=</span> left<span class="token punctuation">.</span>iSum <span class="token operator">+</span> right<span class="token punctuation">.</span>iSum<span class="token punctuation">;</span>        <span class="token keyword">int</span> lSum <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>lSum<span class="token punctuation">,</span> left<span class="token punctuation">.</span>iSum <span class="token operator">+</span> right<span class="token punctuation">.</span>lSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rSum <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>rSum<span class="token punctuation">,</span> right<span class="token punctuation">.</span>iSum <span class="token operator">+</span> left<span class="token punctuation">.</span>rSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mSum <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>mSum<span class="token punctuation">,</span> right<span class="token punctuation">.</span>mSum<span class="token punctuation">)</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span>rSum <span class="token operator">+</span> right<span class="token punctuation">.</span>lSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Status</span><span class="token punctuation">(</span>lSum<span class="token punctuation">,</span> rSum<span class="token punctuation">,</span> iSum<span class="token punctuation">,</span> mSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度：O(n)(分治是O(logN), 但是遍历了所有节点) 空间复杂度:(OlogN)</p><p>这种方法还要维护额外的变量，有递归的调用，有什么好处呢？关键是它是一种类似线段树的想法，可以解决任何子区间[l, r]之间问题，在建成树状结构后，只需要O(logN)的时间复杂度就可以求出答案</p><h2 id="55-跳跃游戏-⭐⭐">55. 跳跃游戏 ⭐⭐</h2><div class="code-tag-time">2022/3/20 20:12:00</div><div class="code-tag-label code-tag-label-dfs">DFS</div><div class="code-tag-label code-tag-label-greedy">Greedy</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220320183910326.png" alt="image-20220320183910326"></p><h3 id="审题-v9">审题</h3><ul><li>非负整数数组，代表最大可跳步数，判断的是能否跳到最后一个下标</li><li>可能的算法：DFS / dp</li><li>可以做一些优化，比如元素值都大于0，则true</li><li>思路：<ul><li>简单：<ul><li>DFS：构建回溯方法，当前索引，当前所跳步数</li></ul></li><li>进阶：一次遍历后是否可行？按理说可以<ul><li>DP：</li></ul></li></ul></li></ul><h3 id="1-DFS-OverTime">1. DFS(OverTime)</h3><p>超时，但结果应该是对的。IDEA上测1000次超时数组，此方法用时14ms，dp用时3ms，超时没问题</p><p>三次搜索，三种情况的并集（需要考虑判断正负的条件）：</p><ol><li>当前最大步数下的下一个索引位置</li><li>邻接的下一个索引开始</li><li>当前步数-1搜索</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> allPositive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                allPositive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>allPositive<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> cur_step<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> nums<span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token punctuation">(</span>cur_step <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">!=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> index <span class="token operator">==</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">boolean</span> longJmp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> nextJmp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> decreaseJmp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur_step <span class="token operator">+</span> index <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            longJmp <span class="token operator">=</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>index <span class="token operator">+</span> cur_step<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>index <span class="token operator">+</span>cur_step<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nextJmp <span class="token operator">=</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        decreaseJmp <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>index<span class="token punctuation">,</span> cur_step <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> longJmp <span class="token operator">|</span> nextJmp <span class="token operator">|</span> decreaseJmp <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="2-DP-贪心">2. <s>DP</s> / 贪心</h3><p>DP ！ 我滴超人！（其实是贪心hhh）<br>激动的心，颤抖的手，这道题的答案我KO</p><p>当然理论还是因为两点：</p><ol><li>可以通过一次遍历得到</li><li>当前boolean值可以由上一个元素的是否可行的boolean值推出</li></ol><p>DP的推导：<br>dp中记录的是到了当前这一个索引，<strong>还剩下</strong>多少步数（也就是最大步数，所以是<strong>贪心</strong>）可以走（因为步数肯定是连续的，从0 - m）</p><ol><li>dp[i - 1]  &lt;= 0不能够到达dp[i]</li><li>dp[i - 1] &gt; 0 能到达，这时要考虑dp[i]的值的取舍，因为保持的是当前索引还剩下的<strong>最大步数</strong>，为确保最大，则需要在nums[i]和dp[i - 1] - 1上做出取舍，取最大值。</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> allPositive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 优化一，一次遍历 能确定true但不能确定false </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                allPositive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>allPositive<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 可优化点三，dp[] -> dp (int)</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 优化二，可直接调到最后一个，就可以直接判断正</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>这个结果我非常满意哈哈哈</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220320193010949.png" alt="image-20220320193010949"></p><h4 id="优化的重要性">优化的重要性</h4><p>可能是题库给的测试数据偏向问题，这里我去掉了前面的一次遍历（判断是否都为正数的情况，因为全部为正数则肯定可以通过）。结果相当哇塞</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220320193142772.png" alt="image-20220320193142772"></p><p><s>没想到去掉了原以为影响不大的一次遍历，O(n)上不会有影响，但实际却还是相差甚远，优化的重要性是不言而喻的</s>.这里之后应该是某几次偏差，删除后又试了下，恢复正常94%，因为题解方法最慢都是O(n)，只是操作上多做了几步判断，这里这样做其实意义不是很大。</p><p>还有一个优化就是可直接一步跳到最后一格，则判正（不过貌似加上影响不大，还与添加位置有关系）</p><p><strong>dp最根本的优化</strong></p><p>忘记了dp最根本的优化思路，即把<strong>数组替换成单个变量</strong>！</p><h3 id="3-简洁的思路（转）">3. 简洁的思路（转）</h3><p>表示当前索引下还可以跳多远，思路相似</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//前n-1个元素能够跳到的最远距离</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//第i个元素能够跳到的最远距离</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//更新最远距离</span>            k <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果最远距离已经大于或等于最后一个元素的下标,则说明能跳过去,退出. 减少循环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">>=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//最远距离k不再改变,且没有到末尾元素</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><h3 id="反思-v4">反思</h3><ul><li>On 一次遍历的思路帮大忙，优化的思路还是不错</li><li>dp最终优化没有想到，化数组为单变量</li><li>DFS不是很熟悉，好在磨了一会后想到了</li></ul><h2 id="68-文本左右对其-⭐⭐⭐">68. 文本左右对其 ⭐⭐⭐</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210909101658006.png" alt="image-20210909101658006"></p><h3 id="审题-v10">审题</h3><p>每行至少有一个word</p><p>要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。</p><p>文本的最后一行应为左对齐，且单词之间不插入<strong>额外的</strong>空格。</p><p>空格情况： 均分、不均分</p><h3 id="1-核心步骤拆分法硬解…">1. 核心步骤拆分法硬解…</h3><p>直接硬解，核心部分拆分成两个方法</p><ul><li>一行中多少个单词</li><li>一行中的单词如何排列<ul><li>均分</li><li>不均分情况</li><li>最后一排</li><li>只有一个单词情况</li></ul></li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">fullJustify</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">,</span> <span class="token keyword">int</span> maxWidth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// detect how many numbers it can contain</span>       <span class="token keyword">int</span> column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> newLine<span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">getMaxNumInSingle</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span>maxWidth<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">String</span> single <span class="token operator">=</span> <span class="token function">makeSingleStr</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span>maxWidth<span class="token punctuation">,</span>index<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>           result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>single<span class="token punctuation">)</span><span class="token punctuation">;</span>           index<span class="token operator">+=</span>size<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> result<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token comment">// 获取单行有多少个字母</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMaxNumInSingle</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">,</span> <span class="token keyword">int</span> maxWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span>words<span class="token punctuation">.</span>length<span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">+</span> words<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">==</span> maxWidth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               size <span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">+</span> words<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> maxWidth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">+</span> words<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxWidth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// 加1 是因为空格，这里下加上不加很重要</span>               length <span class="token operator">+=</span> words<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>               size <span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> size<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token comment">// 获取单行单词排列后String  StringBuilder此处可优化</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">makeSingleStr</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">,</span> <span class="token keyword">int</span> maxWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span>       <span class="token keyword">int</span> allLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token class-name">StringBuilder</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 一个单词情况</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>maxWidth<span class="token operator">-</span>words<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>              <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>       <span class="token comment">// 最后一行情况</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">+</span>size <span class="token operator">==</span> words<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> index<span class="token punctuation">;</span> k<span class="token operator">&lt;</span>index<span class="token operator">+</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>index<span class="token operator">+</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> strLength <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>maxWidth<span class="token operator">-</span>strLength<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>index<span class="token operator">+</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           allLength <span class="token operator">+=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           i<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>             <span class="token keyword">int</span> curSpaces <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> index<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> index<span class="token operator">+</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> temp <span class="token operator">=</span> curSpaces<span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxWidth <span class="token operator">-</span> allLength <span class="token operator">-</span> temp<span class="token punctuation">)</span><span class="token operator">%</span> <span class="token punctuation">(</span>index<span class="token operator">+</span>size<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token punctuation">(</span>maxWidth <span class="token operator">-</span> allLength <span class="token operator">-</span> temp<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>index<span class="token operator">+</span>size<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   curSpaces <span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token punctuation">(</span>maxWidth <span class="token operator">-</span> allLength <span class="token operator">-</span> temp<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>index<span class="token operator">+</span>size<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   curSpaces<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>index<span class="token operator">+</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210909114750596.png" alt="image-20210909114750596"></p><p>这道题做起来真的还是很慢，1h…前前后后太多小错误没有顾忌到，另外String的长度是length()而不是length…</p><p>StringBuilder处可优化</p><p>也提供了一种解题思路吧，以后面对这种步骤性强的题，自己可以分成几步，然后分步解决，思路会清晰很多。</p><p>看了题解的方法，通过<strong>模拟</strong>，<strong>列举出各种情况</strong>，<strong>对这些情况一一讨论</strong>，和我这里的思路比较相似，不过在处理多个单词上，他的做法更好</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210909120051637.png" alt="image-20210909120051637"></p><p>这里学习一下这种方法…</p><h2 id="69-x-的平方根-⭐">69. x 的平方根 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-math">NewTon Iteration</div><div class="code-tag-label code-tag-label-binary">Binary</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220405111251379.png" alt="image-20220405111251379"></p><h3 id="牛顿迭代法：">牛顿迭代法：</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sqrtByNewton</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">long</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i<span class="token operator">*</span>i<span class="token operator">></span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        i<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">+</span>x<span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201009180452249.png" alt="image-20201009180452249"></p><h3 id="二分法">二分法:</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sqrtWithBinary</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">long</span> result<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">long</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span>x<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         mid<span class="token operator">=</span><span class="token punctuation">(</span>right<span class="token operator">+</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">*</span>mid<span class="token operator">></span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             right<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">*</span>mid<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             left<span class="token operator">=</span>mid<span class="token punctuation">;</span>             result<span class="token operator">=</span>mid<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>             <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>mid<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">>=</span>right<span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>right<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token comment">/*    分析： 此处mid=(right+left+1)/2; 必须是在右中部。因为在左中部容易出现无限循环的现象    */</span> <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201009180734101.png" alt="image-20201009180734101"></p><h3 id="用除法避免-int-溢出的情况">用除法避免 int 溢出的情况</h3><p>用 int 型测试较大数字时， 由于 i*i 可能溢出，所以 需要提前设置为long 型 ，而后强转为 int</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span>x<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">/</span>mid<span class="token operator">==</span>mid<span class="token operator">||</span><span class="token punctuation">(</span>x<span class="token operator">/</span>mid<span class="token operator">></span>mid<span class="token operator">&amp;&amp;</span>x<span class="token operator">/</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//刚好</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">/</span>mid<span class="token operator">></span>mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//mid比根小</span>                left<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//mid比根大</span>                right<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="75-颜色分类-⭐⭐">75. 颜色分类 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Double Pointer</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220115145212197.png" alt="image-20220115145212197"></p><h3 id="审题-v11">审题</h3><ul><li>原地排序，返回的还是原来的数组</li><li>想法：三指针标识当前位置.难点：前段的插入会导致后一段向后移动。想法变更：先统计次数，然后提前设置好分界点</li></ul><h3 id="1-顺序移位（X）">1. 顺序移位（X）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">sortColors</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           color<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cntColor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>cntColor<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> color<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               i<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">int</span> min<span class="token punctuation">,</span>max<span class="token punctuation">,</span>k<span class="token punctuation">;</span>           min <span class="token operator">=</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               min <span class="token operator">+=</span> color<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           max <span class="token operator">=</span> min <span class="token operator">+</span> color<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> max <span class="token operator">&amp;&amp;</span> i <span class="token operator">>=</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               i<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> z <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> z<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               total <span class="token operator">+=</span> color<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>cntColor<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> total<span class="token punctuation">]</span><span class="token punctuation">;</span>           nums<span class="token punctuation">[</span>cntColor<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">+</span> total<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>           cntColor<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> max <span class="token operator">||</span> i <span class="token operator">&lt;</span> min<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           i<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span></code></pre></div><p>通过用例 85/87…</p><p>基于三指针</p><h3 id="2-单指针–多趟（R）">2. 单指针–多趟（R）</h3><p>利用单指针，先一遍将0排好，再将1排好，在LogN的时间复杂度内解决问题。要注意ptr究竟代表了什么 —&gt; 当前最小数字的最远索引</p><div class="note note-primary">            <p>不要小瞧这种在LogN的复杂度内多次遍历的情况，因为最终也代表了LogN的复杂度</p>          </div><h3 id="3-双指针（R）">3. 双指针（R）</h3><p>针对0 和 1的顺序双指针</p><p>注意：搞清楚P1 和 P2到底指向什么—&gt; 开始处那么我们可能会把一个 1 交换出去。当 p_0 &lt; p_1时，我们已经将一些 1连续地放在头部，此时一定会把一个 1交换出去，导致答案错误</p><h3 id="4-双指针（R）">4. 双指针（R）</h3><p>针对0 和 2 的相向双指针</p><p>相比之前的做法，也有需要注意的点：即2的指针交换i处位置后，要考虑交换的是什么，不能交换完就进行下一处交换了，因为可能交换后nums[i]的值是0或2.所以需要不停交换，直至不为2.</p><h2 id="104-二叉树的最大深度-⭐">104. 二叉树的最大深度 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-recursion">Recursion</div><div class="code-tag-label code-tag-label-tree">Tree</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201013151647518.png" alt="image-20201013151647518"></p><p>我的代码：</p><h3 id="递归法">递归法</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/*    try catch 抓nullpointer异常，避免报错    */</span>       <span class="token keyword">try</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root<span class="token punctuation">.</span>right<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       left<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    right<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> left<span class="token operator">></span>right<span class="token operator">?</span>left<span class="token operator">:</span>right<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201013151715852.png" alt="image-20201013151715852"></p><h3 id="思考-v13">思考</h3><ul><li><p>判断 Null 型对象以后 还是加上try -catch 语句更好</p></li><li><p>学会使用</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">left<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>right<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>类的递归方法</p></li></ul><hr><h2 id="105-前中序构造二叉树-⭐⭐">105. 前中序构造二叉树 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-stack">Stack</div><div class="code-tag-label code-tag-label-hash">Hash</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210409123330409.png" alt="image-20210409123330409"></p><h3 id="思路-v4">思路</h3><p>递归  node.left = …</p><h3 id="1-My-递归">1. My 递归</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">addLR</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>preorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">addLR</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">lookForPre</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>inorder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>val <span class="token operator">=</span> inorder<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">addLR</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">addLR</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span>i<span class="token operator">+</span>index<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lookForPre</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>inorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> inorder<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210409123449155.png" alt="image-20210409123449155"></p><p>时间复杂度 On？  空间复杂度 On</p><h3 id="2-hashmap的小改进">2. hashmap的小改进</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> hashMap<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>preorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token function">addLR</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>preorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">addLR</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">lookForPre</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>           node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       node<span class="token punctuation">.</span>val <span class="token operator">=</span> inorder<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>       node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">addLR</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">addLR</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span>i<span class="token operator">+</span>index<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> node<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lookForPre</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>hashmap增加了On的占用空间但在get num在中序数组中的位置时非常快…</p><p><strong>看来hashmap在算法题中还是很重要，设计到for循环查找时还是要考虑一下</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210409124022095.png" alt="image-20210409124022095"></p><h3 id="3-迭代-栈">3. 迭代 + 栈</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210409124118335.png" alt="image-20210409124118335"></p><p>也是类似阿里栈算法的那道题，比较难想…</p><h2 id="112-路径总和⭐">112. 路径总和⭐</h2><div class="code-tag-time">2023/3/12 11:15:00</div><div class="code-tag-label code-tag-label-dfs">DFS</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230312111505366.png" alt=""></p><h3 id="1-递归-X">1. 递归(X)</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>targetSum <span class="token operator">-</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="反思-v5">反思</h3><p>自己做这种递归题老是容易想多…</p><h2 id="113-路径总和II⭐⭐">113. 路径总和II⭐⭐</h2><div class="code-tag-time">2023/3/12 18:12:00</div><div class="code-tag-label code-tag-label-dfs">DFS</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230312170531781.png" alt=""></p><h3 id="思路-v5">思路</h3><ul><li>输出所有可能的路径；根节点到叶子结点；注意: 不是找到一条合适的路径就可以返回了，这里<strong>必须要遍历完所有的路径</strong>。</li><li>直接：遍历所有从根节点到叶子结点的可能，成功则将其加入到List中</li></ul><h3 id="1-遍历-DFS">1. 遍历/DFS</h3><p>核心思路还是与LeetCode-112.路径总和的问题差不多，但是需要注意的是这里是需要遍历完所有路径的。采用<strong>只能在一端增删的List</strong></p><ul><li>对当前不为空的元素，先添加进当前List中，递归判断是否是叶子结点且满足targetSum<ul><li>是：拷贝一份当前List副本并且存放至外层List中, 并且将当前元素从队尾删除</li><li>否：更新当前List的索引(最新元素的位置)。递归计算其左、右孩子是否满足条件。最终<strong>将当前元素从队尾删除</strong></li></ul></li></ul><p>需要注意的是，这里递归前后涉及到元素的队尾插入和队尾删除操作，也是有DFS思想的。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> total <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">method</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> list<span class="token punctuation">,</span> total<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">// index: 维护队尾状态的索引指针</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>targetSum <span class="token operator">-</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// add to total list</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> temp <span class="token operator">=</span>  <span class="token keyword">new</span>  <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                total<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curIndex <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">method</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> list<span class="token punctuation">,</span> total<span class="token punctuation">,</span> curIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> list<span class="token punctuation">,</span> total<span class="token punctuation">,</span> curIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>curIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="121-买卖股票-⭐">121. 买卖股票 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-dp">DP</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201007090522974.png" alt="image-20201007090522974"></p><p>我的代码：</p><h3 id="暴力法">暴力法</h3><ol><li><div class="code-wrapper"><pre><code class="language-java">//暴力法：    for二重循环 两指针索引 遍历    //缺点 ： 时间慢， 有重复计算           //时间复杂度：  O(n^2)  空间复杂度 O(1)--一个常量public static int maxProfit(int[] prices) &#123;        int max=0;        for(int i=0;i&lt;prices.length;i++)&#123;            for(int j=prices.length-1;j&gt;i;j--)&#123;                if(prices[j]-prices[i]&gt;max) &#123;                    max = prices[j] - prices[i];                &#125;            &#125;        &#125;        return max;    &#125;<pre class="language-none"><code class="language-none">   ![image-20201007090734202](https:&#x2F;&#x2F;s401177923-1302493622.cos.ap-nanjing.myqcloud.com&#x2F;mdImages&#x2F;image-20201007090734202.png)### 动态规划&#96;&#96;&#96;java&#x2F;&#x2F;动态规划  一次遍历&#x2F;&#x2F;原因：  买入的 股票价格总是在最前面！！！&#x2F;&#x2F;时间复杂度： O(n)  空间复杂度 O(1)--两个常量public static int maxProfit_2(int[] prices) &#123;        int max&#x3D;0,min&#x3D;Integer.MAX_VALUE;        for(int i&#x3D;0;i&lt;prices.length;i++)&#123;           if(prices[i]&lt;min)                min&#x3D;prices[i];            else if(prices[i]-min&gt;max)&#x2F;&#x2F;这一步很重要                max&#x3D;prices[i]-min;        &#125;        return max;    &#125;</code></pre></div></code></pre></li></ol><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201007092356306.png" alt="image-20201007092356306"></p><hr><h2 id="134-加油站-⭐⭐">134. 加油站 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-math">Math</div><p>在所求点后的过程量 &gt;= 0 的情况</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220228202154091.png" alt="image-20220228202154091"></p><h3 id="审题-v12">审题</h3><ul><li>油箱容量是无限的，开始油箱为空 ； 若存在解 则解唯一、</li><li>可能的数据结构：</li><li>可能的算法：迭代？动态规划？</li><li>先尝试最简单的：依次循环</li></ul><h3 id="1-暴力迭代-v2">1. 暴力迭代</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">canCompleteCircuit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gas<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cost<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gas<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> gas<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">>=</span> gas<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res <span class="token operator">+=</span> gas<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">-</span> gas<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>                    res <span class="token operator">-=</span> cost<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token operator">-</span> gas<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    res <span class="token operator">+=</span> gas<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    res <span class="token operator">-=</span> cost<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>理所应当的超时…</p><p>稍稍优化：temp[i] = gas[i] - cost[i];</p><h3 id="2-一次遍历">2. 一次遍历</h3><p>捞汁巨聪明，核心还是两个数组差值组成的新数组到达某一限度的判定问题。核心：</p><ul><li>before：管之前没有达标的那一部分数，就不用之后再回归头算一次了</li><li>res：管当前可能的累计和，有可能不会&lt;0，也可能&lt;0。如果&lt;0，则就需要累加到before上并清零这个res</li><li>若最终before  + res &lt; 0 则不存在这样的点，因为遍历了所有的点都不行</li></ul><p>这里我优化了一下：</p><ul><li>能够到达加油站的必要条件：差值数组和必须大于0</li></ul><p>这里单独把差值数组提前算出来是没有意义的，浪费了On的空间，所有结果的空间复杂度这么高，其余的话应该都是最优的。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">canCompleteCircuit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gas<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cost<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> n <span class="token operator">=</span> gas<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token keyword">int</span> res<span class="token punctuation">;</span>       <span class="token keyword">int</span> before <span class="token punctuation">;</span>       <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           sum <span class="token operator">+=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       before <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">+</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">+</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   before <span class="token operator">+=</span> res <span class="token operator">+</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                   res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                   index <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>               res <span class="token operator">+=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">+</span> before <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> index<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220301213651013.png" alt="image-20220301213651013"></p><p>解决一个自己很蠢的问题：<br>数组超出长度后回到头部：(i+cnt)%arr.length…不要再用什么if else判断了</p><h3 id="3-折线图的思想">3. 折线图的思想</h3><p>一种很巧妙的方法，也是不容易想通的。找出差值的最小值点，折线图表示的是以0加油站为起点的（在0加油站时没加油也没耗油）油耗情况，绿色代表gas 黄色代表cost。</p><p>折线图表示的肯定是一个或者多个V形的走势，那只需要把最小的那个点找出来，以那个点的下一个站为起点，在<strong>最终油量剩余量 &gt;= 0</strong>的情况下，肯定过程油量的&gt;=0的（因为图的起点不一样了，以那个站点为起点，则不可能再出现X轴的情况） <strong>可以理解是把图像竖直平移再水平平移（更换了站点）</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220301221158225.png" alt="image-20220301221158225"></p><blockquote><p>图摘自链接：<a href="https://leetcode-cn.com/problems/gas-station/solution/shi-yong-tu-de-si-xiang-fen-xi-gai-wen-ti-by-cyayc/">https://leetcode-cn.com/problems/gas-station/solution/shi-yong-tu-de-si-xiang-fen-xi-gai-wen-ti-by-cyayc/</a></p></blockquote><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">canCompleteCircuit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gas<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cost<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> gas<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> spare <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minSpare <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">int</span> minIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        spare <span class="token operator">+=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>spare <span class="token operator">&lt;</span> minSpare<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            minSpare <span class="token operator">=</span> spare<span class="token punctuation">;</span>            minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> spare <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>minIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：cyaycz</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/gas-station/solution/shi-yong-tu-de-si-xiang-fen-xi-gai-wen-ti-by-cyayc/。</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220301221650883.png" alt="image-20220301221650883"></p><p>作者的结果显示内存消耗为 72%，可能有误差，但这确实也从图像的方向上提供了一个非常好的思路</p><h2 id="137-只出现一次的数字II-⭐">137. 只出现一次的数字II ⭐</h2><p>只出现一次的数字I -----</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220504190821760.png" alt="image-20220504190821760"></p><h3 id="审题-v13">审题</h3><h3 id="1-Hash-List缓存">1. Hash + List缓存</h3><p>这个做法治标不治本，因为他并没有区分是其他数字都重复了三次，如果其他数字重复了N次，也可以通过这个做法来算，所以他不太可能是针对当前算法的最好解法，只能说是通解</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">++</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>O(2N)的时间复杂度 O(N)的空间复杂度。直接遍历Hash表的键值对也可以，这样空间复杂度能提到70%</p><p><img src="/home/pplong/.config/Typora/typora-user-images/image-20220504192025161.png" alt="image-20220504192025161"></p><h3 id="2-有限状态自动机（转）">2. 有限状态自动机（转）</h3><h2 id="146-LRU缓存-⭐⭐">146. LRU缓存 ⭐⭐</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210411092859009.png" alt="image-20210411092859009"></p><h3 id="思考-v14">思考</h3><p>get 和 put的方法说明</p><h3 id="1-My-LruHashMap">1. My LruHashMap</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Node</span> next<span class="token punctuation">,</span>prev<span class="token punctuation">;</span>       <span class="token keyword">int</span> key<span class="token punctuation">;</span>       <span class="token keyword">int</span> value<span class="token punctuation">;</span>       <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> cache<span class="token punctuation">;</span>   <span class="token keyword">private</span>  <span class="token keyword">int</span> size<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">MaxSize</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">Node</span> head<span class="token punctuation">,</span>tail<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token class-name">MaxSize</span> <span class="token operator">=</span> capacity<span class="token punctuation">;</span>       head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       tail<span class="token punctuation">.</span>prev  <span class="token operator">=</span> head<span class="token punctuation">;</span>       head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Node</span> res <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token function">addToTail</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> res<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>           head <span class="token operator">=</span> node<span class="token punctuation">;</span>           tail <span class="token operator">=</span> node<span class="token punctuation">;</span>           size<span class="token operator">++</span><span class="token punctuation">;</span>           cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Node</span> temp <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               temp<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>               <span class="token function">addToTail</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>               cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">addNewToTaile</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>               size<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token class-name">MaxSize</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token function">removeEldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   size<span class="token operator">--</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNewToTaile</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       node<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       node<span class="token punctuation">.</span>prev <span class="token operator">=</span> tail<span class="token punctuation">;</span>       tail<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>       tail <span class="token operator">=</span> node<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addToTail</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> tail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">Node</span> temp<span class="token punctuation">;</span>           temp <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           head <span class="token operator">=</span> temp<span class="token punctuation">;</span>           head<span class="token punctuation">.</span>prev <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>           <span class="token class-name">Node</span> prev<span class="token punctuation">,</span>next<span class="token punctuation">;</span>           prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>           next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               tail <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>               tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>               node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>               node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token function">addNewToTaile</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeEldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">Node</span> temp <span class="token punctuation">;</span>       cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>       temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       head <span class="token operator">=</span> temp<span class="token punctuation">;</span>       head<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Node</span> next<span class="token punctuation">,</span>prev<span class="token punctuation">;</span>       <span class="token keyword">int</span> key<span class="token punctuation">;</span>       <span class="token keyword">int</span> value<span class="token punctuation">;</span>       <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> cache<span class="token punctuation">;</span>   <span class="token keyword">private</span>  <span class="token keyword">int</span> size<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">MaxSize</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">Node</span> head<span class="token punctuation">,</span>tail<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token class-name">MaxSize</span> <span class="token operator">=</span> capacity<span class="token punctuation">;</span>       head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       tail<span class="token punctuation">.</span>prev  <span class="token operator">=</span> head<span class="token punctuation">;</span>       head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Node</span> res <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token function">addToTail</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> res<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>           head <span class="token operator">=</span> node<span class="token punctuation">;</span>           tail <span class="token operator">=</span> node<span class="token punctuation">;</span>           size<span class="token operator">++</span><span class="token punctuation">;</span>           cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Node</span> temp <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               temp<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>               <span class="token function">addToTail</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>               cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">addNewToTaile</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>               size<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token class-name">MaxSize</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token function">removeEldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   size<span class="token operator">--</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNewToTaile</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       node<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       node<span class="token punctuation">.</span>prev <span class="token operator">=</span> tail<span class="token punctuation">;</span>       tail<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>       tail <span class="token operator">=</span> node<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addToTail</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> tail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">Node</span> temp<span class="token punctuation">;</span>           temp <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           head <span class="token operator">=</span> temp<span class="token punctuation">;</span>           head<span class="token punctuation">.</span>prev <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>           <span class="token class-name">Node</span> prev<span class="token punctuation">,</span>next<span class="token punctuation">;</span>           prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>           next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               tail <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>               tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>               node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>               node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token function">addNewToTaile</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeEldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">Node</span> temp <span class="token punctuation">;</span>       cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>       temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       head <span class="token operator">=</span> temp<span class="token punctuation">;</span>       head<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>根据LinkedHashMap 而来 — 内部节点前后指针，并且存储通过 Key,Node&lt;Key,Value&gt;存</p><p>注意<strong>特殊情况判断</strong>（这里一个bug卡了很久很久），注意插入 时容量判断问题</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210411111403208.png" alt="image-20210411111403208"></p><h2 id="155-最小栈-⭐">155. 最小栈 ⭐</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210426175732260.png" alt="image-20210426175732260"></p><h3 id="思考-v15">思考</h3><h3 id="1-自定义">1. 自定义</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** initialize your data structure here. */</span>    <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token class-name">Node</span> next<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> min<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        min <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            min <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span>val <span class="token operator">></span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            min <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">==</span> min<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> node <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            min <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> node<span class="token punctuation">.</span>val<span class="token operator">></span>min<span class="token punctuation">.</span>val <span class="token operator">?</span>  min<span class="token operator">:</span>node<span class="token punctuation">;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> min<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210426181131420.png" alt="image-20210426181131420"></p><p>思路就是维护一个头指针，和一个最小指针，在pop时进行判断，虽然会有偶尔的On时间复杂度，但整体来说是好的。从Lru中学到</p><h2 id="162-寻找峰值-⭐⭐">162. 寻找峰值 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-binary">Binary</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210915162321698.png" alt="image-20210915162321698"></p><h3 id="审题-v14">审题</h3><ul><li>严格大于</li><li>包含多个，返回任意一个</li><li>时间复杂度O（logn），想到了二分？</li><li>返回的是索引值而不是值</li></ul><h3 id="1-顺序判断">1. 顺序判断</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>               nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">return</span> index<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               index<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               index <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210915184419620.png" alt="image-20210915184419620"></p><p>这里我最开始想到二分查找，但没想到如何二分，index+=2有点二分的意思，但这里不满足Ologn的时间复杂度(例如{1，2，3，4，5，6，7})</p><h3 id="2-二分查找（转）">2. 二分查找（转）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>目的是：在区间内有峰值</p><p>首先要注意题目条件，在题目描述中出现了 <strong>nums[-1] = nums[n] = -∞</strong>（这是关键！），这就代表着 只要数组中存在一个元素比相邻元素大，那么沿着它一定可以找到一个峰值</p><p>感觉还是审题没有仔细。。。</p><h2 id="172-阶乘后的零-⭐⭐">172. 阶乘后的零 ⭐⭐</h2><div class="code-tag-time">2022/3/28 21:20:00</div><div class="code-tag-label code-tag-label-math">Math</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220326102711274.png" alt="image-20220326102711274"></p><h3 id="审题-v15">审题</h3><ul><li>返回的是结果中含有的零的个数（0不算，要尾随）</li><li>数学层面：<ul><li>2 * 5 = 0</li></ul></li><li>思路：<ul><li>直接：算出数，然后依次 / 10  % 10看0的个数。不行：因为实际运算存在溢出</li><li>进阶：<ul><li>位运算？kcm？dp</li><li>👍   因式分解  看2 和 5的个数, 因为是尾随所以可以这样做</li><li>零的个数 = 原本有的 +  进位产生的</li><li>能否在On 或 Oc的时间复杂度内计算出？</li></ul></li></ul></li></ul><h3 id="1-因式分解">1. 因式分解</h3><p>我是傻杯之不读题……题的意思是<strong>尾随的零的个数</strong>，是最后几位全是零的个数，而不是求总的零的个数</p><p>故只需要找到 2 和 5的个数即可，取最小值因为除2 * 5外，<strong>其他的数相乘都不可能构成尾随零</strong>（但有可能构成中间零）</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">/</span><span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp <span class="token operator">/=</span> <span class="token number">5</span><span class="token punctuation">;</span>                b<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp <span class="token operator">=</span> temp <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>                a<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度在On之上</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220326112031199.png" alt="image-20220326112031199"></p><h4 id="反向优化">反向优化</h4><p>说白了是找5的个数，但是迭代时会有重复的5的倍数的记录，因此之类用map去替代，但效果甚至更差</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initHashMap</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            b <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">initHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> origin<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        origin <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">int</span> lastNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> div <span class="token operator">=</span> temp <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    lastNum <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> lastNum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    lastNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> lastNum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            temp <span class="token operator">=</span> origin<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></div><h4 id="优化-v2">优化</h4><p>其实2的个数是远大于5的个数的，所以只用统计5的个数即可</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> temp <span class="token operator">=</span> n<span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">/</span> <span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               temp <span class="token operator">=</span> temp <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span>               b<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           temp <span class="token operator">=</span> <span class="token operator">--</span>n<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> b<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220328192949855.png" alt="image-20220328192949855"></p><h3 id="2-数学公式-v2">2. 数学公式</h3><p>心态小炸，但还是想出来了</p><p>实际上就是数学问题，找n中含有5的个数，然后把这些N加起来，其实可以<strong>更宏观的来看</strong>，不用从每个数的角度来看。因为本身基于数学，所以肯定是有数学规律的，规律：</p><p><strong>每隔5^n - 1个数，就总计会有n个5出现</strong>     （思考思路可以从 <strong>额外贡献</strong>来看）</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> par <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">/</span> <span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">+=</span> n <span class="token operator">/</span> par<span class="token punctuation">;</span>            par <span class="token operator">*=</span> <span class="token number">5</span><span class="token punctuation">;</span>            temp <span class="token operator">/=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>O(log_5{N})的时间复杂度</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220328210847131.png" alt="image-20220328210847131"></p><h4 id="优化-v3">优化</h4><p>LeetCode题解，思路相同，但代码简洁许多</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        n <span class="token operator">/=</span> <span class="token number">5</span><span class="token punctuation">;</span>        ans <span class="token operator">+=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="反思-v6">反思</h3><ul><li>就估计这道题是数学问题，因为本来最开始使用方法加上优化已经还不错了，但是还是有问题，估计肯定有最简洁的数学公式在Oc的时间复杂度内计算出来</li><li>应用模型 👉 数学问题的转化还不能很明显的感知（比如这里找2 和 5  然后再到找5的这个过程是不太快速的）</li><li>⚠️ <strong>看问题有时候太细致，不够宏观</strong>，有时候从微观到宏观，从迭代到整体考虑，可能会有新的发现</li><li>有点死磕…</li></ul><h2 id="189-轮转数组-⭐⭐">189. 轮转数组 ⭐⭐</h2><div class="code-tag-time">2022/11.1 21:00:00</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20221101205933184.png" alt="image-20221101205933184"></p><h3 id="审题-v16">审题</h3><ul><li>需要思考的问题，想通过一次移位来解决，但需要确保移位后的 原来位置的元素的保存以及移位，要解决形成的递归关系难</li></ul><h3 id="1-多次单次移位">1. 多次单次移位</h3><p>超时</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">rotateByOne</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">rotateByOne</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="2-标志-双层前进">2. 标志+双层前进</h3><p>类似贪婪算法，维护一个当前的指标index，index前的元素都是已经右移k位的。如果对第index位，右移k位后，如果第 (index+k) % size位没有被右移，则将该位右移，依次迭代重复。时间复杂度在On</p><p>缺点：需要空间为On的数组来保存当前索引位上是否被右移的标志。</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>bucket <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">calloc</span><span class="token punctuation">(</span>numsSize<span class="token punctuation">,</span>  <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x1<span class="token punctuation">,</span> x2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> numsSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cur_index <span class="token operator">=</span> index<span class="token punctuation">;</span>        x1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>cur_index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>cur_index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// exchange relavant nums</span>            x2 <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token punctuation">(</span>cur_index <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token operator">%</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span><span class="token punctuation">(</span>cur_index <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> numsSize<span class="token punctuation">]</span> <span class="token operator">=</span> x1<span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>cur_index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            cur_index <span class="token operator">=</span> <span class="token punctuation">(</span>cur_index <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token operator">%</span>numsSize<span class="token punctuation">;</span>            x1 <span class="token operator">=</span> x2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20221101220112436.png" alt="image-20221101220112436"></p><h3 id="3-双层移位-gcd">3. 双层移位+gcd</h3><p>基于之前的递归类的右移，也就是一次性把一个索引位的元素 以及右移k位的元素 以及右移2k位的元素进行右移，也就是先处理一个循环周期内的元素…这里主要分两类讨论，设元素个数为n，右移次数为k</p><ol><li>n 恰好能被k整除，即能在一趟跑遍 n/k个元素，需要跑k躺：</li><li>n不能被k整除，分两种情况（其实合起来是一种情况）：<ol><li>一趟内跑遍n个元素，例如（n = 7， k=3）</li><li>一趟内跑不遍n个元素，只能跑完部分的元素，之后便会陷入重复（n = 8，k=6）</li></ol></li></ol><p>此时存在的数学关系： $$最终每个趟遍历元素数 = n / gcd(n, k) $$</p><p>此时就能在On的时间复杂度和O1的空间复杂度内解决问题（代码部分有待优化）</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        t <span class="token operator">=</span> a<span class="token operator">%</span>b<span class="token punctuation">;</span>        a <span class="token operator">=</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> out_foreach_count <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">%</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> numsSize <span class="token operator">/</span> <span class="token function">gcd</span><span class="token punctuation">(</span>numsSize<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        out_foreach_count <span class="token operator">=</span> numsSize <span class="token operator">/</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> numsSize <span class="token operator">/</span> k <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> out_foreach_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur_index <span class="token operator">=</span> i<span class="token punctuation">;</span>        x1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>cur_index<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// exchange relavant nums</span>            x2 <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token punctuation">(</span>cur_index <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token operator">%</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span><span class="token punctuation">(</span>cur_index <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> numsSize<span class="token punctuation">]</span> <span class="token operator">=</span> x1<span class="token punctuation">;</span>            cur_index <span class="token operator">=</span> <span class="token punctuation">(</span>cur_index <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token operator">%</span>numsSize<span class="token punctuation">;</span>            x1 <span class="token operator">=</span> x2<span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20221102201002428.png" alt="image-20221102201002428"></p><h3 id="4-数组翻转®">4. 数组翻转®</h3><p>LeetCode上提供的一种方法，也非常的巧妙。有时间可以再看一下。</p><h2 id="198-打家劫舍-⭐⭐">198. 打家劫舍 ⭐⭐</h2><div class="code-tag-time">2022/4/14 22:17:00</div><div class="code-tag-label code-tag-label-dp">DP</div><div class="code-tag-label code-tag-label-greedy">Greedy</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220414200221714.png" alt="image-20220414200221714"></p><h3 id="审题-v17">审题</h3><ul><li>不能在相邻的房间内偷窃，问题转换：判断一个数组在选定数无相邻情况下的和的最大值</li><li>特殊情况：可以一次跳多个数字，[6,1,2,9]，这种情况就可以跳2格，因为1-2的值小于0</li><li>可能的算法：贪心？DP？</li><li>思路：<ul><li>直接：</li><li>DP：初始化数组，数组中的值还有是否拜访了当前值的标记，第n种的思路可以等于等1 ~ n-1种之和，取n-1时则其不能拜访当前的值</li></ul></li></ul><h3 id="1-DP">1. DP</h3><p>贪心和DP的思想：我当前偷到第n户时我都保持了最大能偷的钱数，那么在偷第N+1家时，我需要注意：</p><ul><li>是否能偷这家？也就是是否偷了上家<ul><li>能偷则直接偷了因为肯定偷了比没偷好啊</li><li>不能偷，那要么不偷上家偷这家，要么偷上家不偷这家<ul><li>偷上上家+偷这家的钱 &gt; 偷上家不偷这家的钱，则偷这家钱的最大值就等于前者，并且还要说明偷了这家</li><li>偷上上家+偷这家的钱 &lt; 偷上家不偷这家的钱，则偷这家钱的最大值等于后者</li></ul></li></ul></li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">int</span> i<span class="token punctuation">;</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isGo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> curMax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     curMax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     isGo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>isGo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>curMax<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> curMax<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 curMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> curMax<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                 curMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> curMax<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 isGo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>             curMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> curMax<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             isGo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> curMax<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></div><p>O(N)的时间复杂度  O(N)的空间复杂度</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220414202724884.png" alt="image-20220414202724884"></p><h4 id="优化-v4">优化</h4><p><strong>DP从数组到常量个变量的经典优化</strong>：因为实际计算值只与curMax[i-1]、curMax[i-2]和isGo[i-1]有关，因此均可优化为常量级别的数组，以此降低空间复杂度到O© 。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> isGo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> curMax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        curMax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        isGo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isGo <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>curMax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> curMax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    curMax<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> curMax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    curMax<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> curMax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    isGo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                curMax<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> curMax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                isGo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            curMax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> curMax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            curMax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> curMax<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> curMax<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220414220207768.png" alt="image-20220414220207768"></p><p>题解用Math.max优化了分支代码，取消了isGo的遍历，这个优化需要注意！使得代码非常简便</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> second<span class="token punctuation">;</span>            second <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>first <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>            first <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre></div><p><strong>再回首</strong></p><div class="code-tag-time">2023/3/4 11:00:00</div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length  <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// day_x: x-1 days ago</span>      <span class="token keyword">int</span> day_3<span class="token punctuation">,</span> day_2<span class="token punctuation">,</span> day_1<span class="token punctuation">;</span>      <span class="token keyword">int</span> i<span class="token punctuation">;</span>      day_3 <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      day_2 <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      day_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          day_1 <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>day_3 <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> day_2<span class="token punctuation">)</span><span class="token punctuation">;</span>          day_3 <span class="token operator">=</span> day_2<span class="token punctuation">;</span>          day_2 <span class="token operator">=</span> day_1<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> day_2<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p>思路清晰了很多，先理清偷和不偷今天的盈利，然后考虑DP的数组形式，就能把大致思路想出来，再考虑DP的简化形式</p><h3 id="总结-v5">总结</h3><ul><li>这道题做的很快，因为思路很清楚，为什么思路清楚？因为提到了钱，讨论<strong>钱的最大值</strong>再加上本身<strong>问题有迭代性质因素</strong>，所以想到了贪心和DP</li><li><strong>然后先想清楚了大致思路才写的代码，把一些坑给避开了，这点很重要</strong></li></ul><h2 id="206-反转链表-⭐">206. 反转链表 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-recursion">Recursion</div><h3 id="1-迭代-v2">1. 迭代</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> head<span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> temp<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               temp <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>               pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>               cur <span class="token operator">=</span> pre<span class="token punctuation">;</span>               pre <span class="token operator">=</span> temp<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> cur<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201016183423559.png" alt="image-20201016183423559"></p><h3 id="2-递归-v2">2. 递归</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ListNode</span> cur<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">try</span><span class="token punctuation">&#123;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> head<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>             cur<span class="token operator">=</span><span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>      head<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> cur<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201016184502839.png" alt="image-20201016184502839"></p><hr><h2 id="212-单词搜索-II-⭐⭐⭐">212. 单词搜索 II ⭐⭐⭐</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210916143557702.png" alt="image-20210916143557702"></p><h3 id="审题-v18">审题</h3><ul><li>单词必须按照字母顺序，通过 <strong>相邻的单元格</strong> 内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。</li><li>类似DFS？</li><li>这里每一个单词首字母寻找肯定要耗费时间，能不能用dp规划出每个字母的相邻位置的字母</li><li>注意相同字母可能在表中出现多次</li></ul><h3 id="1-我的代码">1. 我的代码</h3><p>这里没有做出来，因为后面涉及到了DFS，没有考虑到</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">findWords</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> shouldExit <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">2</span> <span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">==</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token operator">||</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">==</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>shouldExit <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> words<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> wordsLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span>                    <span class="token keyword">int</span> y <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> his <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>words<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    his<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    his<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>wordsLength <span class="token operator">==</span> words<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            index<span class="token operator">++</span><span class="token punctuation">;</span>                            i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>                            j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                                            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> twin <span class="token operator">=</span> <span class="token function">isCharInAround</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>wordsLength<span class="token punctuation">)</span><span class="token punctuation">,</span>dp<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>his<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>twin <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        his<span class="token punctuation">[</span>wordsLength<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> twin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        his<span class="token punctuation">[</span>wordsLength<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> twin<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        x <span class="token operator">=</span> twin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        y <span class="token operator">=</span> twin<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        wordsLength<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                              <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> n <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    index<span class="token operator">++</span><span class="token punctuation">;</span>                                   <span class="token punctuation">&#125;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span>  words<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    shouldExit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">isCharInAround</span><span class="token punctuation">(</span><span class="token keyword">char</span> target<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> his<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> his<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>his<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> his<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><h3 id="2-前缀树-回溯-转">2. 前缀树+回溯 (转)</h3><p>这里前缀树之前没了解过，看了下结构，不错</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dirs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">findWords</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Trie</span> trie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">// 细节，去重</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> trie<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">Trie</span> now<span class="token punctuation">,</span> <span class="token keyword">int</span> i1<span class="token punctuation">,</span> <span class="token keyword">int</span> j1<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ans<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>now<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> board<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">;</span>        now <span class="token operator">=</span> now<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">// 避免找到重复的位置（也是我思路中卡壳的地方）</span>        board<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'#'</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dir <span class="token operator">:</span> dirs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> i2 <span class="token operator">=</span> i1 <span class="token operator">+</span> dir<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j2 <span class="token operator">=</span> j1 <span class="token operator">+</span> dir<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i2 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i2 <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j2 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j2 <span class="token operator">&lt;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> now<span class="token punctuation">,</span> i2<span class="token punctuation">,</span> j2<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 还原</span>        board<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> word<span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Trie</span><span class="token punctuation">></span></span> children<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isWord<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>word <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Trie</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Trie</span> cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cur<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur<span class="token punctuation">.</span>word <span class="token operator">=</span> word<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210916155107007.png" alt="image-20210916155107007"></p><p>复杂度分析</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210916154957941.png" alt="image-20210916154957941"></p><p>有时间得看一下前缀树，常用于<strong>字符串的查找</strong>，以后遇到这种问题可以纳入考虑</p><h3 id="3-删除被匹配的单词">3. 删除被匹配的单词</h3><h2 id="213-打家劫舍-II-⭐⭐">213. 打家劫舍 II ⭐⭐</h2><div class="code-tag-time">2021/4/20 18:48:00</div><div class="code-tag-label code-tag-label-dp">DP</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220417193550616.png" alt="image-20220417193550616"></p><h3 id="审题-v19">审题</h3><ul><li>房屋围成一圈，不能偷相邻的</li></ul><h3 id="1-DP-（转）">1. DP （转）</h3><p>寄，想复杂了。。。。。</p><p>其实只有三种情况：</p><ul><li>房间数=1，则就直接偷</li><li>房间数=2，选最多钱的偷</li><li>房间数&gt;2，看偷不偷第一家<ul><li>偷第一家，则不能偷最后一家</li><li>不偷一家，则能够偷（但不一定会偷）最后一家</li></ul></li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">robRange</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">robRange</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">robRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> first <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span> second <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> second<span class="token punctuation">;</span>            second <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>first <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>            first <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220420184557190.png" alt="image-20220420184557190"></p><h3 id="反思-v7">反思</h3><ul><li>这个题自己想复杂了，想成循环链表又想到如何动态规划</li><li>没有关注相比 I 题变换的本质：仅仅是首尾的变换，不影响中间元素。</li></ul><h2 id="219-存在重复元素II-⭐">219. 存在重复元素II ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-hash">Hash</div><div class="code-tag-label code-tag-label-sort">Sort</div><div class="code-tag-label code-tag-label-sw">Slide-Window</div><p>⏲️ 2022 / 1 / 19 11:30 AM</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220119102137168.png" alt="image-20220119102137168"></p><h3 id="审题-v20">审题</h3><ul><li>可能做法: 遍历肯定行；双指针？滑动窗口？栈？</li><li>注意：不必完全找出来所有的可能啊！</li><li>有点抽屉原理的感觉</li></ul><h3 id="1-遍历">1. 遍历</h3><p>对数组进行遍历，对每一个 i 向前看k个数，最终得到时间复杂度为$$O(N * K)$$</p><p>似乎还行？</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsNearbyDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">+</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220119102849895.png" alt="image-20220119102849895"></p><p>寄，当K接近N的时候，就变成$$O(N^2)$$的时间复杂度了，慢是正常的…考虑下一种</p><h3 id="2-哈希">2. 哈希</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsNearbyDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> hashmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> hashmap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> temp <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span>                     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220119104042709.png" alt="image-20220119104042709"></p><p>On的时间复杂度,On以上的空间复杂度（哈希表扩容），时间还是比较慢</p><p><strong>优化后</strong></p><p>set保证单一<br>remove保证没有过期元素</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsNearbyDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="3-桶">3. 桶</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> max<span class="token punctuation">,</span> min<span class="token punctuation">;</span>        max <span class="token operator">=</span> min <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span>                max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>                min <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> bucket<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                bucket<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> bucket<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                bucket<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre></div><p>失败，超出内存限制</p><h3 id="4-排序">4. 排序</h3><p>O(N * (logN))的快排，然后遍历比较就行<br>还需要一个数组来维护索引的顺序 On的空间复杂度</p><h3 id="5-滑动窗口-Hash（转）">5. 滑动窗口 + Hash（转）</h3><p>遍历过程中用哈希表存储元素并同时判断窗口大小是否超过了K。用哈希Set这里也就不用自己判断了</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsNearbyDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220119112251084.png" alt="image-20220119112251084"></p><p>牛逼…</p><h3 id="总结-v6">总结</h3><p>这里最开始做的时候思路大体是对的，要数字决定的索引之间的差值关系，就考虑用桶或者哈希，但自己用了哈希后感觉用桶排序会更快，但后面一直纠结实现桶排序但未考虑最大值而超出了内存限制。感觉自己还是一直纠结把索引保存下来，但其实这里不用保存索引关系，考虑了滑动窗口的问题只需要留一段窗口内的值就行了呀…</p><ul><li>看到值决定的索引间关系问题考虑用哈希</li><li>重复元素判别问题考虑Set，可能比Hash快</li><li>数组一定范围内的问题考虑滑动窗口，滑动窗口实现方式可以是多种多样的，不一定是数组哦！</li></ul><h2 id="223-矩形面积-⭐⭐">223. 矩形面积 ⭐⭐</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210930110121794.png" alt="image-20210930110121794"></p><h3 id="审题-v21">审题</h3><ul><li>两种情况：<ul><li>未覆盖</li><li>覆盖（可能完全包含）</li></ul></li><li>如何判断是否覆盖？</li><li>关键： 如何计算覆盖区域的面积？</li><li>难道是模拟？  分类太多，直接放弃</li></ul><h2 id="260-只出现一次的数字III-⭐⭐">260. 只出现一次的数字III ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-math">Bit</div><div class="code-tag-label code-tag-label-hash">Hash</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220307183103546.png" alt="image-20220307183103546"></p><h3 id="审题-v22">审题</h3><ul><li>恰好两个元素只出现一次，<strong>其他元素均出现两次</strong>；数组 —&gt; 一次遍历即为较优秀的算法</li><li>考虑线性时间复杂度的算法和常数空间复杂度</li><li>可能的做法：哈希</li><li>想法：<ul><li>简单：暴力循环。需要O(n^2)的时间复杂度</li><li>进阶：哈希两次外循环，需要O(n)时间复杂度和O(n)空间复杂度</li><li>高级：On的空间复杂度，想不出来…</li></ul></li></ul><h3 id="1-哈希-两次遍历">1. 哈希 两次遍历</h3><p>第一次遍历填值，第二次遍历判断</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220307183936426.png" alt="image-20220307183936426"></p><p>On的时间复杂度，但受到Map扩容方面的问题</p><h3 id="2-位运算（转）">2. 位运算（转）</h3><p>直接忘得一干二净，之前还专门有做过一模一样的题，忘了。比较有技巧性。一个异或的公式说明一切问题：</p><p>$$a \oplus b \oplus a =b$$  异或具有交换律、结合律、自反律</p><p>思路：所有异或结果最终为$a_1 \oplus a_2 $，肯定不等于0。然后再遍历一次，每一次用nums[i]去做&amp;运算，检验是否==1（&gt;0），不等于0则type1^=nums[i]，得到一类的数，等于0则type2 ^=nums[i]，得到另一类的数。<br>关键是理解这个两个不同的数通过&amp;运算被分配到两个不同类中</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> xorsum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            xorsum <span class="token operator">^=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 防止溢出</span>        <span class="token keyword">int</span> lsb <span class="token operator">=</span> <span class="token punctuation">(</span>xorsum <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE <span class="token operator">?</span> xorsum <span class="token operator">:</span> xorsum <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>xorsum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> type1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> type2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> lsb<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                type1 <span class="token operator">^=</span> num<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                type2 <span class="token operator">^=</span> num<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>type1<span class="token punctuation">,</span> type2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：LeetCode-Solution</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/single-number-iii/solution/zhi-chu-xian-yi-ci-de-shu-zi-iii-by-leet-4i8e/</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220307194816611.png" alt="image-20220307194816611"></p><h3 id="反思-v8">反思</h3><ul><li>主要还是能通过两个相同的数想到异或，这是解题的关键，想不到就直接寄…</li><li>走投无路时想想基本的方法，这里我dp 队列栈 都考虑过，但因为条件太少，题目简单，还是想不到方法，还忘了基本的位运算，确实条件越少就越该考虑。</li></ul><h2 id="263-丑数-⭐">263. 丑数 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-recursion">Recursion</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210410093526939.png" alt="image-20210410093526939"></p><h3 id="思考-v16">思考</h3><p>位运算？</p><h3 id="1-简单递归">1. 简单递归</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isUgly</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">isUgly</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">isUgly</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">isUgly</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210410094617676.png" alt="image-20210410094617676"></p><p>时间复杂度On</p><h3 id="2-迭代">2.  迭代</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isUgly</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">boolean</span> bool <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> n<span class="token operator">!=</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                n<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                n<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                n<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            bool  <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bool<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210410095627239.png" alt="image-20210410095627239"></p><p>还是很有感触，这迭代还是很快 … 所以能用迭代还是用迭代把</p><h2 id="279-完全平方数-⭐⭐">279. 完全平方数 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-dp">DP</div><div class="code-tag-label code-tag-label-bfs">BFS</div><div class="code-tag-label code-tag-label-math">Formula</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220119202324149.png" alt="image-20220119202324149"></p><h3 id="审题-v23">审题</h3><ul><li>完全平方数要最少。可能的组合那就最好是一个大的完全平方数和几个小的完全平方数相加  或者是 几个中等的完全平方数相加</li><li>对于单个数的判别方法：DFS.原数减去这个数，剩余的数重复之前的操作，若个数多了，则换成较小的继续</li><li>可能的做法： DFS；树结构？动态规划</li></ul><h3 id="1-动态规划-v4">1. 动态规划</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       methods<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       methods<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> min_x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>methods<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> methods<span class="token punctuation">[</span>i <span class="token operator">-</span> x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> methods<span class="token punctuation">[</span>min_x<span class="token punctuation">]</span> <span class="token operator">+</span> methods<span class="token punctuation">[</span>i <span class="token operator">-</span> min_x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   min_x <span class="token operator">=</span> x<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">*</span> temp <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>               methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> methods<span class="token punctuation">[</span>min_x<span class="token punctuation">]</span> <span class="token operator">+</span> methods<span class="token punctuation">[</span>i <span class="token operator">-</span> min_x<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> methods<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220119205450918.png" alt="image-20220119205450918"></p><p>拉跨拉跨，因为有$O(N^2)$的时间复杂度哟，还有On的空间复杂度，很多数的运算是浪费了的，因为根本用不到</p><h4 id="1-2-优化后的动态规划-（转）">1.2. 优化后的动态规划 （转）</h4><p>假设最开始都是最多数目的，即都只+1。动态规划方程的意义在于：</p><p>$$自然数 i 对应的最小数目 = min(当前值, i - 之前的一个完全平方数的最小数目 再 + 1$$</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 默认初始化值都为0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 最坏的情况就是每次+1</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">-</span> j <span class="token operator">*</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 动态转移方程</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220120113331761.png" alt="image-20220120113331761"></p><p>On的空间复杂度 Onlogn的时间复杂度</p><h3 id="2-BFS-剪枝-（转）">2. BFS + 剪枝 （转）</h3><p>BFS确保了当到这一层时，如果为余数为0，则一定是最小的数目。<br>注意这里visited确保的是不重复，第二层有一个3，第三层又有一个3，那肯定还是第二层的3的数目&lt;走第三层的3的数目，所以没必要要第三层的。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 经典做法，用来控制每层的循环的</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">int</span> head <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> sq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> sq<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">int</span> tmp <span class="token operator">=</span> head <span class="token operator">-</span> j <span class="token operator">*</span> j<span class="token punctuation">;</span>                  <span class="token comment">// 找到了第一个全由 完全平方数 组成的组合，减到0了已经</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">return</span> level<span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  <span class="token comment">// 比如同一层，已经有了1个1，那就不需要再放进去了</span>                  <span class="token comment">// 因为都在同一层，往后的层数结果肯定是一样的啊，就是剪枝！！！</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                      queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          level<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> level<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220120121648349.png" alt="image-20220120121648349"></p><p>空间复杂度大于On<br>时间复杂度On？</p><h3 id="3-数学公式-（转）">3. 数学公式 （转）</h3><div class="note note-primary">            <p><strong>四平方和定理</strong>：任意一个正整数都可以被表示为至多四个正整数的平方和。当前仅当$$n \neq 4^k \times (8m+7) $$，n可以被表示为至多三个正整数的平方和，而如果相等时，则n仅可以表示为四个正整数的平方和</p>          </div><p>由以上定理，则N !=…时，有三种情况：</p><ul><li>1种，则必为n的完全平方数</li><li>2种，n = a^2 + b^2 ，只需要枚举所有的a，判断n - a^2是否为完全平方数即可</li><li>3种，排除法</li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220120120554207.png" alt="image-20220120120554207"></p><p>空间复杂度 O1<br>时间复杂度 $$O(\sqrt n)$$</p><h3 id="总结-v7">总结</h3><p>做这一题的时候思路大概上还是对的，想到了动态规划，之后想到了自定义链表进而想到了DFS，但这道题是BFS解的…</p><ul><li>从树的角度：对多叉树的层数解法考虑BFS</li><li>从数组的角度：后一个值依赖于前几个值，考虑dp</li></ul><h2 id="292-Nim游戏-⭐⭐">292. Nim游戏 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-math">Inference</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210918150909064.png" alt="image-20210918150909064"></p><h3 id="审题-v24">审题</h3><ul><li>“你作为先手”</li><li>两个人，双方都尽力向拿走全部石头</li><li>“是否” ，“如果”</li><li>递归？树？</li></ul><p>Failed：没做出来，一直抓着递归来做，在“如何聪明的判断剩下的石头是否能完全使对方输掉”这个问题上纠结。。</p><h3 id="1-数学推理（转）">1. 数学推理（转）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*让我们考虑一些小例子。显而易见的是，如果石头堆中只有一块、两块、或是三块石头，那么在你的回合，你就可以把全部石子拿走，从而在游戏中取胜；如果堆中恰好有四块石头，你就会失败。因为在这种情况下不管你取走多少石头，总会为你的对手留下几块，他可以将剩余的石头全部取完，从而他可以在游戏中打败你。因此，要想获胜，在你的回合中，必须避免石头堆中的石子数为 44 的情况。我们继续推理，假设当前堆里只剩下五块、六块、或是七块石头，你可以控制自己拿取的石头数，总是恰好给你的对手留下四块石头，使他输掉这场比赛。但是如果石头堆里有八块石头，你就不可避免地会输掉， ********因为不管你从一堆石头中挑出一块、两块还是三块，你的对手都可以选择三块、两块或一块，以确保在再一次轮到你的时候，你会面对四块石头*********。显然我们继续推理，可以看到它会以相同的模式不断重复 n = 4, 8, 12, 16, \ldotsn=4,8,12,16,…，基本可以看出如果堆里的石头数目为 44 的倍数时，你一定会输掉游戏。如果总的石头数目为 44 的倍数时，因为无论你取多少石头，对方总有对应的取法，让剩余的石头的数目继续为 44 的倍数。对于你或者你的对手取石头时，显然最优的选择是当前己方取完石头后，让剩余的石头的数目为 44 的倍数。假设当前的石头数目为 xx，如果 xx 为 44 的倍数时，则此时你必然会输掉游戏；如果 xx 不为 44 的倍数时，则此时你只需要取走 x \bmod 4xmod4 个石头时，则剩余的石头数目必然为 44 的倍数，从而对手会输掉游戏。*/</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canWinNim</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>这里还是通过特殊情况4的判断，咬定了4作为唯一的特殊情况，延伸推理出4的倍数。比较巧妙的是</p><ul><li>先手</li><li>由于先手，无论你拿几个，只要我保证在4的倍数，就无法取得胜利</li></ul><h2 id="300-最长递增子序列-⭐⭐">300. 最长递增子序列 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-dp">DP</div><div class="code-tag-label code-tag-label-greedy">Greedy</div><div class="code-tag-label code-tag-label-binary">Binary</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210330164045435.png" alt="image-20210330164045435"></p><h3 id="思考-v17">思考</h3><p>可以不连续，  动态规划 dp   通项式</p><h3 id="1-自己写的dp">1. 自己写的dp</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> inmax <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>inmax <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            inmax <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>inmax <span class="token operator">!=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            k <span class="token operator">=</span> j<span class="token punctuation">;</span>            inmax <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>inmax <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;=</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> max<span class="token punctuation">;</span></code></pre></div><p>条件判断太多了  辣鸡</p><p>时间复杂度 O(n<sup>2</sup>)</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210330173053621.png" alt="image-20210330173053621"></p><h3 id="2-真正的dp">2. 真正的dp</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            maxans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> maxans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>作者：<span class="token class-name">LeetCode</span><span class="token operator">-</span><span class="token class-name">Solution</span>链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>longest<span class="token operator">-</span>increasing<span class="token operator">-</span>subsequence<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>chang<span class="token operator">-</span>shang<span class="token operator">-</span>sheng<span class="token operator">-</span>zi<span class="token operator">-</span>xu<span class="token operator">-</span>lie<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>soluti<span class="token operator">/</span>来源：力扣（<span class="token class-name">LeetCode</span>）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210330173937247.png" alt="image-20210330173937247"></p><h3 id="贪心-二分">贪心+二分</h3><p>没看懂 -------</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210330174705748.png" alt="image-20210330174705748"></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> d<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                d<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> len<span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 如果找不到说明所有的数都比 nums[i] 大，此时要更新 d[1]，所以这里将 pos 设为 0</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        pos <span class="token operator">=</span> mid<span class="token punctuation">;</span>                        l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                d<span class="token punctuation">[</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> len<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>作者：<span class="token class-name">LeetCode</span><span class="token operator">-</span><span class="token class-name">Solution</span>链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>longest<span class="token operator">-</span>increasing<span class="token operator">-</span>subsequence<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>chang<span class="token operator">-</span>shang<span class="token operator">-</span>sheng<span class="token operator">-</span>zi<span class="token operator">-</span>xu<span class="token operator">-</span>lie<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>soluti<span class="token operator">/</span>来源：力扣（<span class="token class-name">LeetCode</span>）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre></div><h2 id="322-零钱兑换-⭐⭐">322. 零钱兑换 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-dp">DP</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210407093902378.png" alt="image-20210407093902378"></p><h3 id="思考-v18">思考</h3><p>没有想dp …很拉  有想到DFS 不过没有实现</p><h3 id="1-记忆DFS">1. 记忆DFS</h3><h3 id="2-DP">2. DP</h3><h2 id="326-3的幂-⭐">326. 3的幂 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-recursion">Recursion</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210923151745526.png" alt="image-20210923151745526"></p><h3 id="审题-v25">审题</h3><ul><li>递归</li><li>迭代</li><li>位运算？</li></ul><h3 id="1-递归-v3">1. 递归</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfThree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n  <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">isPowerOfThree</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210923152724999.png" alt="image-20210923152724999"></p><h3 id="2-迭代-v2">2. 迭代</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfThree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210923153242918.png" alt="image-20210923153242918"></p><h2 id="337-打家劫舍III⭐⭐">337. 打家劫舍III⭐⭐</h2><div class="code-tag-time">2023/3/13 14:53:00</div><div class="code-tag-label code-tag-label-dp">DP</div><div class="code-tag-label code-tag-label-dfs">DFS</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20230313112945260.png" alt=""></p><h3 id="思考-v19">思考</h3><ul><li>打劫这一家 或者</li></ul><h3 id="1-DFS-超时">1. DFS(超时)</h3><ul><li>对当前元素，先看其父元素是否被偷窃，如果被偷，说明不能偷这个元素，并且**可以偷也可以不偷(不属于这次管)**该元素的子元素，从偷和不偷子元素的两种方案中原则最大的一种；</li><li>如果父元素没有被偷，则<strong>可以偷这个元素，也可以不偷这个元素</strong></li><li>最终取偷该元素和不偷该元素所带来的最大值</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">robByFlag</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">robByFlag</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// can rob this house</span>        <span class="token keyword">int</span> count_1<span class="token punctuation">,</span> count_2<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            count_1 <span class="token operator">=</span><span class="token function">robByFlag</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">robByFlag</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            count_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                count_2 <span class="token operator">=</span> <span class="token function">robByFlag</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">robByFlag</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>count_1<span class="token punctuation">,</span> count_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="2-DP-DFS-转">2. DP+DFS(转)</h3><p>f(o)表示选中当前节点 g(o)表示不选中当前节点</p><ul><li>当父元素o被选中时，o的左右孩子不能被选中，o被选中的情况下以o为根节点的树的最大权值之和为其左孩子的最大权值 + 右孩子的最大权值 $f(o) = g(l) + g® $</li><li>o不被选中时，o的左右孩子能被选中，也可以不被选中，此时$ g(o) = max{f(l), g(l)} + max{f®, g®} $;</li></ul><p>所以可以用哈希表存取每个节点的f值和g值，用DFS遍历得到g和f中每个节点对应的值</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>         f<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> node<span class="token punctuation">.</span>val <span class="token operator">+</span> g<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> g<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         g<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="344-反转字符串-⭐">344. 反转字符串 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-recursion">Recursion</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201008231317959.png" alt="image-20201008231317959"></p><p>我的代码：</p><h3 id="一次遍历">一次遍历</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//一次遍历？ 空间复杂度O(n)=1 ,时间复杂度O(n)=n;</span>        <span class="token keyword">char</span> temp<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            temp<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="递归法-v2">递归法</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reverse_1</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//递归法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">reverse_1</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>计算结果：</p><p>​<strong>一次遍历</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201008231524846.png" alt="image-20201008231524846"></p><p>​<strong>递归</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20201008232649376.png" alt="image-20201008232649376"></p><p>分析思考：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">1. 双指针 方法， 指向头尾指针，两标兵向中部靠齐，if循环和while判断都可以2. 采用递归，内存占用会高一点 ，执行用时也非常慢</code></pre></div><h2 id="357-统计各位数字都不同的的数字个数-⭐⭐">357. 统计各位数字都不同的的数字个数 ⭐⭐</h2><div class="code-tag-time">2022/4/12 19:37:00</div><div class="code-tag-label code-tag-label-dp">DP</div><div class="code-tag-label code-tag-label-math">Decimal</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220411155253559.png" alt="image-20220411155253559"></p><h3 id="审题-v26">审题</h3><ul><li><p>只有位数有两个位数相同则就不满足，给定的n代表10的n次方</p></li><li><p>思路：</p><ul><li><p>直接：</p><ul><li>按十进制拆分比较，递归\迭代,但各位数字</li></ul></li><li><p>进阶：</p><ul><li><p>数学公式：100以内有9个（因为十位和个位）<br>1000以内有（十位个位+个位百位十位百位+个位十位百位）但要区分冗余</p><ul><li>两位重复：也就是每两位重复的总数为9 * 9 * 2 + 9 *  9  2</li><li>三位重复：9</li></ul><p>对4位数来说：</p><ul><li>两位重复：<s>3 * (9 * 9 * 8 ) + 3 * (9 * 8 * 9)</s></li><li>三位重复：2 * 9 * 9+  2 * (9 * 9 )</li><li>四位重复：9</li></ul></li></ul></li></ul></li></ul><h3 id="1-按十进制遍历（OverTime）">1.  按十进制遍历（OverTime）</h3><p>按照十进制位数去取，然后通过bucket来哈希判断是否重复，超时，意料之中</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countNumbersWithUniqueDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>temp  <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>buc<span class="token punctuation">[</span>temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                buc<span class="token punctuation">[</span>temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                temp <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res <span class="token operator">+=</span> flag<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><h3 id="2-排列组合（转）">2. 排列组合（转）</h3><p>对n &gt; 1的情况,n由n-1的值(0 ~ 10 ^ (n-2)) 再 加上 (10 ^(n-1) ~ 10 ^(n - 1))决定，也就是个位为1-9，不为0，则剩下的位数则只能有9 - 8 - 7 …种取法，（注意 n &gt; 8后必然会有重复取值，所以最大值在n = 8时取得）。 这里的做法其实也可以有dp的思想</p><p>$$dp[i] = dp[i - 1] + (dp[i-1] - dp[i - 2]) * (10- (i - 1))$$</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countNumbersWithUniqueDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cur <span class="token operator">*=</span> <span class="token number">9</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>            res <span class="token operator">+=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：LeetCode-Solution</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/count-numbers-with-unique-digits/solution/tong-ji-ge-wei-shu-zi-du-bu-tong-de-shu-iqbfn/</span></code></pre></div><p>耗时就不看了 100%。这道题自己做的很遭，最开始 是想算出每一层的不满足条件的数，就分了很多种情况，想累加到一起，但一直有个差一些，不知道是哪里算错了。题解用正向求解的方法结合排列组合做起来就很容易，自己那种方法想了很久还想不对<br>反思！之后发现错误来源，对四位数，只有2位重复的，<strong>我考虑了aabc这种类型，却没有考虑aabb这种类型</strong>，也是2位重复的，导致我算的结果一直比正确结果少了243，正面去证明确实不是很好说明</p><h3 id="反思-v9">反思</h3><ul><li>别看的太细致，有时候宏观考虑</li></ul><h2 id="371-两整数之和-®-⭐⭐">371. 两整数之和 ® ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-math">Permutation and Combination</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210926185614618.png" alt="image-20210926185614618"></p><h3 id="审题-v27">审题</h3><ul><li>位运算</li></ul><h3 id="1-二进制计算器">1. 二进制计算器</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aArr <span class="token operator">=</span> <span class="token function">getBinaryArr</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bArr <span class="token operator">=</span> <span class="token function">getBinaryArr</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> maxArr<span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> minArr<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>aArr<span class="token punctuation">.</span>length <span class="token operator">></span> bArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           maxArr <span class="token operator">=</span> aArr<span class="token punctuation">;</span>           minArr <span class="token operator">=</span> bArr<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>           maxArr <span class="token operator">=</span> bArr<span class="token punctuation">;</span>           minArr <span class="token operator">=</span> aArr<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxArr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">boolean</span> needUp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> minArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>needUp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> minArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   needUp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                   res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                   res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|</span> minArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> minArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   needUp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                   res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|</span> minArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                   needUp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                   res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                   needUp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> minArr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>needUp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>maxArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                   needUp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                   res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>               res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>needUp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           res<span class="token punctuation">[</span>res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token function">getDenNum</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBinaryArr</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> origin <span class="token operator">=</span> num<span class="token punctuation">;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>num<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       origin <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>origin <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           i <span class="token operator">=</span> origin <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>           origin <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>           arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>           index <span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">boolean</span> needUp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           arr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>               arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>               needUp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>               <span class="token keyword">while</span><span class="token punctuation">(</span>needUp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       arr<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                       arr<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                       needUp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>                   d<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> arr<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDenNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> mi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               res<span class="token operator">+=</span>mi<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>            mi <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> res<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>这里主要通过将a,b两数字拆分成二进制进行相加，在二进制层面进行数的运算</p><p>做题所用的时间太久了，这里主要的问题包括</p><ul><li>未考虑清楚正、负的加减情况，生成二进制数时应该要对其进行正负的判断并且转换</li><li>未使用副本（num =/ 2）。直接使用原数进行运算，后面就造成了错误答案</li></ul><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210926185824078.png" alt="image-20210926185824078"></p><h3 id="2-位运算-转">2. 位运算(转)</h3><p>还是不太懂这里的算法。。。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> carry<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>于是，我们可以将整数 a 和 b 的和，拆分为 a 和 b 的<strong>无进位加法结果</strong>与<strong>进位结果</strong>的和。</p><p>同时，异或运算^ 经常用于<strong>无进位加法</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210926192743054.png" alt="image-20210926192743054"></p><h2 id="373-查找和最小的K对数字-⭐⭐">373. 查找和最小的K对数字 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-queue">PriorityQueue</div><div class="code-tag-label code-tag-label-binary">Binary</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220114115323944.png" alt="image-20220114115323944"></p><h3 id="审题-v28">审题</h3><ul><li>数组是升序排列</li><li>双指针？比较多个数？如何记住已经选了的数？（和相等的时候无法判断）</li><li>对索引为 i 的数组1和索引为 j 的数组2，有如下情况：<ul><li>j + 1 ,比较 i = 0</li><li>i + 1 ,比较 j = 0</li><li>以上情况都要考虑是否重复，且如果j或者i = nums.length的时候，要考虑重置</li></ul></li></ul><h3 id="1-优先队列（转）">1. 优先队列（转）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">kSmallestPairs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> nums1<span class="token punctuation">[</span>o1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span>nums2<span class="token punctuation">[</span>o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums1<span class="token punctuation">[</span>o2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums2<span class="token punctuation">[</span>o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 先指定Comparator规则</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         pq<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 避免矛盾或冗余</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">// 注意这里放在temp中的是索引而不是值！</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> idxPair <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>idxPair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>idxPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 关键。实现了延续判断后面的值</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>idxPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             pq<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>idxPair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> idxPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> res<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div><p>这题用优先队列的方法有道理。带Comparator的优先队列能保证在指定的一段序列中肯定是最小的那个先出去，自然实现了排序；并且先加入一段序列，消除了去重问题；我考虑的不同情况的判断也在这里得到消除；<br>时间复杂度  k · Logk</p><p><em>延伸：学习一下PriorityQueue的siftUp</em></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220114134046477.png" alt="image-20220114134046477"></p><h3 id="2-二分法（转）">2. 二分法（转）</h3><p>找到最佳近似值，得到所有小于的数对 ，找到相等的值的数对</p><h2 id="380-O-1-时间插入、删除和获取随机元素-⭐⭐">380. O(1)时间插入、删除和获取随机元素 ⭐⭐</h2><div class="code-tag-time">2022/4/13 09:46:00</div><div class="code-tag-label code-tag-label-hash">Hash</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220413182507923.png" alt="image-20220413182507923"></p><h3 id="审题-v29">审题</h3><ul><li>插入-删除元素存在-不存在时，返回false</li><li>随机返回，可以用之前学的抹除？</li><li>思路：<ul><li>插入和删除都要判断是否存在，所以O1时间内，应该用哈希表</li><li>主要在于随机返回是基于哈希表的，如何在O1时间内返回？</li></ul></li></ul><h3 id="1-哈希表-Random">1. 哈希表+Random</h3><p>Set存有效值，Map去根据顺序保存当前插入顺序为Key的值，随机查找不能在O1的时间内返回，且不是随机概率的，所以答案是无效的</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RandomizedSet</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set<span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token class-name">Random</span> rand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RandomizedSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>size<span class="token operator">++</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> randNum <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>randNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            randNum <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>randNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220413190943998.png" alt="image-20220413190943998"></p><h2 id="382-链表随机节点-⭐⭐">382. 链表随机节点 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-math">Inference</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220116185310605.png" alt="image-20220116185310605"></p><p><strong>已知数据有限对大数据的随机化问题的解决</strong></p><h3 id="审题-v30">审题</h3><ul><li><p><strong>每个节点被选中的概率一样</strong></p></li><li><p>Solution 是一个单独类，可以内含自己的数据结构</p></li><li><p>如何实现随机化吗？</p></li><li><p>做法：Random函数解决肯定太简单了。</p></li></ul><h3 id="1-API使用">1. API使用</h3><p>ArrayList 和 Random联用</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> arr<span class="token punctuation">;</span>    <span class="token class-name">Random</span> rand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>         rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//         int i =(int) Math.floor((Math.random() * arr.size()));</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220116190502069.png" alt="image-20220116190502069"></p><p>虽然用了API，但结果看起来还不错…缺点：在初始化时会遍历所有的节点，有LogN的时间复杂度，不切实际</p><p>去掉Random类改用Math的random方法使内存消耗略有提升</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220116190933542.png" alt="image-20220116190933542"></p><p>总的来说：</p><p>时间复杂度：初始化为On 选择时O1<br>空间复杂度：On</p><h3 id="2-蓄水池-转">2. 蓄水池(转)</h3><p>这里的问题主要是在仅能够读取1个数据的时候，如何实现大数据中的随机化问题。关键看这里<strong>如何保证了循环时取数据的平等概率</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220116193745179.png" alt="image-20220116193745179"></p><p><em><a href="https://leetcode-cn.com/problems/linked-list-random-node/solution/lian-biao-sui-ji-jie-dian-by-leetcode-so-x6it/">图片来源 – LeetCode官方题解</a></em></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListNode</span> inner<span class="token punctuation">;</span>    <span class="token class-name">Random</span> random<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        inner <span class="token operator">=</span> head<span class="token punctuation">;</span>        random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> temp <span class="token operator">=</span> inner<span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> temp<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res <span class="token operator">=</span> temp<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220116193005708.png" alt="image-20220116193005708"></p><h2 id="417-太平洋大西洋水流问题-⭐⭐">417. 太平洋大西洋水流问题 ⭐⭐</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220427175123815.png" alt="image-20220427175123815"></p><h3 id="审题-v31">审题</h3><ul><li>理清思路：<ul><li>如何判断是到大西洋还是太平洋？<ul><li>左上方 (i == 0 || j == 0) &amp;&amp; value &gt; 0</li><li>右下方 (i == m - 1 || j == n - 1) &amp;&amp; value &gt; 0</li></ul></li><li>核心问题，找到一条路径能够让当前元素的值分配1个点在其他较小元素且能到达边界</li></ul></li></ul><h3 id="1-DFS">1. DFS</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">pacificAtlantic</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> heights<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> temp<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heights<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">canGetPacific</span><span class="token punctuation">(</span>heights<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">canGetPacific</span><span class="token punctuation">(</span>heights<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canGetPacific</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> heights<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">boolean</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> heights<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> j <span class="token operator">==</span> heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> canGet <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            canGet <span class="token operator">=</span> <span class="token function">canGetPacific</span><span class="token punctuation">(</span>heights<span class="token punctuation">,</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">,</span> j<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>            heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>canGet <span class="token operator">&amp;&amp;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            canGet <span class="token operator">=</span> <span class="token function">canGetPacific</span><span class="token punctuation">(</span>heights<span class="token punctuation">,</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">,</span> j<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>            heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>canGet <span class="token operator">&amp;&amp;</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            canGet <span class="token operator">=</span> <span class="token function">canGetPacific</span><span class="token punctuation">(</span>heights<span class="token punctuation">,</span>i <span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>            heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>canGet <span class="token operator">&amp;&amp;</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>  heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            canGet <span class="token operator">=</span> <span class="token function">canGetPacific</span><span class="token punctuation">(</span>heights<span class="token punctuation">,</span>i <span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>            heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> canGet<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre></div><h4 id="Map优化">Map优化</h4><p>效果不明显</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canGet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>     </code></pre></div><h2 id="430-扁平化多级双向链表（R）-⭐⭐">430. 扁平化多级双向链表（R） ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-dfs">DFS</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210924152929520.png" alt="image-20210924152929520"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210924152935954.png" alt="image-20210924152935954"></p><h3 id="审题-v32">审题</h3><ul><li>DFS？</li></ul><h3 id="1-回溯法（×）">1. 回溯法（×）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Node</span> pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">Node</span> result <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token class-name">Node</span> mid <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isJump <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Node</span> pullNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>pullNode <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                isJump <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                mid <span class="token operator">=</span> pullNode<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token punctuation">.</span>child <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isJump<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>                pre<span class="token punctuation">.</span>next <span class="token operator">=</span> mid<span class="token punctuation">.</span>child<span class="token punctuation">;</span>                mid <span class="token operator">=</span> mid<span class="token punctuation">.</span>child<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                pre<span class="token punctuation">.</span>next <span class="token operator">=</span> mid<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                mid <span class="token operator">=</span> mid<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                mid <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            isJump <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span></code></pre></div><p>这里没有做出来，想法和回溯是一样的，不过在压栈的考虑上，对对象引用十分不熟悉。。导致压了之后还是会改变值</p><p>**反思：**java对象引用</p><h3 id="2-回溯法（转）">2. 回溯法（转）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Node</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token class-name">Node</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              node<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>              prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>child <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>              node<span class="token punctuation">.</span>child<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>              node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>child<span class="token punctuation">;</span>              node<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          prev <span class="token operator">=</span> node<span class="token punctuation">;</span>          node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210924175258855.png" alt="image-20210924175258855"></p><h3 id="3-DFS（转）">3. DFS（转）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token comment">// 记录链表的最后一个节点</span>        <span class="token class-name">Node</span> last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment">//  如果有子节点，那么首先处理子节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>child <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Node</span> childLast <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>                next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token comment">//  将 node 与 child 相连</span>                cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>child<span class="token punctuation">;</span>                cur<span class="token punctuation">.</span>child<span class="token punctuation">.</span>prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>                <span class="token comment">//  如果 next 不为空，就将 last 与 next 相连</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    childLast<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>                    next<span class="token punctuation">.</span>prev <span class="token operator">=</span> childLast<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 将 child 置为空</span>                cur<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                last <span class="token operator">=</span> childLast<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                last <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> last<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210924180621400.png" alt="image-20210924180621400"></p><h2 id="437-路径总和-I-R-⭐⭐">437. 路径总和 (I R) ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-dfs">DFS</div><div class="code-tag-label code-tag-label-presum">Prefix Sum</div><div class="code-tag-label code-tag-label-tree">Tree</div><div class="code-tag-label code-tag-label-foreach">InOrder Traversal</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210928150705690.png" alt="image-20210928150705690"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210928150712358.png" alt="image-20210928150712358"></p><h3 id="审题-v33">审题</h3><ul><li>二叉树，没有的节点用null表示</li><li>同一个节点可以有多个组合</li><li>包含负数</li><li>路径必须是向下！左右子节点不限</li><li>首先要确定遍历方式，中序遍历。</li><li>如何保存某个节点的递加值？dp？</li><li>以某个节点开始很重要。以某个节点结束不重要。确定遍历方式</li></ul><h3 id="1-递归-x">1. 递归(x)</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token function">pathSum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parent node : "</span> <span class="token operator">+</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">isNodeEqualNum</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">pathSum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> res<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">int</span> <span class="token function">isNodeEqualNum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">int</span> onLeft <span class="token operator">=</span> <span class="token function">isNodeEqualNum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>       <span class="token keyword">int</span> onMid <span class="token operator">=</span> <span class="token function">isNodeEqualNum</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span> <span class="token operator">+</span>node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>       <span class="token keyword">int</span> onRight <span class="token operator">=</span> <span class="token function">isNodeEqualNum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Currentnode: "</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">"  l m r"</span> <span class="token operator">+</span> onLeft<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>onMid<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>onRight<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>onLeft <span class="token operator">==</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"head left"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           res<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>onRight <span class="token operator">==</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"head right"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           res<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>onMid <span class="token operator">==</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"head mid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           res<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>这里有想到类似归并排序的那种分治，但是没有考虑到后续的结果如何叠加，三种情况下如何return 到想要的累加值。始终保留在两层递归，而不是多层…</p><h3 id="2-前缀和-转">2. 前缀和(转)</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// key是前缀和, value是大小为key的前缀和出现的次数</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> prefixSumCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 前缀和为0的一条路径</span>        prefixSumCount<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 前缀和的递归回溯思路</span>        <span class="token keyword">return</span> <span class="token function">recursionPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> prefixSumCount<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 前缀和的递归回溯思路     * 从当前节点反推到根节点(反推比较好理解，正向其实也只有一条)，有且仅有一条路径，因为这是一棵树     * 如果此前有和为currSum-target,而当前的和又为currSum,两者的差就肯定为target了     * 所以前缀和对于当前路径来说是唯一的，当前记录的前缀和，在回溯结束，回到本层时去除，保证其不影响其他分支的结果     * @param node 树节点     * @param prefixSumCount 前缀和Map     * @param target 目标值     * @param currSum 当前路径和     * @return 满足题意的解     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">recursionPathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> prefixSumCount<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> currSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.递归终止条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2.本层要做的事情</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 当前路径上的和</span>        currSum <span class="token operator">+=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token comment">//---核心代码</span>        <span class="token comment">// 看看root到当前节点这条路上是否存在节点前缀和加target为currSum的路径</span>        <span class="token comment">// 当前节点->root节点反推，有且仅有一条路径，如果此前有和为currSum-target,而当前的和又为currSum,两者的差就肯定为target了</span>        <span class="token comment">// currSum-target相当于找路径的起点，起点的sum+target=currSum，当前点到起点的距离就是target</span>        res <span class="token operator">+=</span> prefixSumCount<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>currSum <span class="token operator">-</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 更新路径上当前节点前缀和的个数</span>        prefixSumCount<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>currSum<span class="token punctuation">,</span> prefixSumCount<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>currSum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//---核心代码</span>        <span class="token comment">// 3.进入下一层</span>        res <span class="token operator">+=</span> <span class="token function">recursionPathSum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> prefixSumCount<span class="token punctuation">,</span> target<span class="token punctuation">,</span> currSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">+=</span> <span class="token function">recursionPathSum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> prefixSumCount<span class="token punctuation">,</span> target<span class="token punctuation">,</span> currSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4.回到本层，恢复状态，去除当前节点的前缀和数量</span>        <span class="token comment">// 这里这一步非常重要！避免由于Map中始终保留该路径的值而重复计算</span>        prefixSumCount<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>currSum<span class="token punctuation">,</span> prefixSumCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currSum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：burning-summer</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/path-sum-iii/solution/qian-zhui-he-di-gui-hui-su-by-shi-huo-de-xia-tian/</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210929100111640.png" alt="image-20210929100111640"></p><p>学习到这里的一种前缀和思想，可以用Map(cur - target)这种方式来解决，类似之前看到的快速在1 - 100 找到与一个数 相加 == 100的数，而且<strong>如何清退掉之前存储的数</strong>、<strong>如何选择递归顺序</strong>、<strong>如何递归累加结果</strong>，这是需要重新思考的</p><h3 id="3-DFS-转">3. DFS (转)</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">// 这个形式非常重要！！！</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">rootSum</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">+=</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">+=</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rootSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token comment">// ①</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ret<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// 解决递归解决不了当前前缀和的问题 targetSum - val，然后在①中去判断</span>        <span class="token comment">// 这一步很巧妙</span>        ret <span class="token operator">+=</span> <span class="token function">rootSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">+=</span> <span class="token function">rootSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210929101232901.png" alt="image-20210929101232901"></p><p>为什么会比前缀和慢这么多？ O(N<sup>2</sup>)的时间复杂度(全体遍历 + 对每个节点作为父节点的遍历)</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210929101549611.png" alt="image-20210929101549611"></p><p>这才是我想要的方法的正解，<strong>归并排序没有搞清楚</strong>。node 、left、right的对应函数调用关系混乱了，区分一下。</p><p>这里如何得到在递归中前缀和的值也需要关注。</p><h2 id="440-字典序的第K小的数字-⭐⭐⭐">440. 字典序的第K小的数字 ⭐⭐⭐</h2><blockquote><p>Time : 2022 / 3 / 23 22:07<br>TAG:</p></blockquote><h3 id="审题-v34">审题</h3><ul><li>注意是字典序的排序，并且是1 - n 的数字。</li><li>特殊点：12345，则有1 10 11 12…100 … 1000 … 10000 … 12345</li><li>思路：<ul><li>直接：<ul><li>根据n的大小判断，先看数量级。根据具体数量级<ol><li>数量级</li><li>在</li></ol></li></ul></li></ul></li></ul><p><strong>尝试失败…</strong></p><h2 id="447-回旋镖的数量-⭐⭐">447. 回旋镖的数量 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-hash">Hash</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210913202552248.png" alt="image-20210913202552248"></p><h3 id="审题-v35">审题</h3><ul><li>距离相等</li><li>考虑顺序</li><li>j、k不等，则必有两种可能</li><li>可能是数学公式？</li><li>动态规划？On*n复杂度？</li></ul><p>自己想的二位数组存储每个点对应其他点的值，然后查看二位数组中每行数组相同值有几个，通过排列组合做。</p><p>没做出来。。。。。。</p><h3 id="枚举-哈希表（转）">枚举+哈希表（转）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numberOfBoomerangs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">:</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> cnt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> q <span class="token operator">:</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> dis <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> cnt<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> cnt<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> m <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>没想到最终最初来居然是自己最开始想的思路。。。。嫌弃HashMap太慢自己用数组散列，结果屁没做出来。。裂开</p><p>没做出来：</p><ul><li>因为这里重复考虑时自己没想清楚，有m个点到第i个点相等。</li><li>排列组合数学公式有问题</li></ul><p>以后还是<strong>先考虑做出来，再想优化！！！！</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numberOfBoomerangs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>points<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>points<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">long</span> temp <span class="token operator">=</span> <span class="token function">getPointsDistance</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                max <span class="token operator">=</span> max<span class="token operator">></span>temp<span class="token operator">?</span> max<span class="token operator">:</span>temp<span class="token punctuation">;</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>points<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> column <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>points<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> max<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>column<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                max<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> max<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    total <span class="token operator">+=</span> <span class="token function">getSequenceCompose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> max<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getPointsDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> one<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> two<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>two<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>one<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>two<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>two<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token punctuation">(</span>one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>two<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSequenceCompose</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">reveseMutiple</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token function">reveseMutiple</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">reveseMutiple</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reveseMutiple</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            total <span class="token operator">*=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>自己修了下之前写的代码，最后结果应该是正确的，但内存消耗太大了，导致超出了内存限制…Shit！</p><h2 id="534-通过删除字母匹配到字典里最长单词-⭐⭐">534. 通过删除字母匹配到字典里最长单词 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-sort">Sort</div><div class="code-tag-label code-tag-label-dp">DP</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210914184047505.png" alt="image-20210914184047505"></p><h3 id="审题-v36">审题</h3><ul><li>可通过删除s中的<strong>某些字符</strong></li><li>答案不止一个，则返回长度最长且字典序最小的字符串</li></ul><h3 id="1-暴力迭代-双指针">1. 暴力迭代+双指针</h3><p>简单迭代法，比较笨。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findLongestWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> dictionary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token operator">:</span>dictionary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> sIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>           <span class="token keyword">int</span> dIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span>sIndex <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> dIndex <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sIndex<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>dIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   dIndex<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               sIndex<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>dIndex <span class="token operator">==</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">String</span> maxStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token operator">:</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> maxStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               maxStr <span class="token operator">=</span> str<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> maxStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judgeStrSeq</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>maxStr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   maxStr <span class="token operator">=</span> str<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> maxStr<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token comment">// 比较字符串的字典序,这里用compareTo就行</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">judgeStrSeq</span><span class="token punctuation">(</span><span class="token class-name">String</span> o<span class="token punctuation">,</span><span class="token class-name">String</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> o<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210914190012309.png" alt="image-20210914190012309"></p><p>优化，这里可以不要数组，直接一个maxStr作为比较对象。</p><p>时间复杂度：O(d×(m+n))，其中 dd 表示 dictionary 的长度，m表示 s 的长度，n 表示 dictionary 中字符串的平均长度。我们需要遍历}dictionary 中的 d 个字符串，每个字符串需要 O(n+m) 的时间复杂度来判断该字符串是否为 s 的子序列。</p><h3 id="2-排序（转）">2. 排序（转）</h3><p>有 想到这个方法，先排序，长度从长到短顺序来筛选，更容易删选到结果，这里不清楚如何对一个数组进行自定义排序了</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 内部其实是归并排序  </span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> word1<span class="token punctuation">,</span> <span class="token class-name">String</span> word2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> word1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>word2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>时间复杂度：O*(<em>d</em>×<em>m</em>×log<em>d</em>+<em>d</em>×(<em>m</em>+<em>n</em>))</p><h3 id="3-动态规划">3. 动态规划</h3><p>考虑前面的双指针的做法，我们注意到我们<strong>有大量的时间用于在 s中找到下一个匹配字</strong>符。</p><p>这样我们通过预处理，得到：<strong>对于 s 的每一个位置，从该位置开始往后每一个字符第一次出现的位置</strong></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210914192927774.png" alt="image-20210914192927774"></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findLongestWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> dictionary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> m <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token char">'a'</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                   f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> t <span class="token operator">:</span> dictionary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">boolean</span> match <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   match <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               j <span class="token operator">=</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   res <span class="token operator">=</span> t<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> res<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210914193020618.png" alt="image-20210914193020618"></p><p>这种方法似乎网传叫 <strong>序列自动机</strong>，用于子序列匹配。</p><p>只能说是牛皮它妈给牛皮开门，牛皮到家了。还是注意这里的主要思路看，大部分时间都花在查找s的字符匹配情况上了，那这里通过预处理，把s的所有情况列出来（最多也就length*26的二维数组）。后面判断则通过O(1)的时间复杂度去对比 耗费O(d x max(str.length))</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210914193233220.png" alt="image-20210914193233220"></p><h2 id="518-零钱兑换II-⭐⭐">518. 零钱兑换II ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-dp">DP</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220121094916992.png" alt="image-20220121094916992"></p><h3 id="审题-v37">审题</h3><ul><li>每种面额的硬币数目无限</li><li>可能的做法：动态规划？DFS？</li><li></li></ul><h3 id="1-链表实现的DFS-（超时）">1. 链表实现的DFS （超时）</h3><p>链表实现的DFS，能够到达底层就为总数加1，而且这里最开始犯了一个错误：<br>这里题目的意思是不区分1+2+2和2+2+1，后面想了一下，只要把这里新建Node的数据val，改成父节点的val，就能够实现从大到小的排除，而不用大费周章的改算法。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> temp<span class="token punctuation">;</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> coins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> coins<span class="token punctuation">[</span>coins<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curIndex <span class="token operator">=</span> coins<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>amount<span class="token punctuation">,</span>curIndex<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>father<span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>father<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    head <span class="token operator">=</span> head<span class="token punctuation">.</span>father<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>father<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    head<span class="token punctuation">.</span>val<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                total <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>father<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    head<span class="token punctuation">.</span>val<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>res <span class="token operator">-</span> coins<span class="token punctuation">[</span>head<span class="token punctuation">.</span>val<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                head<span class="token punctuation">.</span>val<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>res <span class="token operator">-</span> coins<span class="token punctuation">[</span>head<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">.</span>val<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>father <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res<span class="token punctuation">;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">;</span>    <span class="token class-name">Node</span> father<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> res<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>res <span class="token operator">=</span> res<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cnt <span class="token operator">=</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="2-数组实现的DFS-（超时）">2. 数组实现的DFS （超时）</h3><p>以为换用数组来时间会更快，没想到测了一下时间，两者相差无几，看来问题还是出在DFS上而不在于具体的实现方式</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>amount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> i <span class="token punctuation">,</span> j<span class="token punctuation">;</span>      i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> amount<span class="token punctuation">;</span>      arrIndex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> coins<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>arrIndex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>arrIndex<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arrIndex<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  j<span class="token operator">--</span><span class="token punctuation">;</span>                  i<span class="token operator">--</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              arrIndex<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              total <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>              i<span class="token operator">--</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  arrIndex<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> coins<span class="token punctuation">[</span>arrIndex<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              arrIndex<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> coins<span class="token punctuation">[</span>arrIndex<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          arrIndex<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arrIndex<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          i<span class="token operator">++</span><span class="token punctuation">;</span>          j<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> total<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><h3 id="3-完全背包（转）">3. 完全背包（转）</h3><h4 id="3-1-二维">3.1 二维</h4><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220121120553845.png" alt="image-20220121120553845"></p><p>加入一枚新的硬币后，可以有以下两种可能：</p><ul><li>要么是不要这枚硬币的组合</li><li>要么是加一枚这枚硬币的组合</li></ul><p>⏺️ 这里我有考虑到比如6块钱需要3枚2块硬币来组成，只加一枚那就会遗漏数目。但其实不会，因为它是叠加的过程，6块钱其实由2块钱而来，所以肯定会包含进去的</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>coins<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> row <span class="token operator">&lt;=</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>col<span class="token operator">>=</span>coins<span class="token punctuation">[</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">?</span>dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">-</span>coins<span class="token punctuation">[</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>coins<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220121120612552.png" alt="image-20220121120612552"></p><p>O(amount * coins.length)的空间复杂度<br>O(amount * coins.length)的时间复杂度</p><h4 id="3-2-一维优化">3.2 一维优化</h4><p>特点：值都由之前的值决定</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> coin <span class="token operator">:</span> coins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> coin<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coin<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：cheungq-6</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/coin-change-2/solution/hua-tu-li-jie-cong-chang-gui-er-wei-dpda-4gfy/</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220121121212373.png" alt="image-20220121121212373"></p><h3 id="总结-v8">总结</h3><p>自己总算是了确了DFS的执念了，之前一想到啥就容易想到DFS，但确实这类题的背包特点太明显了，自己对背包问题还是不熟悉，最开始想的也是从amount  1-n的迭代，但没想清楚如何用规划来迭代的算</p><ul><li>背包问题先从朴素方法解决，然后再优化到一维</li></ul><h2 id="539-最小时间差-⭐⭐">539. 最小时间差 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-sort">Sort</div><div class="code-tag-label code-tag-label-math">Pigeonhole Principle</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220118170616179.png" alt="image-20220118170616179"></p><h3 id="审题-v38">审题</h3><ul><li>最小时间差，正数，还必须用分钟数表示</li><li>难点：一个数组中的按一定规则相差最小的数，暴力法肯定是On^2的时间复杂度（针对每一个数，找到它的相差的最小数再依次比较）</li><li>可能的做法：双指针？排序后再做？</li></ul><h3 id="1-暴力法">1. 暴力法</h3><p>二次循环，On^2的时间复杂度，O1的空间复杂度</p><h3 id="2-排序后依次比较">2. 排序后依次比较</h3><p>先转化成可排的数组，Onlogn排序后依次比较差值，Onlogn的时间复杂度 On的空间复杂度（但在字符串的时间形式的数组转化可能耗费时间）</p><p>注意的就是不同区间的比较，有以下情况：</p><ul><li>00:00 , 23:59</li><li>00:00 11:59</li></ul><p><s>这两种情况是需要分别讨论的，这里用Math.min去判断</s></p><p><strong>优化</strong></p><p>不需要，因为这里比较前一个的差值，最后再算最后一个与第一个的差值就行了，所以我这里看了三种情况（实际只应该有两种），进行了三次最小值判断（实际不应该有）</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMinDifference</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> timePoints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> timeMinute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>timePoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> A_DAY <span class="token operator">=</span> <span class="token number">24</span><span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>timePoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> hour <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> minute <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            timeMinute<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> hour<span class="token operator">*</span><span class="token number">60</span> <span class="token operator">+</span>minute<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>timeMinute<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>timeMinute<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>timeMinute<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>timeMinute<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> A_DAY <span class="token operator">-</span> timeMinute<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> timeMinute<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>timeMinute<span class="token punctuation">[</span>timeMinute<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>timeMinute<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> A_DAY <span class="token operator">-</span> timeMinute<span class="token punctuation">[</span>timeMinute<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> timeMinute<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> timeMinute<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>timeMinute<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>timeMinute<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> A_DAY <span class="token operator">-</span> timeMinute<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> timeMinute<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>timeMinute<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>timeMinute<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> A_DAY <span class="token operator">-</span> timeMinute<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> timeMinute<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>timeMinute<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>timeMinute<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> A_DAY <span class="token operator">-</span> timeMinute<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> timeMinute<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>timeMinute<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>timeMinute<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> A_DAY <span class="token operator">-</span> timeMinute<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> timeMinute<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">></span> temp<span class="token punctuation">)</span>                 min <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> min<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220118175015264.png" alt="image-20220118175015264"></p><p>意外居然一次过 😦<br>空间复杂度On慢一点可以理解（<s>但这里也可以优化成O1的空间复杂度，直接在原List中解决</s> <strong>排序占用LogN的栈空间！！！</strong>），但因为OnLogn的时间复杂度所以只有70%，并且也不需要两次判断。 所以这题肯定是有LogN 的时间复杂度的解法滴</p><p>好吧，后来看了一下，我这个算法前面加个</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre></div><p>也是这个  …</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220118182641596.png" alt="image-20220118182641596"></p><h3 id="3-鸽巢原理（抽屉原理）-（转）">3. 鸽巢原理（抽屉原理） （转）</h3><p><strong>主要解决的是当N很大时，会有许多重复的时间</strong>（值得注意，加个判断就能解决上限问题），按照第二种方法的会有浪费的空间，能够将空间复杂度压缩到Log(min(N，60*24))</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMinDifference</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> timePoints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> timePoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1440</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> t0Minutes <span class="token operator">=</span> <span class="token function">getMinutes</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> preMinutes <span class="token operator">=</span> t0Minutes<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> minutes <span class="token operator">=</span> <span class="token function">getMinutes</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> minutes <span class="token operator">-</span> preMinutes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相邻时间的时间差</span>            preMinutes <span class="token operator">=</span> minutes<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> t0Minutes <span class="token operator">+</span> <span class="token number">1440</span> <span class="token operator">-</span> preMinutes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 首尾时间的时间差</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/minimum-time-difference/solution/zui-xiao-shi-jian-chai-by-leetcode-solut-xolj/</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220118181621011.png" alt="image-20220118181621011"></p><h3 id="4-优化-排序-鸽巢-（转）">4. 优化 - 排序+鸽巢 （转）</h3><p>前面第三题虽然用了字符串排序，但我猜这里字符串排序的时间还是慢于数字排序的，所以也是这里快一点的原因吧<br>后面看了一下，除了鸽巢原理基本上与第二种方法思路上相差无几（当然我的更笨一点）😓</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMinDifference</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> timePoints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timePoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1440</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>timePoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> timePoint <span class="token operator">=</span> timePoints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>timePoint<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>timePoint<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cache<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1440</span> <span class="token operator">-</span> cache<span class="token punctuation">[</span>cache<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：kyushu</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/minimum-time-difference/solution/rustgolangjava-pai-xu-ge-chao-li-lun-by-kt9yd/</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220118182353926.png" alt="image-20220118182353926"></p><p>我只能说，精彩…</p><h3 id="总结-v9">总结</h3><ol><li>碰到字符串或数字都可排序的情况，先考虑数字排序，因为可能更快</li><li>不要那些不必要的运算，想清楚…</li><li>考虑抽屉原理 差值要考虑N非常大的时候对N的限制，加if() return 的限制条件有时候有奇效！</li></ol><h2 id="589-N叉树的前序遍历-⭐">589. N叉树的前序遍历 ⭐</h2><div class="code-tag-time">2022/3/10 19:24:00</div><div class="code-tag-label code-tag-label-foreach">PreOrder Traversal</div><div class="code-tag-label code-tag-label-tree">Tree</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220310183725558.png" alt="image-20220310183725558"></p><h3 id="审题-v39">审题</h3><ul><li><p>前序遍历的概念</p></li><li><p>可能的算法：队列 栈</p></li><li><p>做前思路：</p><ul><li>简单：按照左儿子的深层遍历 递归</li></ul><h3 id="1-迭代-v3">1. 迭代</h3></li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">preorder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token class-name">Node</span> left<span class="token punctuation">,</span>right<span class="token punctuation">;</span>        <span class="token function">innerMethod</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> innerMethod <span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 重点主要在这一段话了</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token function">innerMethod</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220310190148587.png" alt="image-20220310190148587"></p><p>不错子，还是比较快想出来了。觉得迭代没有递归来得快，就递归了一下</p><h3 id="反思-v10">反思</h3><ul><li>最开始把条件看错了，以为是二叉树…</li><li>附一篇解决各种树 各种顺序遍历的问题总结 <a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/solution/yi-tao-quan-fa-shua-diao-nge-bian-li-shu-de-wen--3/">Link~~ ~~</a></li></ul><h2 id="599-两个列表的最小索引总和-⭐">599. 两个列表的最小索引总和 ⭐</h2><div class="code-tag-time">2022/3/14 21:34:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-hash">Hash</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220314194701439.png" alt="image-20220314194701439"></p><h3 id="审题-v40">审题</h3><ul><li>两个字符串数组中找相同的字符串，且索引和最小。输出所有可能答案</li><li>思路：<ul><li>简单：O(m) * O(n) 的时间复杂度，两层遍历（实际超过界限值就可以直接输出答案）</li><li>进阶：能否在O(m + n)即一次遍历后求出？</li></ul></li></ul><h3 id="1-双层循环">1. 双层循环</h3><p>暴力解法，找到最小值，然后再循环一次找索引和等于最小值的那些字符串</p><p>部分优化（空间复杂度提升10%）：</p><ul><li>List 去掉，换成记录数组长度的int</li><li>通过i + j &gt; minSum &amp;&amp; minSum != -1删除冗余的判断操作</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findRestaurant</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> minSum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> list2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>minSum <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    minSum <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">&lt;</span> minSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    minSum <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">>=</span> minSum <span class="token operator">&amp;&amp;</span> minSum <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> j <span class="token operator">&lt;=</span> minSum <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> list2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">==</span> minSum <span class="token operator">&amp;&amp;</span> list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220314201111868.png" alt="image-20220314201111868"></p><h3 id="2-双指针-v2">2. 双指针</h3><p>两个index同步增加，已达到这一时刻总是最小索引和的情况。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findRestaurant</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> minSum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           minSum<span class="token operator">++</span><span class="token punctuation">;</span>           i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           j <span class="token operator">=</span> minSum<span class="token punctuation">;</span>           <span class="token comment">// 避免溢出情况</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>minSum <span class="token operator">>=</span> list2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               j <span class="token operator">=</span> list2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>               i <span class="token operator">=</span> minSum <span class="token operator">-</span> j<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> list1<span class="token punctuation">.</span>length <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       count <span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> minSum <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> list1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>minSum <span class="token operator">-</span> i <span class="token operator">>=</span> list2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>minSum<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               ans<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> ans<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220314204259520.png" alt="image-20220314204259520"></p><p>感觉是最优的路线了，但复杂度还是偏高啊，理论上是O(m)*O(n)的时间复杂度</p><h3 id="3-哈希缓存">3. 哈希缓存</h3><p>思路还是来自能否在O(m + n)的时间复杂度内找到想要的值，先放一个数组元素过去，然后在哈希判断第二个数组中每个元素值是否在哈希表中存在，存在则说明相等，则增加其哈希值，（并与当前最小记录索引和比较）。集合用来进行当前最小索引和元素的清空和增加</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">        <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findRestaurant</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> curMin <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Integer</span> index <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>curMin <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        curMin <span class="token operator">=</span> index <span class="token operator">+</span> i<span class="token punctuation">;</span>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>curMin <span class="token operator">></span> index <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        curMin <span class="token operator">=</span> index <span class="token operator">+</span> i<span class="token punctuation">;</span>                        list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>curMin <span class="token operator">==</span> index<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度低 O(m + n)<br>空间复杂度高 O(m + n)，且大量字符串占据</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220314213243724.png" alt="image-20220314213243724"></p><h4 id="优化-v5">优化</h4><p>简单的一句 足矣…（在第二个集合判断之前插入判断，避免了之后的无用元素判断）</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// ...   </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>curMin <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">></span> curMin<span class="token punctuation">)</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token comment">// inserted</span>    <span class="token class-name">Integer</span> index <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220314222239803.png" alt="image-20220314222239803"></p><h3 id="反思-v11">反思</h3><ul><li>思路还算清晰，但是最开始没有想到O(n)的解决方法。以后解决问题 在优化思路上一定要先想到一次遍历就解决问题的方法，不要缠在多重嵌套中</li><li>优化方式注意：<strong>确保思路最优再考虑优化</strong>。有些优化看起来还不错，但涉及到最坏情况下，还是是不好的，是治标不治本的方法，考虑清楚是否划算再优化，不行就重新换思路。</li><li>对一些最小值 最大值的搜索问题，索引上优化时就可以进行临界判断，此后大于（或小于）这个值的都不要…</li></ul><h2 id="639-解码方法-⭐⭐⭐">639. 解码方法 ⭐⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-dp">DP</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210928150609009.png" alt="image-20210928150609009"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210928150616334.png" alt="image-20210928150616334"></p><h3 id="审题-v41">审题</h3><ul><li>6与06不同</li><li>‘‘*’’字符不表示0</li><li>队列？递归</li></ul><h3 id="1-递归（超时）-v2">1. 递归（超时）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> res<span class="token operator">=</span>  <span class="token function">getNum</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> res<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>           <span class="token comment">// two option</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span> <span class="token operator">||</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'2'</span> <span class="token operator">&amp;&amp;</span> chars<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'6'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> <span class="token function">getNum</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> <span class="token function">getNum</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getNum</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">// only one option</span>           <span class="token keyword">return</span> <span class="token function">getNum</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>超时…</p><p>测试后，答案正确，但耗时太长</p><h3 id="2-dp（转）">2. dp（转）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 优化后</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// a = f[i-2], b = f[i-1], c=f[i]</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c <span class="token operator">+=</span> b<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c <span class="token operator">+=</span> a<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210927185325220.png" alt="image-20210927185325220"></p><p>这里之前一直在想递归和迭代…有想过动态规划，但没规划出来…</p><p><strong>动态规划和递归的耗时</strong></p><p>dp做这道题  基本秒出，递归则需要7s左右，由此dp的重要性。</p><p>以后遇上递归超时的问题，要多考虑一下动态规划。。。。。<strong>看看能否以函数表达式去表示f(x)，进而使用dp解。</strong></p><h2 id="653-两数之和IV-输入BST-⭐">653. 两数之和IV-输入BST ⭐</h2><blockquote><p>Time : 2022 / 3 / 21 21 : 25<br>TAG : DFS \ BFS \ Hash \ InOrder Traversal</p></blockquote><div class="code-tag-time">2022/3/21 21:25:00</div><div class="code-tag-label code-tag-label-dfs">DFS</div><div class="code-tag-label code-tag-label-bfs">BFS</div><div class="code-tag-label code-tag-label-hash">Hash</div><div class="code-tag-label code-tag-label-tree">Tree</div><div class="code-tag-label code-tag-label-foreach">InOrder Traversal</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220321194434537.png" alt="image-20220321194434537"></p><h3 id="审题-v42">审题</h3><ul><li>看</li><li>思路：<ul><li>简单：<ul><li>对每个小于k的元素，找到a，找到等于k-a的元素</li><li>当然也可以一次遍历读出来，然后存到Hash表中，然后再找x-a，但这样就没意义了</li></ul></li></ul></li></ul><h3 id="1-前序搜索DFS">1. 前序搜索DFS</h3><p>先说总体思路：</p><ul><li>当前元素curNode.val是否比k小，如果小，则去找k-curNode.val是否在二叉搜索树中；<ul><li>先找left，整体是中序遍历</li><li>left找不到，找right</li><li>还找不到，寄</li></ul></li><li>比k大，则找left，直到比k小，找不到这样的数，寄</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findTarget</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeNode</span> curNode <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token comment">// Optimize: find lowest level that val &lt; k</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>curNode <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> curNode<span class="token punctuation">.</span>val <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                curNode <span class="token operator">=</span> curNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">preResearch</span><span class="token punctuation">(</span>curNode<span class="token punctuation">,</span> k<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">binaryResearch</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token class-name">TreeNode</span> originNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">binaryResearch</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>k<span class="token punctuation">,</span> originNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">binaryResearch</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>k<span class="token punctuation">,</span> originNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 1. in case of same val but different node</span>        <span class="token comment">// 2. in case of relocate to originNode (eg.&#123;1&#125; 2)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>originNode <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// Wrong Name, actually to be midSearch...</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preResearch</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> left <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> right <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> ans <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> <span class="token function">binaryResearch</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> k <span class="token operator">-</span> node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            left <span class="token operator">=</span> <span class="token function">preResearch</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            right <span class="token operator">=</span> <span class="token function">preResearch</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度：BST查找元素耗时O(logN) 最坏每个小于k的元素都找一次O((N-a)logN){但具体多少我这里不知道怎么算了，根据答案的结果来看应该是On？}，但其实是小于它的<br>空间复杂度：一个元素有O(N)的栈空间（方法占用）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220321204810908.png" alt="image-20220321204810908"></p><h3 id="优化点">优化点</h3><p><strong>优化点</strong></p><p>在preResearch中，判断条件，按照中序遍历的条件，<strong>哪一个能跑就直接跑</strong>，不过之后的是非了</p><p><strong>错误的优化点</strong></p><p>这里我最开始使用了这样的优化：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>curNode <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> curNode<span class="token punctuation">.</span>val <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>curNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              curNode <span class="token operator">=</span> curNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span></code></pre></div><p>其实这样想的思路的初衷是错误的，因为我仅仅考虑了为正整数的情况，当为负数时，非要找一个val &lt; k 的数，则会找到<strong>更左下方</strong>，但其实不影响结果，为什么？因为只要查找k - node.val的数是从root查找的，所以再怎样如果有对应的k-node.val的元素，就会找到，也算是一个小优化</p><h3 id="2-DFS-哈希（转）">2. DFS + 哈希（转）</h3><p>这是我说的没太大意思的方法的优化版本（DFS优化）</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findTarget</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>k <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findTarget</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">findTarget</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度波动较大 40% ~ 90%</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220321210857593.png" alt="image-20220321210857593"></p><h3 id="3-BFS-哈希表（转）">3. BFS + 哈希表（转）</h3><p>具体实现就不写了</p><h3 id="4-DFS-哈希表-双指针（转）">4. DFS + 哈希表 + 双指针（转）</h3><p>比较有意思，先把BST转化成数组，在数组层面上找</p><blockquote><p>具体地，我们使用两个指针分别指向数组的头尾，当两个指针指向的元素之和小于 kk 时，让左指针右移；当两个指针指向的元素之和大于 kk 时，让右指针左移；当两个指针指向的元素之和等于 kk 时，返回 。最终，当左指针和右指针重合时，树上不存在两个和为 kk 的节点，返回 \text{False}False。</p><p>原理见：LeetCode 167 两数之和II</p></blockquote><h3 id="反思-v12">反思</h3><ul><li>整体做的不行，整体思路出来快，但查错时间久，被各种null错误卡住，使用val \ left \ right 时没有进行非空判断出问题最多</li><li>能把中序的递归想出来还不错</li></ul><h2 id="655-输出二叉树⭐⭐">655. 输出二叉树⭐⭐</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220822205946866.png" alt="image-20220822205946866"></p><h3 id="审题-v43">审题</h3><ul><li>转化后矩阵的元素为字符串</li><li>是否要先确定树的高度从而来确定矩阵r x c的数值;或者在一次遍历的时候动态调整前面的长度<ul><li>row = height</li><li>col = 2^(height - 1) + 1</li></ul></li><li>思路：<ul><li>遍历树得出高度，再层次遍历填矩阵每一行的值；但这里每一层如何确定其兄弟元素之间的距离？</li></ul></li></ul><h2 id="693-交替位二进制数-⭐">693. 交替位二进制数 ⭐</h2><div class="code-tag-time">2022/3/28 19:55:00</div><div class="code-tag-label code-tag-label-math">Bit</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220328184317677.png" alt="image-20220328184317677"></p><h3 id="审题-v44">审题</h3><ul><li>有相同数字：<ul><li>1 相邻 2^n + 2 ^ (n -1)</li><li>0 相邻 同理</li></ul></li><li>可能的思路：位运算、左右位移？</li><li>思路：<ul><li>直接：<ul><li>转换成二进制，一步步比较</li><li>左右位移</li></ul></li><li>进阶：<ul><li>二进制 的位运算</li></ul></li></ul></li></ul><h3 id="1-位运算">1. 位运算</h3><p>思路还是比较清楚，关键是判断邻近的位是否重复，而邻近的位的重复情况是2 ^ n 与 2 ^ (n-1)与 这个数的关系，但这种比较可以通过右移并且 并上1 得到最后一位来判断</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasAlternatingBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> lastBit <span class="token operator">=</span> n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> n <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// temp / 2 == 0则不判断了</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果与前一位相同，则不满足</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lastBit <span class="token operator">==</span> <span class="token punctuation">(</span>temp <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        lastBit <span class="token operator">=</span> temp <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>位运算很快</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220328191353621.png" alt="image-20220328191353621"></p><h3 id="反思-v13">反思</h3><ul><li>&amp; 和 ^ 符号搞错了！！&amp; 是并    ^ 是异或  ~是同或</li><li>思路不错，想的比较块</li></ul><h2 id="704-二分查找-⭐">704. 二分查找 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-binary">Binary</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210906184027159.png" alt="image-20210906184027159"></p><h3 id="思考-v20">思考</h3><p>有序 升序 、返回下标</p><h3 id="1-二分查找">1. 二分查找</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                high <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>主要还是二分法的实现，注意while的判别条件  &lt;=</p><p>注意low 和 high的增加和减少，避免在 l h target在 1 2 2 情况下的问题</p><p>二分法还是有欠缺</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210906190015115.png" alt="image-20210906190015115"></p><h2 id="720-词典中最长的单词-⭐">720. 词典中最长的单词 ⭐</h2><div class="code-tag-time">2022/3/18 12:12:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-hash">Hash</div><div class="code-tag-label code-tag-label-presum">Prefix Sum</div><div class="code-tag-label code-tag-label-trietree">Trie Tree</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220317164310236.png" alt="image-20220317164310236"></p><h3 id="思考-v21">思考</h3><ol><li>该单词又其他单词逐步添加一个字母组成（不是这样的单词就不是正确答案，可能有其他随意的单词 ），不一定是从一个单词开始添加起（吗？），且可能是乱序。 多个答案则返回<strong>字典序最小</strong>的。</li><li>细节：一个字母后可以跟不同的字母，跟不同字母后最终长度可能变化。</li><li>可能的算法/数据结构：DFS？哈希？前缀之类的东西？</li><li>思路：<ul><li>简单：以某一个一个字母的单词为首，遍历数组，得到一个最终的单词，首字母存在。存在集合中？</li><li>进阶：老话：能否在On的时间复杂度内求得？</li></ul></li></ol><h3 id="1-哈希-前缀比较">1. 哈希-前缀比较</h3><p>HashSet作为判断容器。判断条件：</p><ol><li>首字母没加就加进去</li><li>这个单词的前n - 1个单词在set中，且这个单词不在set中就添加进去</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestWord</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> maxWord <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">String</span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> maxWord<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             maxWord <span class="token operator">=</span> next<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> maxWord<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             maxWord <span class="token operator">=</span> maxWord<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> next <span class="token operator">:</span>maxWord<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> maxWord<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度：设有最长单词数a个，单词长度为m，整体数组长度为M。则时间复杂度O(a) * O(m) * O(M)，非常高<br>空间复杂度：O(a * m)</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220317172450350.png" alt="image-20220317172450350"></p><h3 id="2-哈希-集合一次遍历">2. 哈希+集合一次遍历</h3><p>与之前思路相同，不过仅仅是一次遍历后，通过再次遍历每个元素，判断其前缀是否都存在</p><p>缺点：存在冗余的判断，比如a ap app 会依次判断</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestWord</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">String</span> maxWord <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> next <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> maxWord<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               maxWord <span class="token operator">=</span> next<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> maxWord<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               maxWord <span class="token operator">=</span> maxWord<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> next <span class="token operator">:</span>maxWord<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> maxWord<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度：O(a) * O(m)比之前稍微好一点<br>空间复杂度：O(n)</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220318101119632.png" alt="image-20220318101119632"></p><h4 id="优化-v6">优化</h4><p><strong>按字符串长度迭代</strong></p><p>一次遍历的思路：关键在于解决之前对每个元素前n-1个前缀都重复判断的冗余操作</p><p>核心思路：以数组元素的length为标杆，Set只存当前前length前缀都存在的字符串，按length遍历时，只用判断第length - 1个前缀（substring(0,length-1)）的那个字符串是否存在就行，感觉有一点dp的思路吗？</p><p>这里还有一个已优化点：如果出现字符串长度断层的现象，例如{“a”,“ab”,“abcd”}，这样也不会把abcd计入，并且不会再看之后长度的数组了（因为已经**产生断层，**后续字符串肯定不满足题意了）</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestWord</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> words<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            length<span class="token operator">++</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> maxWord <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> next <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> maxWord<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maxWord <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> maxWord<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maxWord <span class="token operator">=</span> maxWord<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> next <span class="token operator">:</span>maxWord<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> maxWord<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度：O(n) * O(length) （length为不断层的最大字符串长度）<br>空间复杂度：O(n)</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220318104618817.png" alt="image-20220318104618817"></p><p>官方解答跟我思路一致，但是是Arrays.sort先排序了一下数组，没有用到按层遍历，其实没有做断层方面优化，比 这里差一点，所以时间复杂度在60%</p><h3 id="3-字典树-前缀树">3. 字典树 / 前缀树</h3><p>解决字符串前缀匹配问题的好帮手！要先清楚其数据结构。抽空了解了一下字典树，非常适合解决此类问题</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestWord</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Trie</span> trie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> longest <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>trie<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> longest<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> longest<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> word<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>longest<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    longest <span class="token operator">=</span> word<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> longest<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Trie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> children<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isEnd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 最多26个字母</span>        children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        isEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Trie</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        node<span class="token punctuation">.</span>isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Trie</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>isEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> node <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>isEnd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：LeetCode-Solution</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/longest-word-in-dictionary/solution/ci-dian-zhong-zui-chang-de-dan-ci-by-lee-k5gj/</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220318110443715.png" alt="image-20220318110443715"></p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220318121136896.png" alt="image-20220318121136896"></p><h3 id="反思-v14">反思</h3><ul><li><p>思考错误：在for(;;)循环时想重新循环，在循环内部使用i = 0 导致出错，<strong>没有考虑每次循环后i 还会加1</strong> ，导致实际结果为 1 开始的情况。</p></li><li><p>脑袋不是很清晰</p></li><li><p>一次遍历的思想还是能提供主要思路！</p></li><li><p>for循环重置时i = -1 还是 i = 0 需要注意</p></li><li><p>未考虑length == 1时 把字符串加进集合中</p></li><li><p>字符串长度是方法，而不是属性（细节）</p></li><li><p>compareTo比较字符串的字典序！a.compareTo(b)：</p><ul><li><p>&lt; 0说明a的字典序小于b</p></li><li><blockquote><p>0 则a的字典序大于b</p></blockquote></li></ul></li></ul><h2 id="728-自除数-⭐">728. 自除数 ⭐</h2><div class="code-tag-time">2022/3/31 18:53:00</div><div class="code-tag-label code-tag-label-iteration">Iteration</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220331182909108.png" alt="image-20220331182909108"></p><h3 id="审题-v45">审题</h3><ul><li>返回的是范围内满足条件的数</li><li>可能的算法：DP(想法是好的)</li><li>思路：<ul><li>直接：<ul><li>拆分位数，按十进制除</li></ul></li></ul></li></ul><h3 id="1-迭代-v4">1. 迭代</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">selfDividingNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSelfDividNum</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSelfDividNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> div <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            temp <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>div <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">%</span> div <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>是真没想到最直接的方法居然接近最快…时间复杂度<em>O</em>(n* log_10{right})</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220331184331762.png" alt="image-20220331184331762"></p><h4 id="优化-v7">优化</h4><p>考虑预处理 + 索引，不过意义不是很大感觉</p><h4 id="思考-v22">思考</h4><ul><li>先把最简单的做出来再说难的吧</li></ul><h2 id="747-至少是其他数字两倍的最大数-⭐">747. 至少是其他数字两倍的最大数 ⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220113210501253.png" alt="image-20220113210501253"></p><h3 id="审题-v46">审题</h3><ul><li>最大整数的唯一性</li><li>至少是<strong>每个</strong>其他数字的两倍</li><li>能否在N的时间复杂度内完成？边找最大的边验证？</li><li>一种做法是先找到最大的数LogN 然后再遍历数组验证规则 LogN，时间复杂度是LogN</li></ul><h3 id="1-LogN的两次循环">1. LogN的两次循环</h3><p>审题时的想法，比较简单，两次LogN的搜索即可完成</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dominantIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             index <span class="token operator">=</span> i<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> max<span class="token punctuation">)</span>             <span class="token keyword">continue</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span>             sum<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> index<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220113211744734.png" alt="image-20220113211744734"></p><h3 id="2-同时找到最大值和次大值">2. 同时找到最大值和次大值</h3><p>没深想，稍微想到了这里</p><p>找到次大值只要判断次大值是否大于最大值即可，即省去了之后的第二次LogN的判断操作，但从整体的时间复杂度来看两者是一样的</p><h2 id="781-森林中的兔子（华为）-⭐⭐">781. 森林中的兔子（华为） ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-hash">Hash</div><div class="code-tag-label code-tag-label-math">Math</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210907152833634.png" alt="image-20210907152833634"></p><h3 id="思考-v23">思考</h3><p>注意回答是<strong>还有</strong>几只兔子颜色相同，注意相同数字的索引集合数目，是否超过其本身数字，肯定是需要遍历全的，至少On复杂度</p><h3 id="1-哈希表-计数清零">1. 哈希表+计数清零</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numRabbits</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> answers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>answers<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>  hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>answers<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>answers<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> answers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sCount <span class="token operator">=</span> answers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sCount<span class="token punctuation">,</span>hashMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>sCount<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sCount<span class="token punctuation">)</span> <span class="token operator">></span> sCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            total <span class="token operator">+=</span> sCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sCount<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> integer <span class="token operator">:</span> hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        total <span class="token operator">+=</span> integer <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210907154710259.png" alt="image-20210907154710259"></p><p>这里主要解决的问题就是在(1,1,1,1,1)的这种情况下，排除都是同一类的情况，在超过总和时，直接增加到最终计数中</p><h3 id="2-数组代替哈希表">2. 数组代替哈希表</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numRabbits</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> answers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>answers<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> total<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> answers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> answers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                max <span class="token operator">=</span> answers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> answers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sCount <span class="token operator">=</span> answers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>sCount<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>sCount<span class="token punctuation">]</span> <span class="token operator">></span> sCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                total <span class="token operator">+=</span> sCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>sCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            total <span class="token operator">+=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210907155156265.png" alt="image-20210907155156265"></p><p>考虑到哈希表读取速度，以及后续扩容问题（但我这里提前设置容量，所以不存在）。为了节省时间，这里采用原来方法的数组代替哈希表的存取操作，先遍历一次，取得最大值。</p><p>后续这里的改进主要是可以从max 和min值，对nums容量进行空间范围的缩小。</p><h3 id="3-数学方法（不太懂）">3. 数学方法（不太懂）</h3><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210907191535279.png" alt="image-20210907191535279"></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numRabbits</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> answers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">:</span> answers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            count<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> count<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> count<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> y <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210907191620776.png" alt="image-20210907191620776"></p><h3 id="遗留问题">遗留问题</h3><p>HashMap的四种遍历，哪种快一点？</p><h2 id="819-最常见的单词-⭐">819. 最常见的单词 ⭐</h2><div class="code-tag-time">2022/4/17 17:34:00</div><div class="code-tag-label code-tag-label-hash">Hash</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220417185854100.png" alt="image-20220417185854100"></p><h3 id="审题-v47">审题</h3><ul><li>要求：不在禁用列表中，且出现次数最多。</li><li>猜想：必须要遍历一次</li></ul><h3 id="1-Hash">1. Hash</h3><p>读取每个单词，然后看Hash表中有无相同的元素（且不为-1，-1代表是被禁止的），然后实行自增，维护一个变量记录当前的最大出现次数的单词。优化点是没有用当前单词去循环比较banned数组看有没有被禁止的单词，而是用了哈希表的方式，比较快速。（代码写的很丑，严格意义上答案的题解不是一个段落，有例如&quot;Bob&quot;这样的字符串，没有以 . 结尾）</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mostCommonWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> paragraph<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> banned<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> strMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> curMax <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> banned<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          strMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>banned<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paragraph<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>begin <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token char">'a'</span> <span class="token operator">&amp;&amp;</span> paragraph<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token char">'z'</span> <span class="token operator">||</span> paragraph<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token char">'A'</span> <span class="token operator">&amp;&amp;</span> paragraph<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token char">'Z'</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              start <span class="token operator">=</span> i<span class="token punctuation">;</span>              begin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>begin <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token char">'a'</span> <span class="token operator">&amp;&amp;</span> paragraph<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token char">'z'</span> <span class="token operator">||</span> paragraph<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token char">'A'</span> <span class="token operator">&amp;&amp;</span> paragraph<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token char">'Z'</span> <span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> paragraph<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              end <span class="token operator">=</span> i<span class="token punctuation">;</span>              begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token class-name">String</span> curWord <span class="token operator">=</span> paragraph<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> numInMap <span class="token operator">=</span> strMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>curWord<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>numInMap <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  strMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>curWord<span class="token punctuation">,</span>numInMap<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  curMax <span class="token operator">=</span> strMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>curMax<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> numInMap <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">?</span> curMax <span class="token operator">:</span> curWord<span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>begin <span class="token operator">==</span> <span class="token number">1</span>  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token char">'a'</span> <span class="token operator">||</span> paragraph<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token char">'z'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> paragraph<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token char">'Z'</span><span class="token operator">||</span> paragraph<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              end <span class="token operator">=</span> i<span class="token punctuation">;</span>              begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token class-name">String</span> curWord <span class="token operator">=</span> paragraph<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> numInMap <span class="token operator">=</span> strMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>curWord<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>numInMap <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  strMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>curWord<span class="token punctuation">,</span>numInMap<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  curMax <span class="token operator">=</span> strMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>curMax<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> numInMap <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">?</span> curMax <span class="token operator">:</span> curWord<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> curMax<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220417192846808.png" alt="image-20220417192846808"></p><h3 id="反思-v15">反思</h3><ul><li>题解中更好的方法去**判断当前字符是否是英文字符（包括大小写）：Character.isLetter();**题解用Set去维护的banned数组，一样的思路，更加简洁</li></ul><h2 id="821-字符的最短距离-⭐">821. 字符的最短距离 ⭐</h2><div class="code-tag-time">2022/4/20 19:43:00</div><div class="code-tag-label code-tag-label-foreach">Twin Pointer</div><div class="code-tag-label code-tag-label-list">List</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220420184955890.png" alt="image-20220420184955890"></p><h3 id="审题-v48">审题</h3><ul><li>返回的距离是最近的。</li><li>想法：双指针？</li><li>思路：<ul><li>直接：<ul><li>双指针：i用于作为外部循环，i != c时，则 j++，j负责找到最近的c，当i超过j时，维护旧的j，需要找新的c来做Math.min的判断</li></ul></li></ul></li></ul><h3 id="1-双指针">1. 双指针</h3><p>区间问题，维护两个指针和一个变量，先找到第一个较近的相等字符索引位置 k</p><ul><li>当前迭代序号 &lt; 靠后指针索引且<strong>靠后指针有效</strong>（靠前指针指向的不是最后一个相等字符的索引）：则需要比较与靠前和靠后指针索引的最小值</li><li>当前迭代序号 &gt; 靠后指针索引且靠后指针有效：更新靠后指针与靠前指针（需要注意界限问题，与最开始靠前指针的取值条件）</li><li>靠后指针无效，则直接取值为：当前位置-靠前指针</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">shortestToChar</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// i: 当前遍历的字符索引 j: 靠前的与c相等的字符索引 k: 靠后的与c相等的字符索引</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">-</span> k<span class="token punctuation">,</span> j <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            k <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> c <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">-</span> k<span class="token punctuation">,</span> j <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>O(n+n)的时间复杂度</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220420191448279.png" alt="image-20220420191448279"></p><h3 id="2-集合">2. 集合</h3><p>先遍历一次把所有的相同字符索引存起来，然后通过每次迭代时判断当前索引与集合中索引的关系即可，思路与上解相似。但时间复杂度很低，考虑可能需要先遍历一次字符串？</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">shortestToChar</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">></span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">,</span> i <span class="token operator">-</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220420194109506.png" alt="image-20220420194109506"></p><h2 id="908-最小差值I-⭐">908. 最小差值I ⭐</h2><div class="code-tag-time">2022/4/30 11:06:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220430105059190.png" alt="image-20220430105059190"></p><h3 id="审题-v49">审题</h3><ul><li>核心：在对每个数在[-k,k]的变化范围内，是否与另一个数相减有最小值</li><li>分析：<ul><li>每个数都<strong>必须遍历一次</strong>！最佳时间复杂度是On</li></ul></li><li>思路：<ul><li>直接：<ul><li>先确定最小值最大值<ul><li>如果差值小于<strong>2 * k</strong>，则直接等于0</li><li>若差值大于2 * k，则返回差值-2k的值？</li></ul></li></ul></li></ul></li></ul><h3 id="1-遍历-v2">1. 遍历</h3><p>遍历找最大值，和最小值，与2 * k 的值进行比较。On的时间复杂度，O1的空间复杂度</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">smallestRangeI</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> max <span class="token operator">-</span> min <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220430110515116.png" alt="image-20220430110515116"></p><h3 id="反思-v16">反思</h3><ul><li>Math.max或者Math.min部分影响内存消耗和执行用时，直接换成三目运算符</li></ul><h2 id="954-二倍数对数组-⭐⭐">954. 二倍数对数组 ⭐⭐</h2><div class="code-tag-time">2022/4/2 09:42:00</div><div class="code-tag-label code-tag-label-hash">Hash</div><div class="code-tag-label code-tag-label-sort">Sort</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220401184802279.png" alt="image-20220401184802279"></p><h3 id="审题-v50">审题</h3><ul><li>长度为偶数，已给定.要对arr进行重组</li><li>可能的算法：</li><li>思路：<ul><li>直接：<ul><li>实际就每个数要有一个对应的数要么是它的二倍要么是它的2/1，考虑用哈希表，存储数据值和这个数出现的数目。再次遍历，查这个数的2倍或者2/1是否存在。（但可能的情况是，先找2倍，但后面会发现不满足[4,8,2,16]，所以可能用到回溯）</li></ul></li></ul></li></ul><h3 id="1-哈希-DFS-超时">1. 哈希+DFS(超时)</h3><p>比较直接但很麻烦的想法，对原始数组，先遍历一次，计数放入哈希表中；针对递增索引，都进行情况为 num / 2 和 num*2的哈希查询，如果不为0，则两者计数都-1并进入下一层，DFS，回到本层时要还原现场。因为DFS，所以浪费了很多时间，没有必要，超时了理所当然</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canReorderDoubled</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp<span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 匹配成功</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 这个数已经被用了</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">boolean</span> a <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 奇偶判断，如果是奇数，则num/2的情况肯定是false的(num为整数)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        b <span class="token operator">=</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>arr<span class="token punctuation">,</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 还原现场</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>arr<span class="token punctuation">,</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><h3 id="2-排序-迭代">2. 排序+迭代</h3><p>加上了排序，这样就能避免在无序的数组中通过回溯的方式查找。通过有序的方式从小到大的搜索。并且有易忽略点：对于有序数组，对于负数，其实是arr[i*2] == arr[i * 2+1] * 2，而不能直接用题述的arr[2 * i + 1] == arr[i * 2]（<strong>注意点</strong>）</p><p>这里其实还有一个<strong>数学原理</strong>：</p><p>对于有序排序的数组中的一个数，索引为i，如果满足上述题述条件，则<strong>必定在[ i, i + (arr.length / 2) ]的索引范围中找到这个数</strong>，所以这里我还可以做一个优化，将内循环由最多n次优化到n/2次，当然还是需要在数组的边界范围内，不过这个优化不是特别重要</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canReorderDoubled</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> zero_idx <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   zero_idx <span class="token operator">=</span> i<span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                   <span class="token comment">// 优化：如果零的个数为奇数，则肯定不匹配</span>                   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>    <span class="token comment">// 设置标志位，判断这个索引上的数是否被用了</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 从非正整数位置开始</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> zero_idx <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           k <span class="token operator">=</span> i<span class="token punctuation">;</span>           <span class="token comment">// 已被使用</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>               <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token operator">--</span>k<span class="token punctuation">]</span> <span class="token operator">==</span>  <span class="token number">2</span> <span class="token operator">*</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                   flag<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>    <span class="token comment">// 从正整数位置开始</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> zero_idx <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           k <span class="token operator">=</span> i<span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>               <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token operator">++</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                   flag<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>    <span class="token comment">// 可优化</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>               <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>因为内循环，所以达到了O(n *2)的时间复杂度<br>O(n)的空间复杂度</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220401214920594.png" alt="image-20220401214920594"></p><p>其实这里都浪费了很多时间，比如在对某一索引遍历时还可以判断，如果while结束后某一次flag[i] == 0,说明没有找到想要的值，可以直接返回false，稍加修改后这里用时提升到433ms，接近一半</p><h3 id="3-排序-哈希">3. 排序+哈希</h3><p>很经典的提到了迭代搜索，那不然就有哈希表用空间换时间的操作，并且哈希表也在On的空间复杂度， 在时间复杂度上比flag数组更好。算是1和2的结合，但需要注意特殊情况，arr[i] = 0的时候 arr[i] * 2 也等于0</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canReorderDoubled</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> zero_idx <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>zero_idx <span class="token operator">==</span> arr<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  zero_idx <span class="token operator">=</span> i<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> zero_idx <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 数已被使用</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      count<span class="token operator">++</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  count <span class="token operator">++</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token comment">// 对arr[0] = 0 的情况的特殊判断，因为此时arr[i] * 2也等于0</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> zero_idx <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">// 0存在的数目>2才能采用</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      count <span class="token operator">++</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  count <span class="token operator">++</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度一下就快了很多了，因为消除了内层的循环，时间复杂度仅取决于Arrays.sort的排序复杂度</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220401215607935.png" alt="image-20220401215607935"></p><h4 id="优化-v8">优化</h4><p>特殊数：零，如果零的个数是奇数，则可以直接判false，并且也消除了之前对0的特殊判断</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canReorderDoubled</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> zero_idx <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> zero_count <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              zero_count<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>zero_idx <span class="token operator">==</span> arr<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  zero_idx <span class="token operator">=</span> i<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token comment">// 0的个数是奇数，直接判false</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>zero_count <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token comment">// 从负数开始</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> zero_idx <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> zero_count <span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              count <span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token comment">// 从正数开始</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> zero_idx <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              count <span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token comment">// 注意补上零的个数</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> zero_count<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p>有所提升，但是感觉不能再在这个算法上往上提升了，优化差不多就是这些了 …</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220401215919080.png" alt="image-20220401215919080"></p><h4 id="题解">题解</h4><p>官方解答思路差不多不过有<strong>大优化</strong>。都是排序数组中选择，并且也有我之前的优化步骤，这里因为<strong>排序有技巧：是通过绝对值大小排序的</strong>。统计Map中的数进入有序的集合中，然后根据集合中去判断所以可以不用再  map.put(x,map.get(x) - 1)</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canReorderDoubled</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> cnt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cnt<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> cnt<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> vals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> cnt<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            vals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 好思路：根据绝对值顺序排序，就不用我这样判断情况了</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>vals<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 重点是从map的keySet中找，能一次就找完某个数在数组中所有分布的对应值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> vals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> cnt<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 无法找到足够的 2x 与 x 配对</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cnt<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> cnt<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> cnt<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：LeetCode-Solution</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/array-of-doubled-pairs/solution/er-bei-shu-dui-shu-zu-by-leetcode-soluti-2mqj/</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220402093819482.png" alt="image-20220402093819482"></p><h3 id="总结-v10">总结</h3><ul><li>🙅 被初始直接算法困扰。虽然做题原则上是从直接到进阶做，但是有时候直接的算法比较冗余，特殊情况较多，如果没写清楚，就容易混乱，导致恶性循环，也没心情想好的思路的。所以以后直接思路的实现比较繁琐时且知道效率不高时，要考虑去思考其他的方法了，不应该把重心放在冗余上。</li><li>⚠️ 排序数组在负数与正数在倍数关系上的相反情况！还有一些特殊情况的查找，以后读题时<strong>对关键条件要先找到特殊情况</strong></li><li>👍 优化做的不错，能想到的优化点比较多。</li><li>迭代 向 哈希 的优化 多次经历了，记住</li><li>不太擅长的DFS磕磕绊绊做出来了，还行，不过还是磕磕绊绊…</li><li>愚人节快乐！</li></ul><h2 id="1221-分割平衡字符串-⭐">1221. 分割平衡字符串 ⭐</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210907150251964.png" alt="image-20210907150251964"></p><h3 id="思考-v24">思考</h3><p>每个字符串都是平衡字符串，这里父子存在相同关系，想到分治</p><p>列举不可能</p><p>长度为偶数、排除二分法、分支感觉无法完成</p><h3 id="1-叠加器迭代">1. 叠加器迭代</h3><p>想了一下，就是看两个字母在index处是否数目相同</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">balancedStringSplit</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'L'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             l<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span><span class="token punctuation">&#123;</span>             r<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             count<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         index<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> count<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210907151338289.png" alt="image-20210907151338289"></p><p>看了题解，可以只用一个符号位状态量记录L R的数值是否相等…稍微减少下内存占用</p><h2 id="1282-用户分组-⭐⭐">1282. 用户分组 ⭐⭐</h2><div class="code-tag-time">2022/8/12 16:02:00</div><div class="code-tag-label code-tag-label-hash">Hash</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220812150911253.png" alt="image-20220812150911253"></p><h3 id="审题-v51">审题</h3><ul><li>可能的解法：<ul><li>直接：把属于有n人组的那个人统计起来，然后随意分配</li><li>如何转化成数学问题？</li></ul></li><li>组的人数必须说填充满的，而不能有余</li><li>难点：分组</li><li>能否在On的时间复杂度内做出来</li></ul><h3 id="1-Hash-v2">1. Hash</h3><p>思路还是比较清晰，将该分到n人组的那个人，分到n人组的第x组，如果第x组满了，那就再创建一个n人组把它放进去，否则则添加到x组的末尾即可，为了快速获取到n人组第x组是否人满的情况，建立一个n与n人组总人数的映射关系，但最终速度不理想…</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">groupThePeople</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> groupSizes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span></span> groupListMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> groupNumMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> groupSizes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Integer</span> groupNum<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>groupNum <span class="token operator">=</span> groupNumMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>groupSizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                groupNumMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>groupSizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                son<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                father<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span>                groupListMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>groupSizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> father<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> groupListMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>groupSizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>groupNum <span class="token operator">%</span> groupSizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    lists<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>groupNum <span class="token operator">/</span> groupSizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                groupNumMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>groupSizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">++</span>groupNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        groupListMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220812154857856.png" alt="image-20220812154857856"></p><p><strong>简化</strong></p><p>可进行如下简化，但时间优化不高，思想是一样的</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">groupThePeople</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>gs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>gs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cur<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：AC_OIer</span><span class="token comment">// 链接：https://leetcode.cn/problems/group-the-people-given-the-group-size-they-belong-to/solution/by-ac_oier-z1bg/</span></code></pre></div><h3 id="2-内循环-N">2. 内循环(N)</h3><p>笑死，没想到内循环才是最快的。但确实，这里的精髓在于将已归纳的人“直接跳过”（通过置0+判断来实现），这样就能直接不使用HashMap来实现。猜测可能还是HashMap的一些方法，例如entrySet的遍历之类的会导致额外耗时</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">groupThePeople</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> groupSizes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> groupSizes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>groupSizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> groupSizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> groupSizes<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>groupSizes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> groupSizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    groupSizes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    size<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220812155855997.png" alt="image-20220812155855997"></p><h3 id="反思-v17">反思</h3><p>这里内循环遍历(并通过设置特殊位跳过已经处理了的数据)是否近似实现了On的时间复杂度呢？我觉得是的🤔</p><h2 id="1332-删除回文序列-⭐">1332. 删除回文序列 ⭐</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220122215309827.png" alt="image-20220122215309827"></p><h3 id="审题-v52">审题</h3><ul><li>回文子序列 + 最少删除次数</li><li>如何找到回文子序列</li></ul><h1>1455. 检查单词是否位句中其他单词的前缀 ⭐</h1><div class="code-tag-time">2022/8/21 23:48:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220821183032495.png" alt="image-20220821183032495"></p><h3 id="思考-v25">思考</h3><ul><li>输入是任何单词的前导连续子字符串</li><li>一次遍历</li><li><strong>核心：抓住每一个单词，并且只用比较每一个单词与关键词相等长度的前缀是否相等即可(该单词长度必须大于等于关键词长度)</strong></li></ul><h3 id="1-一次遍历">1. 一次遍历</h3><p>先分割句子为单词字符串数组，然后筛选出长度大于等于关键词的单词，再去比较是否包含该单词，但要注意这里必须是从一开始就要包含。由于需要m个单词的字符串数组，所以空间复杂度较高(但由于测试用例问题，内存消耗还是有比较低的情况)</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">isPrefixOfWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> sentence<span class="token punctuation">,</span> <span class="token class-name">String</span> searchWord<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> sentence<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> searchWord<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> searchWord<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>searchWord<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220821183833379.png" alt="image-20220821183833379"></p><h4 id="优化-状态机">优化-状态机</h4><p>由于之前有Om的空间复杂度，所以要解决 不存储长度为m的字符串数组的问题，同时也要在一次遍历之内解决。这里便分情况来进行，有点<strong>状态机的思想</strong>。优点是在O©的空间复杂度和O(n)的时间复杂度内解决。但大量的if else结构还是让代码显得有点冗长</p><ul><li>遇到空格：说明这个单词已经结束，应该重置一些变量</li><li>遇到空格后的第一个字符：查看字符与关键字是否相等<ul><li>相等：新状态，开始比较下一个字符。如果这个过程中关键字比较完了，说明匹配成功，直接返回</li><li>不相等：新状态，该单词内所有字符都不用比较了</li></ul></li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">isPrefixOfWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> sentence<span class="token punctuation">,</span> <span class="token class-name">String</span> searchWord<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// flag >= 0 searchword index in sentence</span>  <span class="token comment">// flag == -1 not match</span>  <span class="token comment">// flag == -2 this is a new word</span>       <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> wordIdx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> sequence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sentence<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>sentence<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               wordIdx<span class="token operator">++</span><span class="token punctuation">;</span>               flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>               sequence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// flag == -2 this is a new word</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>sentence<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> searchWord<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   sequence<span class="token operator">++</span><span class="token punctuation">;</span>                   flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                   flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// flag == -3 in matching</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>sentence<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> searchWord<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span>                   sequence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                   sequence<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// flag == -4 word matching fail(just for current word in sentence)</span>               <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>sequence <span class="token operator">>=</span> searchWord<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">return</span> wordIdx<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220821224515819.png" alt="image-20220821224515819"></p><h3 id="总结-v11">总结</h3><p>状态机的思想：</p><ul><li>能够在简化空间复杂度上有</li><li>能够帮助梳理思路，使逻辑结构清晰</li></ul><h2 id="1672-最富有客户的资产总量-⭐">1672. 最富有客户的资产总量 ⭐</h2><blockquote><p>Time : 2022 / 4 /14<br>TAG : Foreach</p></blockquote><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220414193759266.png" alt="image-20220414193759266"></p><h3 id="审题-v53">审题</h3><ul><li>就是返回一堆数组中最大数组值的数，肯定是O(i)*O(j)的遍历方式</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximumWealth</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> accounts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> accounts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp <span class="token operator">+=</span> accounts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220414194221705.png" alt="image-20220414194221705"></p><p>。。。。当我没有做过这道题</p><h2 id="1716-计算银行的钱-⭐">1716. 计算银行的钱 ⭐</h2><div class="code-tag-time">2022/4/2 09:42:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-math">Arithmetic Progression</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220115111213342.png" alt="image-20220115111213342"></p><h3 id="审题-v54">审题</h3><ul><li>数学公式</li><li>变量累计</li></ul><h3 id="1-暴力循环">1. 暴力循环</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">totalMoney</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> div<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          div <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              sum <span class="token operator">+=</span> div <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>              sum <span class="token operator">+=</span> div <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> sum<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220115112311339.png" alt="image-20220115112311339"></p><p>除法和求余操作耗时较多</p><h3 id="2-公式–等差数列">2. 公式–等差数列</h3><p>除了第一周外，剩下的每个整周比第一个周多出来的钱都是成等差数列的。省去LogN的逐步操作，先求出大部分，再求余下的</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">7</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> yu <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token comment">// 注意这里求等差数列和</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> yu<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> left <span class="token operator">+</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220115120252292.png" alt="image-20220115120252292"></p><p><em>加了个println结果耗时降到24%，蚌埠住了…</em></p><h2 id="1894-找到需要补充粉笔的学生编号-⭐⭐">1894.找到需要补充粉笔的学生编号 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-binary">Binary</div><div class="code-tag-label code-tag-label-presum">Prefix sum</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210910154818645.png" alt="image-20210910154818645"></p><h3 id="审题-v55">审题</h3><p>输出的最后是需要补充粉笔的学生编号</p><h3 id="1-遍历模拟">1. 遍历模拟</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">chalkReplacer</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chalk<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> singleTotal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> isRepeat <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">-</span>chalk<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isRepeat <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            singleTotal <span class="token operator">+=</span> chalk<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isRepeat <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">-</span> singleTotal <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                k<span class="token operator">-=</span>singleTotal<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        k<span class="token operator">-=</span>chalk<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> chalk<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            isRepeat <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210910155744122.png" alt="image-20210910155744122"><br>这里原来直接遍历，但会超时，后面稍微改进了，使用一组的最大值稍作记录，但最终结果还是很慢，时间复杂度是O(n+m)</p><p><strong>严格来说，遍历一次数组就应该知道是谁缺粉笔了</strong></p><h3 id="2-优化">2. 优化</h3><p>…通过先计算出Total，再模一组总数后进行查找就知道了。。。。这样看起来在一个循环里一样，但效率却快了很多很多，但两次循环，每次循环最多循环n次。时间复杂度是O(n)，<strong>这里要注意一下：一样的思路不一样的处理方式，可能会在效率上造成很大差距</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">chalkReplacer</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chalk<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> singleTotal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>chalk<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        singleTotal <span class="token operator">+=</span> chalk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    k  <span class="token operator">%=</span> singleTotal<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">-</span>chalk<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        k<span class="token operator">-=</span>chalk<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> chalk<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210910161322436.png" alt="image-20210910161322436"></p><h3 id="3-前缀和-二分查找">3. 前缀和+二分查找</h3><p>（转）第一次找最大值，还是On</p><p>第二次去遍历时，这里在前缀和中找是哪一个使得singleTotal+=chalk[k]后大于了原来的k值，通过二分法找这里，复杂度为O(logn),但总的时间复杂度还是On。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">chalkReplacer</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chalk<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> n <span class="token operator">=</span> chalk<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>chalk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           chalk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> chalk<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>chalk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> i<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       k <span class="token operator">%=</span> chalk<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>chalk<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> low<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               high <span class="token operator">=</span> mid<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> low<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210910162148116.png" alt="image-20210910162148116"></p><h2 id="2024-考试的最大困扰度-⭐⭐">2024. 考试的最大困扰度 ⭐⭐</h2><div class="code-tag-time">2022/3/30 11:02:00</div><div class="code-tag-label code-tag-label-sw">Slide Window</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220329193440464.png" alt="image-20220329193440464"></p><h3 id="审题-v56">审题</h3><ul><li>目标：给定操作次数内把字符变为最大连续相同的个数</li><li>想法：要有最大连续相同，则k次操作改变的字符应该都是同一个</li><li>可能的做法：</li><li>思路<ul><li>直接：找最大相同的子序列，和子序列与另一相同字符序列间隔的个数</li><li>进阶：<ul><li>位运算</li><li>字符串-&gt;数组-&gt;一次遍历是否能够解决</li></ul></li></ul></li></ul><h3 id="1-滑动窗口">1. 滑动窗口</h3><p>没想到滑动窗口的思路，是看到题解提示才想到的，做的也很麻烦</p><p>与其我变不如它变，我维护一个最大能操作字符个数的区间，超过了我就移动到<strong>第一个操作区间的下一个字符</strong>，相当于改变区间起点</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxConsecutiveAnswers</span><span class="token punctuation">(</span><span class="token class-name">String</span> answerKey<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">findMaxSequence</span><span class="token punctuation">(</span>answerKey<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">findMaxSequence</span><span class="token punctuation">(</span>answerKey<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">int</span> <span class="token function">findMaxSequence</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token char">'F'</span><span class="token operator">:</span><span class="token char">'T'</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token char">'T'</span><span class="token operator">:</span><span class="token char">'F'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> gap  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>gap <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    gap<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        count <span class="token operator">=</span> i <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    count <span class="token operator">=</span> i <span class="token operator">-</span> start <span class="token punctuation">;</span>                    max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 左移开始字符到第一个操作改变字符的下一个</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        count <span class="token operator">=</span> i <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    count <span class="token operator">=</span> i <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>缺点：过分考虑了i = s.length() - 1的情况</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220329222041407.png" alt="image-20220329222041407"></p><h4 id="反向优化-v2">反向优化</h4><p><strong>队列缓存</strong></p><p>初衷：操作次数大于限定值k时，要从第一个区间遍历去找第一个操作字符，这样有时间浪费。可以用一个队列将操作的字符的索引都缓存起来，然后直接去poll就行了。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxConsecutiveAnswers</span><span class="token punctuation">(</span><span class="token class-name">String</span> answerKey<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">findMaxSequence</span><span class="token punctuation">(</span>answerKey<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">findMaxSequence</span><span class="token punctuation">(</span>answerKey<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">findMaxSequence</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// b represent substitute</span>      <span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">?</span><span class="token char">'F'</span><span class="token operator">:</span><span class="token char">'T'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list_s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      list_s<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>list_s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  list_s<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                  list_s<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">int</span> a <span class="token operator">=</span> list_s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span>list_s<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i <span class="token operator">-</span> a <span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">int</span> a <span class="token operator">=</span> list_s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span>list_s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i <span class="token operator">-</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> max<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p>没懂为啥时间还慢一点，可能是队列的创建原因？</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220329230817327.png" alt="image-20220329230817327"></p><h4 id="简洁（转）">简洁（转）</h4><p>LeetCode题解，与我第一个题解相似</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxConsecutiveChar</span><span class="token punctuation">(</span><span class="token class-name">String</span> answerKey<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> n <span class="token operator">=</span> answerKey<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 注意这种赋值，不错</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// sum记录操作数</span>           sum <span class="token operator">+=</span> answerKey<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">!=</span> ch <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">// 移动起点到第一次操作的下一个位置</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               sum <span class="token operator">-=</span> answerKey<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ch <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">// 消除代码冗余</span>           <span class="token comment">// 每次循环都比较一次，就不用做i=s.length() - 1的判断了</span>           ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> ans<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>On时间复杂度  O1空间复杂度</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220330101720672.png" alt="image-20220330101720672"></p><h4 id="一并计算（转）">一并计算（转）</h4><p>这个思路 可以，精髓在于：没有具体要求到底是T 还是 F改变。我同时计算t操作和f操作的值，在同一始末点比较</p><ul><li>如果不溢出，正常增长</li><li>如果只有其中一种操作数溢出，那表明另一种操作数没溢出，表明另一种操作数的总长&gt;该种总长，可以继续运算。</li><li>如果两种都溢出，则表明都不行了，算最大值，并将l移动到两种都不溢出的情况<ul><li><s>❓ 但这样就出现一个问题，为什么 L 移动的条件是两种都不溢出，而不是某一种不溢出？比如…FFFFFTTFT这样就要移动到T的位置再重新开始，但能否保证起点在前面的几个F中开始就一定没有最大值？</s></li><li>没看题，条件是当两个均大于k才前进left,但只要有一个不满足就可以算了，是对的。在T满足情况时，F可能增加到远大于K,但没关系因为维护的是区间的缘故，之后都不满足时，遇到的F都会进行f-- 回退</li></ul></li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxConsecutiveAnswers</span><span class="token punctuation">(</span><span class="token class-name">String</span> answerKey<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// l:起始位置 r: 结束位置</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> answerKey<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> answerKey<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// t:改变T的操作次数 f:改变F的操作次数</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token class-name">R</span> <span class="token operator">=</span> cs<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">==</span> <span class="token char">'T'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>f<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>            <span class="token comment">// 重点</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">></span> k <span class="token operator">&amp;&amp;</span> f <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">></span> k <span class="token operator">&amp;&amp;</span> f <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token class-name">L</span> <span class="token operator">=</span> cs<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token char">'T'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>f<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>l<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>r<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">// 计算下最后的值</span>ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> len <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：wa-pian-d</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/maximize-the-confusion-of-an-exam/solution/2024-kao-shi-de-zui-da-kun-rao-du-java-b-86wg/</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220330102422950.png" alt="image-20220330102422950"></p><h3 id="总结-v12">总结</h3><ul><li><p>滑动窗口不熟悉，做的时候没有想到滑动窗口。好久没有做到滑动窗口的题了。滑动窗口题型的特点：<strong>有限定值，计算范围内的值（连续的），最好是在数组中进行的</strong>。巩固一下</p></li><li><p>对特殊情况的判断太多，造成思维混乱代码冗余</p></li><li><p><strong>先想清楚再写代码</strong>…………</p></li></ul><h2 id="2034-股票价格波动-⭐⭐">2034. 股票价格波动 ⭐⭐</h2><div class="code-tag-time">2021/4/6 09:46:00</div><div class="code-tag-label code-tag-label-hash">Hash</div><div class="code-tag-label code-tag-label-sort">Sort</div><div class="code-tag-label code-tag-label-queue">Priority Queue</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220123210854186.png" alt="image-20220123210854186"></p><h3 id="审题-v57">审题</h3><ul><li>选取数据结构十分重要，max和min肯定是内部变量维护。<s>首先考虑数组</s></li><li>update和最大最小的选取范围肯定是相关的，update最大最小值时从数组、链表角度都会引起On的时间复杂度</li><li>update可以是未来的时间戳，所以数组可能不太现实</li><li>可能的做法：先考虑链表吧</li></ul><h3 id="1-链表（超时）">1. 链表（超时）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StockPrice</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> cur<span class="token punctuation">;</span>    <span class="token class-name">Node</span> max<span class="token punctuation">;</span>    <span class="token class-name">Node</span> min<span class="token punctuation">;</span>    <span class="token class-name">Node</span> temp<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StockPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> timestamp<span class="token punctuation">,</span> <span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            head <span class="token operator">=</span> temp<span class="token punctuation">;</span>            cur <span class="token operator">=</span> head<span class="token punctuation">;</span>            max <span class="token operator">=</span> head<span class="token punctuation">;</span>            min <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                max <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span>val <span class="token operator">></span> temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>date <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cur<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>                cur <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Node</span> pre_head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Node</span> ppre_head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>pre_head<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> isResearch <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                                <span class="token keyword">while</span><span class="token punctuation">(</span>pre_head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>date <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    pre_head <span class="token operator">=</span> pre_head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>pre_head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>date <span class="token operator">==</span> temp<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>pre_head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> max<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> max<span class="token punctuation">.</span>val <span class="token operator">></span> temp<span class="token punctuation">.</span>val <span class="token operator">||</span> pre_head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> min<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> min<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isResearch <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    pre_head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">=</span> temp<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    temp<span class="token punctuation">.</span>next <span class="token operator">=</span> pre_head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    pre_head<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                head <span class="token operator">=</span> ppre_head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>isResearch <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     min <span class="token operator">=</span> max <span class="token operator">=</span> head<span class="token punctuation">;</span>                    pre_head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">while</span><span class="token punctuation">(</span>pre_head<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        min <span class="token operator">=</span> min<span class="token punctuation">.</span>val <span class="token operator">></span> pre_head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">?</span>pre_head<span class="token punctuation">.</span>next<span class="token operator">:</span>min<span class="token punctuation">;</span>                        max <span class="token operator">=</span> max<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> pre_head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">?</span>pre_head<span class="token punctuation">.</span>next<span class="token operator">:</span>max<span class="token punctuation">;</span>                        pre_head <span class="token operator">=</span> pre_head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>                <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> max<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minimum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> min<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token keyword">int</span> date<span class="token punctuation">;</span>        <span class="token class-name">Node</span> next<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token class-name">Node</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>分析一下：max和min都在O1的复杂度内返回，每次update都有On的时间复杂度，看起来是不太好，但也必须遍历啊。这里说我超出时间限制是update操作。难道用HashMap？</p><h3 id="2-哈希表-有序集合（转）">2. 哈希表+有序集合（转）</h3><p>哈希表用来存储对应stamp的price，有序集合来维护price的有序集合</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StockPrice</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> maxTimestamp<span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> timePriceMap<span class="token punctuation">;</span>    <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> prices<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StockPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maxTimestamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        timePriceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> timestamp<span class="token punctuation">,</span> <span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maxTimestamp <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxTimestamp<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> prevPrice <span class="token operator">=</span> timePriceMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timePriceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevPrice <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prices<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prevPrice<span class="token punctuation">,</span> prices<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>prevPrice<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>prevPrice<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                prices<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>prevPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        prices<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> prices<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> timePriceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> prices<span class="token punctuation">.</span><span class="token function">lastKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minimum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> prices<span class="token punctuation">.</span><span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220124112445414.png" alt="image-20220124112445414"></p><p>初始化复杂度O1<br>更新操作、返回最大值和最小值的时间复杂度是OlogN</p><h3 id="3-哈希表-2个优先队列">3. 哈希表+2个优先队列</h3><p>哈希表还是来存stamp-price这里<br>妙在优先队列实现了延迟删除，判断了stamp对应的price是否是真实的</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StockPrice</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> maxTimestamp<span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> timePriceMap<span class="token punctuation">;</span>    <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> pqMax<span class="token punctuation">;</span>    <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> pqMin<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StockPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maxTimestamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        timePriceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pqMax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pqMin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> timestamp<span class="token punctuation">,</span> <span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maxTimestamp <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxTimestamp<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        timePriceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>        pqMax<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>price<span class="token punctuation">,</span> timestamp<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pqMin<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>price<span class="token punctuation">,</span> timestamp<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> timePriceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> priceTime <span class="token operator">=</span> pqMax<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> price <span class="token operator">=</span> priceTime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> timestamp <span class="token operator">=</span> priceTime<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timePriceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span> <span class="token operator">==</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> price<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            pqMax<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minimum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> priceTime <span class="token operator">=</span> pqMin<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> price <span class="token operator">=</span> priceTime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> timestamp <span class="token operator">=</span> priceTime<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timePriceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span> <span class="token operator">==</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> price<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            pqMin<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220124112935563.png" alt="image-20220124112935563"></p><h3 id="总结-v13">总结</h3><ul><li>TreeMap不熟悉，根本没考虑，有空再了解一下<strong>TreeMap</strong>。HashMap看不上，觉得没有链表快…</li><li>以后还是要多想一下，毕竟链表在插入时还是On的复杂度，但HashMap基本是O1，还是没有想清楚，所以会造成超时的问题。</li></ul><h2 id="2044-统计按位或能得到最大值的子集数目-⭐⭐">2044. 统计按位或能得到最大值的子集数目 ⭐⭐</h2><blockquote><p>Time : 2022 / 3 /15 20 : 20<br>TAG：DFS、Bit</p></blockquote><div class="code-tag-time">2022/3/15 20:20:00</div><div class="code-tag-label code-tag-label-dfs">DFS</div><div class="code-tag-label code-tag-label-math">Bit</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220315183914714.png" alt="image-20220315183914714"></p><h3 id="审题-v58">审题</h3><ul><li>最大值数目可能不唯一，求数目</li><li>细节：数组可能有相同元素，无排序顺序</li><li>难点：子集的 数目多，如何划分最大值子集。可能涉及DFS？</li><li>理论基础：<ul><li>一个数可以变换成 c = a | b 的形式，则可以实现替代 。只要位数、</li></ul></li><li>思路：首先最大值肯定是包含所有元素的值（题目给出的num[i] &gt; 0），以此为基础<ul><li>最暴力：求出所有子集的与，放在哈希表中，然后找结果</li><li>简单：先计算出最大值（全集），使用DFS依次去掉</li><li>进阶：</li></ul></li></ul><h3 id="1-位运算-（转）">1. 位运算 （转）</h3><p><strong>一个已经忽略已久的应用： 位运算中一个数可看成是一个数组，1 代表选中 0 代表未选中</strong></p><p>这里就用一个数来代表数组，目的是<strong>方便进行位数的左右移动 和 与或运算</strong>。外层代表的是是否选中n位数，总共有2 ^ nums.length ，内层则对其进行多次与运算</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countMaxOrSubsets</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> maxOr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> orVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">>></span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    orVal <span class="token operator">|=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>orVal <span class="token operator">></span> maxOr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                maxOr <span class="token operator">=</span> orVal<span class="token punctuation">;</span>                cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orVal <span class="token operator">==</span> maxOr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：LeetCode-Solution</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/solution/tong-ji-an-wei-huo-neng-de-dao-zui-da-zh-r6zd/</span></code></pre></div><p>时间复杂度：O(1 &lt;&lt; nums.length) * O(nums.length)<br>空间复杂度：O(1)</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220315194820977.png" alt="image-20220315194820977"></p><h3 id="2-回溯-DFS-（转）">2. 回溯 / DFS （转）</h3><p>用的很巧妙，每次方法结束前回溯 主要是进行了不或的结果，实现了某一位数不参与运算的操作。这里的思路要好好学习</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxOr<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countMaxOrSubsets</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nums <span class="token operator">=</span> nums<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxOr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> orVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>orVal <span class="token operator">></span> maxOr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                maxOr <span class="token operator">=</span> orVal<span class="token punctuation">;</span>                cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orVal <span class="token operator">==</span> maxOr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> orVal <span class="token operator">|</span> nums<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> orVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 作者：tong-zhu</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/solution/by-tong-zhu-mmeu/</span></code></pre></div><p>时间复杂度：O(1 &lt;&lt; nums.length)<br>空间复杂度：O(nums.length) （调用栈占用空间）</p><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220315195438852.png" alt="image-20220315195438852"></p><h4 id="优化-v9">优化</h4><p>因为是顺序搜索的，或的结果是依次增大，所以先遍历一次求出max，如果在的dfs时其值等于max，则可以直接计算出结果</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>or <span class="token operator">==</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre></div><h4 id="再优化">再优化</h4><p>前面步骤中是按顺序从0 开始 两种情况，算当前值和不算当前值 进行dfs的，还可以从广度上来看，对某一层来说，广度遍历其剩下元素或结果，如果等于max，则直接return</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> or<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>or <span class="token operator">==</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> or <span class="token operator">|</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220315201634199.png" alt="image-20220315201634199"></p><p>尽管时间空间复杂度还是不变，但它优化了多数情况。只能说太强…</p><h3 id="反思-v18">反思</h3><ul><li>太菜了太菜了，思路是在DFS上的 遍历得到max的思路也是有的，但纠结点在于 <strong>如何算一个集合的子集的或结果</strong>，嵌套循环都是不可能实现的，但DFS还是纠结于层数和索引，回溯思路不对</li><li>位运算 1 &lt;&lt; nums.length 意义想清楚，位运算不仅仅只是与或的运算，还包含 1 0 表示的意义</li></ul><h2 id="2055-蜡烛之间的盘子-⭐⭐">2055. 蜡烛之间的盘子 ⭐⭐</h2><div class="code-tag-time">2022/3/8 21:09:00</div><div class="code-tag-label code-tag-label-presum">PrefixSum</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220308191156316.png" alt="image-20220308191156316"></p><h3 id="审题-v59">审题</h3><ul><li>第一眼：括号匹配-----&gt; 栈（错了！）</li><li>查询索引的给出是乱序的</li><li>思路：<ul><li>简单：把最近的 | 找到，然后找下一个 | ，中间的 * 则累加</li><li>进阶：<ol><li>简单方法会重复遍历之前算过的部分序列，不方便。这里盲猜是线段树了，因为具体某段距离对结果有影响</li><li>恒久不变的话题：能不能一次遍历得到。即理想结果：我先遍历一次数组，然后你给我一个查询序列，我在O©的时间复杂度内返回每个结果（<strong>这个想法不错！</strong>）</li></ol></li></ul></li></ul><h3 id="1-暴力双循环（X）">1. 暴力双循环（X）</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">platesBetweenCandles</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>queries<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'|'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'|'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                num <span class="token operator">+=</span> temp<span class="token punctuation">;</span>                temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>超时，因为复杂度到O(n^2)了</p><h3 id="2-缓存索引（X）">2. 缓存索引（X）</h3><p>把带 | 的索引位置都缓存下来，然后根据顺序找到最小的左开端，就能算出个数</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">platesBetweenCandles</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>queries<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> candleIdx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'|'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                candleIdx<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> leftIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rightIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> candleCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> candleIdx<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>leftIndex <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> candleIdx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">>=</span> queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> candleIdx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    leftIndex <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>leftIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> candleIdx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        rightIndex <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>candleIdx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">></span> queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>leftIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> rightIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> leftIndex<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> rightIndex<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    candleCnt <span class="token operator">+=</span> candleIdx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> candleIdx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                candleCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> candleCnt<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>超时，O(n^2)时间复杂度。<strong>能不能不找 左临界值？</strong></p><h3 id="3-缓存临界最值（X）">3. 缓存临界最值（X）</h3><p>预处理的影子</p><p>方法2的改良版，通过哈希表缓存了每个索引下的<strong>之前最近</strong>的那个一个 | 的索引值，就不用在通过On的时间复杂度查找左临界值了，但还是超时</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">platesBetweenCandles</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>queries<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> candleIdx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mapInt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'|'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                candleIdx<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            mapInt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> candleIdx<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> leftIndex <span class="token operator">=</span> mapInt<span class="token punctuation">[</span>queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rightIndex <span class="token operator">=</span> mapInt<span class="token punctuation">[</span>queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> candleCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'|'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                leftIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>leftIndex <span class="token operator">&lt;</span> rightIndex <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> leftIndex<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> rightIndex<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    candleCnt <span class="token operator">+=</span> candleIdx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> candleIdx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                candleCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> candleCnt<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>然而！！！！！！</p><p>在稍微看了下答案后，发现自己的思路和答案的前缀和有类似之处，发现自己的思路肯定也是可行的，就继续更改，前面的处理都没问题，主要是后面算累计和的时候，又进行了一次for循环，虽然很短，但从性能上来说，也不好，这也是造成超时的重要原因，就优化了一下：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>leftIndex <span class="token operator">&lt;</span> rightIndex <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        candleCnt <span class="token operator">+=</span> candleIdx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">)</span> <span class="token operator">-</span> candleIdx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">)</span> <span class="token operator">-</span> rightIndex <span class="token operator">+</span> leftIndex<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220308205408611.png" alt="image-20220308205408611"></p><p>还是功夫不负有心人哈哈哈，这道题纠结了半天，最后还是回到正确思路上了</p><h3 id="4-预处理-前缀和（转）">4. 预处理+前缀和（转）</h3><p>答案的思路：</p><ul><li>三个数组<ul><li>记录 前n个数中 * 的总和</li><li>记录 第n个数中<strong>上一个</strong> | 的索引</li><li>记录第n个数中 <strong>下一个</strong> | 的索引</li></ul></li><li>比较条件，二者不为-1 且左边 | 索引大于右边 | 索引，则<strong>结果就为最右临界值- 最左临界值</strong>（数值）【确实！】</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">platesBetweenCandles</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preSum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'|'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                l <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'|'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                r <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>queries<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> query <span class="token operator">=</span> queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> right<span class="token punctuation">[</span>query<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">=</span> left<span class="token punctuation">[</span>query<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> y <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> x <span class="token operator">>=</span> y <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> preSum<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> preSum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：LeetCode-Solution</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/plates-between-candles/solution/zha-zhu-zhi-jian-de-pan-zi-by-leetcode-s-ejst/</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220308210041331.png" alt="image-20220308210041331"></p><p>这里拿空间换时间（3个N长度数组），所以空间复杂度低，但时间复杂度就高起来了，O(n+q) ：On的时间预处理  O(q)处理q个询问（每个询问处理时间为O(1)）</p><h3 id="反思-v19">反思</h3><ul><li>简单算法上没浪费太多时间，还行</li><li>能想到缓存（即预处理） 进而想到一点点前缀和的思想，还可以</li><li>思路上能想到一次遍历，有预处理的影子，可以</li><li>前缀和不熟悉，预处理的想法还没建立在脑海中，慢慢发现不是线段树不是这种类型？前缀和这里的叠加思想做的时候没有想出来 即<br>若有值  值 = 最右不超出的索引值（origin） - 最左不超出的索引值（origin）</li></ul><h2 id="2100-适合打劫银行的日子-⭐⭐">2100. 适合打劫银行的日子 ⭐⭐</h2><blockquote><p>2022 / 3 / 6 18:35</p></blockquote><div class="code-tag-time">2022/3/6 18:35:00</div><div class="code-tag-label code-tag-label-foreach">Foreach</div><div class="code-tag-label code-tag-label-dp">DP</div><div class="code-tag-label code-tag-label-hash">Hash</div><div class="code-tag-label code-tag-label-sw">Slide Window</div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220306185329864.png" alt="image-20220306185329864"></p><p>审题</p><ul><li>下标从0开始，有第0天</li><li>返回的是所有可能的天数</li><li>问题核心：找到数组中给定间隔数中前段单减后段单增的数</li><li>可能的数据结构：滑动窗口？栈或队列？</li><li>思路：<ul><li>基本：顺序判断</li><li>进阶：队列抽</li></ul></li></ul><h3 id="1-顺序遍历-v2">1. 顺序遍历</h3><p>思路还是依次遍历 + flag条件筛选，但这里为了解决题中的大量重复数组带来的超时限制，我就稍微优化了一下，增加了个前置条件的判断：如果上一个天数也是Rob Day，那只需要判断一下就可以知道这一天是不是Rob Day了，但实际上是没有解决时间复杂度的问题的。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">goodDaysToRobBank</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> security<span class="token punctuation">,</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time <span class="token operator">>=</span> security<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> time<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> security<span class="token punctuation">.</span>length <span class="token operator">-</span> time<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>security<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> security<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> security<span class="token punctuation">[</span>i <span class="token operator">+</span> time <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> security<span class="token punctuation">[</span>i <span class="token operator">+</span> time<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> time<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>security<span class="token punctuation">[</span>i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> security<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> time<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>security<span class="token punctuation">[</span>i <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> security<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220306191717393.png" alt="image-20220306191717393"></p><p>这个结果也是意料之中了，似乎暴力都是5%？不过内存消耗还不错</p><p>空间复杂度：O(n)<br>时间复杂度：$\sum\limits_{i=1}^{security.length - time * 2} \quad \sum\limits_{k=1}^{time * 2}$</p><h3 id="2-滑动窗口（队列实现）">2. 滑动窗口（队列实现）</h3><p>队列实现的滑动窗口，过期自动删除。未过期又在违规队列中，那就说明这个数不是合适的Rob Day</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">goodDaysToRobBank</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> security<span class="token punctuation">,</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time <span class="token operator">>=</span> security<span class="token punctuation">.</span>length<span class="token punctuation">)</span>          <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token comment">// 避免零步长导致i-1 &lt; 0 的情况</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>time <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> security<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> res<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> leftQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> rightQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> time<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>security<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> security<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              leftQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>security<span class="token punctuation">[</span>time <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">></span> security<span class="token punctuation">[</span>time <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              rightQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i <span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> time<span class="token punctuation">;</span> time <span class="token operator">+</span> i <span class="token operator">&lt;</span> security<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>security<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> security<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  leftQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>security<span class="token punctuation">[</span>i <span class="token operator">+</span> time <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> security<span class="token punctuation">[</span>time <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  rightQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i <span class="token operator">+</span> time <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>leftQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">int</span> leftTemp <span class="token operator">=</span> leftQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>leftTemp <span class="token operator">&lt;</span> i <span class="token operator">-</span> time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  leftQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                  flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>rightQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">int</span> rightTemp <span class="token operator">=</span> rightQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>rightTemp <span class="token operator">&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  rightQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                  flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>leftQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rightQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span> security<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> security<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> security<span class="token punctuation">[</span>i <span class="token operator">+</span> time <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> security<span class="token punctuation">[</span>time <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220306201139696.png" alt="image-20220306201139696"></p><p>真的不懂为啥这么慢啊，我感觉还行啊，也是在一次遍历就解决问题啊。。。</p><p>空间复杂度：On<br>时间复杂度：On （感觉）</p><h3 id="3-动态规划-v2">3. 动态规划</h3><p>我是傻逼之没想起dp…</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">goodDaysToRobBank</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> security<span class="token punctuation">,</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> security<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>security<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> security<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>security<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> security<span class="token punctuation">[</span>n <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                right<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>n <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> time<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> time<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> time <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作者：LeetCode-Solution</span><span class="token comment">// 链接：https://leetcode-cn.com/problems/find-good-days-to-rob-the-bank/solution/gua-he-da-jie-yin-xing-de-ri-zi-by-leetc-z6r1/</span></code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220306224419161.png" alt="image-20220306224419161"></p><h3 id="4-双向遍历-哈希-转">4. 双向遍历+哈希(转)</h3><p>正向标记出前 <code>time</code> 天符合条件的日期，逆向遍历选出前后都符合的加入答案，还不是很理解。不过确实牛逼，双百趋向。</p><div class="code-wrapper"><pre class="language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    vector&lt;int&gt; goodDaysToRobBank(vector&lt;int&gt;&amp; security, int time) &#123;        vector&lt;int&gt; ans;        int rear &#x3D; -1, n &#x3D; security.size(), cnt &#x3D; 1;        for(int i &#x3D; 0; i &lt; n; ++i)&#123;            int x &#x3D; security[i];            rear &gt;&#x3D; x ? ++cnt : cnt &#x3D; 1;            if(cnt &gt; time) security[i] ^&#x3D; (1&lt;&lt;30);            rear &#x3D; x;        &#125;        rear &#x3D; -1, cnt &#x3D; 0;        for(int i &#x3D; n-1; i &gt;&#x3D; 0; --i)&#123;            int x &#x3D; security[i] &amp;~ (1&lt;&lt;30);            rear &gt;&#x3D; x ? ++cnt : cnt &#x3D; 1;            if(cnt &gt; time &amp;&amp; (security[i] &gt;&gt; 30)) ans.push_back(i);            rear &#x3D; x;        &#125;        return ans;    &#125;&#125;;&#x2F;&#x2F; 链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;find-good-days-to-rob-the-bank&#x2F;solution&#x2F;gua-he-da-jie-yin-xing-de-ri-zi-by-leetc-z6r1&#x2F;1418616</code></pre></div><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20220306224704953.png" alt="image-20220306224704953"></p><h3 id="总结-v14">总结</h3><ul><li>Queue还不是很熟悉</li><li>没想到dp…偏偏这次没想到</li><li>其他还好，除了没想到好方法 还彳亍</li></ul><h2 id="-v8">------------------------------------------</h2><h2 id="LRU实现">LRU实现</h2><h2 id="阿里2020-栈求表达式">阿里2020. 栈求表达式</h2><p><img src="https://s401177923-1302493622.cos.ap-nanjing.myqcloud.com/mdImages/image-20210330202907036.png" alt="image-20210330202907036"></p><h3 id="-v9"></h3><h2 id="计算整数n的平方根-精度为0-00001">计算整数n的平方根  精度为0.00001</h2><h3 id="牛顿迭代法">牛顿迭代法</h3><p>牛顿迭代法不安全</p><p>我的代码：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sqrtByMyOwn</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> result1<span class="token punctuation">,</span>result2<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">double</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                i<span class="token operator">+=</span><span class="token number">0.5</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            result1<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                result2<span class="token operator">=</span>result1<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span>num<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>result1<span class="token operator">-</span>result2<span class="token operator">&lt;</span><span class="token number">0.00001</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">BigDecimal</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">double</span> result<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> result<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                    result1<span class="token operator">=</span>result2<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span></code></pre></div><blockquote><p>本博客题解均转载于力扣官网 <a href="https://leetcode-cn.com">https://leetcode-cn.com</a>，用于个人学习算法。如有侵权，请联系！</p></blockquote><script src="https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"></script><script src="https://cdn.bootcss.com/echarts/5.3.2/echarts.common.min.js"></script><script src="/js/custom-echart.js"></script>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>算法</tag>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
